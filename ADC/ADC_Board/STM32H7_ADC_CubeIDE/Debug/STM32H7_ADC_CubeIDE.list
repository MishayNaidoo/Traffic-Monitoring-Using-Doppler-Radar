
STM32H7_ADC_CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1c4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800e45c  0800e45c  0000f45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800e4bc  0800e4bc  0000f4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800e4c0  0800e4c0  0000f4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000104  24000000  0800e4c4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002d2c  24000104  0800e5c8  00010104  2**2
                  ALLOC
  7 ._user_heap_stack 00000c00  24002e30  0800e5c8  00010e30  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00010104  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001e31f  00000000  00000000  00010132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004034  00000000  00000000  0002e451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000018c0  00000000  00000000  00032488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000012f5  00000000  00000000  00033d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003bd62  00000000  00000000  0003503d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00021654  00000000  00000000  00070d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00176184  00000000  00000000  000923f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00208577  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000698c  00000000  00000000  002085bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000086  00000000  00000000  0020ef48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000104 	.word	0x24000104
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800e444 	.word	0x0800e444

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000108 	.word	0x24000108
 80002d4:	0800e444 	.word	0x0800e444

080002d8 <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
	CDC_Transmit_FS((uint8_t*)&dmaBuffer[DMABUFLEN/2], DMABUFLEN);
 80002e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002e4:	4803      	ldr	r0, [pc, #12]	@ (80002f4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80002e6:	f00d fc01 	bl	800daec <CDC_Transmit_FS>
//	HAL_ADC_Stop_DMA(&hadc1);
//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) dmaBuffer, DMABUFLEN);
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	24000a48 	.word	0x24000a48

080002f8 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
	CDC_Transmit_FS((uint8_t*)&dmaBuffer[0], DMABUFLEN);
 8000300:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000304:	4803      	ldr	r0, [pc, #12]	@ (8000314 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8000306:	f00d fbf1 	bl	800daec <CDC_Transmit_FS>
}
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	24000248 	.word	0x24000248

08000318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800031c:	f000 fc1a 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000320:	f000 f822 	bl	8000368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000324:	f000 f9d4 	bl	80006d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000328:	f000 f9b2 	bl	8000690 <MX_DMA_Init>
  MX_ADC1_Init();
 800032c:	f000 f8ce 	bl	80004cc <MX_ADC1_Init>
  MX_TIM8_Init();
 8000330:	f000 f95a 	bl	80005e8 <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 8000334:	f00d fb1a 	bl	800d96c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000338:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800033c:	2100      	movs	r1, #0
 800033e:	4807      	ldr	r0, [pc, #28]	@ (800035c <main+0x44>)
 8000340:	f001 ff88 	bl	8002254 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)dmaBuffer, DMABUFLEN);
 8000344:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000348:	4905      	ldr	r1, [pc, #20]	@ (8000360 <main+0x48>)
 800034a:	4804      	ldr	r0, [pc, #16]	@ (800035c <main+0x44>)
 800034c:	f001 f874 	bl	8001438 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim8);
 8000350:	4804      	ldr	r0, [pc, #16]	@ (8000364 <main+0x4c>)
 8000352:	f009 fc81 	bl	8009c58 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000356:	bf00      	nop
 8000358:	e7fd      	b.n	8000356 <main+0x3e>
 800035a:	bf00      	nop
 800035c:	24000120 	.word	0x24000120
 8000360:	24000248 	.word	0x24000248
 8000364:	240001fc 	.word	0x240001fc

08000368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b09e      	sub	sp, #120	@ 0x78
 800036c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000372:	224c      	movs	r2, #76	@ 0x4c
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f00e f838 	bl	800e3ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037c:	f107 030c 	add.w	r3, r7, #12
 8000380:	2220      	movs	r2, #32
 8000382:	2100      	movs	r1, #0
 8000384:	4618      	mov	r0, r3
 8000386:	f00e f831 	bl	800e3ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800038a:	2002      	movs	r0, #2
 800038c:	f005 fef4 	bl	8006178 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000390:	2300      	movs	r3, #0
 8000392:	60bb      	str	r3, [r7, #8]
 8000394:	4b4a      	ldr	r3, [pc, #296]	@ (80004c0 <SystemClock_Config+0x158>)
 8000396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000398:	4a49      	ldr	r2, [pc, #292]	@ (80004c0 <SystemClock_Config+0x158>)
 800039a:	f023 0301 	bic.w	r3, r3, #1
 800039e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80003a0:	4b47      	ldr	r3, [pc, #284]	@ (80004c0 <SystemClock_Config+0x158>)
 80003a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003a4:	f003 0301 	and.w	r3, r3, #1
 80003a8:	60bb      	str	r3, [r7, #8]
 80003aa:	4b46      	ldr	r3, [pc, #280]	@ (80004c4 <SystemClock_Config+0x15c>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	4a45      	ldr	r2, [pc, #276]	@ (80004c4 <SystemClock_Config+0x15c>)
 80003b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80003b4:	6193      	str	r3, [r2, #24]
 80003b6:	4b43      	ldr	r3, [pc, #268]	@ (80004c4 <SystemClock_Config+0x15c>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80003be:	60bb      	str	r3, [r7, #8]
 80003c0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003c2:	bf00      	nop
 80003c4:	4b3f      	ldr	r3, [pc, #252]	@ (80004c4 <SystemClock_Config+0x15c>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80003cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80003d0:	d1f8      	bne.n	80003c4 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003d2:	4b3d      	ldr	r3, [pc, #244]	@ (80004c8 <SystemClock_Config+0x160>)
 80003d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80003d8:	4a3b      	ldr	r2, [pc, #236]	@ (80004c8 <SystemClock_Config+0x160>)
 80003da:	f043 0302 	orr.w	r3, r3, #2
 80003de:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80003e2:	4b39      	ldr	r3, [pc, #228]	@ (80004c8 <SystemClock_Config+0x160>)
 80003e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80003e8:	f003 0302 	and.w	r3, r3, #2
 80003ec:	607b      	str	r3, [r7, #4]
 80003ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003f0:	2300      	movs	r3, #0
 80003f2:	603b      	str	r3, [r7, #0]
 80003f4:	4b33      	ldr	r3, [pc, #204]	@ (80004c4 <SystemClock_Config+0x15c>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a32      	ldr	r2, [pc, #200]	@ (80004c4 <SystemClock_Config+0x15c>)
 80003fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b30      	ldr	r3, [pc, #192]	@ (80004c4 <SystemClock_Config+0x15c>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000408:	603b      	str	r3, [r7, #0]
 800040a:	4b2d      	ldr	r3, [pc, #180]	@ (80004c0 <SystemClock_Config+0x158>)
 800040c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800040e:	4a2c      	ldr	r2, [pc, #176]	@ (80004c0 <SystemClock_Config+0x158>)
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000416:	4b2a      	ldr	r3, [pc, #168]	@ (80004c0 <SystemClock_Config+0x158>)
 8000418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000422:	bf00      	nop
 8000424:	4b27      	ldr	r3, [pc, #156]	@ (80004c4 <SystemClock_Config+0x15c>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800042c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000430:	d1f8      	bne.n	8000424 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000432:	2322      	movs	r3, #34	@ 0x22
 8000434:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000436:	2301      	movs	r3, #1
 8000438:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800043a:	2340      	movs	r3, #64	@ 0x40
 800043c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800043e:	2301      	movs	r3, #1
 8000440:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000442:	2302      	movs	r3, #2
 8000444:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000446:	2300      	movs	r3, #0
 8000448:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800044a:	2304      	movs	r3, #4
 800044c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 800044e:	233c      	movs	r3, #60	@ 0x3c
 8000450:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000452:	2302      	movs	r3, #2
 8000454:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000456:	2302      	movs	r3, #2
 8000458:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800045a:	2302      	movs	r3, #2
 800045c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800045e:	230c      	movs	r3, #12
 8000460:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000462:	2300      	movs	r3, #0
 8000464:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000466:	2300      	movs	r3, #0
 8000468:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800046e:	4618      	mov	r0, r3
 8000470:	f005 fecc 	bl	800620c <HAL_RCC_OscConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x116>
  {
    Error_Handler();
 800047a:	f000 f98b 	bl	8000794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047e:	233f      	movs	r3, #63	@ 0x3f
 8000480:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000482:	2303      	movs	r3, #3
 8000484:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800048a:	2308      	movs	r3, #8
 800048c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800048e:	2340      	movs	r3, #64	@ 0x40
 8000490:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000492:	2340      	movs	r3, #64	@ 0x40
 8000494:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000496:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800049a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800049c:	2340      	movs	r3, #64	@ 0x40
 800049e:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004a0:	f107 030c 	add.w	r3, r7, #12
 80004a4:	2104      	movs	r1, #4
 80004a6:	4618      	mov	r0, r3
 80004a8:	f006 fb0a 	bl	8006ac0 <HAL_RCC_ClockConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0x14e>
  {
    Error_Handler();
 80004b2:	f000 f96f 	bl	8000794 <Error_Handler>
  }
}
 80004b6:	bf00      	nop
 80004b8:	3778      	adds	r7, #120	@ 0x78
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	58000400 	.word	0x58000400
 80004c4:	58024800 	.word	0x58024800
 80004c8:	58024400 	.word	0x58024400

080004cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	@ 0x28
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004d2:	f107 031c 	add.w	r3, r7, #28
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004de:	463b      	mov	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
 80004ea:	611a      	str	r2, [r3, #16]
 80004ec:	615a      	str	r2, [r3, #20]
 80004ee:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004f0:	4b3a      	ldr	r3, [pc, #232]	@ (80005dc <MX_ADC1_Init+0x110>)
 80004f2:	4a3b      	ldr	r2, [pc, #236]	@ (80005e0 <MX_ADC1_Init+0x114>)
 80004f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004f6:	4b39      	ldr	r3, [pc, #228]	@ (80005dc <MX_ADC1_Init+0x110>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004fc:	4b37      	ldr	r3, [pc, #220]	@ (80005dc <MX_ADC1_Init+0x110>)
 80004fe:	2204      	movs	r2, #4
 8000500:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000502:	4b36      	ldr	r3, [pc, #216]	@ (80005dc <MX_ADC1_Init+0x110>)
 8000504:	2200      	movs	r2, #0
 8000506:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000508:	4b34      	ldr	r3, [pc, #208]	@ (80005dc <MX_ADC1_Init+0x110>)
 800050a:	2200      	movs	r2, #0
 800050c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800050e:	4b33      	ldr	r3, [pc, #204]	@ (80005dc <MX_ADC1_Init+0x110>)
 8000510:	2201      	movs	r2, #1
 8000512:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000514:	4b31      	ldr	r3, [pc, #196]	@ (80005dc <MX_ADC1_Init+0x110>)
 8000516:	2200      	movs	r2, #0
 8000518:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 800051a:	4b30      	ldr	r3, [pc, #192]	@ (80005dc <MX_ADC1_Init+0x110>)
 800051c:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8000520:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000522:	4b2e      	ldr	r3, [pc, #184]	@ (80005dc <MX_ADC1_Init+0x110>)
 8000524:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000528:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800052a:	4b2c      	ldr	r3, [pc, #176]	@ (80005dc <MX_ADC1_Init+0x110>)
 800052c:	2203      	movs	r2, #3
 800052e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000530:	4b2a      	ldr	r3, [pc, #168]	@ (80005dc <MX_ADC1_Init+0x110>)
 8000532:	2200      	movs	r2, #0
 8000534:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000536:	4b29      	ldr	r3, [pc, #164]	@ (80005dc <MX_ADC1_Init+0x110>)
 8000538:	2200      	movs	r2, #0
 800053a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 800053c:	4b27      	ldr	r3, [pc, #156]	@ (80005dc <MX_ADC1_Init+0x110>)
 800053e:	2201      	movs	r2, #1
 8000540:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 7;
 8000544:	4b25      	ldr	r3, [pc, #148]	@ (80005dc <MX_ADC1_Init+0x110>)
 8000546:	2207      	movs	r2, #7
 8000548:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 800054a:	4b24      	ldr	r3, [pc, #144]	@ (80005dc <MX_ADC1_Init+0x110>)
 800054c:	2260      	movs	r2, #96	@ 0x60
 800054e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000550:	4b22      	ldr	r3, [pc, #136]	@ (80005dc <MX_ADC1_Init+0x110>)
 8000552:	2200      	movs	r2, #0
 8000554:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000556:	4b21      	ldr	r3, [pc, #132]	@ (80005dc <MX_ADC1_Init+0x110>)
 8000558:	2201      	movs	r2, #1
 800055a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800055c:	481f      	ldr	r0, [pc, #124]	@ (80005dc <MX_ADC1_Init+0x110>)
 800055e:	f000 fdc9 	bl	80010f4 <HAL_ADC_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000568:	f000 f914 	bl	8000794 <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800056c:	4b1b      	ldr	r3, [pc, #108]	@ (80005dc <MX_ADC1_Init+0x110>)
 800056e:	2200      	movs	r2, #0
 8000570:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000572:	4b1a      	ldr	r3, [pc, #104]	@ (80005dc <MX_ADC1_Init+0x110>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000578:	4818      	ldr	r0, [pc, #96]	@ (80005dc <MX_ADC1_Init+0x110>)
 800057a:	f000 fdbb 	bl	80010f4 <HAL_ADC_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000584:	f000 f906 	bl	8000794 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000588:	2300      	movs	r3, #0
 800058a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800058c:	f107 031c 	add.w	r3, r7, #28
 8000590:	4619      	mov	r1, r3
 8000592:	4812      	ldr	r0, [pc, #72]	@ (80005dc <MX_ADC1_Init+0x110>)
 8000594:	f001 fec2 	bl	800231c <HAL_ADCEx_MultiModeConfigChannel>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800059e:	f000 f8f9 	bl	8000794 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005a2:	4b10      	ldr	r3, [pc, #64]	@ (80005e4 <MX_ADC1_Init+0x118>)
 80005a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a6:	2306      	movs	r3, #6
 80005a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005ae:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80005b2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005b4:	2304      	movs	r3, #4
 80005b6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80005bc:	2300      	movs	r3, #0
 80005be:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c0:	463b      	mov	r3, r7
 80005c2:	4619      	mov	r1, r3
 80005c4:	4805      	ldr	r0, [pc, #20]	@ (80005dc <MX_ADC1_Init+0x110>)
 80005c6:	f001 f805 	bl	80015d4 <HAL_ADC_ConfigChannel>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80005d0:	f000 f8e0 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005d4:	bf00      	nop
 80005d6:	3728      	adds	r7, #40	@ 0x28
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	24000120 	.word	0x24000120
 80005e0:	40022000 	.word	0x40022000
 80005e4:	0c900008 	.word	0x0c900008

080005e8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ee:	f107 0310 	add.w	r3, r7, #16
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000606:	4b20      	ldr	r3, [pc, #128]	@ (8000688 <MX_TIM8_Init+0xa0>)
 8000608:	4a20      	ldr	r2, [pc, #128]	@ (800068c <MX_TIM8_Init+0xa4>)
 800060a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 800060c:	4b1e      	ldr	r3, [pc, #120]	@ (8000688 <MX_TIM8_Init+0xa0>)
 800060e:	2201      	movs	r2, #1
 8000610:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000612:	4b1d      	ldr	r3, [pc, #116]	@ (8000688 <MX_TIM8_Init+0xa0>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2500-1;
 8000618:	4b1b      	ldr	r3, [pc, #108]	@ (8000688 <MX_TIM8_Init+0xa0>)
 800061a:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 800061e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000620:	4b19      	ldr	r3, [pc, #100]	@ (8000688 <MX_TIM8_Init+0xa0>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000626:	4b18      	ldr	r3, [pc, #96]	@ (8000688 <MX_TIM8_Init+0xa0>)
 8000628:	2200      	movs	r2, #0
 800062a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800062c:	4b16      	ldr	r3, [pc, #88]	@ (8000688 <MX_TIM8_Init+0xa0>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000632:	4815      	ldr	r0, [pc, #84]	@ (8000688 <MX_TIM8_Init+0xa0>)
 8000634:	f009 fab8 	bl	8009ba8 <HAL_TIM_Base_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800063e:	f000 f8a9 	bl	8000794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000642:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000646:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	4619      	mov	r1, r3
 800064e:	480e      	ldr	r0, [pc, #56]	@ (8000688 <MX_TIM8_Init+0xa0>)
 8000650:	f009 fb72 	bl	8009d38 <HAL_TIM_ConfigClockSource>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800065a:	f000 f89b 	bl	8000794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800065e:	2320      	movs	r3, #32
 8000660:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	4619      	mov	r1, r3
 800066e:	4806      	ldr	r0, [pc, #24]	@ (8000688 <MX_TIM8_Init+0xa0>)
 8000670:	f009 fd9e 	bl	800a1b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800067a:	f000 f88b 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	3720      	adds	r7, #32
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	240001fc 	.word	0x240001fc
 800068c:	40010400 	.word	0x40010400

08000690 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000696:	4b0d      	ldr	r3, [pc, #52]	@ (80006cc <MX_DMA_Init+0x3c>)
 8000698:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800069c:	4a0b      	ldr	r2, [pc, #44]	@ (80006cc <MX_DMA_Init+0x3c>)
 800069e:	f043 0301 	orr.w	r3, r3, #1
 80006a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <MX_DMA_Init+0x3c>)
 80006a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2100      	movs	r1, #0
 80006b8:	200b      	movs	r0, #11
 80006ba:	f001 ffe8 	bl	800268e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006be:	200b      	movs	r0, #11
 80006c0:	f001 ffff 	bl	80026c2 <HAL_NVIC_EnableIRQ>

}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	58024400 	.word	0x58024400

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	@ 0x28
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006e6:	4b29      	ldr	r3, [pc, #164]	@ (800078c <MX_GPIO_Init+0xbc>)
 80006e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ec:	4a27      	ldr	r2, [pc, #156]	@ (800078c <MX_GPIO_Init+0xbc>)
 80006ee:	f043 0310 	orr.w	r3, r3, #16
 80006f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006f6:	4b25      	ldr	r3, [pc, #148]	@ (800078c <MX_GPIO_Init+0xbc>)
 80006f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006fc:	f003 0310 	and.w	r3, r3, #16
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000704:	4b21      	ldr	r3, [pc, #132]	@ (800078c <MX_GPIO_Init+0xbc>)
 8000706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <MX_GPIO_Init+0xbc>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000714:	4b1d      	ldr	r3, [pc, #116]	@ (800078c <MX_GPIO_Init+0xbc>)
 8000716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800071a:	f003 0304 	and.w	r3, r3, #4
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000722:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <MX_GPIO_Init+0xbc>)
 8000724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000728:	4a18      	ldr	r2, [pc, #96]	@ (800078c <MX_GPIO_Init+0xbc>)
 800072a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800072e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000732:	4b16      	ldr	r3, [pc, #88]	@ (800078c <MX_GPIO_Init+0xbc>)
 8000734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	4b12      	ldr	r3, [pc, #72]	@ (800078c <MX_GPIO_Init+0xbc>)
 8000742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000746:	4a11      	ldr	r2, [pc, #68]	@ (800078c <MX_GPIO_Init+0xbc>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_GPIO_Init+0xbc>)
 8000752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2104      	movs	r1, #4
 8000762:	480b      	ldr	r0, [pc, #44]	@ (8000790 <MX_GPIO_Init+0xc0>)
 8000764:	f004 fa50 	bl	8004c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8000768:	2304      	movs	r3, #4
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	4804      	ldr	r0, [pc, #16]	@ (8000790 <MX_GPIO_Init+0xc0>)
 8000780:	f004 f892 	bl	80048a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000784:	bf00      	nop
 8000786:	3728      	adds	r7, #40	@ 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	58024400 	.word	0x58024400
 8000790:	58021000 	.word	0x58021000

08000794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000798:	b672      	cpsid	i
}
 800079a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <Error_Handler+0x8>

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <HAL_MspInit+0x30>)
 80007a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007ac:	4a08      	ldr	r2, [pc, #32]	@ (80007d0 <HAL_MspInit+0x30>)
 80007ae:	f043 0302 	orr.w	r3, r3, #2
 80007b2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <HAL_MspInit+0x30>)
 80007b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007bc:	f003 0302 	and.w	r3, r3, #2
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	58024400 	.word	0x58024400

080007d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b0ba      	sub	sp, #232	@ 0xe8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	22c0      	movs	r2, #192	@ 0xc0
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f00d fdf9 	bl	800e3ec <memset>
  if(hadc->Instance==ADC1)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a44      	ldr	r2, [pc, #272]	@ (8000910 <HAL_ADC_MspInit+0x13c>)
 8000800:	4293      	cmp	r3, r2
 8000802:	f040 8081 	bne.w	8000908 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000806:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800080a:	f04f 0300 	mov.w	r3, #0
 800080e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000812:	2304      	movs	r3, #4
 8000814:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000816:	230a      	movs	r3, #10
 8000818:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800081a:	2302      	movs	r3, #2
 800081c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800081e:	2302      	movs	r3, #2
 8000820:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000822:	2302      	movs	r3, #2
 8000824:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000826:	23c0      	movs	r3, #192	@ 0xc0
 8000828:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800082a:	2320      	movs	r3, #32
 800082c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000832:	2300      	movs	r3, #0
 8000834:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	4618      	mov	r0, r3
 800083e:	f006 fcb5 	bl	80071ac <HAL_RCCEx_PeriphCLKConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000848:	f7ff ffa4 	bl	8000794 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800084c:	4b31      	ldr	r3, [pc, #196]	@ (8000914 <HAL_ADC_MspInit+0x140>)
 800084e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000852:	4a30      	ldr	r2, [pc, #192]	@ (8000914 <HAL_ADC_MspInit+0x140>)
 8000854:	f043 0320 	orr.w	r3, r3, #32
 8000858:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800085c:	4b2d      	ldr	r3, [pc, #180]	@ (8000914 <HAL_ADC_MspInit+0x140>)
 800085e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000862:	f003 0320 	and.w	r3, r3, #32
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b2a      	ldr	r3, [pc, #168]	@ (8000914 <HAL_ADC_MspInit+0x140>)
 800086c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000870:	4a28      	ldr	r2, [pc, #160]	@ (8000914 <HAL_ADC_MspInit+0x140>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800087a:	4b26      	ldr	r3, [pc, #152]	@ (8000914 <HAL_ADC_MspInit+0x140>)
 800087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000888:	2340      	movs	r3, #64	@ 0x40
 800088a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088e:	2303      	movs	r3, #3
 8000890:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800089e:	4619      	mov	r1, r3
 80008a0:	481d      	ldr	r0, [pc, #116]	@ (8000918 <HAL_ADC_MspInit+0x144>)
 80008a2:	f004 f801 	bl	80048a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80008a6:	4b1d      	ldr	r3, [pc, #116]	@ (800091c <HAL_ADC_MspInit+0x148>)
 80008a8:	4a1d      	ldr	r2, [pc, #116]	@ (8000920 <HAL_ADC_MspInit+0x14c>)
 80008aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <HAL_ADC_MspInit+0x148>)
 80008ae:	2209      	movs	r2, #9
 80008b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <HAL_ADC_MspInit+0x148>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008b8:	4b18      	ldr	r3, [pc, #96]	@ (800091c <HAL_ADC_MspInit+0x148>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008be:	4b17      	ldr	r3, [pc, #92]	@ (800091c <HAL_ADC_MspInit+0x148>)
 80008c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008c6:	4b15      	ldr	r3, [pc, #84]	@ (800091c <HAL_ADC_MspInit+0x148>)
 80008c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008ce:	4b13      	ldr	r3, [pc, #76]	@ (800091c <HAL_ADC_MspInit+0x148>)
 80008d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008d6:	4b11      	ldr	r3, [pc, #68]	@ (800091c <HAL_ADC_MspInit+0x148>)
 80008d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80008de:	4b0f      	ldr	r3, [pc, #60]	@ (800091c <HAL_ADC_MspInit+0x148>)
 80008e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80008e4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008e6:	4b0d      	ldr	r3, [pc, #52]	@ (800091c <HAL_ADC_MspInit+0x148>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008ec:	480b      	ldr	r0, [pc, #44]	@ (800091c <HAL_ADC_MspInit+0x148>)
 80008ee:	f001 ff03 	bl	80026f8 <HAL_DMA_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 80008f8:	f7ff ff4c 	bl	8000794 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a07      	ldr	r2, [pc, #28]	@ (800091c <HAL_ADC_MspInit+0x148>)
 8000900:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000902:	4a06      	ldr	r2, [pc, #24]	@ (800091c <HAL_ADC_MspInit+0x148>)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000908:	bf00      	nop
 800090a:	37e8      	adds	r7, #232	@ 0xe8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40022000 	.word	0x40022000
 8000914:	58024400 	.word	0x58024400
 8000918:	58020000 	.word	0x58020000
 800091c:	24000184 	.word	0x24000184
 8000920:	40020010 	.word	0x40020010

08000924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0b      	ldr	r2, [pc, #44]	@ (8000960 <HAL_TIM_Base_MspInit+0x3c>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d10e      	bne.n	8000954 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000936:	4b0b      	ldr	r3, [pc, #44]	@ (8000964 <HAL_TIM_Base_MspInit+0x40>)
 8000938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800093c:	4a09      	ldr	r2, [pc, #36]	@ (8000964 <HAL_TIM_Base_MspInit+0x40>)
 800093e:	f043 0302 	orr.w	r3, r3, #2
 8000942:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000946:	4b07      	ldr	r3, [pc, #28]	@ (8000964 <HAL_TIM_Base_MspInit+0x40>)
 8000948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800094c:	f003 0302 	and.w	r3, r3, #2
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8000954:	bf00      	nop
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	40010400 	.word	0x40010400
 8000964:	58024400 	.word	0x58024400

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <NMI_Handler+0x4>

08000970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <MemManage_Handler+0x4>

08000980 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <UsageFault_Handler+0x4>

08000990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009be:	f000 f93b 	bl	8000c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009cc:	4802      	ldr	r0, [pc, #8]	@ (80009d8 <DMA1_Stream0_IRQHandler+0x10>)
 80009ce:	f002 fc59 	bl	8003284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	24000184 	.word	0x24000184

080009dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009e0:	4802      	ldr	r0, [pc, #8]	@ (80009ec <OTG_FS_IRQHandler+0x10>)
 80009e2:	f004 fa6b 	bl	8004ebc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2400272c 	.word	0x2400272c

080009f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009f4:	4b37      	ldr	r3, [pc, #220]	@ (8000ad4 <SystemInit+0xe4>)
 80009f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009fa:	4a36      	ldr	r2, [pc, #216]	@ (8000ad4 <SystemInit+0xe4>)
 80009fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a04:	4b34      	ldr	r3, [pc, #208]	@ (8000ad8 <SystemInit+0xe8>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f003 030f 	and.w	r3, r3, #15
 8000a0c:	2b06      	cmp	r3, #6
 8000a0e:	d807      	bhi.n	8000a20 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a10:	4b31      	ldr	r3, [pc, #196]	@ (8000ad8 <SystemInit+0xe8>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f023 030f 	bic.w	r3, r3, #15
 8000a18:	4a2f      	ldr	r2, [pc, #188]	@ (8000ad8 <SystemInit+0xe8>)
 8000a1a:	f043 0307 	orr.w	r3, r3, #7
 8000a1e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a20:	4b2e      	ldr	r3, [pc, #184]	@ (8000adc <SystemInit+0xec>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a2d      	ldr	r2, [pc, #180]	@ (8000adc <SystemInit+0xec>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000adc <SystemInit+0xec>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a32:	4b2a      	ldr	r3, [pc, #168]	@ (8000adc <SystemInit+0xec>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	4929      	ldr	r1, [pc, #164]	@ (8000adc <SystemInit+0xec>)
 8000a38:	4b29      	ldr	r3, [pc, #164]	@ (8000ae0 <SystemInit+0xf0>)
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ad8 <SystemInit+0xe8>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f003 0308 	and.w	r3, r3, #8
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d007      	beq.n	8000a5a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a4a:	4b23      	ldr	r3, [pc, #140]	@ (8000ad8 <SystemInit+0xe8>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f023 030f 	bic.w	r3, r3, #15
 8000a52:	4a21      	ldr	r2, [pc, #132]	@ (8000ad8 <SystemInit+0xe8>)
 8000a54:	f043 0307 	orr.w	r3, r3, #7
 8000a58:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a5a:	4b20      	ldr	r3, [pc, #128]	@ (8000adc <SystemInit+0xec>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a60:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <SystemInit+0xec>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a66:	4b1d      	ldr	r3, [pc, #116]	@ (8000adc <SystemInit+0xec>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <SystemInit+0xec>)
 8000a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ae4 <SystemInit+0xf4>)
 8000a70:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <SystemInit+0xec>)
 8000a74:	4a1c      	ldr	r2, [pc, #112]	@ (8000ae8 <SystemInit+0xf8>)
 8000a76:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a78:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <SystemInit+0xec>)
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000aec <SystemInit+0xfc>)
 8000a7c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <SystemInit+0xec>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a84:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <SystemInit+0xec>)
 8000a86:	4a19      	ldr	r2, [pc, #100]	@ (8000aec <SystemInit+0xfc>)
 8000a88:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <SystemInit+0xec>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a90:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <SystemInit+0xec>)
 8000a92:	4a16      	ldr	r2, [pc, #88]	@ (8000aec <SystemInit+0xfc>)
 8000a94:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <SystemInit+0xec>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <SystemInit+0xec>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0e      	ldr	r2, [pc, #56]	@ (8000adc <SystemInit+0xec>)
 8000aa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000aa6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <SystemInit+0xec>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000aae:	4b10      	ldr	r3, [pc, #64]	@ (8000af0 <SystemInit+0x100>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <SystemInit+0x104>)
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000aba:	d202      	bcs.n	8000ac2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000abc:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <SystemInit+0x108>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <SystemInit+0x10c>)
 8000ac4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000ac8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00
 8000ad8:	52002000 	.word	0x52002000
 8000adc:	58024400 	.word	0x58024400
 8000ae0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ae4:	02020200 	.word	0x02020200
 8000ae8:	01ff0000 	.word	0x01ff0000
 8000aec:	01010280 	.word	0x01010280
 8000af0:	5c001000 	.word	0x5c001000
 8000af4:	ffff0000 	.word	0xffff0000
 8000af8:	51008108 	.word	0x51008108
 8000afc:	52004000 	.word	0x52004000

08000b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b04:	f7ff ff74 	bl	80009f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b08:	480c      	ldr	r0, [pc, #48]	@ (8000b3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b0a:	490d      	ldr	r1, [pc, #52]	@ (8000b40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b20:	4c0a      	ldr	r4, [pc, #40]	@ (8000b4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f00d fc65 	bl	800e3fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b32:	f7ff fbf1 	bl	8000318 <main>
  bx  lr
 8000b36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b38:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b3c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b40:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 8000b44:	0800e4c4 	.word	0x0800e4c4
  ldr r2, =_sbss
 8000b48:	24000104 	.word	0x24000104
  ldr r4, =_ebss
 8000b4c:	24002e30 	.word	0x24002e30

08000b50 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC3_IRQHandler>
	...

08000b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5a:	2003      	movs	r0, #3
 8000b5c:	f001 fd8c 	bl	8002678 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b60:	f006 f964 	bl	8006e2c <HAL_RCC_GetSysClockFreq>
 8000b64:	4602      	mov	r2, r0
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <HAL_Init+0x68>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	0a1b      	lsrs	r3, r3, #8
 8000b6c:	f003 030f 	and.w	r3, r3, #15
 8000b70:	4913      	ldr	r1, [pc, #76]	@ (8000bc0 <HAL_Init+0x6c>)
 8000b72:	5ccb      	ldrb	r3, [r1, r3]
 8000b74:	f003 031f 	and.w	r3, r3, #31
 8000b78:	fa22 f303 	lsr.w	r3, r2, r3
 8000b7c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bbc <HAL_Init+0x68>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	4a0e      	ldr	r2, [pc, #56]	@ (8000bc0 <HAL_Init+0x6c>)
 8000b88:	5cd3      	ldrb	r3, [r2, r3]
 8000b8a:	f003 031f 	and.w	r3, r3, #31
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	fa22 f303 	lsr.w	r3, r2, r3
 8000b94:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc4 <HAL_Init+0x70>)
 8000b96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b98:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc8 <HAL_Init+0x74>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b9e:	200f      	movs	r0, #15
 8000ba0:	f000 f814 	bl	8000bcc <HAL_InitTick>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e002      	b.n	8000bb4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bae:	f7ff fdf7 	bl	80007a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	58024400 	.word	0x58024400
 8000bc0:	0800e4a4 	.word	0x0800e4a4
 8000bc4:	24000004 	.word	0x24000004
 8000bc8:	24000000 	.word	0x24000000

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000bd4:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <HAL_InitTick+0x60>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d101      	bne.n	8000be0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e021      	b.n	8000c24 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000be0:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <HAL_InitTick+0x64>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <HAL_InitTick+0x60>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4619      	mov	r1, r3
 8000bea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 fd71 	bl	80026de <HAL_SYSTICK_Config>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00e      	b.n	8000c24 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b0f      	cmp	r3, #15
 8000c0a:	d80a      	bhi.n	8000c22 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f001 fd3b 	bl	800268e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c18:	4a06      	ldr	r2, [pc, #24]	@ (8000c34 <HAL_InitTick+0x68>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e000      	b.n	8000c24 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	2400000c 	.word	0x2400000c
 8000c30:	24000000 	.word	0x24000000
 8000c34:	24000008 	.word	0x24000008

08000c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <HAL_IncTick+0x20>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <HAL_IncTick+0x24>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	4a04      	ldr	r2, [pc, #16]	@ (8000c5c <HAL_IncTick+0x24>)
 8000c4a:	6013      	str	r3, [r2, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	2400000c 	.word	0x2400000c
 8000c5c:	24001248 	.word	0x24001248

08000c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return uwTick;
 8000c64:	4b03      	ldr	r3, [pc, #12]	@ (8000c74 <HAL_GetTick+0x14>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	24001248 	.word	0x24001248

08000c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c80:	f7ff ffee 	bl	8000c60 <HAL_GetTick>
 8000c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c90:	d005      	beq.n	8000c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c92:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <HAL_Delay+0x44>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	461a      	mov	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c9e:	bf00      	nop
 8000ca0:	f7ff ffde 	bl	8000c60 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d8f7      	bhi.n	8000ca0 <HAL_Delay+0x28>
  {
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	2400000c 	.word	0x2400000c

08000cc0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000cc4:	4b03      	ldr	r3, [pc, #12]	@ (8000cd4 <HAL_GetREVID+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	0c1b      	lsrs	r3, r3, #16
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	5c001000 	.word	0x5c001000

08000cd8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	431a      	orrs	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	431a      	orrs	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	609a      	str	r2, [r3, #8]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b087      	sub	sp, #28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	3360      	adds	r3, #96	@ 0x60
 8000d52:	461a      	mov	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	430b      	orrs	r3, r1
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000d74:	bf00      	nop
 8000d76:	371c      	adds	r7, #28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	691b      	ldr	r3, [r3, #16]
 8000d90:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	f003 031f 	and.w	r3, r3, #31
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000da0:	431a      	orrs	r2, r3
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	611a      	str	r2, [r3, #16]
}
 8000da6:	bf00      	nop
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b087      	sub	sp, #28
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	60f8      	str	r0, [r7, #12]
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	3360      	adds	r3, #96	@ 0x60
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	601a      	str	r2, [r3, #0]
  }
}
 8000ddc:	bf00      	nop
 8000dde:	371c      	adds	r7, #28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d101      	bne.n	8000e00 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e000      	b.n	8000e02 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b087      	sub	sp, #28
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	60f8      	str	r0, [r7, #12]
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	3330      	adds	r3, #48	@ 0x30
 8000e1e:	461a      	mov	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	0a1b      	lsrs	r3, r3, #8
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	f003 030c 	and.w	r3, r3, #12
 8000e2a:	4413      	add	r3, r2
 8000e2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	f003 031f 	and.w	r3, r3, #31
 8000e38:	211f      	movs	r1, #31
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	401a      	ands	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	0e9b      	lsrs	r3, r3, #26
 8000e46:	f003 011f 	and.w	r1, r3, #31
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	f003 031f 	and.w	r3, r3, #31
 8000e50:	fa01 f303 	lsl.w	r3, r1, r3
 8000e54:	431a      	orrs	r2, r3
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e5a:	bf00      	nop
 8000e5c:	371c      	adds	r7, #28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
 8000e6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	f023 0203 	bic.w	r2, r3, #3
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	60da      	str	r2, [r3, #12]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b087      	sub	sp, #28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	3314      	adds	r3, #20
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	0e5b      	lsrs	r3, r3, #25
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	f003 0304 	and.w	r3, r3, #4
 8000ea8:	4413      	add	r3, r2
 8000eaa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	0d1b      	lsrs	r3, r3, #20
 8000eb4:	f003 031f 	and.w	r3, r3, #31
 8000eb8:	2107      	movs	r1, #7
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	0d1b      	lsrs	r3, r3, #20
 8000ec6:	f003 031f 	and.w	r3, r3, #31
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ed6:	bf00      	nop
 8000ed8:	371c      	adds	r7, #28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000efc:	43db      	mvns	r3, r3
 8000efe:	401a      	ands	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0318 	and.w	r3, r3, #24
 8000f06:	4908      	ldr	r1, [pc, #32]	@ (8000f28 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f08:	40d9      	lsrs	r1, r3
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	400b      	ands	r3, r1
 8000f0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f12:	431a      	orrs	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	000fffff 	.word	0x000fffff

08000f2c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f003 031f 	and.w	r3, r3, #31
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	4b04      	ldr	r3, [pc, #16]	@ (8000f68 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000f56:	4013      	ands	r3, r2
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	6093      	str	r3, [r2, #8]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	5fffffc0 	.word	0x5fffffc0

08000f6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f80:	d101      	bne.n	8000f86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	4b05      	ldr	r3, [pc, #20]	@ (8000fb8 <LL_ADC_EnableInternalRegulator+0x24>)
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	6fffffc0 	.word	0x6fffffc0

08000fbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000fd0:	d101      	bne.n	8000fd6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <LL_ADC_Enable+0x24>)
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	f043 0201 	orr.w	r2, r3, #1
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	7fffffc0 	.word	0x7fffffc0

0800100c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <LL_ADC_Disable+0x24>)
 800101a:	4013      	ands	r3, r2
 800101c:	f043 0202 	orr.w	r2, r3, #2
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	7fffffc0 	.word	0x7fffffc0

08001034 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b01      	cmp	r3, #1
 8001046:	d101      	bne.n	800104c <LL_ADC_IsEnabled+0x18>
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <LL_ADC_IsEnabled+0x1a>
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b02      	cmp	r3, #2
 800106c:	d101      	bne.n	8001072 <LL_ADC_IsDisableOngoing+0x18>
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <LL_ADC_IsDisableOngoing+0x1a>
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	4b05      	ldr	r3, [pc, #20]	@ (80010a4 <LL_ADC_REG_StartConversion+0x24>)
 800108e:	4013      	ands	r3, r2
 8001090:	f043 0204 	orr.w	r2, r3, #4
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	7fffffc0 	.word	0x7fffffc0

080010a8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	2b04      	cmp	r3, #4
 80010ba:	d101      	bne.n	80010c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80010bc:	2301      	movs	r3, #1
 80010be:	e000      	b.n	80010c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 0308 	and.w	r3, r3, #8
 80010de:	2b08      	cmp	r3, #8
 80010e0:	d101      	bne.n	80010e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b089      	sub	sp, #36	@ 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e18f      	b.n	800142e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001118:	2b00      	cmp	r3, #0
 800111a:	d109      	bne.n	8001130 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff fb59 	bl	80007d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff19 	bl	8000f6c <LL_ADC_IsDeepPowerDownEnabled>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d004      	beq.n	800114a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff feff 	bl	8000f48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff34 	bl	8000fbc <LL_ADC_IsInternalRegulatorEnabled>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d114      	bne.n	8001184 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff18 	bl	8000f94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001164:	4b87      	ldr	r3, [pc, #540]	@ (8001384 <HAL_ADC_Init+0x290>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	099b      	lsrs	r3, r3, #6
 800116a:	4a87      	ldr	r2, [pc, #540]	@ (8001388 <HAL_ADC_Init+0x294>)
 800116c:	fba2 2303 	umull	r2, r3, r2, r3
 8001170:	099b      	lsrs	r3, r3, #6
 8001172:	3301      	adds	r3, #1
 8001174:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001176:	e002      	b.n	800117e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	3b01      	subs	r3, #1
 800117c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1f9      	bne.n	8001178 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff17 	bl	8000fbc <LL_ADC_IsInternalRegulatorEnabled>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d10d      	bne.n	80011b0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001198:	f043 0210 	orr.w	r2, r3, #16
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a4:	f043 0201 	orr.w	r2, r3, #1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff77 	bl	80010a8 <LL_ADC_REG_IsConversionOngoing>
 80011ba:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011c0:	f003 0310 	and.w	r3, r3, #16
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f040 8129 	bne.w	800141c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f040 8125 	bne.w	800141c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011d6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80011da:	f043 0202 	orr.w	r2, r3, #2
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff24 	bl	8001034 <LL_ADC_IsEnabled>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d136      	bne.n	8001260 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a65      	ldr	r2, [pc, #404]	@ (800138c <HAL_ADC_Init+0x298>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d004      	beq.n	8001206 <HAL_ADC_Init+0x112>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a63      	ldr	r2, [pc, #396]	@ (8001390 <HAL_ADC_Init+0x29c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d10e      	bne.n	8001224 <HAL_ADC_Init+0x130>
 8001206:	4861      	ldr	r0, [pc, #388]	@ (800138c <HAL_ADC_Init+0x298>)
 8001208:	f7ff ff14 	bl	8001034 <LL_ADC_IsEnabled>
 800120c:	4604      	mov	r4, r0
 800120e:	4860      	ldr	r0, [pc, #384]	@ (8001390 <HAL_ADC_Init+0x29c>)
 8001210:	f7ff ff10 	bl	8001034 <LL_ADC_IsEnabled>
 8001214:	4603      	mov	r3, r0
 8001216:	4323      	orrs	r3, r4
 8001218:	2b00      	cmp	r3, #0
 800121a:	bf0c      	ite	eq
 800121c:	2301      	moveq	r3, #1
 800121e:	2300      	movne	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	e008      	b.n	8001236 <HAL_ADC_Init+0x142>
 8001224:	485b      	ldr	r0, [pc, #364]	@ (8001394 <HAL_ADC_Init+0x2a0>)
 8001226:	f7ff ff05 	bl	8001034 <LL_ADC_IsEnabled>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	bf0c      	ite	eq
 8001230:	2301      	moveq	r3, #1
 8001232:	2300      	movne	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d012      	beq.n	8001260 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a53      	ldr	r2, [pc, #332]	@ (800138c <HAL_ADC_Init+0x298>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d004      	beq.n	800124e <HAL_ADC_Init+0x15a>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a51      	ldr	r2, [pc, #324]	@ (8001390 <HAL_ADC_Init+0x29c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d101      	bne.n	8001252 <HAL_ADC_Init+0x15e>
 800124e:	4a52      	ldr	r2, [pc, #328]	@ (8001398 <HAL_ADC_Init+0x2a4>)
 8001250:	e000      	b.n	8001254 <HAL_ADC_Init+0x160>
 8001252:	4a52      	ldr	r2, [pc, #328]	@ (800139c <HAL_ADC_Init+0x2a8>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	4619      	mov	r1, r3
 800125a:	4610      	mov	r0, r2
 800125c:	f7ff fd3c 	bl	8000cd8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001260:	f7ff fd2e 	bl	8000cc0 <HAL_GetREVID>
 8001264:	4603      	mov	r3, r0
 8001266:	f241 0203 	movw	r2, #4099	@ 0x1003
 800126a:	4293      	cmp	r3, r2
 800126c:	d914      	bls.n	8001298 <HAL_ADC_Init+0x1a4>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2b10      	cmp	r3, #16
 8001274:	d110      	bne.n	8001298 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7d5b      	ldrb	r3, [r3, #21]
 800127a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001280:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001286:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7f1b      	ldrb	r3, [r3, #28]
 800128c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800128e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001290:	f043 030c 	orr.w	r3, r3, #12
 8001294:	61bb      	str	r3, [r7, #24]
 8001296:	e00d      	b.n	80012b4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7d5b      	ldrb	r3, [r3, #21]
 800129c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80012a2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80012a8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7f1b      	ldrb	r3, [r3, #28]
 80012ae:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	7f1b      	ldrb	r3, [r3, #28]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d106      	bne.n	80012ca <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	045b      	lsls	r3, r3, #17
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d009      	beq.n	80012e6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012de:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	4b2c      	ldr	r3, [pc, #176]	@ (80013a0 <HAL_ADC_Init+0x2ac>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	6812      	ldr	r2, [r2, #0]
 80012f4:	69b9      	ldr	r1, [r7, #24]
 80012f6:	430b      	orrs	r3, r1
 80012f8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fed2 	bl	80010a8 <LL_ADC_REG_IsConversionOngoing>
 8001304:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fedf 	bl	80010ce <LL_ADC_INJ_IsConversionOngoing>
 8001310:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d15f      	bne.n	80013d8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d15c      	bne.n	80013d8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	7d1b      	ldrb	r3, [r3, #20]
 8001322:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	4b1c      	ldr	r3, [pc, #112]	@ (80013a4 <HAL_ADC_Init+0x2b0>)
 8001334:	4013      	ands	r3, r2
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	69b9      	ldr	r1, [r7, #24]
 800133c:	430b      	orrs	r3, r1
 800133e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001346:	2b01      	cmp	r3, #1
 8001348:	d130      	bne.n	80013ac <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	691a      	ldr	r2, [r3, #16]
 8001356:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <HAL_ADC_Init+0x2b4>)
 8001358:	4013      	ands	r3, r2
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800135e:	3a01      	subs	r2, #1
 8001360:	0411      	lsls	r1, r2, #16
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001366:	4311      	orrs	r1, r2
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800136c:	4311      	orrs	r1, r2
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001372:	430a      	orrs	r2, r1
 8001374:	431a      	orrs	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f042 0201 	orr.w	r2, r2, #1
 800137e:	611a      	str	r2, [r3, #16]
 8001380:	e01c      	b.n	80013bc <HAL_ADC_Init+0x2c8>
 8001382:	bf00      	nop
 8001384:	24000000 	.word	0x24000000
 8001388:	053e2d63 	.word	0x053e2d63
 800138c:	40022000 	.word	0x40022000
 8001390:	40022100 	.word	0x40022100
 8001394:	58026000 	.word	0x58026000
 8001398:	40022300 	.word	0x40022300
 800139c:	58026300 	.word	0x58026300
 80013a0:	fff0c003 	.word	0xfff0c003
 80013a4:	ffffbffc 	.word	0xffffbffc
 80013a8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	691a      	ldr	r2, [r3, #16]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0201 	bic.w	r2, r2, #1
 80013ba:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 fdd8 	bl	8001f88 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d10c      	bne.n	80013fa <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f023 010f 	bic.w	r1, r3, #15
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	1e5a      	subs	r2, r3, #1
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80013f8:	e007      	b.n	800140a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 020f 	bic.w	r2, r2, #15
 8001408:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800140e:	f023 0303 	bic.w	r3, r3, #3
 8001412:	f043 0201 	orr.w	r2, r3, #1
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	655a      	str	r2, [r3, #84]	@ 0x54
 800141a:	e007      	b.n	800142c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001420:	f043 0210 	orr.w	r2, r3, #16
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800142c:	7ffb      	ldrb	r3, [r7, #31]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3724      	adds	r7, #36	@ 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd90      	pop	{r4, r7, pc}
 8001436:	bf00      	nop

08001438 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a55      	ldr	r2, [pc, #340]	@ (80015a0 <HAL_ADC_Start_DMA+0x168>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d004      	beq.n	8001458 <HAL_ADC_Start_DMA+0x20>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a54      	ldr	r2, [pc, #336]	@ (80015a4 <HAL_ADC_Start_DMA+0x16c>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d101      	bne.n	800145c <HAL_ADC_Start_DMA+0x24>
 8001458:	4b53      	ldr	r3, [pc, #332]	@ (80015a8 <HAL_ADC_Start_DMA+0x170>)
 800145a:	e000      	b.n	800145e <HAL_ADC_Start_DMA+0x26>
 800145c:	4b53      	ldr	r3, [pc, #332]	@ (80015ac <HAL_ADC_Start_DMA+0x174>)
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fd64 	bl	8000f2c <LL_ADC_GetMultimode>
 8001464:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fe1c 	bl	80010a8 <LL_ADC_REG_IsConversionOngoing>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	f040 808c 	bne.w	8001590 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800147e:	2b01      	cmp	r3, #1
 8001480:	d101      	bne.n	8001486 <HAL_ADC_Start_DMA+0x4e>
 8001482:	2302      	movs	r3, #2
 8001484:	e087      	b.n	8001596 <HAL_ADC_Start_DMA+0x15e>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2201      	movs	r2, #1
 800148a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	2b05      	cmp	r3, #5
 8001498:	d002      	beq.n	80014a0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	2b09      	cmp	r3, #9
 800149e:	d170      	bne.n	8001582 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f000 fbf3 	bl	8001c8c <ADC_Enable>
 80014a6:	4603      	mov	r3, r0
 80014a8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d163      	bne.n	8001578 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80014b4:	4b3e      	ldr	r3, [pc, #248]	@ (80015b0 <HAL_ADC_Start_DMA+0x178>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a37      	ldr	r2, [pc, #220]	@ (80015a4 <HAL_ADC_Start_DMA+0x16c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d002      	beq.n	80014d0 <HAL_ADC_Start_DMA+0x98>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	e000      	b.n	80014d2 <HAL_ADC_Start_DMA+0x9a>
 80014d0:	4b33      	ldr	r3, [pc, #204]	@ (80015a0 <HAL_ADC_Start_DMA+0x168>)
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d002      	beq.n	80014e0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d105      	bne.n	80014ec <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d006      	beq.n	8001506 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fc:	f023 0206 	bic.w	r2, r3, #6
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	659a      	str	r2, [r3, #88]	@ 0x58
 8001504:	e002      	b.n	800150c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001510:	4a28      	ldr	r2, [pc, #160]	@ (80015b4 <HAL_ADC_Start_DMA+0x17c>)
 8001512:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001518:	4a27      	ldr	r2, [pc, #156]	@ (80015b8 <HAL_ADC_Start_DMA+0x180>)
 800151a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001520:	4a26      	ldr	r2, [pc, #152]	@ (80015bc <HAL_ADC_Start_DMA+0x184>)
 8001522:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	221c      	movs	r2, #28
 800152a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0210 	orr.w	r2, r2, #16
 8001542:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800154c:	4619      	mov	r1, r3
 800154e:	4610      	mov	r0, r2
 8001550:	f7ff fc89 	bl	8000e66 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	3340      	adds	r3, #64	@ 0x40
 800155e:	4619      	mov	r1, r3
 8001560:	68ba      	ldr	r2, [r7, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f001 fc24 	bl	8002db0 <HAL_DMA_Start_IT>
 8001568:	4603      	mov	r3, r0
 800156a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fd85 	bl	8001080 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001576:	e00d      	b.n	8001594 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8001580:	e008      	b.n	8001594 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800158e:	e001      	b.n	8001594 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001590:	2302      	movs	r3, #2
 8001592:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001594:	7dfb      	ldrb	r3, [r7, #23]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40022000 	.word	0x40022000
 80015a4:	40022100 	.word	0x40022100
 80015a8:	40022300 	.word	0x40022300
 80015ac:	58026300 	.word	0x58026300
 80015b0:	fffff0fe 	.word	0xfffff0fe
 80015b4:	08001e5f 	.word	0x08001e5f
 80015b8:	08001f37 	.word	0x08001f37
 80015bc:	08001f53 	.word	0x08001f53

080015c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b0a1      	sub	sp, #132	@ 0x84
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	4a65      	ldr	r2, [pc, #404]	@ (8001784 <HAL_ADC_ConfigChannel+0x1b0>)
 80015ee:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_ADC_ConfigChannel+0x2a>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e32e      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x688>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fd4c 	bl	80010a8 <LL_ADC_REG_IsConversionOngoing>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	f040 8313 	bne.w	8001c3e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db2c      	blt.n	800167a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001628:	2b00      	cmp	r3, #0
 800162a:	d108      	bne.n	800163e <HAL_ADC_ConfigChannel+0x6a>
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	0e9b      	lsrs	r3, r3, #26
 8001632:	f003 031f 	and.w	r3, r3, #31
 8001636:	2201      	movs	r2, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	e016      	b.n	800166c <HAL_ADC_ConfigChannel+0x98>
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001644:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001646:	fa93 f3a3 	rbit	r3, r3
 800164a:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800164c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800164e:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001650:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001656:	2320      	movs	r3, #32
 8001658:	e003      	b.n	8001662 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800165a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800165c:	fab3 f383 	clz	r3, r3
 8001660:	b2db      	uxtb	r3, r3
 8001662:	f003 031f 	and.w	r3, r3, #31
 8001666:	2201      	movs	r2, #1
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	69d1      	ldr	r1, [r2, #28]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6812      	ldr	r2, [r2, #0]
 8001676:	430b      	orrs	r3, r1
 8001678:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6818      	ldr	r0, [r3, #0]
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	6859      	ldr	r1, [r3, #4]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	f7ff fbc1 	bl	8000e0e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fd09 	bl	80010a8 <LL_ADC_REG_IsConversionOngoing>
 8001696:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fd16 	bl	80010ce <LL_ADC_INJ_IsConversionOngoing>
 80016a2:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f040 80b8 	bne.w	800181c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f040 80b4 	bne.w	800181c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6818      	ldr	r0, [r3, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	6819      	ldr	r1, [r3, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	461a      	mov	r2, r3
 80016c2:	f7ff fbe3 	bl	8000e8c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80016c6:	4b30      	ldr	r3, [pc, #192]	@ (8001788 <HAL_ADC_ConfigChannel+0x1b4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80016ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80016d2:	d10b      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x118>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	695a      	ldr	r2, [r3, #20]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	e01d      	b.n	8001728 <HAL_ADC_ConfigChannel+0x154>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	f003 0310 	and.w	r3, r3, #16
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10b      	bne.n	8001712 <HAL_ADC_ConfigChannel+0x13e>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	089b      	lsrs	r3, r3, #2
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	e00a      	b.n	8001728 <HAL_ADC_ConfigChannel+0x154>
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	089b      	lsrs	r3, r3, #2
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	2b04      	cmp	r3, #4
 8001730:	d02c      	beq.n	800178c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	6919      	ldr	r1, [r3, #16]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001740:	f7ff fafe 	bl	8000d40 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	6919      	ldr	r1, [r3, #16]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	7e5b      	ldrb	r3, [r3, #25]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d102      	bne.n	800175a <HAL_ADC_ConfigChannel+0x186>
 8001754:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001758:	e000      	b.n	800175c <HAL_ADC_ConfigChannel+0x188>
 800175a:	2300      	movs	r3, #0
 800175c:	461a      	mov	r2, r3
 800175e:	f7ff fb28 	bl	8000db2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6818      	ldr	r0, [r3, #0]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	6919      	ldr	r1, [r3, #16]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	7e1b      	ldrb	r3, [r3, #24]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d102      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x1a4>
 8001772:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001776:	e000      	b.n	800177a <HAL_ADC_ConfigChannel+0x1a6>
 8001778:	2300      	movs	r3, #0
 800177a:	461a      	mov	r2, r3
 800177c:	f7ff fb00 	bl	8000d80 <LL_ADC_SetDataRightShift>
 8001780:	e04c      	b.n	800181c <HAL_ADC_ConfigChannel+0x248>
 8001782:	bf00      	nop
 8001784:	47ff0000 	.word	0x47ff0000
 8001788:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001792:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	069b      	lsls	r3, r3, #26
 800179c:	429a      	cmp	r2, r3
 800179e:	d107      	bne.n	80017b0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80017ae:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80017b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	069b      	lsls	r3, r3, #26
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d107      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80017d2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80017da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	069b      	lsls	r3, r3, #26
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d107      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80017f6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80017fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	069b      	lsls	r3, r3, #26
 8001808:	429a      	cmp	r2, r3
 800180a:	d107      	bne.n	800181c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800181a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fc07 	bl	8001034 <LL_ADC_IsEnabled>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	f040 8211 	bne.w	8001c50 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6818      	ldr	r0, [r3, #0]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	6819      	ldr	r1, [r3, #0]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	461a      	mov	r2, r3
 800183c:	f7ff fb52 	bl	8000ee4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4aa1      	ldr	r2, [pc, #644]	@ (8001acc <HAL_ADC_ConfigChannel+0x4f8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	f040 812e 	bne.w	8001aa8 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10b      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x2a0>
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	0e9b      	lsrs	r3, r3, #26
 8001862:	3301      	adds	r3, #1
 8001864:	f003 031f 	and.w	r3, r3, #31
 8001868:	2b09      	cmp	r3, #9
 800186a:	bf94      	ite	ls
 800186c:	2301      	movls	r3, #1
 800186e:	2300      	movhi	r3, #0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	e019      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x2d4>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800187c:	fa93 f3a3 	rbit	r3, r3
 8001880:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001884:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001886:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 800188c:	2320      	movs	r3, #32
 800188e:	e003      	b.n	8001898 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8001890:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001892:	fab3 f383 	clz	r3, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	3301      	adds	r3, #1
 800189a:	f003 031f 	and.w	r3, r3, #31
 800189e:	2b09      	cmp	r3, #9
 80018a0:	bf94      	ite	ls
 80018a2:	2301      	movls	r3, #1
 80018a4:	2300      	movhi	r3, #0
 80018a6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d079      	beq.n	80019a0 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d107      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x2f4>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	0e9b      	lsrs	r3, r3, #26
 80018be:	3301      	adds	r3, #1
 80018c0:	069b      	lsls	r3, r3, #26
 80018c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018c6:	e015      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x320>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018d0:	fa93 f3a3 	rbit	r3, r3
 80018d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80018d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018d8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80018da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80018e0:	2320      	movs	r3, #32
 80018e2:	e003      	b.n	80018ec <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80018e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018e6:	fab3 f383 	clz	r3, r3
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	3301      	adds	r3, #1
 80018ee:	069b      	lsls	r3, r3, #26
 80018f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d109      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x340>
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	0e9b      	lsrs	r3, r3, #26
 8001906:	3301      	adds	r3, #1
 8001908:	f003 031f 	and.w	r3, r3, #31
 800190c:	2101      	movs	r1, #1
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	e017      	b.n	8001944 <HAL_ADC_ConfigChannel+0x370>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800191c:	fa93 f3a3 	rbit	r3, r3
 8001920:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001924:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001926:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 800192c:	2320      	movs	r3, #32
 800192e:	e003      	b.n	8001938 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8001930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001932:	fab3 f383 	clz	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	3301      	adds	r3, #1
 800193a:	f003 031f 	and.w	r3, r3, #31
 800193e:	2101      	movs	r1, #1
 8001940:	fa01 f303 	lsl.w	r3, r1, r3
 8001944:	ea42 0103 	orr.w	r1, r2, r3
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10a      	bne.n	800196a <HAL_ADC_ConfigChannel+0x396>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	0e9b      	lsrs	r3, r3, #26
 800195a:	3301      	adds	r3, #1
 800195c:	f003 021f 	and.w	r2, r3, #31
 8001960:	4613      	mov	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4413      	add	r3, r2
 8001966:	051b      	lsls	r3, r3, #20
 8001968:	e018      	b.n	800199c <HAL_ADC_ConfigChannel+0x3c8>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001972:	fa93 f3a3 	rbit	r3, r3
 8001976:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800197a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800197c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8001982:	2320      	movs	r3, #32
 8001984:	e003      	b.n	800198e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8001986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001988:	fab3 f383 	clz	r3, r3
 800198c:	b2db      	uxtb	r3, r3
 800198e:	3301      	adds	r3, #1
 8001990:	f003 021f 	and.w	r2, r3, #31
 8001994:	4613      	mov	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4413      	add	r3, r2
 800199a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800199c:	430b      	orrs	r3, r1
 800199e:	e07e      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d107      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x3e8>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	0e9b      	lsrs	r3, r3, #26
 80019b2:	3301      	adds	r3, #1
 80019b4:	069b      	lsls	r3, r3, #26
 80019b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80019ba:	e015      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x414>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019c4:	fa93 f3a3 	rbit	r3, r3
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80019ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80019d4:	2320      	movs	r3, #32
 80019d6:	e003      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80019d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	3301      	adds	r3, #1
 80019e2:	069b      	lsls	r3, r3, #26
 80019e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d109      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x434>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	0e9b      	lsrs	r3, r3, #26
 80019fa:	3301      	adds	r3, #1
 80019fc:	f003 031f 	and.w	r3, r3, #31
 8001a00:	2101      	movs	r1, #1
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	e017      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x464>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fa93 f3a3 	rbit	r3, r3
 8001a14:	61bb      	str	r3, [r7, #24]
  return result;
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8001a20:	2320      	movs	r3, #32
 8001a22:	e003      	b.n	8001a2c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	fab3 f383 	clz	r3, r3
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	f003 031f 	and.w	r3, r3, #31
 8001a32:	2101      	movs	r1, #1
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	ea42 0103 	orr.w	r1, r2, r3
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10d      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x490>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	0e9b      	lsrs	r3, r3, #26
 8001a4e:	3301      	adds	r3, #1
 8001a50:	f003 021f 	and.w	r2, r3, #31
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	3b1e      	subs	r3, #30
 8001a5c:	051b      	lsls	r3, r3, #20
 8001a5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a62:	e01b      	b.n	8001a9c <HAL_ADC_ConfigChannel+0x4c8>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	fa93 f3a3 	rbit	r3, r3
 8001a70:	60fb      	str	r3, [r7, #12]
  return result;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8001a7c:	2320      	movs	r3, #32
 8001a7e:	e003      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	3301      	adds	r3, #1
 8001a8a:	f003 021f 	and.w	r2, r3, #31
 8001a8e:	4613      	mov	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	3b1e      	subs	r3, #30
 8001a96:	051b      	lsls	r3, r3, #20
 8001a98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a9c:	430b      	orrs	r3, r1
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	6892      	ldr	r2, [r2, #8]
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f7ff f9f2 	bl	8000e8c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f280 80cf 	bge.w	8001c50 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a06      	ldr	r2, [pc, #24]	@ (8001ad0 <HAL_ADC_ConfigChannel+0x4fc>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d004      	beq.n	8001ac6 <HAL_ADC_ConfigChannel+0x4f2>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a04      	ldr	r2, [pc, #16]	@ (8001ad4 <HAL_ADC_ConfigChannel+0x500>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d10a      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x508>
 8001ac6:	4b04      	ldr	r3, [pc, #16]	@ (8001ad8 <HAL_ADC_ConfigChannel+0x504>)
 8001ac8:	e009      	b.n	8001ade <HAL_ADC_ConfigChannel+0x50a>
 8001aca:	bf00      	nop
 8001acc:	47ff0000 	.word	0x47ff0000
 8001ad0:	40022000 	.word	0x40022000
 8001ad4:	40022100 	.word	0x40022100
 8001ad8:	40022300 	.word	0x40022300
 8001adc:	4b61      	ldr	r3, [pc, #388]	@ (8001c64 <HAL_ADC_ConfigChannel+0x690>)
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff f920 	bl	8000d24 <LL_ADC_GetCommonPathInternalCh>
 8001ae4:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a5f      	ldr	r2, [pc, #380]	@ (8001c68 <HAL_ADC_ConfigChannel+0x694>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d004      	beq.n	8001afa <HAL_ADC_ConfigChannel+0x526>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a5d      	ldr	r2, [pc, #372]	@ (8001c6c <HAL_ADC_ConfigChannel+0x698>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d10e      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x544>
 8001afa:	485b      	ldr	r0, [pc, #364]	@ (8001c68 <HAL_ADC_ConfigChannel+0x694>)
 8001afc:	f7ff fa9a 	bl	8001034 <LL_ADC_IsEnabled>
 8001b00:	4604      	mov	r4, r0
 8001b02:	485a      	ldr	r0, [pc, #360]	@ (8001c6c <HAL_ADC_ConfigChannel+0x698>)
 8001b04:	f7ff fa96 	bl	8001034 <LL_ADC_IsEnabled>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4323      	orrs	r3, r4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	bf0c      	ite	eq
 8001b10:	2301      	moveq	r3, #1
 8001b12:	2300      	movne	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	e008      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x556>
 8001b18:	4855      	ldr	r0, [pc, #340]	@ (8001c70 <HAL_ADC_ConfigChannel+0x69c>)
 8001b1a:	f7ff fa8b 	bl	8001034 <LL_ADC_IsEnabled>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	bf0c      	ite	eq
 8001b24:	2301      	moveq	r3, #1
 8001b26:	2300      	movne	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d07d      	beq.n	8001c2a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a50      	ldr	r2, [pc, #320]	@ (8001c74 <HAL_ADC_ConfigChannel+0x6a0>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d130      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x5c6>
 8001b38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d12b      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a4a      	ldr	r2, [pc, #296]	@ (8001c70 <HAL_ADC_ConfigChannel+0x69c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	f040 8081 	bne.w	8001c50 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a45      	ldr	r2, [pc, #276]	@ (8001c68 <HAL_ADC_ConfigChannel+0x694>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d004      	beq.n	8001b62 <HAL_ADC_ConfigChannel+0x58e>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a43      	ldr	r2, [pc, #268]	@ (8001c6c <HAL_ADC_ConfigChannel+0x698>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d101      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x592>
 8001b62:	4a45      	ldr	r2, [pc, #276]	@ (8001c78 <HAL_ADC_ConfigChannel+0x6a4>)
 8001b64:	e000      	b.n	8001b68 <HAL_ADC_ConfigChannel+0x594>
 8001b66:	4a3f      	ldr	r2, [pc, #252]	@ (8001c64 <HAL_ADC_ConfigChannel+0x690>)
 8001b68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4610      	mov	r0, r2
 8001b72:	f7ff f8c4 	bl	8000cfe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b76:	4b41      	ldr	r3, [pc, #260]	@ (8001c7c <HAL_ADC_ConfigChannel+0x6a8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	099b      	lsrs	r3, r3, #6
 8001b7c:	4a40      	ldr	r2, [pc, #256]	@ (8001c80 <HAL_ADC_ConfigChannel+0x6ac>)
 8001b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b82:	099b      	lsrs	r3, r3, #6
 8001b84:	3301      	adds	r3, #1
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001b8a:	e002      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f9      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b98:	e05a      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a39      	ldr	r2, [pc, #228]	@ (8001c84 <HAL_ADC_ConfigChannel+0x6b0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d11e      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x60e>
 8001ba4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ba6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d119      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a2f      	ldr	r2, [pc, #188]	@ (8001c70 <HAL_ADC_ConfigChannel+0x69c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d14b      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a2a      	ldr	r2, [pc, #168]	@ (8001c68 <HAL_ADC_ConfigChannel+0x694>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d004      	beq.n	8001bcc <HAL_ADC_ConfigChannel+0x5f8>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a29      	ldr	r2, [pc, #164]	@ (8001c6c <HAL_ADC_ConfigChannel+0x698>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d101      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x5fc>
 8001bcc:	4a2a      	ldr	r2, [pc, #168]	@ (8001c78 <HAL_ADC_ConfigChannel+0x6a4>)
 8001bce:	e000      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x5fe>
 8001bd0:	4a24      	ldr	r2, [pc, #144]	@ (8001c64 <HAL_ADC_ConfigChannel+0x690>)
 8001bd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001bd4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4610      	mov	r0, r2
 8001bdc:	f7ff f88f 	bl	8000cfe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001be0:	e036      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a28      	ldr	r2, [pc, #160]	@ (8001c88 <HAL_ADC_ConfigChannel+0x6b4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d131      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x67c>
 8001bec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001bee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d12c      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8001c70 <HAL_ADC_ConfigChannel+0x69c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d127      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a18      	ldr	r2, [pc, #96]	@ (8001c68 <HAL_ADC_ConfigChannel+0x694>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d004      	beq.n	8001c14 <HAL_ADC_ConfigChannel+0x640>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a17      	ldr	r2, [pc, #92]	@ (8001c6c <HAL_ADC_ConfigChannel+0x698>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d101      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x644>
 8001c14:	4a18      	ldr	r2, [pc, #96]	@ (8001c78 <HAL_ADC_ConfigChannel+0x6a4>)
 8001c16:	e000      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x646>
 8001c18:	4a12      	ldr	r2, [pc, #72]	@ (8001c64 <HAL_ADC_ConfigChannel+0x690>)
 8001c1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c1c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c20:	4619      	mov	r1, r3
 8001c22:	4610      	mov	r0, r2
 8001c24:	f7ff f86b 	bl	8000cfe <LL_ADC_SetCommonPathInternalCh>
 8001c28:	e012      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c2e:	f043 0220 	orr.w	r2, r3, #32
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001c3c:	e008      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c42:	f043 0220 	orr.w	r2, r3, #32
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c58:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3784      	adds	r7, #132	@ 0x84
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd90      	pop	{r4, r7, pc}
 8001c64:	58026300 	.word	0x58026300
 8001c68:	40022000 	.word	0x40022000
 8001c6c:	40022100 	.word	0x40022100
 8001c70:	58026000 	.word	0x58026000
 8001c74:	cb840000 	.word	0xcb840000
 8001c78:	40022300 	.word	0x40022300
 8001c7c:	24000000 	.word	0x24000000
 8001c80:	053e2d63 	.word	0x053e2d63
 8001c84:	c7520000 	.word	0xc7520000
 8001c88:	cfb80000 	.word	0xcfb80000

08001c8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff f9cb 	bl	8001034 <LL_ADC_IsEnabled>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d16e      	bne.n	8001d82 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	4b38      	ldr	r3, [pc, #224]	@ (8001d8c <ADC_Enable+0x100>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00d      	beq.n	8001cce <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb6:	f043 0210 	orr.w	r2, r3, #16
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc2:	f043 0201 	orr.w	r2, r3, #1
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e05a      	b.n	8001d84 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff f986 	bl	8000fe4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001cd8:	f7fe ffc2 	bl	8000c60 <HAL_GetTick>
 8001cdc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a2b      	ldr	r2, [pc, #172]	@ (8001d90 <ADC_Enable+0x104>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d004      	beq.n	8001cf2 <ADC_Enable+0x66>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a29      	ldr	r2, [pc, #164]	@ (8001d94 <ADC_Enable+0x108>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d101      	bne.n	8001cf6 <ADC_Enable+0x6a>
 8001cf2:	4b29      	ldr	r3, [pc, #164]	@ (8001d98 <ADC_Enable+0x10c>)
 8001cf4:	e000      	b.n	8001cf8 <ADC_Enable+0x6c>
 8001cf6:	4b29      	ldr	r3, [pc, #164]	@ (8001d9c <ADC_Enable+0x110>)
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff f917 	bl	8000f2c <LL_ADC_GetMultimode>
 8001cfe:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a23      	ldr	r2, [pc, #140]	@ (8001d94 <ADC_Enable+0x108>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d002      	beq.n	8001d10 <ADC_Enable+0x84>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	e000      	b.n	8001d12 <ADC_Enable+0x86>
 8001d10:	4b1f      	ldr	r3, [pc, #124]	@ (8001d90 <ADC_Enable+0x104>)
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d02c      	beq.n	8001d74 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d130      	bne.n	8001d82 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d20:	e028      	b.n	8001d74 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f984 	bl	8001034 <LL_ADC_IsEnabled>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d104      	bne.n	8001d3c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff f954 	bl	8000fe4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d3c:	f7fe ff90 	bl	8000c60 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d914      	bls.n	8001d74 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d00d      	beq.n	8001d74 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d5c:	f043 0210 	orr.w	r2, r3, #16
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d68:	f043 0201 	orr.w	r2, r3, #1
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e007      	b.n	8001d84 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d1cf      	bne.n	8001d22 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	8000003f 	.word	0x8000003f
 8001d90:	40022000 	.word	0x40022000
 8001d94:	40022100 	.word	0x40022100
 8001d98:	40022300 	.word	0x40022300
 8001d9c:	58026300 	.word	0x58026300

08001da0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff f954 	bl	800105a <LL_ADC_IsDisableOngoing>
 8001db2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff f93b 	bl	8001034 <LL_ADC_IsEnabled>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d047      	beq.n	8001e54 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d144      	bne.n	8001e54 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 030d 	and.w	r3, r3, #13
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d10c      	bne.n	8001df2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff f915 	bl	800100c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2203      	movs	r2, #3
 8001de8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dea:	f7fe ff39 	bl	8000c60 <HAL_GetTick>
 8001dee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001df0:	e029      	b.n	8001e46 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df6:	f043 0210 	orr.w	r2, r3, #16
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e02:	f043 0201 	orr.w	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e023      	b.n	8001e56 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e0e:	f7fe ff27 	bl	8000c60 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d914      	bls.n	8001e46 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00d      	beq.n	8001e46 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2e:	f043 0210 	orr.w	r2, r3, #16
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3a:	f043 0201 	orr.w	r2, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e007      	b.n	8001e56 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1dc      	bne.n	8001e0e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e6a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e70:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d14b      	bne.n	8001f10 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e7c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d021      	beq.n	8001ed6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe ffa6 	bl	8000de8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d032      	beq.n	8001f08 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d12b      	bne.n	8001f08 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d11f      	bne.n	8001f08 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ecc:	f043 0201 	orr.w	r2, r3, #1
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ed4:	e018      	b.n	8001f08 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d111      	bne.n	8001f08 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d105      	bne.n	8001f08 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f00:	f043 0201 	orr.w	r2, r3, #1
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f7fe f9e5 	bl	80002d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f0e:	e00e      	b.n	8001f2e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f14:	f003 0310 	and.w	r3, r3, #16
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f7ff fb4f 	bl	80015c0 <HAL_ADC_ErrorCallback>
}
 8001f22:	e004      	b.n	8001f2e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	4798      	blx	r3
}
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b084      	sub	sp, #16
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f7fe f9d7 	bl	80002f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f64:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f70:	f043 0204 	orr.w	r2, r3, #4
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f7ff fb21 	bl	80015c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a7a      	ldr	r2, [pc, #488]	@ (8002180 <ADC_ConfigureBoostMode+0x1f8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d004      	beq.n	8001fa4 <ADC_ConfigureBoostMode+0x1c>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a79      	ldr	r2, [pc, #484]	@ (8002184 <ADC_ConfigureBoostMode+0x1fc>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d109      	bne.n	8001fb8 <ADC_ConfigureBoostMode+0x30>
 8001fa4:	4b78      	ldr	r3, [pc, #480]	@ (8002188 <ADC_ConfigureBoostMode+0x200>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	bf14      	ite	ne
 8001fb0:	2301      	movne	r3, #1
 8001fb2:	2300      	moveq	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	e008      	b.n	8001fca <ADC_ConfigureBoostMode+0x42>
 8001fb8:	4b74      	ldr	r3, [pc, #464]	@ (800218c <ADC_ConfigureBoostMode+0x204>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf14      	ite	ne
 8001fc4:	2301      	movne	r3, #1
 8001fc6:	2300      	moveq	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d01c      	beq.n	8002008 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001fce:	f005 f8a7 	bl	8007120 <HAL_RCC_GetHCLKFreq>
 8001fd2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001fdc:	d010      	beq.n	8002000 <ADC_ConfigureBoostMode+0x78>
 8001fde:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001fe2:	d873      	bhi.n	80020cc <ADC_ConfigureBoostMode+0x144>
 8001fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fe8:	d002      	beq.n	8001ff0 <ADC_ConfigureBoostMode+0x68>
 8001fea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001fee:	d16d      	bne.n	80020cc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	0c1b      	lsrs	r3, r3, #16
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffc:	60fb      	str	r3, [r7, #12]
        break;
 8001ffe:	e068      	b.n	80020d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	089b      	lsrs	r3, r3, #2
 8002004:	60fb      	str	r3, [r7, #12]
        break;
 8002006:	e064      	b.n	80020d2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002008:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800200c:	f04f 0100 	mov.w	r1, #0
 8002010:	f006 fad6 	bl	80085c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002014:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800201e:	d051      	beq.n	80020c4 <ADC_ConfigureBoostMode+0x13c>
 8002020:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002024:	d854      	bhi.n	80020d0 <ADC_ConfigureBoostMode+0x148>
 8002026:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800202a:	d047      	beq.n	80020bc <ADC_ConfigureBoostMode+0x134>
 800202c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002030:	d84e      	bhi.n	80020d0 <ADC_ConfigureBoostMode+0x148>
 8002032:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002036:	d03d      	beq.n	80020b4 <ADC_ConfigureBoostMode+0x12c>
 8002038:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800203c:	d848      	bhi.n	80020d0 <ADC_ConfigureBoostMode+0x148>
 800203e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002042:	d033      	beq.n	80020ac <ADC_ConfigureBoostMode+0x124>
 8002044:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002048:	d842      	bhi.n	80020d0 <ADC_ConfigureBoostMode+0x148>
 800204a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800204e:	d029      	beq.n	80020a4 <ADC_ConfigureBoostMode+0x11c>
 8002050:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002054:	d83c      	bhi.n	80020d0 <ADC_ConfigureBoostMode+0x148>
 8002056:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800205a:	d01a      	beq.n	8002092 <ADC_ConfigureBoostMode+0x10a>
 800205c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002060:	d836      	bhi.n	80020d0 <ADC_ConfigureBoostMode+0x148>
 8002062:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002066:	d014      	beq.n	8002092 <ADC_ConfigureBoostMode+0x10a>
 8002068:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800206c:	d830      	bhi.n	80020d0 <ADC_ConfigureBoostMode+0x148>
 800206e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002072:	d00e      	beq.n	8002092 <ADC_ConfigureBoostMode+0x10a>
 8002074:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002078:	d82a      	bhi.n	80020d0 <ADC_ConfigureBoostMode+0x148>
 800207a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800207e:	d008      	beq.n	8002092 <ADC_ConfigureBoostMode+0x10a>
 8002080:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002084:	d824      	bhi.n	80020d0 <ADC_ConfigureBoostMode+0x148>
 8002086:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800208a:	d002      	beq.n	8002092 <ADC_ConfigureBoostMode+0x10a>
 800208c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002090:	d11e      	bne.n	80020d0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	0c9b      	lsrs	r3, r3, #18
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a0:	60fb      	str	r3, [r7, #12]
        break;
 80020a2:	e016      	b.n	80020d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	091b      	lsrs	r3, r3, #4
 80020a8:	60fb      	str	r3, [r7, #12]
        break;
 80020aa:	e012      	b.n	80020d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	60fb      	str	r3, [r7, #12]
        break;
 80020b2:	e00e      	b.n	80020d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	099b      	lsrs	r3, r3, #6
 80020b8:	60fb      	str	r3, [r7, #12]
        break;
 80020ba:	e00a      	b.n	80020d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	09db      	lsrs	r3, r3, #7
 80020c0:	60fb      	str	r3, [r7, #12]
        break;
 80020c2:	e006      	b.n	80020d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	0a1b      	lsrs	r3, r3, #8
 80020c8:	60fb      	str	r3, [r7, #12]
        break;
 80020ca:	e002      	b.n	80020d2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80020cc:	bf00      	nop
 80020ce:	e000      	b.n	80020d2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80020d0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80020d2:	f7fe fdf5 	bl	8000cc0 <HAL_GetREVID>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80020dc:	4293      	cmp	r3, r2
 80020de:	d815      	bhi.n	800210c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002190 <ADC_ConfigureBoostMode+0x208>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d908      	bls.n	80020fa <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020f6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80020f8:	e03e      	b.n	8002178 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002108:	609a      	str	r2, [r3, #8]
}
 800210a:	e035      	b.n	8002178 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	085b      	lsrs	r3, r3, #1
 8002110:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4a1f      	ldr	r2, [pc, #124]	@ (8002194 <ADC_ConfigureBoostMode+0x20c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d808      	bhi.n	800212c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002128:	609a      	str	r2, [r3, #8]
}
 800212a:	e025      	b.n	8002178 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4a1a      	ldr	r2, [pc, #104]	@ (8002198 <ADC_ConfigureBoostMode+0x210>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d80a      	bhi.n	800214a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002146:	609a      	str	r2, [r3, #8]
}
 8002148:	e016      	b.n	8002178 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4a13      	ldr	r2, [pc, #76]	@ (800219c <ADC_ConfigureBoostMode+0x214>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d80a      	bhi.n	8002168 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002164:	609a      	str	r2, [r3, #8]
}
 8002166:	e007      	b.n	8002178 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002176:	609a      	str	r2, [r3, #8]
}
 8002178:	bf00      	nop
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40022000 	.word	0x40022000
 8002184:	40022100 	.word	0x40022100
 8002188:	40022300 	.word	0x40022300
 800218c:	58026300 	.word	0x58026300
 8002190:	01312d00 	.word	0x01312d00
 8002194:	005f5e10 	.word	0x005f5e10
 8002198:	00bebc20 	.word	0x00bebc20
 800219c:	017d7840 	.word	0x017d7840

080021a0 <LL_ADC_IsEnabled>:
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <LL_ADC_IsEnabled+0x18>
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <LL_ADC_IsEnabled+0x1a>
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <LL_ADC_StartCalibration>:
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	4b09      	ldr	r3, [pc, #36]	@ (8002200 <LL_ADC_StartCalibration+0x38>)
 80021da:	4013      	ands	r3, r2
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80021e8:	430a      	orrs	r2, r1
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	609a      	str	r2, [r3, #8]
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	3ffeffc0 	.word	0x3ffeffc0

08002204 <LL_ADC_IsCalibrationOnGoing>:
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002214:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002218:	d101      	bne.n	800221e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_ADC_REG_IsConversionOngoing>:
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b04      	cmp	r3, #4
 800223e:	d101      	bne.n	8002244 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
	...

08002254 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002260:	2300      	movs	r3, #0
 8002262:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800226a:	2b01      	cmp	r3, #1
 800226c:	d101      	bne.n	8002272 <HAL_ADCEx_Calibration_Start+0x1e>
 800226e:	2302      	movs	r3, #2
 8002270:	e04c      	b.n	800230c <HAL_ADCEx_Calibration_Start+0xb8>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f7ff fd90 	bl	8001da0 <ADC_Disable>
 8002280:	4603      	mov	r3, r0
 8002282:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002284:	7dfb      	ldrb	r3, [r7, #23]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d135      	bne.n	80022f6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800228e:	4b21      	ldr	r3, [pc, #132]	@ (8002314 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002290:	4013      	ands	r3, r2
 8002292:	f043 0202 	orr.w	r2, r3, #2
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff ff90 	bl	80021c8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80022a8:	e014      	b.n	80022d4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	3301      	adds	r3, #1
 80022ae:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4a19      	ldr	r2, [pc, #100]	@ (8002318 <HAL_ADCEx_Calibration_Start+0xc4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d30d      	bcc.n	80022d4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022bc:	f023 0312 	bic.w	r3, r3, #18
 80022c0:	f043 0210 	orr.w	r2, r3, #16
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e01b      	b.n	800230c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff93 	bl	8002204 <LL_ADC_IsCalibrationOnGoing>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1e2      	bne.n	80022aa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e8:	f023 0303 	bic.w	r3, r3, #3
 80022ec:	f043 0201 	orr.w	r2, r3, #1
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	655a      	str	r2, [r3, #84]	@ 0x54
 80022f4:	e005      	b.n	8002302 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fa:	f043 0210 	orr.w	r2, r3, #16
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800230a:	7dfb      	ldrb	r3, [r7, #23]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	ffffeefd 	.word	0xffffeefd
 8002318:	25c3f800 	.word	0x25c3f800

0800231c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b09f      	sub	sp, #124	@ 0x7c
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002336:	2302      	movs	r3, #2
 8002338:	e0be      	b.n	80024b8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002346:	2300      	movs	r3, #0
 8002348:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a5c      	ldr	r2, [pc, #368]	@ (80024c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d102      	bne.n	800235a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002354:	4b5b      	ldr	r3, [pc, #364]	@ (80024c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	e001      	b.n	800235e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800235a:	2300      	movs	r3, #0
 800235c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10b      	bne.n	800237c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002368:	f043 0220 	orr.w	r2, r3, #32
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e09d      	b.n	80024b8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff ff54 	bl	800222c <LL_ADC_REG_IsConversionOngoing>
 8002384:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff ff4e 	bl	800222c <LL_ADC_REG_IsConversionOngoing>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d17f      	bne.n	8002496 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002396:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002398:	2b00      	cmp	r3, #0
 800239a:	d17c      	bne.n	8002496 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a47      	ldr	r2, [pc, #284]	@ (80024c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d004      	beq.n	80023b0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a46      	ldr	r2, [pc, #280]	@ (80024c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d101      	bne.n	80023b4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80023b0:	4b45      	ldr	r3, [pc, #276]	@ (80024c8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80023b2:	e000      	b.n	80023b6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80023b4:	4b45      	ldr	r3, [pc, #276]	@ (80024cc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80023b6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d039      	beq.n	8002434 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80023c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	431a      	orrs	r2, r3
 80023ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023d0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a3a      	ldr	r2, [pc, #232]	@ (80024c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d004      	beq.n	80023e6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a38      	ldr	r2, [pc, #224]	@ (80024c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d10e      	bne.n	8002404 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80023e6:	4836      	ldr	r0, [pc, #216]	@ (80024c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80023e8:	f7ff feda 	bl	80021a0 <LL_ADC_IsEnabled>
 80023ec:	4604      	mov	r4, r0
 80023ee:	4835      	ldr	r0, [pc, #212]	@ (80024c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80023f0:	f7ff fed6 	bl	80021a0 <LL_ADC_IsEnabled>
 80023f4:	4603      	mov	r3, r0
 80023f6:	4323      	orrs	r3, r4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf0c      	ite	eq
 80023fc:	2301      	moveq	r3, #1
 80023fe:	2300      	movne	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	e008      	b.n	8002416 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002404:	4832      	ldr	r0, [pc, #200]	@ (80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002406:	f7ff fecb 	bl	80021a0 <LL_ADC_IsEnabled>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	bf0c      	ite	eq
 8002410:	2301      	moveq	r3, #1
 8002412:	2300      	movne	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d047      	beq.n	80024aa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800241a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	4b2d      	ldr	r3, [pc, #180]	@ (80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002420:	4013      	ands	r3, r2
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	6811      	ldr	r1, [r2, #0]
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	6892      	ldr	r2, [r2, #8]
 800242a:	430a      	orrs	r2, r1
 800242c:	431a      	orrs	r2, r3
 800242e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002430:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002432:	e03a      	b.n	80024aa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800243c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800243e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a1e      	ldr	r2, [pc, #120]	@ (80024c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d004      	beq.n	8002454 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a1d      	ldr	r2, [pc, #116]	@ (80024c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d10e      	bne.n	8002472 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002454:	481a      	ldr	r0, [pc, #104]	@ (80024c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002456:	f7ff fea3 	bl	80021a0 <LL_ADC_IsEnabled>
 800245a:	4604      	mov	r4, r0
 800245c:	4819      	ldr	r0, [pc, #100]	@ (80024c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800245e:	f7ff fe9f 	bl	80021a0 <LL_ADC_IsEnabled>
 8002462:	4603      	mov	r3, r0
 8002464:	4323      	orrs	r3, r4
 8002466:	2b00      	cmp	r3, #0
 8002468:	bf0c      	ite	eq
 800246a:	2301      	moveq	r3, #1
 800246c:	2300      	movne	r3, #0
 800246e:	b2db      	uxtb	r3, r3
 8002470:	e008      	b.n	8002484 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002472:	4817      	ldr	r0, [pc, #92]	@ (80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002474:	f7ff fe94 	bl	80021a0 <LL_ADC_IsEnabled>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	bf0c      	ite	eq
 800247e:	2301      	moveq	r3, #1
 8002480:	2300      	movne	r3, #0
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d010      	beq.n	80024aa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	4b11      	ldr	r3, [pc, #68]	@ (80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800248e:	4013      	ands	r3, r2
 8002490:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002492:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002494:	e009      	b.n	80024aa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800249a:	f043 0220 	orr.w	r2, r3, #32
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80024a8:	e000      	b.n	80024ac <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024aa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80024b4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	377c      	adds	r7, #124	@ 0x7c
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd90      	pop	{r4, r7, pc}
 80024c0:	40022000 	.word	0x40022000
 80024c4:	40022100 	.word	0x40022100
 80024c8:	40022300 	.word	0x40022300
 80024cc:	58026300 	.word	0x58026300
 80024d0:	58026000 	.word	0x58026000
 80024d4:	fffff0e0 	.word	0xfffff0e0

080024d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002518 <__NVIC_SetPriorityGrouping+0x40>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024f4:	4013      	ands	r3, r2
 80024f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002500:	4b06      	ldr	r3, [pc, #24]	@ (800251c <__NVIC_SetPriorityGrouping+0x44>)
 8002502:	4313      	orrs	r3, r2
 8002504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002506:	4a04      	ldr	r2, [pc, #16]	@ (8002518 <__NVIC_SetPriorityGrouping+0x40>)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	60d3      	str	r3, [r2, #12]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000ed00 	.word	0xe000ed00
 800251c:	05fa0000 	.word	0x05fa0000

08002520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002524:	4b04      	ldr	r3, [pc, #16]	@ (8002538 <__NVIC_GetPriorityGrouping+0x18>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	0a1b      	lsrs	r3, r3, #8
 800252a:	f003 0307 	and.w	r3, r3, #7
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800254a:	2b00      	cmp	r3, #0
 800254c:	db0b      	blt.n	8002566 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	f003 021f 	and.w	r2, r3, #31
 8002554:	4907      	ldr	r1, [pc, #28]	@ (8002574 <__NVIC_EnableIRQ+0x38>)
 8002556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	2001      	movs	r0, #1
 800255e:	fa00 f202 	lsl.w	r2, r0, r2
 8002562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	e000e100 	.word	0xe000e100

08002578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	6039      	str	r1, [r7, #0]
 8002582:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002584:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002588:	2b00      	cmp	r3, #0
 800258a:	db0a      	blt.n	80025a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	490c      	ldr	r1, [pc, #48]	@ (80025c4 <__NVIC_SetPriority+0x4c>)
 8002592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002596:	0112      	lsls	r2, r2, #4
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	440b      	add	r3, r1
 800259c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a0:	e00a      	b.n	80025b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4908      	ldr	r1, [pc, #32]	@ (80025c8 <__NVIC_SetPriority+0x50>)
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	3b04      	subs	r3, #4
 80025b0:	0112      	lsls	r2, r2, #4
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	440b      	add	r3, r1
 80025b6:	761a      	strb	r2, [r3, #24]
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000e100 	.word	0xe000e100
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b089      	sub	sp, #36	@ 0x24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f1c3 0307 	rsb	r3, r3, #7
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	bf28      	it	cs
 80025ea:	2304      	movcs	r3, #4
 80025ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3304      	adds	r3, #4
 80025f2:	2b06      	cmp	r3, #6
 80025f4:	d902      	bls.n	80025fc <NVIC_EncodePriority+0x30>
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3b03      	subs	r3, #3
 80025fa:	e000      	b.n	80025fe <NVIC_EncodePriority+0x32>
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002600:	f04f 32ff 	mov.w	r2, #4294967295
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43da      	mvns	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	401a      	ands	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002614:	f04f 31ff 	mov.w	r1, #4294967295
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	43d9      	mvns	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002624:	4313      	orrs	r3, r2
         );
}
 8002626:	4618      	mov	r0, r3
 8002628:	3724      	adds	r7, #36	@ 0x24
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3b01      	subs	r3, #1
 8002640:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002644:	d301      	bcc.n	800264a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002646:	2301      	movs	r3, #1
 8002648:	e00f      	b.n	800266a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800264a:	4a0a      	ldr	r2, [pc, #40]	@ (8002674 <SysTick_Config+0x40>)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3b01      	subs	r3, #1
 8002650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002652:	210f      	movs	r1, #15
 8002654:	f04f 30ff 	mov.w	r0, #4294967295
 8002658:	f7ff ff8e 	bl	8002578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800265c:	4b05      	ldr	r3, [pc, #20]	@ (8002674 <SysTick_Config+0x40>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002662:	4b04      	ldr	r3, [pc, #16]	@ (8002674 <SysTick_Config+0x40>)
 8002664:	2207      	movs	r2, #7
 8002666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	e000e010 	.word	0xe000e010

08002678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ff29 	bl	80024d8 <__NVIC_SetPriorityGrouping>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b086      	sub	sp, #24
 8002692:	af00      	add	r7, sp, #0
 8002694:	4603      	mov	r3, r0
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
 800269a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800269c:	f7ff ff40 	bl	8002520 <__NVIC_GetPriorityGrouping>
 80026a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	6978      	ldr	r0, [r7, #20]
 80026a8:	f7ff ff90 	bl	80025cc <NVIC_EncodePriority>
 80026ac:	4602      	mov	r2, r0
 80026ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff ff5f 	bl	8002578 <__NVIC_SetPriority>
}
 80026ba:	bf00      	nop
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	4603      	mov	r3, r0
 80026ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ff33 	bl	800253c <__NVIC_EnableIRQ>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ffa4 	bl	8002634 <SysTick_Config>
 80026ec:	4603      	mov	r3, r0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002700:	f7fe faae 	bl	8000c60 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e316      	b.n	8002d3e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a66      	ldr	r2, [pc, #408]	@ (80028b0 <HAL_DMA_Init+0x1b8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d04a      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a65      	ldr	r2, [pc, #404]	@ (80028b4 <HAL_DMA_Init+0x1bc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d045      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a63      	ldr	r2, [pc, #396]	@ (80028b8 <HAL_DMA_Init+0x1c0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d040      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a62      	ldr	r2, [pc, #392]	@ (80028bc <HAL_DMA_Init+0x1c4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d03b      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a60      	ldr	r2, [pc, #384]	@ (80028c0 <HAL_DMA_Init+0x1c8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d036      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a5f      	ldr	r2, [pc, #380]	@ (80028c4 <HAL_DMA_Init+0x1cc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d031      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a5d      	ldr	r2, [pc, #372]	@ (80028c8 <HAL_DMA_Init+0x1d0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d02c      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a5c      	ldr	r2, [pc, #368]	@ (80028cc <HAL_DMA_Init+0x1d4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d027      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a5a      	ldr	r2, [pc, #360]	@ (80028d0 <HAL_DMA_Init+0x1d8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d022      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a59      	ldr	r2, [pc, #356]	@ (80028d4 <HAL_DMA_Init+0x1dc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d01d      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a57      	ldr	r2, [pc, #348]	@ (80028d8 <HAL_DMA_Init+0x1e0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d018      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a56      	ldr	r2, [pc, #344]	@ (80028dc <HAL_DMA_Init+0x1e4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d013      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a54      	ldr	r2, [pc, #336]	@ (80028e0 <HAL_DMA_Init+0x1e8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00e      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a53      	ldr	r2, [pc, #332]	@ (80028e4 <HAL_DMA_Init+0x1ec>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d009      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a51      	ldr	r2, [pc, #324]	@ (80028e8 <HAL_DMA_Init+0x1f0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d004      	beq.n	80027b0 <HAL_DMA_Init+0xb8>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a50      	ldr	r2, [pc, #320]	@ (80028ec <HAL_DMA_Init+0x1f4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d101      	bne.n	80027b4 <HAL_DMA_Init+0xbc>
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <HAL_DMA_Init+0xbe>
 80027b4:	2300      	movs	r3, #0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 813b 	beq.w	8002a32 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a37      	ldr	r2, [pc, #220]	@ (80028b0 <HAL_DMA_Init+0x1b8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d04a      	beq.n	800286c <HAL_DMA_Init+0x174>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a36      	ldr	r2, [pc, #216]	@ (80028b4 <HAL_DMA_Init+0x1bc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d045      	beq.n	800286c <HAL_DMA_Init+0x174>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a34      	ldr	r2, [pc, #208]	@ (80028b8 <HAL_DMA_Init+0x1c0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d040      	beq.n	800286c <HAL_DMA_Init+0x174>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a33      	ldr	r2, [pc, #204]	@ (80028bc <HAL_DMA_Init+0x1c4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d03b      	beq.n	800286c <HAL_DMA_Init+0x174>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a31      	ldr	r2, [pc, #196]	@ (80028c0 <HAL_DMA_Init+0x1c8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d036      	beq.n	800286c <HAL_DMA_Init+0x174>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a30      	ldr	r2, [pc, #192]	@ (80028c4 <HAL_DMA_Init+0x1cc>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d031      	beq.n	800286c <HAL_DMA_Init+0x174>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a2e      	ldr	r2, [pc, #184]	@ (80028c8 <HAL_DMA_Init+0x1d0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d02c      	beq.n	800286c <HAL_DMA_Init+0x174>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a2d      	ldr	r2, [pc, #180]	@ (80028cc <HAL_DMA_Init+0x1d4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d027      	beq.n	800286c <HAL_DMA_Init+0x174>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a2b      	ldr	r2, [pc, #172]	@ (80028d0 <HAL_DMA_Init+0x1d8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d022      	beq.n	800286c <HAL_DMA_Init+0x174>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a2a      	ldr	r2, [pc, #168]	@ (80028d4 <HAL_DMA_Init+0x1dc>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d01d      	beq.n	800286c <HAL_DMA_Init+0x174>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a28      	ldr	r2, [pc, #160]	@ (80028d8 <HAL_DMA_Init+0x1e0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d018      	beq.n	800286c <HAL_DMA_Init+0x174>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a27      	ldr	r2, [pc, #156]	@ (80028dc <HAL_DMA_Init+0x1e4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d013      	beq.n	800286c <HAL_DMA_Init+0x174>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a25      	ldr	r2, [pc, #148]	@ (80028e0 <HAL_DMA_Init+0x1e8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00e      	beq.n	800286c <HAL_DMA_Init+0x174>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a24      	ldr	r2, [pc, #144]	@ (80028e4 <HAL_DMA_Init+0x1ec>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d009      	beq.n	800286c <HAL_DMA_Init+0x174>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a22      	ldr	r2, [pc, #136]	@ (80028e8 <HAL_DMA_Init+0x1f0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d004      	beq.n	800286c <HAL_DMA_Init+0x174>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a21      	ldr	r2, [pc, #132]	@ (80028ec <HAL_DMA_Init+0x1f4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d108      	bne.n	800287e <HAL_DMA_Init+0x186>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0201 	bic.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	e007      	b.n	800288e <HAL_DMA_Init+0x196>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800288e:	e02f      	b.n	80028f0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002890:	f7fe f9e6 	bl	8000c60 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b05      	cmp	r3, #5
 800289c:	d928      	bls.n	80028f0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2220      	movs	r2, #32
 80028a2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2203      	movs	r2, #3
 80028a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e246      	b.n	8002d3e <HAL_DMA_Init+0x646>
 80028b0:	40020010 	.word	0x40020010
 80028b4:	40020028 	.word	0x40020028
 80028b8:	40020040 	.word	0x40020040
 80028bc:	40020058 	.word	0x40020058
 80028c0:	40020070 	.word	0x40020070
 80028c4:	40020088 	.word	0x40020088
 80028c8:	400200a0 	.word	0x400200a0
 80028cc:	400200b8 	.word	0x400200b8
 80028d0:	40020410 	.word	0x40020410
 80028d4:	40020428 	.word	0x40020428
 80028d8:	40020440 	.word	0x40020440
 80028dc:	40020458 	.word	0x40020458
 80028e0:	40020470 	.word	0x40020470
 80028e4:	40020488 	.word	0x40020488
 80028e8:	400204a0 	.word	0x400204a0
 80028ec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1c8      	bne.n	8002890 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4b83      	ldr	r3, [pc, #524]	@ (8002b18 <HAL_DMA_Init+0x420>)
 800290a:	4013      	ands	r3, r2
 800290c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002916:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002922:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800292e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4313      	orrs	r3, r2
 800293a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002940:	2b04      	cmp	r3, #4
 8002942:	d107      	bne.n	8002954 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294c:	4313      	orrs	r3, r2
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4313      	orrs	r3, r2
 8002952:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002954:	4b71      	ldr	r3, [pc, #452]	@ (8002b1c <HAL_DMA_Init+0x424>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b71      	ldr	r3, [pc, #452]	@ (8002b20 <HAL_DMA_Init+0x428>)
 800295a:	4013      	ands	r3, r2
 800295c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002960:	d328      	bcc.n	80029b4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b28      	cmp	r3, #40	@ 0x28
 8002968:	d903      	bls.n	8002972 <HAL_DMA_Init+0x27a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002970:	d917      	bls.n	80029a2 <HAL_DMA_Init+0x2aa>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b3e      	cmp	r3, #62	@ 0x3e
 8002978:	d903      	bls.n	8002982 <HAL_DMA_Init+0x28a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b42      	cmp	r3, #66	@ 0x42
 8002980:	d90f      	bls.n	80029a2 <HAL_DMA_Init+0x2aa>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b46      	cmp	r3, #70	@ 0x46
 8002988:	d903      	bls.n	8002992 <HAL_DMA_Init+0x29a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b48      	cmp	r3, #72	@ 0x48
 8002990:	d907      	bls.n	80029a2 <HAL_DMA_Init+0x2aa>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b4e      	cmp	r3, #78	@ 0x4e
 8002998:	d905      	bls.n	80029a6 <HAL_DMA_Init+0x2ae>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b52      	cmp	r3, #82	@ 0x52
 80029a0:	d801      	bhi.n	80029a6 <HAL_DMA_Init+0x2ae>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <HAL_DMA_Init+0x2b0>
 80029a6:	2300      	movs	r3, #0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029b2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f023 0307 	bic.w	r3, r3, #7
 80029ca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d117      	bne.n	8002a0e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00e      	beq.n	8002a0e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f001 fdcf 	bl	8004594 <DMA_CheckFifoParam>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2240      	movs	r2, #64	@ 0x40
 8002a00:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e197      	b.n	8002d3e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f001 fd0a 	bl	8004430 <DMA_CalcBaseAndBitshift>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	223f      	movs	r2, #63	@ 0x3f
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	e0cd      	b.n	8002bce <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a3b      	ldr	r2, [pc, #236]	@ (8002b24 <HAL_DMA_Init+0x42c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d022      	beq.n	8002a82 <HAL_DMA_Init+0x38a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a39      	ldr	r2, [pc, #228]	@ (8002b28 <HAL_DMA_Init+0x430>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d01d      	beq.n	8002a82 <HAL_DMA_Init+0x38a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a38      	ldr	r2, [pc, #224]	@ (8002b2c <HAL_DMA_Init+0x434>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d018      	beq.n	8002a82 <HAL_DMA_Init+0x38a>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a36      	ldr	r2, [pc, #216]	@ (8002b30 <HAL_DMA_Init+0x438>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d013      	beq.n	8002a82 <HAL_DMA_Init+0x38a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a35      	ldr	r2, [pc, #212]	@ (8002b34 <HAL_DMA_Init+0x43c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d00e      	beq.n	8002a82 <HAL_DMA_Init+0x38a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a33      	ldr	r2, [pc, #204]	@ (8002b38 <HAL_DMA_Init+0x440>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d009      	beq.n	8002a82 <HAL_DMA_Init+0x38a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a32      	ldr	r2, [pc, #200]	@ (8002b3c <HAL_DMA_Init+0x444>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d004      	beq.n	8002a82 <HAL_DMA_Init+0x38a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a30      	ldr	r2, [pc, #192]	@ (8002b40 <HAL_DMA_Init+0x448>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d101      	bne.n	8002a86 <HAL_DMA_Init+0x38e>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <HAL_DMA_Init+0x390>
 8002a86:	2300      	movs	r3, #0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 8097 	beq.w	8002bbc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a24      	ldr	r2, [pc, #144]	@ (8002b24 <HAL_DMA_Init+0x42c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d021      	beq.n	8002adc <HAL_DMA_Init+0x3e4>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a22      	ldr	r2, [pc, #136]	@ (8002b28 <HAL_DMA_Init+0x430>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d01c      	beq.n	8002adc <HAL_DMA_Init+0x3e4>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a21      	ldr	r2, [pc, #132]	@ (8002b2c <HAL_DMA_Init+0x434>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d017      	beq.n	8002adc <HAL_DMA_Init+0x3e4>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b30 <HAL_DMA_Init+0x438>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d012      	beq.n	8002adc <HAL_DMA_Init+0x3e4>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1e      	ldr	r2, [pc, #120]	@ (8002b34 <HAL_DMA_Init+0x43c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d00d      	beq.n	8002adc <HAL_DMA_Init+0x3e4>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8002b38 <HAL_DMA_Init+0x440>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d008      	beq.n	8002adc <HAL_DMA_Init+0x3e4>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a1b      	ldr	r2, [pc, #108]	@ (8002b3c <HAL_DMA_Init+0x444>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d003      	beq.n	8002adc <HAL_DMA_Init+0x3e4>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a19      	ldr	r2, [pc, #100]	@ (8002b40 <HAL_DMA_Init+0x448>)
 8002ada:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4b13      	ldr	r3, [pc, #76]	@ (8002b44 <HAL_DMA_Init+0x44c>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b40      	cmp	r3, #64	@ 0x40
 8002b02:	d021      	beq.n	8002b48 <HAL_DMA_Init+0x450>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b80      	cmp	r3, #128	@ 0x80
 8002b0a:	d102      	bne.n	8002b12 <HAL_DMA_Init+0x41a>
 8002b0c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b10:	e01b      	b.n	8002b4a <HAL_DMA_Init+0x452>
 8002b12:	2300      	movs	r3, #0
 8002b14:	e019      	b.n	8002b4a <HAL_DMA_Init+0x452>
 8002b16:	bf00      	nop
 8002b18:	fe10803f 	.word	0xfe10803f
 8002b1c:	5c001000 	.word	0x5c001000
 8002b20:	ffff0000 	.word	0xffff0000
 8002b24:	58025408 	.word	0x58025408
 8002b28:	5802541c 	.word	0x5802541c
 8002b2c:	58025430 	.word	0x58025430
 8002b30:	58025444 	.word	0x58025444
 8002b34:	58025458 	.word	0x58025458
 8002b38:	5802546c 	.word	0x5802546c
 8002b3c:	58025480 	.word	0x58025480
 8002b40:	58025494 	.word	0x58025494
 8002b44:	fffe000f 	.word	0xfffe000f
 8002b48:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	68d2      	ldr	r2, [r2, #12]
 8002b4e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b78:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b6e      	ldr	r3, [pc, #440]	@ (8002d48 <HAL_DMA_Init+0x650>)
 8002b90:	4413      	add	r3, r2
 8002b92:	4a6e      	ldr	r2, [pc, #440]	@ (8002d4c <HAL_DMA_Init+0x654>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	009a      	lsls	r2, r3, #2
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f001 fc45 	bl	8004430 <DMA_CalcBaseAndBitshift>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bae:	f003 031f 	and.w	r3, r3, #31
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	e008      	b.n	8002bce <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2240      	movs	r2, #64	@ 0x40
 8002bc0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e0b7      	b.n	8002d3e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a5f      	ldr	r2, [pc, #380]	@ (8002d50 <HAL_DMA_Init+0x658>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d072      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a5d      	ldr	r2, [pc, #372]	@ (8002d54 <HAL_DMA_Init+0x65c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d06d      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a5c      	ldr	r2, [pc, #368]	@ (8002d58 <HAL_DMA_Init+0x660>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d068      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a5a      	ldr	r2, [pc, #360]	@ (8002d5c <HAL_DMA_Init+0x664>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d063      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a59      	ldr	r2, [pc, #356]	@ (8002d60 <HAL_DMA_Init+0x668>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d05e      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a57      	ldr	r2, [pc, #348]	@ (8002d64 <HAL_DMA_Init+0x66c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d059      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a56      	ldr	r2, [pc, #344]	@ (8002d68 <HAL_DMA_Init+0x670>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d054      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a54      	ldr	r2, [pc, #336]	@ (8002d6c <HAL_DMA_Init+0x674>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d04f      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a53      	ldr	r2, [pc, #332]	@ (8002d70 <HAL_DMA_Init+0x678>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d04a      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a51      	ldr	r2, [pc, #324]	@ (8002d74 <HAL_DMA_Init+0x67c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d045      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a50      	ldr	r2, [pc, #320]	@ (8002d78 <HAL_DMA_Init+0x680>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d040      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a4e      	ldr	r2, [pc, #312]	@ (8002d7c <HAL_DMA_Init+0x684>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d03b      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a4d      	ldr	r2, [pc, #308]	@ (8002d80 <HAL_DMA_Init+0x688>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d036      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a4b      	ldr	r2, [pc, #300]	@ (8002d84 <HAL_DMA_Init+0x68c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d031      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a4a      	ldr	r2, [pc, #296]	@ (8002d88 <HAL_DMA_Init+0x690>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d02c      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a48      	ldr	r2, [pc, #288]	@ (8002d8c <HAL_DMA_Init+0x694>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d027      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a47      	ldr	r2, [pc, #284]	@ (8002d90 <HAL_DMA_Init+0x698>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d022      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a45      	ldr	r2, [pc, #276]	@ (8002d94 <HAL_DMA_Init+0x69c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01d      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a44      	ldr	r2, [pc, #272]	@ (8002d98 <HAL_DMA_Init+0x6a0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d018      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a42      	ldr	r2, [pc, #264]	@ (8002d9c <HAL_DMA_Init+0x6a4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d013      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a41      	ldr	r2, [pc, #260]	@ (8002da0 <HAL_DMA_Init+0x6a8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d00e      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a3f      	ldr	r2, [pc, #252]	@ (8002da4 <HAL_DMA_Init+0x6ac>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d009      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a3e      	ldr	r2, [pc, #248]	@ (8002da8 <HAL_DMA_Init+0x6b0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d004      	beq.n	8002cbe <HAL_DMA_Init+0x5c6>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a3c      	ldr	r2, [pc, #240]	@ (8002dac <HAL_DMA_Init+0x6b4>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d101      	bne.n	8002cc2 <HAL_DMA_Init+0x5ca>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_DMA_Init+0x5cc>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d032      	beq.n	8002d2e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f001 fcdf 	bl	800468c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b80      	cmp	r3, #128	@ 0x80
 8002cd4:	d102      	bne.n	8002cdc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002cf0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d010      	beq.n	8002d1c <HAL_DMA_Init+0x624>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d80c      	bhi.n	8002d1c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f001 fd5c 	bl	80047c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	e008      	b.n	8002d2e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	a7fdabf8 	.word	0xa7fdabf8
 8002d4c:	cccccccd 	.word	0xcccccccd
 8002d50:	40020010 	.word	0x40020010
 8002d54:	40020028 	.word	0x40020028
 8002d58:	40020040 	.word	0x40020040
 8002d5c:	40020058 	.word	0x40020058
 8002d60:	40020070 	.word	0x40020070
 8002d64:	40020088 	.word	0x40020088
 8002d68:	400200a0 	.word	0x400200a0
 8002d6c:	400200b8 	.word	0x400200b8
 8002d70:	40020410 	.word	0x40020410
 8002d74:	40020428 	.word	0x40020428
 8002d78:	40020440 	.word	0x40020440
 8002d7c:	40020458 	.word	0x40020458
 8002d80:	40020470 	.word	0x40020470
 8002d84:	40020488 	.word	0x40020488
 8002d88:	400204a0 	.word	0x400204a0
 8002d8c:	400204b8 	.word	0x400204b8
 8002d90:	58025408 	.word	0x58025408
 8002d94:	5802541c 	.word	0x5802541c
 8002d98:	58025430 	.word	0x58025430
 8002d9c:	58025444 	.word	0x58025444
 8002da0:	58025458 	.word	0x58025458
 8002da4:	5802546c 	.word	0x5802546c
 8002da8:	58025480 	.word	0x58025480
 8002dac:	58025494 	.word	0x58025494

08002db0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e226      	b.n	800321a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_DMA_Start_IT+0x2a>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e21f      	b.n	800321a <HAL_DMA_Start_IT+0x46a>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	f040 820a 	bne.w	8003204 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a68      	ldr	r2, [pc, #416]	@ (8002fa4 <HAL_DMA_Start_IT+0x1f4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d04a      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a66      	ldr	r2, [pc, #408]	@ (8002fa8 <HAL_DMA_Start_IT+0x1f8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d045      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a65      	ldr	r2, [pc, #404]	@ (8002fac <HAL_DMA_Start_IT+0x1fc>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d040      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a63      	ldr	r2, [pc, #396]	@ (8002fb0 <HAL_DMA_Start_IT+0x200>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d03b      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a62      	ldr	r2, [pc, #392]	@ (8002fb4 <HAL_DMA_Start_IT+0x204>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d036      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a60      	ldr	r2, [pc, #384]	@ (8002fb8 <HAL_DMA_Start_IT+0x208>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d031      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a5f      	ldr	r2, [pc, #380]	@ (8002fbc <HAL_DMA_Start_IT+0x20c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d02c      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a5d      	ldr	r2, [pc, #372]	@ (8002fc0 <HAL_DMA_Start_IT+0x210>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d027      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a5c      	ldr	r2, [pc, #368]	@ (8002fc4 <HAL_DMA_Start_IT+0x214>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d022      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a5a      	ldr	r2, [pc, #360]	@ (8002fc8 <HAL_DMA_Start_IT+0x218>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d01d      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a59      	ldr	r2, [pc, #356]	@ (8002fcc <HAL_DMA_Start_IT+0x21c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d018      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a57      	ldr	r2, [pc, #348]	@ (8002fd0 <HAL_DMA_Start_IT+0x220>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a56      	ldr	r2, [pc, #344]	@ (8002fd4 <HAL_DMA_Start_IT+0x224>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00e      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a54      	ldr	r2, [pc, #336]	@ (8002fd8 <HAL_DMA_Start_IT+0x228>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d009      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a53      	ldr	r2, [pc, #332]	@ (8002fdc <HAL_DMA_Start_IT+0x22c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d004      	beq.n	8002e9e <HAL_DMA_Start_IT+0xee>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a51      	ldr	r2, [pc, #324]	@ (8002fe0 <HAL_DMA_Start_IT+0x230>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d108      	bne.n	8002eb0 <HAL_DMA_Start_IT+0x100>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0201 	bic.w	r2, r2, #1
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	e007      	b.n	8002ec0 <HAL_DMA_Start_IT+0x110>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0201 	bic.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f001 f906 	bl	80040d8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a34      	ldr	r2, [pc, #208]	@ (8002fa4 <HAL_DMA_Start_IT+0x1f4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d04a      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a33      	ldr	r2, [pc, #204]	@ (8002fa8 <HAL_DMA_Start_IT+0x1f8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d045      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a31      	ldr	r2, [pc, #196]	@ (8002fac <HAL_DMA_Start_IT+0x1fc>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d040      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a30      	ldr	r2, [pc, #192]	@ (8002fb0 <HAL_DMA_Start_IT+0x200>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d03b      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a2e      	ldr	r2, [pc, #184]	@ (8002fb4 <HAL_DMA_Start_IT+0x204>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d036      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a2d      	ldr	r2, [pc, #180]	@ (8002fb8 <HAL_DMA_Start_IT+0x208>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d031      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a2b      	ldr	r2, [pc, #172]	@ (8002fbc <HAL_DMA_Start_IT+0x20c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d02c      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a2a      	ldr	r2, [pc, #168]	@ (8002fc0 <HAL_DMA_Start_IT+0x210>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d027      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a28      	ldr	r2, [pc, #160]	@ (8002fc4 <HAL_DMA_Start_IT+0x214>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d022      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a27      	ldr	r2, [pc, #156]	@ (8002fc8 <HAL_DMA_Start_IT+0x218>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d01d      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a25      	ldr	r2, [pc, #148]	@ (8002fcc <HAL_DMA_Start_IT+0x21c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d018      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a24      	ldr	r2, [pc, #144]	@ (8002fd0 <HAL_DMA_Start_IT+0x220>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d013      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a22      	ldr	r2, [pc, #136]	@ (8002fd4 <HAL_DMA_Start_IT+0x224>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00e      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a21      	ldr	r2, [pc, #132]	@ (8002fd8 <HAL_DMA_Start_IT+0x228>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d009      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a1f      	ldr	r2, [pc, #124]	@ (8002fdc <HAL_DMA_Start_IT+0x22c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d004      	beq.n	8002f6c <HAL_DMA_Start_IT+0x1bc>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe0 <HAL_DMA_Start_IT+0x230>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d101      	bne.n	8002f70 <HAL_DMA_Start_IT+0x1c0>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <HAL_DMA_Start_IT+0x1c2>
 8002f70:	2300      	movs	r3, #0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d036      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f023 021e 	bic.w	r2, r3, #30
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0216 	orr.w	r2, r2, #22
 8002f88:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d03e      	beq.n	8003010 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 0208 	orr.w	r2, r2, #8
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	e035      	b.n	8003010 <HAL_DMA_Start_IT+0x260>
 8002fa4:	40020010 	.word	0x40020010
 8002fa8:	40020028 	.word	0x40020028
 8002fac:	40020040 	.word	0x40020040
 8002fb0:	40020058 	.word	0x40020058
 8002fb4:	40020070 	.word	0x40020070
 8002fb8:	40020088 	.word	0x40020088
 8002fbc:	400200a0 	.word	0x400200a0
 8002fc0:	400200b8 	.word	0x400200b8
 8002fc4:	40020410 	.word	0x40020410
 8002fc8:	40020428 	.word	0x40020428
 8002fcc:	40020440 	.word	0x40020440
 8002fd0:	40020458 	.word	0x40020458
 8002fd4:	40020470 	.word	0x40020470
 8002fd8:	40020488 	.word	0x40020488
 8002fdc:	400204a0 	.word	0x400204a0
 8002fe0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 020e 	bic.w	r2, r3, #14
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 020a 	orr.w	r2, r2, #10
 8002ff6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d007      	beq.n	8003010 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0204 	orr.w	r2, r2, #4
 800300e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a83      	ldr	r2, [pc, #524]	@ (8003224 <HAL_DMA_Start_IT+0x474>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d072      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a82      	ldr	r2, [pc, #520]	@ (8003228 <HAL_DMA_Start_IT+0x478>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d06d      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a80      	ldr	r2, [pc, #512]	@ (800322c <HAL_DMA_Start_IT+0x47c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d068      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a7f      	ldr	r2, [pc, #508]	@ (8003230 <HAL_DMA_Start_IT+0x480>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d063      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a7d      	ldr	r2, [pc, #500]	@ (8003234 <HAL_DMA_Start_IT+0x484>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d05e      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a7c      	ldr	r2, [pc, #496]	@ (8003238 <HAL_DMA_Start_IT+0x488>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d059      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a7a      	ldr	r2, [pc, #488]	@ (800323c <HAL_DMA_Start_IT+0x48c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d054      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a79      	ldr	r2, [pc, #484]	@ (8003240 <HAL_DMA_Start_IT+0x490>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d04f      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a77      	ldr	r2, [pc, #476]	@ (8003244 <HAL_DMA_Start_IT+0x494>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d04a      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a76      	ldr	r2, [pc, #472]	@ (8003248 <HAL_DMA_Start_IT+0x498>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d045      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a74      	ldr	r2, [pc, #464]	@ (800324c <HAL_DMA_Start_IT+0x49c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d040      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a73      	ldr	r2, [pc, #460]	@ (8003250 <HAL_DMA_Start_IT+0x4a0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d03b      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a71      	ldr	r2, [pc, #452]	@ (8003254 <HAL_DMA_Start_IT+0x4a4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d036      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a70      	ldr	r2, [pc, #448]	@ (8003258 <HAL_DMA_Start_IT+0x4a8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d031      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a6e      	ldr	r2, [pc, #440]	@ (800325c <HAL_DMA_Start_IT+0x4ac>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d02c      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a6d      	ldr	r2, [pc, #436]	@ (8003260 <HAL_DMA_Start_IT+0x4b0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d027      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a6b      	ldr	r2, [pc, #428]	@ (8003264 <HAL_DMA_Start_IT+0x4b4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d022      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a6a      	ldr	r2, [pc, #424]	@ (8003268 <HAL_DMA_Start_IT+0x4b8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d01d      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a68      	ldr	r2, [pc, #416]	@ (800326c <HAL_DMA_Start_IT+0x4bc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d018      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a67      	ldr	r2, [pc, #412]	@ (8003270 <HAL_DMA_Start_IT+0x4c0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d013      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a65      	ldr	r2, [pc, #404]	@ (8003274 <HAL_DMA_Start_IT+0x4c4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d00e      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a64      	ldr	r2, [pc, #400]	@ (8003278 <HAL_DMA_Start_IT+0x4c8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d009      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a62      	ldr	r2, [pc, #392]	@ (800327c <HAL_DMA_Start_IT+0x4cc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d004      	beq.n	8003100 <HAL_DMA_Start_IT+0x350>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a61      	ldr	r2, [pc, #388]	@ (8003280 <HAL_DMA_Start_IT+0x4d0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d101      	bne.n	8003104 <HAL_DMA_Start_IT+0x354>
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <HAL_DMA_Start_IT+0x356>
 8003104:	2300      	movs	r3, #0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d01a      	beq.n	8003140 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003122:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003126:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800312c:	2b00      	cmp	r3, #0
 800312e:	d007      	beq.n	8003140 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800313a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800313e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a37      	ldr	r2, [pc, #220]	@ (8003224 <HAL_DMA_Start_IT+0x474>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d04a      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a36      	ldr	r2, [pc, #216]	@ (8003228 <HAL_DMA_Start_IT+0x478>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d045      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a34      	ldr	r2, [pc, #208]	@ (800322c <HAL_DMA_Start_IT+0x47c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d040      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a33      	ldr	r2, [pc, #204]	@ (8003230 <HAL_DMA_Start_IT+0x480>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d03b      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a31      	ldr	r2, [pc, #196]	@ (8003234 <HAL_DMA_Start_IT+0x484>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d036      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a30      	ldr	r2, [pc, #192]	@ (8003238 <HAL_DMA_Start_IT+0x488>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d031      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a2e      	ldr	r2, [pc, #184]	@ (800323c <HAL_DMA_Start_IT+0x48c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d02c      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a2d      	ldr	r2, [pc, #180]	@ (8003240 <HAL_DMA_Start_IT+0x490>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d027      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a2b      	ldr	r2, [pc, #172]	@ (8003244 <HAL_DMA_Start_IT+0x494>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d022      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a2a      	ldr	r2, [pc, #168]	@ (8003248 <HAL_DMA_Start_IT+0x498>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d01d      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a28      	ldr	r2, [pc, #160]	@ (800324c <HAL_DMA_Start_IT+0x49c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d018      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a27      	ldr	r2, [pc, #156]	@ (8003250 <HAL_DMA_Start_IT+0x4a0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d013      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a25      	ldr	r2, [pc, #148]	@ (8003254 <HAL_DMA_Start_IT+0x4a4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00e      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a24      	ldr	r2, [pc, #144]	@ (8003258 <HAL_DMA_Start_IT+0x4a8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d009      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a22      	ldr	r2, [pc, #136]	@ (800325c <HAL_DMA_Start_IT+0x4ac>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d004      	beq.n	80031e0 <HAL_DMA_Start_IT+0x430>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a21      	ldr	r2, [pc, #132]	@ (8003260 <HAL_DMA_Start_IT+0x4b0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d108      	bne.n	80031f2 <HAL_DMA_Start_IT+0x442>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	e012      	b.n	8003218 <HAL_DMA_Start_IT+0x468>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0201 	orr.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	e009      	b.n	8003218 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800320a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003218:	7dfb      	ldrb	r3, [r7, #23]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40020010 	.word	0x40020010
 8003228:	40020028 	.word	0x40020028
 800322c:	40020040 	.word	0x40020040
 8003230:	40020058 	.word	0x40020058
 8003234:	40020070 	.word	0x40020070
 8003238:	40020088 	.word	0x40020088
 800323c:	400200a0 	.word	0x400200a0
 8003240:	400200b8 	.word	0x400200b8
 8003244:	40020410 	.word	0x40020410
 8003248:	40020428 	.word	0x40020428
 800324c:	40020440 	.word	0x40020440
 8003250:	40020458 	.word	0x40020458
 8003254:	40020470 	.word	0x40020470
 8003258:	40020488 	.word	0x40020488
 800325c:	400204a0 	.word	0x400204a0
 8003260:	400204b8 	.word	0x400204b8
 8003264:	58025408 	.word	0x58025408
 8003268:	5802541c 	.word	0x5802541c
 800326c:	58025430 	.word	0x58025430
 8003270:	58025444 	.word	0x58025444
 8003274:	58025458 	.word	0x58025458
 8003278:	5802546c 	.word	0x5802546c
 800327c:	58025480 	.word	0x58025480
 8003280:	58025494 	.word	0x58025494

08003284 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08a      	sub	sp, #40	@ 0x28
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003290:	4b67      	ldr	r3, [pc, #412]	@ (8003430 <HAL_DMA_IRQHandler+0x1ac>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a67      	ldr	r2, [pc, #412]	@ (8003434 <HAL_DMA_IRQHandler+0x1b0>)
 8003296:	fba2 2303 	umull	r2, r3, r2, r3
 800329a:	0a9b      	lsrs	r3, r3, #10
 800329c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a5f      	ldr	r2, [pc, #380]	@ (8003438 <HAL_DMA_IRQHandler+0x1b4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d04a      	beq.n	8003356 <HAL_DMA_IRQHandler+0xd2>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a5d      	ldr	r2, [pc, #372]	@ (800343c <HAL_DMA_IRQHandler+0x1b8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d045      	beq.n	8003356 <HAL_DMA_IRQHandler+0xd2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a5c      	ldr	r2, [pc, #368]	@ (8003440 <HAL_DMA_IRQHandler+0x1bc>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d040      	beq.n	8003356 <HAL_DMA_IRQHandler+0xd2>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a5a      	ldr	r2, [pc, #360]	@ (8003444 <HAL_DMA_IRQHandler+0x1c0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d03b      	beq.n	8003356 <HAL_DMA_IRQHandler+0xd2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a59      	ldr	r2, [pc, #356]	@ (8003448 <HAL_DMA_IRQHandler+0x1c4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d036      	beq.n	8003356 <HAL_DMA_IRQHandler+0xd2>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a57      	ldr	r2, [pc, #348]	@ (800344c <HAL_DMA_IRQHandler+0x1c8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d031      	beq.n	8003356 <HAL_DMA_IRQHandler+0xd2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a56      	ldr	r2, [pc, #344]	@ (8003450 <HAL_DMA_IRQHandler+0x1cc>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d02c      	beq.n	8003356 <HAL_DMA_IRQHandler+0xd2>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a54      	ldr	r2, [pc, #336]	@ (8003454 <HAL_DMA_IRQHandler+0x1d0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d027      	beq.n	8003356 <HAL_DMA_IRQHandler+0xd2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a53      	ldr	r2, [pc, #332]	@ (8003458 <HAL_DMA_IRQHandler+0x1d4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d022      	beq.n	8003356 <HAL_DMA_IRQHandler+0xd2>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a51      	ldr	r2, [pc, #324]	@ (800345c <HAL_DMA_IRQHandler+0x1d8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d01d      	beq.n	8003356 <HAL_DMA_IRQHandler+0xd2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a50      	ldr	r2, [pc, #320]	@ (8003460 <HAL_DMA_IRQHandler+0x1dc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d018      	beq.n	8003356 <HAL_DMA_IRQHandler+0xd2>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a4e      	ldr	r2, [pc, #312]	@ (8003464 <HAL_DMA_IRQHandler+0x1e0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d013      	beq.n	8003356 <HAL_DMA_IRQHandler+0xd2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a4d      	ldr	r2, [pc, #308]	@ (8003468 <HAL_DMA_IRQHandler+0x1e4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d00e      	beq.n	8003356 <HAL_DMA_IRQHandler+0xd2>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a4b      	ldr	r2, [pc, #300]	@ (800346c <HAL_DMA_IRQHandler+0x1e8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d009      	beq.n	8003356 <HAL_DMA_IRQHandler+0xd2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a4a      	ldr	r2, [pc, #296]	@ (8003470 <HAL_DMA_IRQHandler+0x1ec>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d004      	beq.n	8003356 <HAL_DMA_IRQHandler+0xd2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a48      	ldr	r2, [pc, #288]	@ (8003474 <HAL_DMA_IRQHandler+0x1f0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d101      	bne.n	800335a <HAL_DMA_IRQHandler+0xd6>
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_DMA_IRQHandler+0xd8>
 800335a:	2300      	movs	r3, #0
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 842b 	beq.w	8003bb8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003366:	f003 031f 	and.w	r3, r3, #31
 800336a:	2208      	movs	r2, #8
 800336c:	409a      	lsls	r2, r3
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80a2 	beq.w	80034bc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a2e      	ldr	r2, [pc, #184]	@ (8003438 <HAL_DMA_IRQHandler+0x1b4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d04a      	beq.n	8003418 <HAL_DMA_IRQHandler+0x194>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a2d      	ldr	r2, [pc, #180]	@ (800343c <HAL_DMA_IRQHandler+0x1b8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d045      	beq.n	8003418 <HAL_DMA_IRQHandler+0x194>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a2b      	ldr	r2, [pc, #172]	@ (8003440 <HAL_DMA_IRQHandler+0x1bc>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d040      	beq.n	8003418 <HAL_DMA_IRQHandler+0x194>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a2a      	ldr	r2, [pc, #168]	@ (8003444 <HAL_DMA_IRQHandler+0x1c0>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d03b      	beq.n	8003418 <HAL_DMA_IRQHandler+0x194>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a28      	ldr	r2, [pc, #160]	@ (8003448 <HAL_DMA_IRQHandler+0x1c4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d036      	beq.n	8003418 <HAL_DMA_IRQHandler+0x194>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a27      	ldr	r2, [pc, #156]	@ (800344c <HAL_DMA_IRQHandler+0x1c8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d031      	beq.n	8003418 <HAL_DMA_IRQHandler+0x194>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a25      	ldr	r2, [pc, #148]	@ (8003450 <HAL_DMA_IRQHandler+0x1cc>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d02c      	beq.n	8003418 <HAL_DMA_IRQHandler+0x194>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a24      	ldr	r2, [pc, #144]	@ (8003454 <HAL_DMA_IRQHandler+0x1d0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d027      	beq.n	8003418 <HAL_DMA_IRQHandler+0x194>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a22      	ldr	r2, [pc, #136]	@ (8003458 <HAL_DMA_IRQHandler+0x1d4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d022      	beq.n	8003418 <HAL_DMA_IRQHandler+0x194>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a21      	ldr	r2, [pc, #132]	@ (800345c <HAL_DMA_IRQHandler+0x1d8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d01d      	beq.n	8003418 <HAL_DMA_IRQHandler+0x194>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003460 <HAL_DMA_IRQHandler+0x1dc>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d018      	beq.n	8003418 <HAL_DMA_IRQHandler+0x194>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003464 <HAL_DMA_IRQHandler+0x1e0>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d013      	beq.n	8003418 <HAL_DMA_IRQHandler+0x194>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003468 <HAL_DMA_IRQHandler+0x1e4>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d00e      	beq.n	8003418 <HAL_DMA_IRQHandler+0x194>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1b      	ldr	r2, [pc, #108]	@ (800346c <HAL_DMA_IRQHandler+0x1e8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d009      	beq.n	8003418 <HAL_DMA_IRQHandler+0x194>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a19      	ldr	r2, [pc, #100]	@ (8003470 <HAL_DMA_IRQHandler+0x1ec>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d004      	beq.n	8003418 <HAL_DMA_IRQHandler+0x194>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a18      	ldr	r2, [pc, #96]	@ (8003474 <HAL_DMA_IRQHandler+0x1f0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d12f      	bne.n	8003478 <HAL_DMA_IRQHandler+0x1f4>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b00      	cmp	r3, #0
 8003424:	bf14      	ite	ne
 8003426:	2301      	movne	r3, #1
 8003428:	2300      	moveq	r3, #0
 800342a:	b2db      	uxtb	r3, r3
 800342c:	e02e      	b.n	800348c <HAL_DMA_IRQHandler+0x208>
 800342e:	bf00      	nop
 8003430:	24000000 	.word	0x24000000
 8003434:	1b4e81b5 	.word	0x1b4e81b5
 8003438:	40020010 	.word	0x40020010
 800343c:	40020028 	.word	0x40020028
 8003440:	40020040 	.word	0x40020040
 8003444:	40020058 	.word	0x40020058
 8003448:	40020070 	.word	0x40020070
 800344c:	40020088 	.word	0x40020088
 8003450:	400200a0 	.word	0x400200a0
 8003454:	400200b8 	.word	0x400200b8
 8003458:	40020410 	.word	0x40020410
 800345c:	40020428 	.word	0x40020428
 8003460:	40020440 	.word	0x40020440
 8003464:	40020458 	.word	0x40020458
 8003468:	40020470 	.word	0x40020470
 800346c:	40020488 	.word	0x40020488
 8003470:	400204a0 	.word	0x400204a0
 8003474:	400204b8 	.word	0x400204b8
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	bf14      	ite	ne
 8003486:	2301      	movne	r3, #1
 8003488:	2300      	moveq	r3, #0
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d015      	beq.n	80034bc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0204 	bic.w	r2, r2, #4
 800349e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a4:	f003 031f 	and.w	r3, r3, #31
 80034a8:	2208      	movs	r2, #8
 80034aa:	409a      	lsls	r2, r3
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b4:	f043 0201 	orr.w	r2, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d06e      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a69      	ldr	r2, [pc, #420]	@ (800367c <HAL_DMA_IRQHandler+0x3f8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d04a      	beq.n	8003572 <HAL_DMA_IRQHandler+0x2ee>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a67      	ldr	r2, [pc, #412]	@ (8003680 <HAL_DMA_IRQHandler+0x3fc>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d045      	beq.n	8003572 <HAL_DMA_IRQHandler+0x2ee>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a66      	ldr	r2, [pc, #408]	@ (8003684 <HAL_DMA_IRQHandler+0x400>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d040      	beq.n	8003572 <HAL_DMA_IRQHandler+0x2ee>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a64      	ldr	r2, [pc, #400]	@ (8003688 <HAL_DMA_IRQHandler+0x404>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d03b      	beq.n	8003572 <HAL_DMA_IRQHandler+0x2ee>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a63      	ldr	r2, [pc, #396]	@ (800368c <HAL_DMA_IRQHandler+0x408>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d036      	beq.n	8003572 <HAL_DMA_IRQHandler+0x2ee>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a61      	ldr	r2, [pc, #388]	@ (8003690 <HAL_DMA_IRQHandler+0x40c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d031      	beq.n	8003572 <HAL_DMA_IRQHandler+0x2ee>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a60      	ldr	r2, [pc, #384]	@ (8003694 <HAL_DMA_IRQHandler+0x410>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d02c      	beq.n	8003572 <HAL_DMA_IRQHandler+0x2ee>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a5e      	ldr	r2, [pc, #376]	@ (8003698 <HAL_DMA_IRQHandler+0x414>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d027      	beq.n	8003572 <HAL_DMA_IRQHandler+0x2ee>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a5d      	ldr	r2, [pc, #372]	@ (800369c <HAL_DMA_IRQHandler+0x418>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d022      	beq.n	8003572 <HAL_DMA_IRQHandler+0x2ee>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a5b      	ldr	r2, [pc, #364]	@ (80036a0 <HAL_DMA_IRQHandler+0x41c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d01d      	beq.n	8003572 <HAL_DMA_IRQHandler+0x2ee>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a5a      	ldr	r2, [pc, #360]	@ (80036a4 <HAL_DMA_IRQHandler+0x420>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d018      	beq.n	8003572 <HAL_DMA_IRQHandler+0x2ee>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a58      	ldr	r2, [pc, #352]	@ (80036a8 <HAL_DMA_IRQHandler+0x424>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d013      	beq.n	8003572 <HAL_DMA_IRQHandler+0x2ee>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a57      	ldr	r2, [pc, #348]	@ (80036ac <HAL_DMA_IRQHandler+0x428>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d00e      	beq.n	8003572 <HAL_DMA_IRQHandler+0x2ee>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a55      	ldr	r2, [pc, #340]	@ (80036b0 <HAL_DMA_IRQHandler+0x42c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d009      	beq.n	8003572 <HAL_DMA_IRQHandler+0x2ee>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a54      	ldr	r2, [pc, #336]	@ (80036b4 <HAL_DMA_IRQHandler+0x430>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d004      	beq.n	8003572 <HAL_DMA_IRQHandler+0x2ee>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a52      	ldr	r2, [pc, #328]	@ (80036b8 <HAL_DMA_IRQHandler+0x434>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d10a      	bne.n	8003588 <HAL_DMA_IRQHandler+0x304>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf14      	ite	ne
 8003580:	2301      	movne	r3, #1
 8003582:	2300      	moveq	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	e003      	b.n	8003590 <HAL_DMA_IRQHandler+0x30c>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2300      	movs	r3, #0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00d      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003598:	f003 031f 	and.w	r3, r3, #31
 800359c:	2201      	movs	r2, #1
 800359e:	409a      	lsls	r2, r3
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a8:	f043 0202 	orr.w	r2, r3, #2
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	2204      	movs	r2, #4
 80035ba:	409a      	lsls	r2, r3
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	4013      	ands	r3, r2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 808f 	beq.w	80036e4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a2c      	ldr	r2, [pc, #176]	@ (800367c <HAL_DMA_IRQHandler+0x3f8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d04a      	beq.n	8003666 <HAL_DMA_IRQHandler+0x3e2>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003680 <HAL_DMA_IRQHandler+0x3fc>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d045      	beq.n	8003666 <HAL_DMA_IRQHandler+0x3e2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a29      	ldr	r2, [pc, #164]	@ (8003684 <HAL_DMA_IRQHandler+0x400>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d040      	beq.n	8003666 <HAL_DMA_IRQHandler+0x3e2>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a27      	ldr	r2, [pc, #156]	@ (8003688 <HAL_DMA_IRQHandler+0x404>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d03b      	beq.n	8003666 <HAL_DMA_IRQHandler+0x3e2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a26      	ldr	r2, [pc, #152]	@ (800368c <HAL_DMA_IRQHandler+0x408>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d036      	beq.n	8003666 <HAL_DMA_IRQHandler+0x3e2>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a24      	ldr	r2, [pc, #144]	@ (8003690 <HAL_DMA_IRQHandler+0x40c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d031      	beq.n	8003666 <HAL_DMA_IRQHandler+0x3e2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a23      	ldr	r2, [pc, #140]	@ (8003694 <HAL_DMA_IRQHandler+0x410>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d02c      	beq.n	8003666 <HAL_DMA_IRQHandler+0x3e2>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a21      	ldr	r2, [pc, #132]	@ (8003698 <HAL_DMA_IRQHandler+0x414>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d027      	beq.n	8003666 <HAL_DMA_IRQHandler+0x3e2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a20      	ldr	r2, [pc, #128]	@ (800369c <HAL_DMA_IRQHandler+0x418>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d022      	beq.n	8003666 <HAL_DMA_IRQHandler+0x3e2>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a1e      	ldr	r2, [pc, #120]	@ (80036a0 <HAL_DMA_IRQHandler+0x41c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d01d      	beq.n	8003666 <HAL_DMA_IRQHandler+0x3e2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a1d      	ldr	r2, [pc, #116]	@ (80036a4 <HAL_DMA_IRQHandler+0x420>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d018      	beq.n	8003666 <HAL_DMA_IRQHandler+0x3e2>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a1b      	ldr	r2, [pc, #108]	@ (80036a8 <HAL_DMA_IRQHandler+0x424>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d013      	beq.n	8003666 <HAL_DMA_IRQHandler+0x3e2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a1a      	ldr	r2, [pc, #104]	@ (80036ac <HAL_DMA_IRQHandler+0x428>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d00e      	beq.n	8003666 <HAL_DMA_IRQHandler+0x3e2>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a18      	ldr	r2, [pc, #96]	@ (80036b0 <HAL_DMA_IRQHandler+0x42c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d009      	beq.n	8003666 <HAL_DMA_IRQHandler+0x3e2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a17      	ldr	r2, [pc, #92]	@ (80036b4 <HAL_DMA_IRQHandler+0x430>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d004      	beq.n	8003666 <HAL_DMA_IRQHandler+0x3e2>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a15      	ldr	r2, [pc, #84]	@ (80036b8 <HAL_DMA_IRQHandler+0x434>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d12a      	bne.n	80036bc <HAL_DMA_IRQHandler+0x438>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf14      	ite	ne
 8003674:	2301      	movne	r3, #1
 8003676:	2300      	moveq	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	e023      	b.n	80036c4 <HAL_DMA_IRQHandler+0x440>
 800367c:	40020010 	.word	0x40020010
 8003680:	40020028 	.word	0x40020028
 8003684:	40020040 	.word	0x40020040
 8003688:	40020058 	.word	0x40020058
 800368c:	40020070 	.word	0x40020070
 8003690:	40020088 	.word	0x40020088
 8003694:	400200a0 	.word	0x400200a0
 8003698:	400200b8 	.word	0x400200b8
 800369c:	40020410 	.word	0x40020410
 80036a0:	40020428 	.word	0x40020428
 80036a4:	40020440 	.word	0x40020440
 80036a8:	40020458 	.word	0x40020458
 80036ac:	40020470 	.word	0x40020470
 80036b0:	40020488 	.word	0x40020488
 80036b4:	400204a0 	.word	0x400204a0
 80036b8:	400204b8 	.word	0x400204b8
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2300      	movs	r3, #0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00d      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036cc:	f003 031f 	and.w	r3, r3, #31
 80036d0:	2204      	movs	r2, #4
 80036d2:	409a      	lsls	r2, r3
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036dc:	f043 0204 	orr.w	r2, r3, #4
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e8:	f003 031f 	and.w	r3, r3, #31
 80036ec:	2210      	movs	r2, #16
 80036ee:	409a      	lsls	r2, r3
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 80a6 	beq.w	8003846 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a85      	ldr	r2, [pc, #532]	@ (8003914 <HAL_DMA_IRQHandler+0x690>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d04a      	beq.n	800379a <HAL_DMA_IRQHandler+0x516>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a83      	ldr	r2, [pc, #524]	@ (8003918 <HAL_DMA_IRQHandler+0x694>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d045      	beq.n	800379a <HAL_DMA_IRQHandler+0x516>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a82      	ldr	r2, [pc, #520]	@ (800391c <HAL_DMA_IRQHandler+0x698>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d040      	beq.n	800379a <HAL_DMA_IRQHandler+0x516>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a80      	ldr	r2, [pc, #512]	@ (8003920 <HAL_DMA_IRQHandler+0x69c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d03b      	beq.n	800379a <HAL_DMA_IRQHandler+0x516>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a7f      	ldr	r2, [pc, #508]	@ (8003924 <HAL_DMA_IRQHandler+0x6a0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d036      	beq.n	800379a <HAL_DMA_IRQHandler+0x516>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a7d      	ldr	r2, [pc, #500]	@ (8003928 <HAL_DMA_IRQHandler+0x6a4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d031      	beq.n	800379a <HAL_DMA_IRQHandler+0x516>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a7c      	ldr	r2, [pc, #496]	@ (800392c <HAL_DMA_IRQHandler+0x6a8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d02c      	beq.n	800379a <HAL_DMA_IRQHandler+0x516>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a7a      	ldr	r2, [pc, #488]	@ (8003930 <HAL_DMA_IRQHandler+0x6ac>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d027      	beq.n	800379a <HAL_DMA_IRQHandler+0x516>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a79      	ldr	r2, [pc, #484]	@ (8003934 <HAL_DMA_IRQHandler+0x6b0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d022      	beq.n	800379a <HAL_DMA_IRQHandler+0x516>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a77      	ldr	r2, [pc, #476]	@ (8003938 <HAL_DMA_IRQHandler+0x6b4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d01d      	beq.n	800379a <HAL_DMA_IRQHandler+0x516>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a76      	ldr	r2, [pc, #472]	@ (800393c <HAL_DMA_IRQHandler+0x6b8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d018      	beq.n	800379a <HAL_DMA_IRQHandler+0x516>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a74      	ldr	r2, [pc, #464]	@ (8003940 <HAL_DMA_IRQHandler+0x6bc>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d013      	beq.n	800379a <HAL_DMA_IRQHandler+0x516>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a73      	ldr	r2, [pc, #460]	@ (8003944 <HAL_DMA_IRQHandler+0x6c0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00e      	beq.n	800379a <HAL_DMA_IRQHandler+0x516>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a71      	ldr	r2, [pc, #452]	@ (8003948 <HAL_DMA_IRQHandler+0x6c4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d009      	beq.n	800379a <HAL_DMA_IRQHandler+0x516>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a70      	ldr	r2, [pc, #448]	@ (800394c <HAL_DMA_IRQHandler+0x6c8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d004      	beq.n	800379a <HAL_DMA_IRQHandler+0x516>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a6e      	ldr	r2, [pc, #440]	@ (8003950 <HAL_DMA_IRQHandler+0x6cc>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d10a      	bne.n	80037b0 <HAL_DMA_IRQHandler+0x52c>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	bf14      	ite	ne
 80037a8:	2301      	movne	r3, #1
 80037aa:	2300      	moveq	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	e009      	b.n	80037c4 <HAL_DMA_IRQHandler+0x540>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0304 	and.w	r3, r3, #4
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	bf14      	ite	ne
 80037be:	2301      	movne	r3, #1
 80037c0:	2300      	moveq	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d03e      	beq.n	8003846 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037cc:	f003 031f 	and.w	r3, r3, #31
 80037d0:	2210      	movs	r2, #16
 80037d2:	409a      	lsls	r2, r3
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d018      	beq.n	8003818 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d108      	bne.n	8003806 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d024      	beq.n	8003846 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	4798      	blx	r3
 8003804:	e01f      	b.n	8003846 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800380a:	2b00      	cmp	r3, #0
 800380c:	d01b      	beq.n	8003846 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	4798      	blx	r3
 8003816:	e016      	b.n	8003846 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003822:	2b00      	cmp	r3, #0
 8003824:	d107      	bne.n	8003836 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0208 	bic.w	r2, r2, #8
 8003834:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384a:	f003 031f 	and.w	r3, r3, #31
 800384e:	2220      	movs	r2, #32
 8003850:	409a      	lsls	r2, r3
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	4013      	ands	r3, r2
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 8110 	beq.w	8003a7c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a2c      	ldr	r2, [pc, #176]	@ (8003914 <HAL_DMA_IRQHandler+0x690>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d04a      	beq.n	80038fc <HAL_DMA_IRQHandler+0x678>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a2b      	ldr	r2, [pc, #172]	@ (8003918 <HAL_DMA_IRQHandler+0x694>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d045      	beq.n	80038fc <HAL_DMA_IRQHandler+0x678>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a29      	ldr	r2, [pc, #164]	@ (800391c <HAL_DMA_IRQHandler+0x698>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d040      	beq.n	80038fc <HAL_DMA_IRQHandler+0x678>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a28      	ldr	r2, [pc, #160]	@ (8003920 <HAL_DMA_IRQHandler+0x69c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d03b      	beq.n	80038fc <HAL_DMA_IRQHandler+0x678>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a26      	ldr	r2, [pc, #152]	@ (8003924 <HAL_DMA_IRQHandler+0x6a0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d036      	beq.n	80038fc <HAL_DMA_IRQHandler+0x678>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a25      	ldr	r2, [pc, #148]	@ (8003928 <HAL_DMA_IRQHandler+0x6a4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d031      	beq.n	80038fc <HAL_DMA_IRQHandler+0x678>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a23      	ldr	r2, [pc, #140]	@ (800392c <HAL_DMA_IRQHandler+0x6a8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d02c      	beq.n	80038fc <HAL_DMA_IRQHandler+0x678>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a22      	ldr	r2, [pc, #136]	@ (8003930 <HAL_DMA_IRQHandler+0x6ac>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d027      	beq.n	80038fc <HAL_DMA_IRQHandler+0x678>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a20      	ldr	r2, [pc, #128]	@ (8003934 <HAL_DMA_IRQHandler+0x6b0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d022      	beq.n	80038fc <HAL_DMA_IRQHandler+0x678>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003938 <HAL_DMA_IRQHandler+0x6b4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d01d      	beq.n	80038fc <HAL_DMA_IRQHandler+0x678>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a1d      	ldr	r2, [pc, #116]	@ (800393c <HAL_DMA_IRQHandler+0x6b8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d018      	beq.n	80038fc <HAL_DMA_IRQHandler+0x678>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003940 <HAL_DMA_IRQHandler+0x6bc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d013      	beq.n	80038fc <HAL_DMA_IRQHandler+0x678>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003944 <HAL_DMA_IRQHandler+0x6c0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00e      	beq.n	80038fc <HAL_DMA_IRQHandler+0x678>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a19      	ldr	r2, [pc, #100]	@ (8003948 <HAL_DMA_IRQHandler+0x6c4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d009      	beq.n	80038fc <HAL_DMA_IRQHandler+0x678>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a17      	ldr	r2, [pc, #92]	@ (800394c <HAL_DMA_IRQHandler+0x6c8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d004      	beq.n	80038fc <HAL_DMA_IRQHandler+0x678>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a16      	ldr	r2, [pc, #88]	@ (8003950 <HAL_DMA_IRQHandler+0x6cc>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d12b      	bne.n	8003954 <HAL_DMA_IRQHandler+0x6d0>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	2b00      	cmp	r3, #0
 8003908:	bf14      	ite	ne
 800390a:	2301      	movne	r3, #1
 800390c:	2300      	moveq	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	e02a      	b.n	8003968 <HAL_DMA_IRQHandler+0x6e4>
 8003912:	bf00      	nop
 8003914:	40020010 	.word	0x40020010
 8003918:	40020028 	.word	0x40020028
 800391c:	40020040 	.word	0x40020040
 8003920:	40020058 	.word	0x40020058
 8003924:	40020070 	.word	0x40020070
 8003928:	40020088 	.word	0x40020088
 800392c:	400200a0 	.word	0x400200a0
 8003930:	400200b8 	.word	0x400200b8
 8003934:	40020410 	.word	0x40020410
 8003938:	40020428 	.word	0x40020428
 800393c:	40020440 	.word	0x40020440
 8003940:	40020458 	.word	0x40020458
 8003944:	40020470 	.word	0x40020470
 8003948:	40020488 	.word	0x40020488
 800394c:	400204a0 	.word	0x400204a0
 8003950:	400204b8 	.word	0x400204b8
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	bf14      	ite	ne
 8003962:	2301      	movne	r3, #1
 8003964:	2300      	moveq	r3, #0
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 8087 	beq.w	8003a7c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003972:	f003 031f 	and.w	r3, r3, #31
 8003976:	2220      	movs	r2, #32
 8003978:	409a      	lsls	r2, r3
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b04      	cmp	r3, #4
 8003988:	d139      	bne.n	80039fe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0216 	bic.w	r2, r2, #22
 8003998:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695a      	ldr	r2, [r3, #20]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039a8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d103      	bne.n	80039ba <HAL_DMA_IRQHandler+0x736>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d007      	beq.n	80039ca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0208 	bic.w	r2, r2, #8
 80039c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ce:	f003 031f 	and.w	r3, r3, #31
 80039d2:	223f      	movs	r2, #63	@ 0x3f
 80039d4:	409a      	lsls	r2, r3
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 834a 	beq.w	8004088 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	4798      	blx	r3
          }
          return;
 80039fc:	e344      	b.n	8004088 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d018      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d108      	bne.n	8003a2c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d02c      	beq.n	8003a7c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	4798      	blx	r3
 8003a2a:	e027      	b.n	8003a7c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d023      	beq.n	8003a7c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	4798      	blx	r3
 8003a3c:	e01e      	b.n	8003a7c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10f      	bne.n	8003a6c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0210 	bic.w	r2, r2, #16
 8003a5a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 8306 	beq.w	8004092 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 8088 	beq.w	8003ba4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2204      	movs	r2, #4
 8003a98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a7a      	ldr	r2, [pc, #488]	@ (8003c8c <HAL_DMA_IRQHandler+0xa08>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d04a      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x8b8>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a79      	ldr	r2, [pc, #484]	@ (8003c90 <HAL_DMA_IRQHandler+0xa0c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d045      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x8b8>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a77      	ldr	r2, [pc, #476]	@ (8003c94 <HAL_DMA_IRQHandler+0xa10>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d040      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x8b8>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a76      	ldr	r2, [pc, #472]	@ (8003c98 <HAL_DMA_IRQHandler+0xa14>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d03b      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x8b8>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a74      	ldr	r2, [pc, #464]	@ (8003c9c <HAL_DMA_IRQHandler+0xa18>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d036      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x8b8>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a73      	ldr	r2, [pc, #460]	@ (8003ca0 <HAL_DMA_IRQHandler+0xa1c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d031      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x8b8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a71      	ldr	r2, [pc, #452]	@ (8003ca4 <HAL_DMA_IRQHandler+0xa20>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d02c      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x8b8>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a70      	ldr	r2, [pc, #448]	@ (8003ca8 <HAL_DMA_IRQHandler+0xa24>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d027      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x8b8>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a6e      	ldr	r2, [pc, #440]	@ (8003cac <HAL_DMA_IRQHandler+0xa28>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d022      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x8b8>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a6d      	ldr	r2, [pc, #436]	@ (8003cb0 <HAL_DMA_IRQHandler+0xa2c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d01d      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x8b8>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a6b      	ldr	r2, [pc, #428]	@ (8003cb4 <HAL_DMA_IRQHandler+0xa30>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d018      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x8b8>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a6a      	ldr	r2, [pc, #424]	@ (8003cb8 <HAL_DMA_IRQHandler+0xa34>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d013      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x8b8>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a68      	ldr	r2, [pc, #416]	@ (8003cbc <HAL_DMA_IRQHandler+0xa38>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00e      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x8b8>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a67      	ldr	r2, [pc, #412]	@ (8003cc0 <HAL_DMA_IRQHandler+0xa3c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d009      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x8b8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a65      	ldr	r2, [pc, #404]	@ (8003cc4 <HAL_DMA_IRQHandler+0xa40>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d004      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x8b8>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a64      	ldr	r2, [pc, #400]	@ (8003cc8 <HAL_DMA_IRQHandler+0xa44>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d108      	bne.n	8003b4e <HAL_DMA_IRQHandler+0x8ca>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	e007      	b.n	8003b5e <HAL_DMA_IRQHandler+0x8da>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0201 	bic.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3301      	adds	r3, #1
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d307      	bcc.n	8003b7a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1f2      	bne.n	8003b5e <HAL_DMA_IRQHandler+0x8da>
 8003b78:	e000      	b.n	8003b7c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003b7a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d004      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2203      	movs	r2, #3
 8003b8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003b92:	e003      	b.n	8003b9c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 8272 	beq.w	8004092 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	4798      	blx	r3
 8003bb6:	e26c      	b.n	8004092 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a43      	ldr	r2, [pc, #268]	@ (8003ccc <HAL_DMA_IRQHandler+0xa48>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d022      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x984>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a42      	ldr	r2, [pc, #264]	@ (8003cd0 <HAL_DMA_IRQHandler+0xa4c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d01d      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x984>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a40      	ldr	r2, [pc, #256]	@ (8003cd4 <HAL_DMA_IRQHandler+0xa50>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d018      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x984>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a3f      	ldr	r2, [pc, #252]	@ (8003cd8 <HAL_DMA_IRQHandler+0xa54>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d013      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x984>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a3d      	ldr	r2, [pc, #244]	@ (8003cdc <HAL_DMA_IRQHandler+0xa58>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00e      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x984>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a3c      	ldr	r2, [pc, #240]	@ (8003ce0 <HAL_DMA_IRQHandler+0xa5c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d009      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x984>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a3a      	ldr	r2, [pc, #232]	@ (8003ce4 <HAL_DMA_IRQHandler+0xa60>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d004      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x984>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a39      	ldr	r2, [pc, #228]	@ (8003ce8 <HAL_DMA_IRQHandler+0xa64>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d101      	bne.n	8003c0c <HAL_DMA_IRQHandler+0x988>
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <HAL_DMA_IRQHandler+0x98a>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 823f 	beq.w	8004092 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	2204      	movs	r2, #4
 8003c26:	409a      	lsls	r2, r3
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 80cd 	beq.w	8003dcc <HAL_DMA_IRQHandler+0xb48>
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 80c7 	beq.w	8003dcc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c42:	f003 031f 	and.w	r3, r3, #31
 8003c46:	2204      	movs	r2, #4
 8003c48:	409a      	lsls	r2, r3
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d049      	beq.n	8003cec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 8210 	beq.w	800408c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c74:	e20a      	b.n	800408c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 8206 	beq.w	800408c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c88:	e200      	b.n	800408c <HAL_DMA_IRQHandler+0xe08>
 8003c8a:	bf00      	nop
 8003c8c:	40020010 	.word	0x40020010
 8003c90:	40020028 	.word	0x40020028
 8003c94:	40020040 	.word	0x40020040
 8003c98:	40020058 	.word	0x40020058
 8003c9c:	40020070 	.word	0x40020070
 8003ca0:	40020088 	.word	0x40020088
 8003ca4:	400200a0 	.word	0x400200a0
 8003ca8:	400200b8 	.word	0x400200b8
 8003cac:	40020410 	.word	0x40020410
 8003cb0:	40020428 	.word	0x40020428
 8003cb4:	40020440 	.word	0x40020440
 8003cb8:	40020458 	.word	0x40020458
 8003cbc:	40020470 	.word	0x40020470
 8003cc0:	40020488 	.word	0x40020488
 8003cc4:	400204a0 	.word	0x400204a0
 8003cc8:	400204b8 	.word	0x400204b8
 8003ccc:	58025408 	.word	0x58025408
 8003cd0:	5802541c 	.word	0x5802541c
 8003cd4:	58025430 	.word	0x58025430
 8003cd8:	58025444 	.word	0x58025444
 8003cdc:	58025458 	.word	0x58025458
 8003ce0:	5802546c 	.word	0x5802546c
 8003ce4:	58025480 	.word	0x58025480
 8003ce8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f003 0320 	and.w	r3, r3, #32
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d160      	bne.n	8003db8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a7f      	ldr	r2, [pc, #508]	@ (8003ef8 <HAL_DMA_IRQHandler+0xc74>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d04a      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xb12>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a7d      	ldr	r2, [pc, #500]	@ (8003efc <HAL_DMA_IRQHandler+0xc78>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d045      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xb12>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a7c      	ldr	r2, [pc, #496]	@ (8003f00 <HAL_DMA_IRQHandler+0xc7c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d040      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xb12>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a7a      	ldr	r2, [pc, #488]	@ (8003f04 <HAL_DMA_IRQHandler+0xc80>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d03b      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xb12>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a79      	ldr	r2, [pc, #484]	@ (8003f08 <HAL_DMA_IRQHandler+0xc84>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d036      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xb12>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a77      	ldr	r2, [pc, #476]	@ (8003f0c <HAL_DMA_IRQHandler+0xc88>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d031      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xb12>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a76      	ldr	r2, [pc, #472]	@ (8003f10 <HAL_DMA_IRQHandler+0xc8c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d02c      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xb12>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a74      	ldr	r2, [pc, #464]	@ (8003f14 <HAL_DMA_IRQHandler+0xc90>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d027      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xb12>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a73      	ldr	r2, [pc, #460]	@ (8003f18 <HAL_DMA_IRQHandler+0xc94>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d022      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xb12>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a71      	ldr	r2, [pc, #452]	@ (8003f1c <HAL_DMA_IRQHandler+0xc98>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d01d      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xb12>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a70      	ldr	r2, [pc, #448]	@ (8003f20 <HAL_DMA_IRQHandler+0xc9c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d018      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xb12>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a6e      	ldr	r2, [pc, #440]	@ (8003f24 <HAL_DMA_IRQHandler+0xca0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d013      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xb12>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a6d      	ldr	r2, [pc, #436]	@ (8003f28 <HAL_DMA_IRQHandler+0xca4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00e      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xb12>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a6b      	ldr	r2, [pc, #428]	@ (8003f2c <HAL_DMA_IRQHandler+0xca8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d009      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xb12>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a6a      	ldr	r2, [pc, #424]	@ (8003f30 <HAL_DMA_IRQHandler+0xcac>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d004      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xb12>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a68      	ldr	r2, [pc, #416]	@ (8003f34 <HAL_DMA_IRQHandler+0xcb0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d108      	bne.n	8003da8 <HAL_DMA_IRQHandler+0xb24>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0208 	bic.w	r2, r2, #8
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	e007      	b.n	8003db8 <HAL_DMA_IRQHandler+0xb34>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0204 	bic.w	r2, r2, #4
 8003db6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 8165 	beq.w	800408c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dca:	e15f      	b.n	800408c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80c5 	beq.w	8003f6c <HAL_DMA_IRQHandler+0xce8>
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80bf 	beq.w	8003f6c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df2:	f003 031f 	and.w	r3, r3, #31
 8003df6:	2202      	movs	r2, #2
 8003df8:	409a      	lsls	r2, r3
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d018      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d109      	bne.n	8003e26 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 813a 	beq.w	8004090 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e24:	e134      	b.n	8004090 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 8130 	beq.w	8004090 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e38:	e12a      	b.n	8004090 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f003 0320 	and.w	r3, r3, #32
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f040 8089 	bne.w	8003f58 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ef8 <HAL_DMA_IRQHandler+0xc74>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d04a      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0xc62>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a29      	ldr	r2, [pc, #164]	@ (8003efc <HAL_DMA_IRQHandler+0xc78>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d045      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0xc62>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a28      	ldr	r2, [pc, #160]	@ (8003f00 <HAL_DMA_IRQHandler+0xc7c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d040      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0xc62>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a26      	ldr	r2, [pc, #152]	@ (8003f04 <HAL_DMA_IRQHandler+0xc80>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d03b      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0xc62>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a25      	ldr	r2, [pc, #148]	@ (8003f08 <HAL_DMA_IRQHandler+0xc84>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d036      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0xc62>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a23      	ldr	r2, [pc, #140]	@ (8003f0c <HAL_DMA_IRQHandler+0xc88>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d031      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0xc62>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a22      	ldr	r2, [pc, #136]	@ (8003f10 <HAL_DMA_IRQHandler+0xc8c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d02c      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0xc62>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a20      	ldr	r2, [pc, #128]	@ (8003f14 <HAL_DMA_IRQHandler+0xc90>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d027      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0xc62>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003f18 <HAL_DMA_IRQHandler+0xc94>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d022      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0xc62>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f1c <HAL_DMA_IRQHandler+0xc98>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d01d      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0xc62>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1c      	ldr	r2, [pc, #112]	@ (8003f20 <HAL_DMA_IRQHandler+0xc9c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d018      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0xc62>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8003f24 <HAL_DMA_IRQHandler+0xca0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d013      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0xc62>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a19      	ldr	r2, [pc, #100]	@ (8003f28 <HAL_DMA_IRQHandler+0xca4>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00e      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0xc62>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a17      	ldr	r2, [pc, #92]	@ (8003f2c <HAL_DMA_IRQHandler+0xca8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d009      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0xc62>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a16      	ldr	r2, [pc, #88]	@ (8003f30 <HAL_DMA_IRQHandler+0xcac>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d004      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0xc62>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a14      	ldr	r2, [pc, #80]	@ (8003f34 <HAL_DMA_IRQHandler+0xcb0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d128      	bne.n	8003f38 <HAL_DMA_IRQHandler+0xcb4>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0214 	bic.w	r2, r2, #20
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	e027      	b.n	8003f48 <HAL_DMA_IRQHandler+0xcc4>
 8003ef8:	40020010 	.word	0x40020010
 8003efc:	40020028 	.word	0x40020028
 8003f00:	40020040 	.word	0x40020040
 8003f04:	40020058 	.word	0x40020058
 8003f08:	40020070 	.word	0x40020070
 8003f0c:	40020088 	.word	0x40020088
 8003f10:	400200a0 	.word	0x400200a0
 8003f14:	400200b8 	.word	0x400200b8
 8003f18:	40020410 	.word	0x40020410
 8003f1c:	40020428 	.word	0x40020428
 8003f20:	40020440 	.word	0x40020440
 8003f24:	40020458 	.word	0x40020458
 8003f28:	40020470 	.word	0x40020470
 8003f2c:	40020488 	.word	0x40020488
 8003f30:	400204a0 	.word	0x400204a0
 8003f34:	400204b8 	.word	0x400204b8
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 020a 	bic.w	r2, r2, #10
 8003f46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 8097 	beq.w	8004090 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f6a:	e091      	b.n	8004090 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	2208      	movs	r2, #8
 8003f76:	409a      	lsls	r2, r3
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8088 	beq.w	8004092 <HAL_DMA_IRQHandler+0xe0e>
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 8082 	beq.w	8004092 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a41      	ldr	r2, [pc, #260]	@ (8004098 <HAL_DMA_IRQHandler+0xe14>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d04a      	beq.n	800402e <HAL_DMA_IRQHandler+0xdaa>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a3f      	ldr	r2, [pc, #252]	@ (800409c <HAL_DMA_IRQHandler+0xe18>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d045      	beq.n	800402e <HAL_DMA_IRQHandler+0xdaa>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a3e      	ldr	r2, [pc, #248]	@ (80040a0 <HAL_DMA_IRQHandler+0xe1c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d040      	beq.n	800402e <HAL_DMA_IRQHandler+0xdaa>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a3c      	ldr	r2, [pc, #240]	@ (80040a4 <HAL_DMA_IRQHandler+0xe20>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d03b      	beq.n	800402e <HAL_DMA_IRQHandler+0xdaa>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a3b      	ldr	r2, [pc, #236]	@ (80040a8 <HAL_DMA_IRQHandler+0xe24>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d036      	beq.n	800402e <HAL_DMA_IRQHandler+0xdaa>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a39      	ldr	r2, [pc, #228]	@ (80040ac <HAL_DMA_IRQHandler+0xe28>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d031      	beq.n	800402e <HAL_DMA_IRQHandler+0xdaa>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a38      	ldr	r2, [pc, #224]	@ (80040b0 <HAL_DMA_IRQHandler+0xe2c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d02c      	beq.n	800402e <HAL_DMA_IRQHandler+0xdaa>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a36      	ldr	r2, [pc, #216]	@ (80040b4 <HAL_DMA_IRQHandler+0xe30>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d027      	beq.n	800402e <HAL_DMA_IRQHandler+0xdaa>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a35      	ldr	r2, [pc, #212]	@ (80040b8 <HAL_DMA_IRQHandler+0xe34>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d022      	beq.n	800402e <HAL_DMA_IRQHandler+0xdaa>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a33      	ldr	r2, [pc, #204]	@ (80040bc <HAL_DMA_IRQHandler+0xe38>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d01d      	beq.n	800402e <HAL_DMA_IRQHandler+0xdaa>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a32      	ldr	r2, [pc, #200]	@ (80040c0 <HAL_DMA_IRQHandler+0xe3c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d018      	beq.n	800402e <HAL_DMA_IRQHandler+0xdaa>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a30      	ldr	r2, [pc, #192]	@ (80040c4 <HAL_DMA_IRQHandler+0xe40>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <HAL_DMA_IRQHandler+0xdaa>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a2f      	ldr	r2, [pc, #188]	@ (80040c8 <HAL_DMA_IRQHandler+0xe44>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00e      	beq.n	800402e <HAL_DMA_IRQHandler+0xdaa>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a2d      	ldr	r2, [pc, #180]	@ (80040cc <HAL_DMA_IRQHandler+0xe48>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d009      	beq.n	800402e <HAL_DMA_IRQHandler+0xdaa>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a2c      	ldr	r2, [pc, #176]	@ (80040d0 <HAL_DMA_IRQHandler+0xe4c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d004      	beq.n	800402e <HAL_DMA_IRQHandler+0xdaa>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a2a      	ldr	r2, [pc, #168]	@ (80040d4 <HAL_DMA_IRQHandler+0xe50>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d108      	bne.n	8004040 <HAL_DMA_IRQHandler+0xdbc>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 021c 	bic.w	r2, r2, #28
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	e007      	b.n	8004050 <HAL_DMA_IRQHandler+0xdcc>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 020e 	bic.w	r2, r2, #14
 800404e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	2201      	movs	r2, #1
 800405a:	409a      	lsls	r2, r3
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800407a:	2b00      	cmp	r3, #0
 800407c:	d009      	beq.n	8004092 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	4798      	blx	r3
 8004086:	e004      	b.n	8004092 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004088:	bf00      	nop
 800408a:	e002      	b.n	8004092 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800408c:	bf00      	nop
 800408e:	e000      	b.n	8004092 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004090:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004092:	3728      	adds	r7, #40	@ 0x28
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40020010 	.word	0x40020010
 800409c:	40020028 	.word	0x40020028
 80040a0:	40020040 	.word	0x40020040
 80040a4:	40020058 	.word	0x40020058
 80040a8:	40020070 	.word	0x40020070
 80040ac:	40020088 	.word	0x40020088
 80040b0:	400200a0 	.word	0x400200a0
 80040b4:	400200b8 	.word	0x400200b8
 80040b8:	40020410 	.word	0x40020410
 80040bc:	40020428 	.word	0x40020428
 80040c0:	40020440 	.word	0x40020440
 80040c4:	40020458 	.word	0x40020458
 80040c8:	40020470 	.word	0x40020470
 80040cc:	40020488 	.word	0x40020488
 80040d0:	400204a0 	.word	0x400204a0
 80040d4:	400204b8 	.word	0x400204b8

080040d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a7f      	ldr	r2, [pc, #508]	@ (80042f4 <DMA_SetConfig+0x21c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d072      	beq.n	80041e2 <DMA_SetConfig+0x10a>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a7d      	ldr	r2, [pc, #500]	@ (80042f8 <DMA_SetConfig+0x220>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d06d      	beq.n	80041e2 <DMA_SetConfig+0x10a>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a7c      	ldr	r2, [pc, #496]	@ (80042fc <DMA_SetConfig+0x224>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d068      	beq.n	80041e2 <DMA_SetConfig+0x10a>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a7a      	ldr	r2, [pc, #488]	@ (8004300 <DMA_SetConfig+0x228>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d063      	beq.n	80041e2 <DMA_SetConfig+0x10a>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a79      	ldr	r2, [pc, #484]	@ (8004304 <DMA_SetConfig+0x22c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d05e      	beq.n	80041e2 <DMA_SetConfig+0x10a>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a77      	ldr	r2, [pc, #476]	@ (8004308 <DMA_SetConfig+0x230>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d059      	beq.n	80041e2 <DMA_SetConfig+0x10a>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a76      	ldr	r2, [pc, #472]	@ (800430c <DMA_SetConfig+0x234>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d054      	beq.n	80041e2 <DMA_SetConfig+0x10a>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a74      	ldr	r2, [pc, #464]	@ (8004310 <DMA_SetConfig+0x238>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d04f      	beq.n	80041e2 <DMA_SetConfig+0x10a>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a73      	ldr	r2, [pc, #460]	@ (8004314 <DMA_SetConfig+0x23c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d04a      	beq.n	80041e2 <DMA_SetConfig+0x10a>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a71      	ldr	r2, [pc, #452]	@ (8004318 <DMA_SetConfig+0x240>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d045      	beq.n	80041e2 <DMA_SetConfig+0x10a>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a70      	ldr	r2, [pc, #448]	@ (800431c <DMA_SetConfig+0x244>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d040      	beq.n	80041e2 <DMA_SetConfig+0x10a>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a6e      	ldr	r2, [pc, #440]	@ (8004320 <DMA_SetConfig+0x248>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d03b      	beq.n	80041e2 <DMA_SetConfig+0x10a>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a6d      	ldr	r2, [pc, #436]	@ (8004324 <DMA_SetConfig+0x24c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d036      	beq.n	80041e2 <DMA_SetConfig+0x10a>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a6b      	ldr	r2, [pc, #428]	@ (8004328 <DMA_SetConfig+0x250>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d031      	beq.n	80041e2 <DMA_SetConfig+0x10a>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a6a      	ldr	r2, [pc, #424]	@ (800432c <DMA_SetConfig+0x254>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d02c      	beq.n	80041e2 <DMA_SetConfig+0x10a>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a68      	ldr	r2, [pc, #416]	@ (8004330 <DMA_SetConfig+0x258>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d027      	beq.n	80041e2 <DMA_SetConfig+0x10a>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a67      	ldr	r2, [pc, #412]	@ (8004334 <DMA_SetConfig+0x25c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d022      	beq.n	80041e2 <DMA_SetConfig+0x10a>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a65      	ldr	r2, [pc, #404]	@ (8004338 <DMA_SetConfig+0x260>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d01d      	beq.n	80041e2 <DMA_SetConfig+0x10a>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a64      	ldr	r2, [pc, #400]	@ (800433c <DMA_SetConfig+0x264>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d018      	beq.n	80041e2 <DMA_SetConfig+0x10a>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a62      	ldr	r2, [pc, #392]	@ (8004340 <DMA_SetConfig+0x268>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d013      	beq.n	80041e2 <DMA_SetConfig+0x10a>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a61      	ldr	r2, [pc, #388]	@ (8004344 <DMA_SetConfig+0x26c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00e      	beq.n	80041e2 <DMA_SetConfig+0x10a>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a5f      	ldr	r2, [pc, #380]	@ (8004348 <DMA_SetConfig+0x270>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d009      	beq.n	80041e2 <DMA_SetConfig+0x10a>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a5e      	ldr	r2, [pc, #376]	@ (800434c <DMA_SetConfig+0x274>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d004      	beq.n	80041e2 <DMA_SetConfig+0x10a>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a5c      	ldr	r2, [pc, #368]	@ (8004350 <DMA_SetConfig+0x278>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d101      	bne.n	80041e6 <DMA_SetConfig+0x10e>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <DMA_SetConfig+0x110>
 80041e6:	2300      	movs	r3, #0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00d      	beq.n	8004208 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80041f4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d004      	beq.n	8004208 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004206:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a39      	ldr	r2, [pc, #228]	@ (80042f4 <DMA_SetConfig+0x21c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d04a      	beq.n	80042a8 <DMA_SetConfig+0x1d0>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a38      	ldr	r2, [pc, #224]	@ (80042f8 <DMA_SetConfig+0x220>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d045      	beq.n	80042a8 <DMA_SetConfig+0x1d0>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a36      	ldr	r2, [pc, #216]	@ (80042fc <DMA_SetConfig+0x224>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d040      	beq.n	80042a8 <DMA_SetConfig+0x1d0>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a35      	ldr	r2, [pc, #212]	@ (8004300 <DMA_SetConfig+0x228>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d03b      	beq.n	80042a8 <DMA_SetConfig+0x1d0>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a33      	ldr	r2, [pc, #204]	@ (8004304 <DMA_SetConfig+0x22c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d036      	beq.n	80042a8 <DMA_SetConfig+0x1d0>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a32      	ldr	r2, [pc, #200]	@ (8004308 <DMA_SetConfig+0x230>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d031      	beq.n	80042a8 <DMA_SetConfig+0x1d0>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a30      	ldr	r2, [pc, #192]	@ (800430c <DMA_SetConfig+0x234>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d02c      	beq.n	80042a8 <DMA_SetConfig+0x1d0>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a2f      	ldr	r2, [pc, #188]	@ (8004310 <DMA_SetConfig+0x238>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d027      	beq.n	80042a8 <DMA_SetConfig+0x1d0>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a2d      	ldr	r2, [pc, #180]	@ (8004314 <DMA_SetConfig+0x23c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d022      	beq.n	80042a8 <DMA_SetConfig+0x1d0>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a2c      	ldr	r2, [pc, #176]	@ (8004318 <DMA_SetConfig+0x240>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d01d      	beq.n	80042a8 <DMA_SetConfig+0x1d0>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a2a      	ldr	r2, [pc, #168]	@ (800431c <DMA_SetConfig+0x244>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d018      	beq.n	80042a8 <DMA_SetConfig+0x1d0>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a29      	ldr	r2, [pc, #164]	@ (8004320 <DMA_SetConfig+0x248>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d013      	beq.n	80042a8 <DMA_SetConfig+0x1d0>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a27      	ldr	r2, [pc, #156]	@ (8004324 <DMA_SetConfig+0x24c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d00e      	beq.n	80042a8 <DMA_SetConfig+0x1d0>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a26      	ldr	r2, [pc, #152]	@ (8004328 <DMA_SetConfig+0x250>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d009      	beq.n	80042a8 <DMA_SetConfig+0x1d0>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a24      	ldr	r2, [pc, #144]	@ (800432c <DMA_SetConfig+0x254>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d004      	beq.n	80042a8 <DMA_SetConfig+0x1d0>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a23      	ldr	r2, [pc, #140]	@ (8004330 <DMA_SetConfig+0x258>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d101      	bne.n	80042ac <DMA_SetConfig+0x1d4>
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <DMA_SetConfig+0x1d6>
 80042ac:	2300      	movs	r3, #0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d059      	beq.n	8004366 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b6:	f003 031f 	and.w	r3, r3, #31
 80042ba:	223f      	movs	r2, #63	@ 0x3f
 80042bc:	409a      	lsls	r2, r3
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80042d0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2b40      	cmp	r3, #64	@ 0x40
 80042e0:	d138      	bne.n	8004354 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80042f2:	e086      	b.n	8004402 <DMA_SetConfig+0x32a>
 80042f4:	40020010 	.word	0x40020010
 80042f8:	40020028 	.word	0x40020028
 80042fc:	40020040 	.word	0x40020040
 8004300:	40020058 	.word	0x40020058
 8004304:	40020070 	.word	0x40020070
 8004308:	40020088 	.word	0x40020088
 800430c:	400200a0 	.word	0x400200a0
 8004310:	400200b8 	.word	0x400200b8
 8004314:	40020410 	.word	0x40020410
 8004318:	40020428 	.word	0x40020428
 800431c:	40020440 	.word	0x40020440
 8004320:	40020458 	.word	0x40020458
 8004324:	40020470 	.word	0x40020470
 8004328:	40020488 	.word	0x40020488
 800432c:	400204a0 	.word	0x400204a0
 8004330:	400204b8 	.word	0x400204b8
 8004334:	58025408 	.word	0x58025408
 8004338:	5802541c 	.word	0x5802541c
 800433c:	58025430 	.word	0x58025430
 8004340:	58025444 	.word	0x58025444
 8004344:	58025458 	.word	0x58025458
 8004348:	5802546c 	.word	0x5802546c
 800434c:	58025480 	.word	0x58025480
 8004350:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	60da      	str	r2, [r3, #12]
}
 8004364:	e04d      	b.n	8004402 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a29      	ldr	r2, [pc, #164]	@ (8004410 <DMA_SetConfig+0x338>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d022      	beq.n	80043b6 <DMA_SetConfig+0x2de>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a27      	ldr	r2, [pc, #156]	@ (8004414 <DMA_SetConfig+0x33c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d01d      	beq.n	80043b6 <DMA_SetConfig+0x2de>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a26      	ldr	r2, [pc, #152]	@ (8004418 <DMA_SetConfig+0x340>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d018      	beq.n	80043b6 <DMA_SetConfig+0x2de>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a24      	ldr	r2, [pc, #144]	@ (800441c <DMA_SetConfig+0x344>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d013      	beq.n	80043b6 <DMA_SetConfig+0x2de>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a23      	ldr	r2, [pc, #140]	@ (8004420 <DMA_SetConfig+0x348>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d00e      	beq.n	80043b6 <DMA_SetConfig+0x2de>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a21      	ldr	r2, [pc, #132]	@ (8004424 <DMA_SetConfig+0x34c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d009      	beq.n	80043b6 <DMA_SetConfig+0x2de>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a20      	ldr	r2, [pc, #128]	@ (8004428 <DMA_SetConfig+0x350>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d004      	beq.n	80043b6 <DMA_SetConfig+0x2de>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1e      	ldr	r2, [pc, #120]	@ (800442c <DMA_SetConfig+0x354>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d101      	bne.n	80043ba <DMA_SetConfig+0x2e2>
 80043b6:	2301      	movs	r3, #1
 80043b8:	e000      	b.n	80043bc <DMA_SetConfig+0x2e4>
 80043ba:	2300      	movs	r3, #0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d020      	beq.n	8004402 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	2201      	movs	r2, #1
 80043ca:	409a      	lsls	r2, r3
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	2b40      	cmp	r3, #64	@ 0x40
 80043de:	d108      	bne.n	80043f2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	60da      	str	r2, [r3, #12]
}
 80043f0:	e007      	b.n	8004402 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	60da      	str	r2, [r3, #12]
}
 8004402:	bf00      	nop
 8004404:	371c      	adds	r7, #28
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	58025408 	.word	0x58025408
 8004414:	5802541c 	.word	0x5802541c
 8004418:	58025430 	.word	0x58025430
 800441c:	58025444 	.word	0x58025444
 8004420:	58025458 	.word	0x58025458
 8004424:	5802546c 	.word	0x5802546c
 8004428:	58025480 	.word	0x58025480
 800442c:	58025494 	.word	0x58025494

08004430 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a42      	ldr	r2, [pc, #264]	@ (8004548 <DMA_CalcBaseAndBitshift+0x118>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d04a      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a41      	ldr	r2, [pc, #260]	@ (800454c <DMA_CalcBaseAndBitshift+0x11c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d045      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a3f      	ldr	r2, [pc, #252]	@ (8004550 <DMA_CalcBaseAndBitshift+0x120>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d040      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a3e      	ldr	r2, [pc, #248]	@ (8004554 <DMA_CalcBaseAndBitshift+0x124>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d03b      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a3c      	ldr	r2, [pc, #240]	@ (8004558 <DMA_CalcBaseAndBitshift+0x128>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d036      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a3b      	ldr	r2, [pc, #236]	@ (800455c <DMA_CalcBaseAndBitshift+0x12c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d031      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a39      	ldr	r2, [pc, #228]	@ (8004560 <DMA_CalcBaseAndBitshift+0x130>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d02c      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a38      	ldr	r2, [pc, #224]	@ (8004564 <DMA_CalcBaseAndBitshift+0x134>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d027      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a36      	ldr	r2, [pc, #216]	@ (8004568 <DMA_CalcBaseAndBitshift+0x138>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d022      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a35      	ldr	r2, [pc, #212]	@ (800456c <DMA_CalcBaseAndBitshift+0x13c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d01d      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a33      	ldr	r2, [pc, #204]	@ (8004570 <DMA_CalcBaseAndBitshift+0x140>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d018      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a32      	ldr	r2, [pc, #200]	@ (8004574 <DMA_CalcBaseAndBitshift+0x144>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d013      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a30      	ldr	r2, [pc, #192]	@ (8004578 <DMA_CalcBaseAndBitshift+0x148>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d00e      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a2f      	ldr	r2, [pc, #188]	@ (800457c <DMA_CalcBaseAndBitshift+0x14c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d009      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004580 <DMA_CalcBaseAndBitshift+0x150>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d004      	beq.n	80044d8 <DMA_CalcBaseAndBitshift+0xa8>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a2c      	ldr	r2, [pc, #176]	@ (8004584 <DMA_CalcBaseAndBitshift+0x154>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d101      	bne.n	80044dc <DMA_CalcBaseAndBitshift+0xac>
 80044d8:	2301      	movs	r3, #1
 80044da:	e000      	b.n	80044de <DMA_CalcBaseAndBitshift+0xae>
 80044dc:	2300      	movs	r3, #0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d024      	beq.n	800452c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	3b10      	subs	r3, #16
 80044ea:	4a27      	ldr	r2, [pc, #156]	@ (8004588 <DMA_CalcBaseAndBitshift+0x158>)
 80044ec:	fba2 2303 	umull	r2, r3, r2, r3
 80044f0:	091b      	lsrs	r3, r3, #4
 80044f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f003 0307 	and.w	r3, r3, #7
 80044fa:	4a24      	ldr	r2, [pc, #144]	@ (800458c <DMA_CalcBaseAndBitshift+0x15c>)
 80044fc:	5cd3      	ldrb	r3, [r2, r3]
 80044fe:	461a      	mov	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b03      	cmp	r3, #3
 8004508:	d908      	bls.n	800451c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	4b1f      	ldr	r3, [pc, #124]	@ (8004590 <DMA_CalcBaseAndBitshift+0x160>)
 8004512:	4013      	ands	r3, r2
 8004514:	1d1a      	adds	r2, r3, #4
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	659a      	str	r2, [r3, #88]	@ 0x58
 800451a:	e00d      	b.n	8004538 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	4b1b      	ldr	r3, [pc, #108]	@ (8004590 <DMA_CalcBaseAndBitshift+0x160>)
 8004524:	4013      	ands	r3, r2
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6593      	str	r3, [r2, #88]	@ 0x58
 800452a:	e005      	b.n	8004538 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	40020010 	.word	0x40020010
 800454c:	40020028 	.word	0x40020028
 8004550:	40020040 	.word	0x40020040
 8004554:	40020058 	.word	0x40020058
 8004558:	40020070 	.word	0x40020070
 800455c:	40020088 	.word	0x40020088
 8004560:	400200a0 	.word	0x400200a0
 8004564:	400200b8 	.word	0x400200b8
 8004568:	40020410 	.word	0x40020410
 800456c:	40020428 	.word	0x40020428
 8004570:	40020440 	.word	0x40020440
 8004574:	40020458 	.word	0x40020458
 8004578:	40020470 	.word	0x40020470
 800457c:	40020488 	.word	0x40020488
 8004580:	400204a0 	.word	0x400204a0
 8004584:	400204b8 	.word	0x400204b8
 8004588:	aaaaaaab 	.word	0xaaaaaaab
 800458c:	0800e4b4 	.word	0x0800e4b4
 8004590:	fffffc00 	.word	0xfffffc00

08004594 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d120      	bne.n	80045ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d858      	bhi.n	8004662 <DMA_CheckFifoParam+0xce>
 80045b0:	a201      	add	r2, pc, #4	@ (adr r2, 80045b8 <DMA_CheckFifoParam+0x24>)
 80045b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b6:	bf00      	nop
 80045b8:	080045c9 	.word	0x080045c9
 80045bc:	080045db 	.word	0x080045db
 80045c0:	080045c9 	.word	0x080045c9
 80045c4:	08004663 	.word	0x08004663
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d048      	beq.n	8004666 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045d8:	e045      	b.n	8004666 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045e2:	d142      	bne.n	800466a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045e8:	e03f      	b.n	800466a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045f2:	d123      	bne.n	800463c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d838      	bhi.n	800466e <DMA_CheckFifoParam+0xda>
 80045fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004604 <DMA_CheckFifoParam+0x70>)
 80045fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004602:	bf00      	nop
 8004604:	08004615 	.word	0x08004615
 8004608:	0800461b 	.word	0x0800461b
 800460c:	08004615 	.word	0x08004615
 8004610:	0800462d 	.word	0x0800462d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	73fb      	strb	r3, [r7, #15]
        break;
 8004618:	e030      	b.n	800467c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d025      	beq.n	8004672 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800462a:	e022      	b.n	8004672 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004630:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004634:	d11f      	bne.n	8004676 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800463a:	e01c      	b.n	8004676 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004640:	2b02      	cmp	r3, #2
 8004642:	d902      	bls.n	800464a <DMA_CheckFifoParam+0xb6>
 8004644:	2b03      	cmp	r3, #3
 8004646:	d003      	beq.n	8004650 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004648:	e018      	b.n	800467c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	73fb      	strb	r3, [r7, #15]
        break;
 800464e:	e015      	b.n	800467c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004654:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00e      	beq.n	800467a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
    break;
 8004660:	e00b      	b.n	800467a <DMA_CheckFifoParam+0xe6>
        break;
 8004662:	bf00      	nop
 8004664:	e00a      	b.n	800467c <DMA_CheckFifoParam+0xe8>
        break;
 8004666:	bf00      	nop
 8004668:	e008      	b.n	800467c <DMA_CheckFifoParam+0xe8>
        break;
 800466a:	bf00      	nop
 800466c:	e006      	b.n	800467c <DMA_CheckFifoParam+0xe8>
        break;
 800466e:	bf00      	nop
 8004670:	e004      	b.n	800467c <DMA_CheckFifoParam+0xe8>
        break;
 8004672:	bf00      	nop
 8004674:	e002      	b.n	800467c <DMA_CheckFifoParam+0xe8>
        break;
 8004676:	bf00      	nop
 8004678:	e000      	b.n	800467c <DMA_CheckFifoParam+0xe8>
    break;
 800467a:	bf00      	nop
    }
  }

  return status;
 800467c:	7bfb      	ldrb	r3, [r7, #15]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop

0800468c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a38      	ldr	r2, [pc, #224]	@ (8004780 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d022      	beq.n	80046ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a36      	ldr	r2, [pc, #216]	@ (8004784 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d01d      	beq.n	80046ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a35      	ldr	r2, [pc, #212]	@ (8004788 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d018      	beq.n	80046ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a33      	ldr	r2, [pc, #204]	@ (800478c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d013      	beq.n	80046ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a32      	ldr	r2, [pc, #200]	@ (8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00e      	beq.n	80046ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a30      	ldr	r2, [pc, #192]	@ (8004794 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d009      	beq.n	80046ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a2f      	ldr	r2, [pc, #188]	@ (8004798 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d004      	beq.n	80046ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a2d      	ldr	r2, [pc, #180]	@ (800479c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d101      	bne.n	80046ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80046ee:	2300      	movs	r3, #0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d01a      	beq.n	800472a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	3b08      	subs	r3, #8
 80046fc:	4a28      	ldr	r2, [pc, #160]	@ (80047a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	091b      	lsrs	r3, r3, #4
 8004704:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4b26      	ldr	r3, [pc, #152]	@ (80047a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800470a:	4413      	add	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	461a      	mov	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a24      	ldr	r2, [pc, #144]	@ (80047a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004718:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	2201      	movs	r2, #1
 8004722:	409a      	lsls	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004728:	e024      	b.n	8004774 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	b2db      	uxtb	r3, r3
 8004730:	3b10      	subs	r3, #16
 8004732:	4a1e      	ldr	r2, [pc, #120]	@ (80047ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	091b      	lsrs	r3, r3, #4
 800473a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4a1c      	ldr	r2, [pc, #112]	@ (80047b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d806      	bhi.n	8004752 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	4a1b      	ldr	r2, [pc, #108]	@ (80047b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d902      	bls.n	8004752 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3308      	adds	r3, #8
 8004750:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4b18      	ldr	r3, [pc, #96]	@ (80047b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004756:	4413      	add	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	461a      	mov	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a16      	ldr	r2, [pc, #88]	@ (80047bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004764:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f003 031f 	and.w	r3, r3, #31
 800476c:	2201      	movs	r2, #1
 800476e:	409a      	lsls	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004774:	bf00      	nop
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	58025408 	.word	0x58025408
 8004784:	5802541c 	.word	0x5802541c
 8004788:	58025430 	.word	0x58025430
 800478c:	58025444 	.word	0x58025444
 8004790:	58025458 	.word	0x58025458
 8004794:	5802546c 	.word	0x5802546c
 8004798:	58025480 	.word	0x58025480
 800479c:	58025494 	.word	0x58025494
 80047a0:	cccccccd 	.word	0xcccccccd
 80047a4:	16009600 	.word	0x16009600
 80047a8:	58025880 	.word	0x58025880
 80047ac:	aaaaaaab 	.word	0xaaaaaaab
 80047b0:	400204b8 	.word	0x400204b8
 80047b4:	4002040f 	.word	0x4002040f
 80047b8:	10008200 	.word	0x10008200
 80047bc:	40020880 	.word	0x40020880

080047c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d04a      	beq.n	800486c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d847      	bhi.n	800486c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a25      	ldr	r2, [pc, #148]	@ (8004878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d022      	beq.n	800482c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a24      	ldr	r2, [pc, #144]	@ (800487c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d01d      	beq.n	800482c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a22      	ldr	r2, [pc, #136]	@ (8004880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d018      	beq.n	800482c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a21      	ldr	r2, [pc, #132]	@ (8004884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d013      	beq.n	800482c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a1f      	ldr	r2, [pc, #124]	@ (8004888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00e      	beq.n	800482c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a1e      	ldr	r2, [pc, #120]	@ (800488c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d009      	beq.n	800482c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a1c      	ldr	r2, [pc, #112]	@ (8004890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d004      	beq.n	800482c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a1b      	ldr	r2, [pc, #108]	@ (8004894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d101      	bne.n	8004830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004830:	2300      	movs	r3, #0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	4b17      	ldr	r3, [pc, #92]	@ (8004898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800483a:	4413      	add	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	461a      	mov	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a15      	ldr	r2, [pc, #84]	@ (800489c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004848:	671a      	str	r2, [r3, #112]	@ 0x70
 800484a:	e009      	b.n	8004860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4b14      	ldr	r3, [pc, #80]	@ (80048a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004850:	4413      	add	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	461a      	mov	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a11      	ldr	r2, [pc, #68]	@ (80048a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800485e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	3b01      	subs	r3, #1
 8004864:	2201      	movs	r2, #1
 8004866:	409a      	lsls	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800486c:	bf00      	nop
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	58025408 	.word	0x58025408
 800487c:	5802541c 	.word	0x5802541c
 8004880:	58025430 	.word	0x58025430
 8004884:	58025444 	.word	0x58025444
 8004888:	58025458 	.word	0x58025458
 800488c:	5802546c 	.word	0x5802546c
 8004890:	58025480 	.word	0x58025480
 8004894:	58025494 	.word	0x58025494
 8004898:	1600963f 	.word	0x1600963f
 800489c:	58025940 	.word	0x58025940
 80048a0:	1000823f 	.word	0x1000823f
 80048a4:	40020940 	.word	0x40020940

080048a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b089      	sub	sp, #36	@ 0x24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80048b6:	4b89      	ldr	r3, [pc, #548]	@ (8004adc <HAL_GPIO_Init+0x234>)
 80048b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048ba:	e194      	b.n	8004be6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	2101      	movs	r1, #1
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	fa01 f303 	lsl.w	r3, r1, r3
 80048c8:	4013      	ands	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 8186 	beq.w	8004be0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 0303 	and.w	r3, r3, #3
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d005      	beq.n	80048ec <HAL_GPIO_Init+0x44>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f003 0303 	and.w	r3, r3, #3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d130      	bne.n	800494e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	2203      	movs	r2, #3
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	43db      	mvns	r3, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4013      	ands	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4313      	orrs	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004922:	2201      	movs	r2, #1
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43db      	mvns	r3, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4013      	ands	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	091b      	lsrs	r3, r3, #4
 8004938:	f003 0201 	and.w	r2, r3, #1
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4313      	orrs	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2b03      	cmp	r3, #3
 8004958:	d017      	beq.n	800498a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	2203      	movs	r2, #3
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	43db      	mvns	r3, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4013      	ands	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	4313      	orrs	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d123      	bne.n	80049de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	08da      	lsrs	r2, r3, #3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3208      	adds	r2, #8
 800499e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	220f      	movs	r2, #15
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43db      	mvns	r3, r3
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4013      	ands	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	08da      	lsrs	r2, r3, #3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3208      	adds	r2, #8
 80049d8:	69b9      	ldr	r1, [r7, #24]
 80049da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	2203      	movs	r2, #3
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	43db      	mvns	r3, r3
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	4013      	ands	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f003 0203 	and.w	r2, r3, #3
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 80e0 	beq.w	8004be0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a20:	4b2f      	ldr	r3, [pc, #188]	@ (8004ae0 <HAL_GPIO_Init+0x238>)
 8004a22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a26:	4a2e      	ldr	r2, [pc, #184]	@ (8004ae0 <HAL_GPIO_Init+0x238>)
 8004a28:	f043 0302 	orr.w	r3, r3, #2
 8004a2c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004a30:	4b2b      	ldr	r3, [pc, #172]	@ (8004ae0 <HAL_GPIO_Init+0x238>)
 8004a32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a3e:	4a29      	ldr	r2, [pc, #164]	@ (8004ae4 <HAL_GPIO_Init+0x23c>)
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	089b      	lsrs	r3, r3, #2
 8004a44:	3302      	adds	r3, #2
 8004a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	220f      	movs	r2, #15
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a20      	ldr	r2, [pc, #128]	@ (8004ae8 <HAL_GPIO_Init+0x240>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d052      	beq.n	8004b10 <HAL_GPIO_Init+0x268>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8004aec <HAL_GPIO_Init+0x244>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d031      	beq.n	8004ad6 <HAL_GPIO_Init+0x22e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a1e      	ldr	r2, [pc, #120]	@ (8004af0 <HAL_GPIO_Init+0x248>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d02b      	beq.n	8004ad2 <HAL_GPIO_Init+0x22a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004af4 <HAL_GPIO_Init+0x24c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d025      	beq.n	8004ace <HAL_GPIO_Init+0x226>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a1c      	ldr	r2, [pc, #112]	@ (8004af8 <HAL_GPIO_Init+0x250>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d01f      	beq.n	8004aca <HAL_GPIO_Init+0x222>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8004afc <HAL_GPIO_Init+0x254>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d019      	beq.n	8004ac6 <HAL_GPIO_Init+0x21e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a1a      	ldr	r2, [pc, #104]	@ (8004b00 <HAL_GPIO_Init+0x258>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d013      	beq.n	8004ac2 <HAL_GPIO_Init+0x21a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a19      	ldr	r2, [pc, #100]	@ (8004b04 <HAL_GPIO_Init+0x25c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00d      	beq.n	8004abe <HAL_GPIO_Init+0x216>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a18      	ldr	r2, [pc, #96]	@ (8004b08 <HAL_GPIO_Init+0x260>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d007      	beq.n	8004aba <HAL_GPIO_Init+0x212>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a17      	ldr	r2, [pc, #92]	@ (8004b0c <HAL_GPIO_Init+0x264>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d101      	bne.n	8004ab6 <HAL_GPIO_Init+0x20e>
 8004ab2:	2309      	movs	r3, #9
 8004ab4:	e02d      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ab6:	230a      	movs	r3, #10
 8004ab8:	e02b      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004aba:	2308      	movs	r3, #8
 8004abc:	e029      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004abe:	2307      	movs	r3, #7
 8004ac0:	e027      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ac2:	2306      	movs	r3, #6
 8004ac4:	e025      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ac6:	2305      	movs	r3, #5
 8004ac8:	e023      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004aca:	2304      	movs	r3, #4
 8004acc:	e021      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e01f      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e01d      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e01b      	b.n	8004b12 <HAL_GPIO_Init+0x26a>
 8004ada:	bf00      	nop
 8004adc:	58000080 	.word	0x58000080
 8004ae0:	58024400 	.word	0x58024400
 8004ae4:	58000400 	.word	0x58000400
 8004ae8:	58020000 	.word	0x58020000
 8004aec:	58020400 	.word	0x58020400
 8004af0:	58020800 	.word	0x58020800
 8004af4:	58020c00 	.word	0x58020c00
 8004af8:	58021000 	.word	0x58021000
 8004afc:	58021400 	.word	0x58021400
 8004b00:	58021800 	.word	0x58021800
 8004b04:	58021c00 	.word	0x58021c00
 8004b08:	58022000 	.word	0x58022000
 8004b0c:	58022400 	.word	0x58022400
 8004b10:	2300      	movs	r3, #0
 8004b12:	69fa      	ldr	r2, [r7, #28]
 8004b14:	f002 0203 	and.w	r2, r2, #3
 8004b18:	0092      	lsls	r2, r2, #2
 8004b1a:	4093      	lsls	r3, r2
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b22:	4938      	ldr	r1, [pc, #224]	@ (8004c04 <HAL_GPIO_Init+0x35c>)
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	089b      	lsrs	r3, r3, #2
 8004b28:	3302      	adds	r3, #2
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	43db      	mvns	r3, r3
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	3301      	adds	r3, #1
 8004be4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f47f ae63 	bne.w	80048bc <HAL_GPIO_Init+0x14>
  }
}
 8004bf6:	bf00      	nop
 8004bf8:	bf00      	nop
 8004bfa:	3724      	adds	r7, #36	@ 0x24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	58000400 	.word	0x58000400

08004c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	807b      	strh	r3, [r7, #2]
 8004c14:	4613      	mov	r3, r2
 8004c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c18:	787b      	ldrb	r3, [r7, #1]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c1e:	887a      	ldrh	r2, [r7, #2]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004c24:	e003      	b.n	8004c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c26:	887b      	ldrh	r3, [r7, #2]
 8004c28:	041a      	lsls	r2, r3, #16
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	619a      	str	r2, [r3, #24]
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b086      	sub	sp, #24
 8004c3e:	af02      	add	r7, sp, #8
 8004c40:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e0fe      	b.n	8004e4a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d106      	bne.n	8004c66 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f009 f88b 	bl	800dd7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2203      	movs	r2, #3
 8004c6a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f005 fc4f 	bl	800a516 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6818      	ldr	r0, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	7c1a      	ldrb	r2, [r3, #16]
 8004c80:	f88d 2000 	strb.w	r2, [sp]
 8004c84:	3304      	adds	r3, #4
 8004c86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c88:	f005 fb20 	bl	800a2cc <USB_CoreInit>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d005      	beq.n	8004c9e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2202      	movs	r2, #2
 8004c96:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e0d5      	b.n	8004e4a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f005 fc47 	bl	800a538 <USB_SetCurrentMode>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e0c6      	b.n	8004e4a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	73fb      	strb	r3, [r7, #15]
 8004cc0:	e04a      	b.n	8004d58 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004cc2:	7bfa      	ldrb	r2, [r7, #15]
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	4413      	add	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	440b      	add	r3, r1
 8004cd0:	3315      	adds	r3, #21
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004cd6:	7bfa      	ldrb	r2, [r7, #15]
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	00db      	lsls	r3, r3, #3
 8004cde:	4413      	add	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	3314      	adds	r3, #20
 8004ce6:	7bfa      	ldrb	r2, [r7, #15]
 8004ce8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004cea:	7bfa      	ldrb	r2, [r7, #15]
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
 8004cee:	b298      	uxth	r0, r3
 8004cf0:	6879      	ldr	r1, [r7, #4]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	440b      	add	r3, r1
 8004cfc:	332e      	adds	r3, #46	@ 0x2e
 8004cfe:	4602      	mov	r2, r0
 8004d00:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d02:	7bfa      	ldrb	r2, [r7, #15]
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	3318      	adds	r3, #24
 8004d12:	2200      	movs	r2, #0
 8004d14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d16:	7bfa      	ldrb	r2, [r7, #15]
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	4413      	add	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	440b      	add	r3, r1
 8004d24:	331c      	adds	r3, #28
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d2a:	7bfa      	ldrb	r2, [r7, #15]
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	440b      	add	r3, r1
 8004d38:	3320      	adds	r3, #32
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d3e:	7bfa      	ldrb	r2, [r7, #15]
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	00db      	lsls	r3, r3, #3
 8004d46:	4413      	add	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	3324      	adds	r3, #36	@ 0x24
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d52:	7bfb      	ldrb	r3, [r7, #15]
 8004d54:	3301      	adds	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	791b      	ldrb	r3, [r3, #4]
 8004d5c:	7bfa      	ldrb	r2, [r7, #15]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d3af      	bcc.n	8004cc2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d62:	2300      	movs	r3, #0
 8004d64:	73fb      	strb	r3, [r7, #15]
 8004d66:	e044      	b.n	8004df2 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d68:	7bfa      	ldrb	r2, [r7, #15]
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	4413      	add	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d7e:	7bfa      	ldrb	r2, [r7, #15]
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	4613      	mov	r3, r2
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	440b      	add	r3, r1
 8004d8c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004d90:	7bfa      	ldrb	r2, [r7, #15]
 8004d92:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d94:	7bfa      	ldrb	r2, [r7, #15]
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004da6:	2200      	movs	r2, #0
 8004da8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004daa:	7bfa      	ldrb	r2, [r7, #15]
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	440b      	add	r3, r1
 8004db8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004dc0:	7bfa      	ldrb	r2, [r7, #15]
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	440b      	add	r3, r1
 8004dce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004dd6:	7bfa      	ldrb	r2, [r7, #15]
 8004dd8:	6879      	ldr	r1, [r7, #4]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	4413      	add	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	440b      	add	r3, r1
 8004de4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	3301      	adds	r3, #1
 8004df0:	73fb      	strb	r3, [r7, #15]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	791b      	ldrb	r3, [r3, #4]
 8004df6:	7bfa      	ldrb	r2, [r7, #15]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d3b5      	bcc.n	8004d68 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	7c1a      	ldrb	r2, [r3, #16]
 8004e04:	f88d 2000 	strb.w	r2, [sp]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e0c:	f005 fbe0 	bl	800a5d0 <USB_DevInit>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2202      	movs	r2, #2
 8004e1a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e013      	b.n	8004e4a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	7b1b      	ldrb	r3, [r3, #12]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d102      	bne.n	8004e3e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f001 f96d 	bl	8006118 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f006 fc1f 	bl	800b686 <USB_DevDisconnect>

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b084      	sub	sp, #16
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d101      	bne.n	8004e6e <HAL_PCD_Start+0x1c>
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	e022      	b.n	8004eb4 <HAL_PCD_Start+0x62>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d009      	beq.n	8004e96 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d105      	bne.n	8004e96 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f005 fb2a 	bl	800a4f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f006 fbcd 	bl	800b644 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004ebc:	b590      	push	{r4, r7, lr}
 8004ebe:	b08d      	sub	sp, #52	@ 0x34
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f006 fc8b 	bl	800b7ee <USB_GetMode>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f040 84b9 	bne.w	8005852 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f006 fbef 	bl	800b6c8 <USB_ReadInterrupts>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 84af 	beq.w	8005850 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	0a1b      	lsrs	r3, r3, #8
 8004efc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f006 fbdc 	bl	800b6c8 <USB_ReadInterrupts>
 8004f10:	4603      	mov	r3, r0
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d107      	bne.n	8004f2a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	695a      	ldr	r2, [r3, #20]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f002 0202 	and.w	r2, r2, #2
 8004f28:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f006 fbca 	bl	800b6c8 <USB_ReadInterrupts>
 8004f34:	4603      	mov	r3, r0
 8004f36:	f003 0310 	and.w	r3, r3, #16
 8004f3a:	2b10      	cmp	r3, #16
 8004f3c:	d161      	bne.n	8005002 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699a      	ldr	r2, [r3, #24]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0210 	bic.w	r2, r2, #16
 8004f4c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	f003 020f 	and.w	r2, r3, #15
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	4413      	add	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	4413      	add	r3, r2
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	0c5b      	lsrs	r3, r3, #17
 8004f72:	f003 030f 	and.w	r3, r3, #15
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d124      	bne.n	8004fc4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004f80:	4013      	ands	r3, r2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d035      	beq.n	8004ff2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	091b      	lsrs	r3, r3, #4
 8004f8e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004f90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	461a      	mov	r2, r3
 8004f98:	6a38      	ldr	r0, [r7, #32]
 8004f9a:	f006 fa01 	bl	800b3a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	091b      	lsrs	r3, r3, #4
 8004fa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004faa:	441a      	add	r2, r3
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	695a      	ldr	r2, [r3, #20]
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	091b      	lsrs	r3, r3, #4
 8004fb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fbc:	441a      	add	r2, r3
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	615a      	str	r2, [r3, #20]
 8004fc2:	e016      	b.n	8004ff2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	0c5b      	lsrs	r3, r3, #17
 8004fc8:	f003 030f 	and.w	r3, r3, #15
 8004fcc:	2b06      	cmp	r3, #6
 8004fce:	d110      	bne.n	8004ff2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004fd6:	2208      	movs	r2, #8
 8004fd8:	4619      	mov	r1, r3
 8004fda:	6a38      	ldr	r0, [r7, #32]
 8004fdc:	f006 f9e0 	bl	800b3a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	695a      	ldr	r2, [r3, #20]
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	091b      	lsrs	r3, r3, #4
 8004fe8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fec:	441a      	add	r2, r3
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	699a      	ldr	r2, [r3, #24]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f042 0210 	orr.w	r2, r2, #16
 8005000:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f006 fb5e 	bl	800b6c8 <USB_ReadInterrupts>
 800500c:	4603      	mov	r3, r0
 800500e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005012:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005016:	f040 80a7 	bne.w	8005168 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4618      	mov	r0, r3
 8005024:	f006 fb63 	bl	800b6ee <USB_ReadDevAllOutEpInterrupt>
 8005028:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800502a:	e099      	b.n	8005160 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800502c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 808e 	beq.w	8005154 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	4611      	mov	r1, r2
 8005042:	4618      	mov	r0, r3
 8005044:	f006 fb87 	bl	800b756 <USB_ReadDevOutEPInterrupt>
 8005048:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00c      	beq.n	800506e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005060:	461a      	mov	r2, r3
 8005062:	2301      	movs	r3, #1
 8005064:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005066:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fecf 	bl	8005e0c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00c      	beq.n	8005092 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005084:	461a      	mov	r2, r3
 8005086:	2308      	movs	r3, #8
 8005088:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800508a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 ffa5 	bl	8005fdc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f003 0310 	and.w	r3, r3, #16
 8005098:	2b00      	cmp	r3, #0
 800509a:	d008      	beq.n	80050ae <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050a8:	461a      	mov	r2, r3
 80050aa:	2310      	movs	r3, #16
 80050ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d030      	beq.n	800511a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050c0:	2b80      	cmp	r3, #128	@ 0x80
 80050c2:	d109      	bne.n	80050d8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	69fa      	ldr	r2, [r7, #28]
 80050ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050d6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80050d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050da:	4613      	mov	r3, r2
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	4413      	add	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	4413      	add	r3, r2
 80050ea:	3304      	adds	r3, #4
 80050ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	78db      	ldrb	r3, [r3, #3]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d108      	bne.n	8005108 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2200      	movs	r2, #0
 80050fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80050fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	4619      	mov	r1, r3
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f008 ff60 	bl	800dfc8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005114:	461a      	mov	r2, r3
 8005116:	2302      	movs	r3, #2
 8005118:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f003 0320 	and.w	r3, r3, #32
 8005120:	2b00      	cmp	r3, #0
 8005122:	d008      	beq.n	8005136 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005130:	461a      	mov	r2, r3
 8005132:	2320      	movs	r3, #32
 8005134:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d009      	beq.n	8005154 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800514c:	461a      	mov	r2, r3
 800514e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005152:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005156:	3301      	adds	r3, #1
 8005158:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800515a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515c:	085b      	lsrs	r3, r3, #1
 800515e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005162:	2b00      	cmp	r3, #0
 8005164:	f47f af62 	bne.w	800502c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4618      	mov	r0, r3
 800516e:	f006 faab 	bl	800b6c8 <USB_ReadInterrupts>
 8005172:	4603      	mov	r3, r0
 8005174:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005178:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800517c:	f040 80db 	bne.w	8005336 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4618      	mov	r0, r3
 8005186:	f006 facc 	bl	800b722 <USB_ReadDevAllInEpInterrupt>
 800518a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005190:	e0cd      	b.n	800532e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 80c2 	beq.w	8005322 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a4:	b2d2      	uxtb	r2, r2
 80051a6:	4611      	mov	r1, r2
 80051a8:	4618      	mov	r0, r3
 80051aa:	f006 faf2 	bl	800b792 <USB_ReadDevInEPInterrupt>
 80051ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d057      	beq.n	800526a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	f003 030f 	and.w	r3, r3, #15
 80051c0:	2201      	movs	r2, #1
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	43db      	mvns	r3, r3
 80051d4:	69f9      	ldr	r1, [r7, #28]
 80051d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051da:	4013      	ands	r3, r2
 80051dc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80051de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051ea:	461a      	mov	r2, r3
 80051ec:	2301      	movs	r3, #1
 80051ee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	799b      	ldrb	r3, [r3, #6]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d132      	bne.n	800525e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051fc:	4613      	mov	r3, r2
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	4413      	add	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	3320      	adds	r3, #32
 8005208:	6819      	ldr	r1, [r3, #0]
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800520e:	4613      	mov	r3, r2
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	4413      	add	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4403      	add	r3, r0
 8005218:	331c      	adds	r3, #28
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4419      	add	r1, r3
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005222:	4613      	mov	r3, r2
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	4413      	add	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4403      	add	r3, r0
 800522c:	3320      	adds	r3, #32
 800522e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005232:	2b00      	cmp	r3, #0
 8005234:	d113      	bne.n	800525e <HAL_PCD_IRQHandler+0x3a2>
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800523a:	4613      	mov	r3, r2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	4413      	add	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	440b      	add	r3, r1
 8005244:	3324      	adds	r3, #36	@ 0x24
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d108      	bne.n	800525e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005256:	461a      	mov	r2, r3
 8005258:	2101      	movs	r1, #1
 800525a:	f006 fafb 	bl	800b854 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800525e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005260:	b2db      	uxtb	r3, r3
 8005262:	4619      	mov	r1, r3
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f008 fe2a 	bl	800debe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f003 0308 	and.w	r3, r3, #8
 8005270:	2b00      	cmp	r3, #0
 8005272:	d008      	beq.n	8005286 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005280:	461a      	mov	r2, r3
 8005282:	2308      	movs	r3, #8
 8005284:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b00      	cmp	r3, #0
 800528e:	d008      	beq.n	80052a2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800529c:	461a      	mov	r2, r3
 800529e:	2310      	movs	r3, #16
 80052a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d008      	beq.n	80052be <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80052ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052b8:	461a      	mov	r2, r3
 80052ba:	2340      	movs	r3, #64	@ 0x40
 80052bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d023      	beq.n	8005310 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80052c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80052ca:	6a38      	ldr	r0, [r7, #32]
 80052cc:	f005 fade 	bl	800a88c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80052d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052d2:	4613      	mov	r3, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	3310      	adds	r3, #16
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	4413      	add	r3, r2
 80052e0:	3304      	adds	r3, #4
 80052e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	78db      	ldrb	r3, [r3, #3]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d108      	bne.n	80052fe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	2200      	movs	r2, #0
 80052f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80052f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	4619      	mov	r1, r3
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f008 fe77 	bl	800dfec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80052fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800530a:	461a      	mov	r2, r3
 800530c:	2302      	movs	r3, #2
 800530e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800531a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 fce8 	bl	8005cf2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005324:	3301      	adds	r3, #1
 8005326:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532a:	085b      	lsrs	r3, r3, #1
 800532c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800532e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005330:	2b00      	cmp	r3, #0
 8005332:	f47f af2e 	bne.w	8005192 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f006 f9c4 	bl	800b6c8 <USB_ReadInterrupts>
 8005340:	4603      	mov	r3, r0
 8005342:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005346:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800534a:	d122      	bne.n	8005392 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	69fa      	ldr	r2, [r7, #28]
 8005356:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800535a:	f023 0301 	bic.w	r3, r3, #1
 800535e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005366:	2b01      	cmp	r3, #1
 8005368:	d108      	bne.n	800537c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005372:	2100      	movs	r1, #0
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fef3 	bl	8006160 <HAL_PCDEx_LPM_Callback>
 800537a:	e002      	b.n	8005382 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f008 fe15 	bl	800dfac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695a      	ldr	r2, [r3, #20]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005390:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4618      	mov	r0, r3
 8005398:	f006 f996 	bl	800b6c8 <USB_ReadInterrupts>
 800539c:	4603      	mov	r3, r0
 800539e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053a6:	d112      	bne.n	80053ce <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d102      	bne.n	80053be <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f008 fdd1 	bl	800df60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695a      	ldr	r2, [r3, #20]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80053cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f006 f978 	bl	800b6c8 <USB_ReadInterrupts>
 80053d8:	4603      	mov	r3, r0
 80053da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053e2:	d121      	bne.n	8005428 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695a      	ldr	r2, [r3, #20]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80053f2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d111      	bne.n	8005422 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800540c:	089b      	lsrs	r3, r3, #2
 800540e:	f003 020f 	and.w	r2, r3, #15
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005418:	2101      	movs	r1, #1
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fea0 	bl	8006160 <HAL_PCDEx_LPM_Callback>
 8005420:	e002      	b.n	8005428 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f008 fd9c 	bl	800df60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4618      	mov	r0, r3
 800542e:	f006 f94b 	bl	800b6c8 <USB_ReadInterrupts>
 8005432:	4603      	mov	r3, r0
 8005434:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800543c:	f040 80b7 	bne.w	80055ae <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	69fa      	ldr	r2, [r7, #28]
 800544a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800544e:	f023 0301 	bic.w	r3, r3, #1
 8005452:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2110      	movs	r1, #16
 800545a:	4618      	mov	r0, r3
 800545c:	f005 fa16 	bl	800a88c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005460:	2300      	movs	r3, #0
 8005462:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005464:	e046      	b.n	80054f4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005472:	461a      	mov	r2, r3
 8005474:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005478:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800547a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800548a:	0151      	lsls	r1, r2, #5
 800548c:	69fa      	ldr	r2, [r7, #28]
 800548e:	440a      	add	r2, r1
 8005490:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005494:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005498:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800549a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054a6:	461a      	mov	r2, r3
 80054a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80054ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80054ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054be:	0151      	lsls	r1, r2, #5
 80054c0:	69fa      	ldr	r2, [r7, #28]
 80054c2:	440a      	add	r2, r1
 80054c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80054ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054de:	0151      	lsls	r1, r2, #5
 80054e0:	69fa      	ldr	r2, [r7, #28]
 80054e2:	440a      	add	r2, r1
 80054e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80054ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054f0:	3301      	adds	r3, #1
 80054f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	791b      	ldrb	r3, [r3, #4]
 80054f8:	461a      	mov	r2, r3
 80054fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d3b2      	bcc.n	8005466 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	69fa      	ldr	r2, [r7, #28]
 800550a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800550e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005512:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	7bdb      	ldrb	r3, [r3, #15]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d016      	beq.n	800554a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800552c:	f043 030b 	orr.w	r3, r3, #11
 8005530:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800553a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800553c:	69fa      	ldr	r2, [r7, #28]
 800553e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005542:	f043 030b 	orr.w	r3, r3, #11
 8005546:	6453      	str	r3, [r2, #68]	@ 0x44
 8005548:	e015      	b.n	8005576 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005550:	695a      	ldr	r2, [r3, #20]
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005558:	4619      	mov	r1, r3
 800555a:	f242 032b 	movw	r3, #8235	@ 0x202b
 800555e:	4313      	orrs	r3, r2
 8005560:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	69fa      	ldr	r2, [r7, #28]
 800556c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005570:	f043 030b 	orr.w	r3, r3, #11
 8005574:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69fa      	ldr	r2, [r7, #28]
 8005580:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005584:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005588:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6818      	ldr	r0, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005598:	461a      	mov	r2, r3
 800559a:	f006 f95b 	bl	800b854 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695a      	ldr	r2, [r3, #20]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80055ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f006 f888 	bl	800b6c8 <USB_ReadInterrupts>
 80055b8:	4603      	mov	r3, r0
 80055ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055c2:	d123      	bne.n	800560c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f006 f91f 	bl	800b80c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f005 f9d3 	bl	800a97e <USB_GetDevSpeed>
 80055d8:	4603      	mov	r3, r0
 80055da:	461a      	mov	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681c      	ldr	r4, [r3, #0]
 80055e4:	f001 fd9c 	bl	8007120 <HAL_RCC_GetHCLKFreq>
 80055e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80055ee:	461a      	mov	r2, r3
 80055f0:	4620      	mov	r0, r4
 80055f2:	f004 fedd 	bl	800a3b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f008 fc89 	bl	800df0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	695a      	ldr	r2, [r3, #20]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800560a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4618      	mov	r0, r3
 8005612:	f006 f859 	bl	800b6c8 <USB_ReadInterrupts>
 8005616:	4603      	mov	r3, r0
 8005618:	f003 0308 	and.w	r3, r3, #8
 800561c:	2b08      	cmp	r3, #8
 800561e:	d10a      	bne.n	8005636 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f008 fc66 	bl	800def2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	695a      	ldr	r2, [r3, #20]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f002 0208 	and.w	r2, r2, #8
 8005634:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4618      	mov	r0, r3
 800563c:	f006 f844 	bl	800b6c8 <USB_ReadInterrupts>
 8005640:	4603      	mov	r3, r0
 8005642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005646:	2b80      	cmp	r3, #128	@ 0x80
 8005648:	d123      	bne.n	8005692 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005656:	2301      	movs	r3, #1
 8005658:	627b      	str	r3, [r7, #36]	@ 0x24
 800565a:	e014      	b.n	8005686 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005660:	4613      	mov	r3, r2
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	4413      	add	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	440b      	add	r3, r1
 800566a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d105      	bne.n	8005680 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005676:	b2db      	uxtb	r3, r3
 8005678:	4619      	mov	r1, r3
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fb08 	bl	8005c90 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005682:	3301      	adds	r3, #1
 8005684:	627b      	str	r3, [r7, #36]	@ 0x24
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	791b      	ldrb	r3, [r3, #4]
 800568a:	461a      	mov	r2, r3
 800568c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568e:	4293      	cmp	r3, r2
 8005690:	d3e4      	bcc.n	800565c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4618      	mov	r0, r3
 8005698:	f006 f816 	bl	800b6c8 <USB_ReadInterrupts>
 800569c:	4603      	mov	r3, r0
 800569e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056a6:	d13c      	bne.n	8005722 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056a8:	2301      	movs	r3, #1
 80056aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80056ac:	e02b      	b.n	8005706 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056c2:	4613      	mov	r3, r2
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	4413      	add	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	440b      	add	r3, r1
 80056cc:	3318      	adds	r3, #24
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d115      	bne.n	8005700 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80056d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	da12      	bge.n	8005700 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056de:	4613      	mov	r3, r2
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	4413      	add	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	440b      	add	r3, r1
 80056e8:	3317      	adds	r3, #23
 80056ea:	2201      	movs	r2, #1
 80056ec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80056ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	4619      	mov	r1, r3
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fac8 	bl	8005c90 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005702:	3301      	adds	r3, #1
 8005704:	627b      	str	r3, [r7, #36]	@ 0x24
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	791b      	ldrb	r3, [r3, #4]
 800570a:	461a      	mov	r2, r3
 800570c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570e:	4293      	cmp	r3, r2
 8005710:	d3cd      	bcc.n	80056ae <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695a      	ldr	r2, [r3, #20]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005720:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4618      	mov	r0, r3
 8005728:	f005 ffce 	bl	800b6c8 <USB_ReadInterrupts>
 800572c:	4603      	mov	r3, r0
 800572e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005732:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005736:	d156      	bne.n	80057e6 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005738:	2301      	movs	r3, #1
 800573a:	627b      	str	r3, [r7, #36]	@ 0x24
 800573c:	e045      	b.n	80057ca <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800573e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005752:	4613      	mov	r3, r2
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	440b      	add	r3, r1
 800575c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d12e      	bne.n	80057c4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005766:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005768:	2b00      	cmp	r3, #0
 800576a:	da2b      	bge.n	80057c4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005778:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800577c:	429a      	cmp	r2, r3
 800577e:	d121      	bne.n	80057c4 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005784:	4613      	mov	r3, r2
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	4413      	add	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	440b      	add	r3, r1
 800578e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005792:	2201      	movs	r2, #1
 8005794:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10a      	bne.n	80057c4 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	69fa      	ldr	r2, [r7, #28]
 80057b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057c0:	6053      	str	r3, [r2, #4]
            break;
 80057c2:	e008      	b.n	80057d6 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c6:	3301      	adds	r3, #1
 80057c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	791b      	ldrb	r3, [r3, #4]
 80057ce:	461a      	mov	r2, r3
 80057d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d3b3      	bcc.n	800573e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	695a      	ldr	r2, [r3, #20]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80057e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f005 ff6c 	bl	800b6c8 <USB_ReadInterrupts>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80057f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057fa:	d10a      	bne.n	8005812 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f008 fc07 	bl	800e010 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	695a      	ldr	r2, [r3, #20]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005810:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f005 ff56 	bl	800b6c8 <USB_ReadInterrupts>
 800581c:	4603      	mov	r3, r0
 800581e:	f003 0304 	and.w	r3, r3, #4
 8005822:	2b04      	cmp	r3, #4
 8005824:	d115      	bne.n	8005852 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	f003 0304 	and.w	r3, r3, #4
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f008 fbf7 	bl	800e02c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6859      	ldr	r1, [r3, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	430a      	orrs	r2, r1
 800584c:	605a      	str	r2, [r3, #4]
 800584e:	e000      	b.n	8005852 <HAL_PCD_IRQHandler+0x996>
      return;
 8005850:	bf00      	nop
    }
  }
}
 8005852:	3734      	adds	r7, #52	@ 0x34
 8005854:	46bd      	mov	sp, r7
 8005856:	bd90      	pop	{r4, r7, pc}

08005858 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	460b      	mov	r3, r1
 8005862:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800586a:	2b01      	cmp	r3, #1
 800586c:	d101      	bne.n	8005872 <HAL_PCD_SetAddress+0x1a>
 800586e:	2302      	movs	r3, #2
 8005870:	e012      	b.n	8005898 <HAL_PCD_SetAddress+0x40>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	78fa      	ldrb	r2, [r7, #3]
 800587e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	78fa      	ldrb	r2, [r7, #3]
 8005886:	4611      	mov	r1, r2
 8005888:	4618      	mov	r0, r3
 800588a:	f005 feb5 	bl	800b5f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	4608      	mov	r0, r1
 80058aa:	4611      	mov	r1, r2
 80058ac:	461a      	mov	r2, r3
 80058ae:	4603      	mov	r3, r0
 80058b0:	70fb      	strb	r3, [r7, #3]
 80058b2:	460b      	mov	r3, r1
 80058b4:	803b      	strh	r3, [r7, #0]
 80058b6:	4613      	mov	r3, r2
 80058b8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80058be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	da0f      	bge.n	80058e6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058c6:	78fb      	ldrb	r3, [r7, #3]
 80058c8:	f003 020f 	and.w	r2, r3, #15
 80058cc:	4613      	mov	r3, r2
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	4413      	add	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	3310      	adds	r3, #16
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	4413      	add	r3, r2
 80058da:	3304      	adds	r3, #4
 80058dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2201      	movs	r2, #1
 80058e2:	705a      	strb	r2, [r3, #1]
 80058e4:	e00f      	b.n	8005906 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058e6:	78fb      	ldrb	r3, [r7, #3]
 80058e8:	f003 020f 	and.w	r2, r3, #15
 80058ec:	4613      	mov	r3, r2
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	4413      	add	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	4413      	add	r3, r2
 80058fc:	3304      	adds	r3, #4
 80058fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005906:	78fb      	ldrb	r3, [r7, #3]
 8005908:	f003 030f 	and.w	r3, r3, #15
 800590c:	b2da      	uxtb	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005912:	883a      	ldrh	r2, [r7, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	78ba      	ldrb	r2, [r7, #2]
 800591c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	785b      	ldrb	r3, [r3, #1]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d004      	beq.n	8005930 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005930:	78bb      	ldrb	r3, [r7, #2]
 8005932:	2b02      	cmp	r3, #2
 8005934:	d102      	bne.n	800593c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005942:	2b01      	cmp	r3, #1
 8005944:	d101      	bne.n	800594a <HAL_PCD_EP_Open+0xaa>
 8005946:	2302      	movs	r3, #2
 8005948:	e00e      	b.n	8005968 <HAL_PCD_EP_Open+0xc8>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68f9      	ldr	r1, [r7, #12]
 8005958:	4618      	mov	r0, r3
 800595a:	f005 f835 	bl	800a9c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005966:	7afb      	ldrb	r3, [r7, #11]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800597c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005980:	2b00      	cmp	r3, #0
 8005982:	da0f      	bge.n	80059a4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005984:	78fb      	ldrb	r3, [r7, #3]
 8005986:	f003 020f 	and.w	r2, r3, #15
 800598a:	4613      	mov	r3, r2
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	4413      	add	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	3310      	adds	r3, #16
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	4413      	add	r3, r2
 8005998:	3304      	adds	r3, #4
 800599a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2201      	movs	r2, #1
 80059a0:	705a      	strb	r2, [r3, #1]
 80059a2:	e00f      	b.n	80059c4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059a4:	78fb      	ldrb	r3, [r7, #3]
 80059a6:	f003 020f 	and.w	r2, r3, #15
 80059aa:	4613      	mov	r3, r2
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	4413      	add	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	4413      	add	r3, r2
 80059ba:	3304      	adds	r3, #4
 80059bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80059c4:	78fb      	ldrb	r3, [r7, #3]
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d101      	bne.n	80059de <HAL_PCD_EP_Close+0x6e>
 80059da:	2302      	movs	r3, #2
 80059dc:	e00e      	b.n	80059fc <HAL_PCD_EP_Close+0x8c>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68f9      	ldr	r1, [r7, #12]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f005 f873 	bl	800aad8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	607a      	str	r2, [r7, #4]
 8005a0e:	603b      	str	r3, [r7, #0]
 8005a10:	460b      	mov	r3, r1
 8005a12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a14:	7afb      	ldrb	r3, [r7, #11]
 8005a16:	f003 020f 	and.w	r2, r3, #15
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	4413      	add	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4413      	add	r3, r2
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	2200      	movs	r2, #0
 8005a44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a46:	7afb      	ldrb	r3, [r7, #11]
 8005a48:	f003 030f 	and.w	r3, r3, #15
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	799b      	ldrb	r3, [r3, #6]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d102      	bne.n	8005a60 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6818      	ldr	r0, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	799b      	ldrb	r3, [r3, #6]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	6979      	ldr	r1, [r7, #20]
 8005a6c:	f005 f910 	bl	800ac90 <USB_EPStartXfer>

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	460b      	mov	r3, r1
 8005a84:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005a86:	78fb      	ldrb	r3, [r7, #3]
 8005a88:	f003 020f 	and.w	r2, r3, #15
 8005a8c:	6879      	ldr	r1, [r7, #4]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	440b      	add	r3, r1
 8005a98:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005a9c:	681b      	ldr	r3, [r3, #0]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b086      	sub	sp, #24
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	60f8      	str	r0, [r7, #12]
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	603b      	str	r3, [r7, #0]
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005aba:	7afb      	ldrb	r3, [r7, #11]
 8005abc:	f003 020f 	and.w	r2, r3, #15
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	4413      	add	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	3310      	adds	r3, #16
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4413      	add	r3, r2
 8005ace:	3304      	adds	r3, #4
 8005ad0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005aea:	7afb      	ldrb	r3, [r7, #11]
 8005aec:	f003 030f 	and.w	r3, r3, #15
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	799b      	ldrb	r3, [r3, #6]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d102      	bne.n	8005b04 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6818      	ldr	r0, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	799b      	ldrb	r3, [r3, #6]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	6979      	ldr	r1, [r7, #20]
 8005b10:	f005 f8be 	bl	800ac90 <USB_EPStartXfer>

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3718      	adds	r7, #24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b084      	sub	sp, #16
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	460b      	mov	r3, r1
 8005b28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005b2a:	78fb      	ldrb	r3, [r7, #3]
 8005b2c:	f003 030f 	and.w	r3, r3, #15
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	7912      	ldrb	r2, [r2, #4]
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d901      	bls.n	8005b3c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e04f      	b.n	8005bdc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	da0f      	bge.n	8005b64 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b44:	78fb      	ldrb	r3, [r7, #3]
 8005b46:	f003 020f 	and.w	r2, r3, #15
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	00db      	lsls	r3, r3, #3
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	3310      	adds	r3, #16
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	4413      	add	r3, r2
 8005b58:	3304      	adds	r3, #4
 8005b5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	705a      	strb	r2, [r3, #1]
 8005b62:	e00d      	b.n	8005b80 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005b64:	78fa      	ldrb	r2, [r7, #3]
 8005b66:	4613      	mov	r3, r2
 8005b68:	00db      	lsls	r3, r3, #3
 8005b6a:	4413      	add	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	4413      	add	r3, r2
 8005b76:	3304      	adds	r3, #4
 8005b78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2201      	movs	r2, #1
 8005b84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b86:	78fb      	ldrb	r3, [r7, #3]
 8005b88:	f003 030f 	and.w	r3, r3, #15
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <HAL_PCD_EP_SetStall+0x82>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e01d      	b.n	8005bdc <HAL_PCD_EP_SetStall+0xbe>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68f9      	ldr	r1, [r7, #12]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f005 fc4e 	bl	800b450 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005bb4:	78fb      	ldrb	r3, [r7, #3]
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d109      	bne.n	8005bd2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6818      	ldr	r0, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	7999      	ldrb	r1, [r3, #6]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005bcc:	461a      	mov	r2, r3
 8005bce:	f005 fe41 	bl	800b854 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	460b      	mov	r3, r1
 8005bee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005bf0:	78fb      	ldrb	r3, [r7, #3]
 8005bf2:	f003 030f 	and.w	r3, r3, #15
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	7912      	ldrb	r2, [r2, #4]
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d901      	bls.n	8005c02 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e042      	b.n	8005c88 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	da0f      	bge.n	8005c2a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c0a:	78fb      	ldrb	r3, [r7, #3]
 8005c0c:	f003 020f 	and.w	r2, r3, #15
 8005c10:	4613      	mov	r3, r2
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	3310      	adds	r3, #16
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	3304      	adds	r3, #4
 8005c20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2201      	movs	r2, #1
 8005c26:	705a      	strb	r2, [r3, #1]
 8005c28:	e00f      	b.n	8005c4a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c2a:	78fb      	ldrb	r3, [r7, #3]
 8005c2c:	f003 020f 	and.w	r2, r3, #15
 8005c30:	4613      	mov	r3, r2
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	4413      	add	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	4413      	add	r3, r2
 8005c40:	3304      	adds	r3, #4
 8005c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	f003 030f 	and.w	r3, r3, #15
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d101      	bne.n	8005c6a <HAL_PCD_EP_ClrStall+0x86>
 8005c66:	2302      	movs	r3, #2
 8005c68:	e00e      	b.n	8005c88 <HAL_PCD_EP_ClrStall+0xa4>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68f9      	ldr	r1, [r7, #12]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f005 fc57 	bl	800b52c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005c9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	da0c      	bge.n	8005cbe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ca4:	78fb      	ldrb	r3, [r7, #3]
 8005ca6:	f003 020f 	and.w	r2, r3, #15
 8005caa:	4613      	mov	r3, r2
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	4413      	add	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	3310      	adds	r3, #16
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	3304      	adds	r3, #4
 8005cba:	60fb      	str	r3, [r7, #12]
 8005cbc:	e00c      	b.n	8005cd8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cbe:	78fb      	ldrb	r3, [r7, #3]
 8005cc0:	f003 020f 	and.w	r2, r3, #15
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	4413      	add	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68f9      	ldr	r1, [r7, #12]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f005 fa76 	bl	800b1d0 <USB_EPStopXfer>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005ce8:	7afb      	ldrb	r3, [r7, #11]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b08a      	sub	sp, #40	@ 0x28
 8005cf6:	af02      	add	r7, sp, #8
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	4413      	add	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	3310      	adds	r3, #16
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	4413      	add	r3, r2
 8005d16:	3304      	adds	r3, #4
 8005d18:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	695a      	ldr	r2, [r3, #20]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d901      	bls.n	8005d2a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e06b      	b.n	8005e02 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	691a      	ldr	r2, [r3, #16]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d902      	bls.n	8005d46 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	3303      	adds	r3, #3
 8005d4a:	089b      	lsrs	r3, r3, #2
 8005d4c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d4e:	e02a      	b.n	8005da6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	69fa      	ldr	r2, [r7, #28]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d902      	bls.n	8005d6c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	3303      	adds	r3, #3
 8005d70:	089b      	lsrs	r3, r3, #2
 8005d72:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	68d9      	ldr	r1, [r3, #12]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	4603      	mov	r3, r0
 8005d88:	6978      	ldr	r0, [r7, #20]
 8005d8a:	f005 facb 	bl	800b324 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	441a      	add	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	695a      	ldr	r2, [r3, #20]
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	441a      	add	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d809      	bhi.n	8005dd0 <PCD_WriteEmptyTxFifo+0xde>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	695a      	ldr	r2, [r3, #20]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d203      	bcs.n	8005dd0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1bf      	bne.n	8005d50 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	691a      	ldr	r2, [r3, #16]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d811      	bhi.n	8005e00 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	2201      	movs	r2, #1
 8005de4:	fa02 f303 	lsl.w	r3, r2, r3
 8005de8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005df0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	43db      	mvns	r3, r3
 8005df6:	6939      	ldr	r1, [r7, #16]
 8005df8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3720      	adds	r7, #32
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
	...

08005e0c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b088      	sub	sp, #32
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	333c      	adds	r3, #60	@ 0x3c
 8005e24:	3304      	adds	r3, #4
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	799b      	ldrb	r3, [r3, #6]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d17b      	bne.n	8005f3a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	f003 0308 	and.w	r3, r3, #8
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d015      	beq.n	8005e78 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	4a61      	ldr	r2, [pc, #388]	@ (8005fd4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	f240 80b9 	bls.w	8005fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 80b3 	beq.w	8005fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e6e:	461a      	mov	r2, r3
 8005e70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e74:	6093      	str	r3, [r2, #8]
 8005e76:	e0a7      	b.n	8005fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d009      	beq.n	8005e96 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e8e:	461a      	mov	r2, r3
 8005e90:	2320      	movs	r3, #32
 8005e92:	6093      	str	r3, [r2, #8]
 8005e94:	e098      	b.n	8005fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f040 8093 	bne.w	8005fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	4a4b      	ldr	r2, [pc, #300]	@ (8005fd4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d90f      	bls.n	8005eca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00a      	beq.n	8005eca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ec6:	6093      	str	r3, [r2, #8]
 8005ec8:	e07e      	b.n	8005fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	4413      	add	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	4413      	add	r3, r2
 8005edc:	3304      	adds	r3, #4
 8005ede:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a1a      	ldr	r2, [r3, #32]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	0159      	lsls	r1, r3, #5
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	440b      	add	r3, r1
 8005eec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ef6:	1ad2      	subs	r2, r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d114      	bne.n	8005f2c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d109      	bne.n	8005f1e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6818      	ldr	r0, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005f14:	461a      	mov	r2, r3
 8005f16:	2101      	movs	r1, #1
 8005f18:	f005 fc9c 	bl	800b854 <USB_EP0_OutStart>
 8005f1c:	e006      	b.n	8005f2c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	441a      	add	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	4619      	mov	r1, r3
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f007 ffa8 	bl	800de88 <HAL_PCD_DataOutStageCallback>
 8005f38:	e046      	b.n	8005fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	4a26      	ldr	r2, [pc, #152]	@ (8005fd8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d124      	bne.n	8005f8c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00a      	beq.n	8005f62 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f58:	461a      	mov	r2, r3
 8005f5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f5e:	6093      	str	r3, [r2, #8]
 8005f60:	e032      	b.n	8005fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f003 0320 	and.w	r3, r3, #32
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d008      	beq.n	8005f7e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f78:	461a      	mov	r2, r3
 8005f7a:	2320      	movs	r3, #32
 8005f7c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f007 ff7f 	bl	800de88 <HAL_PCD_DataOutStageCallback>
 8005f8a:	e01d      	b.n	8005fc8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d114      	bne.n	8005fbc <PCD_EP_OutXfrComplete_int+0x1b0>
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	4613      	mov	r3, r2
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d108      	bne.n	8005fbc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6818      	ldr	r0, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	f005 fc4c 	bl	800b854 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f007 ff60 	bl	800de88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3720      	adds	r7, #32
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	4f54300a 	.word	0x4f54300a
 8005fd8:	4f54310a 	.word	0x4f54310a

08005fdc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	333c      	adds	r3, #60	@ 0x3c
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	4a15      	ldr	r2, [pc, #84]	@ (8006064 <PCD_EP_OutSetupPacket_int+0x88>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d90e      	bls.n	8006030 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006018:	2b00      	cmp	r3, #0
 800601a:	d009      	beq.n	8006030 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006028:	461a      	mov	r2, r3
 800602a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800602e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f007 ff17 	bl	800de64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4a0a      	ldr	r2, [pc, #40]	@ (8006064 <PCD_EP_OutSetupPacket_int+0x88>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d90c      	bls.n	8006058 <PCD_EP_OutSetupPacket_int+0x7c>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	799b      	ldrb	r3, [r3, #6]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d108      	bne.n	8006058 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6818      	ldr	r0, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006050:	461a      	mov	r2, r3
 8006052:	2101      	movs	r1, #1
 8006054:	f005 fbfe 	bl	800b854 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3718      	adds	r7, #24
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	4f54300a 	.word	0x4f54300a

08006068 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	460b      	mov	r3, r1
 8006072:	70fb      	strb	r3, [r7, #3]
 8006074:	4613      	mov	r3, r2
 8006076:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006080:	78fb      	ldrb	r3, [r7, #3]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d107      	bne.n	8006096 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006086:	883b      	ldrh	r3, [r7, #0]
 8006088:	0419      	lsls	r1, r3, #16
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	430a      	orrs	r2, r1
 8006092:	629a      	str	r2, [r3, #40]	@ 0x28
 8006094:	e028      	b.n	80060e8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800609c:	0c1b      	lsrs	r3, r3, #16
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	4413      	add	r3, r2
 80060a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80060a4:	2300      	movs	r3, #0
 80060a6:	73fb      	strb	r3, [r7, #15]
 80060a8:	e00d      	b.n	80060c6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	7bfb      	ldrb	r3, [r7, #15]
 80060b0:	3340      	adds	r3, #64	@ 0x40
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	0c1b      	lsrs	r3, r3, #16
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	4413      	add	r3, r2
 80060be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
 80060c2:	3301      	adds	r3, #1
 80060c4:	73fb      	strb	r3, [r7, #15]
 80060c6:	7bfa      	ldrb	r2, [r7, #15]
 80060c8:	78fb      	ldrb	r3, [r7, #3]
 80060ca:	3b01      	subs	r3, #1
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d3ec      	bcc.n	80060aa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80060d0:	883b      	ldrh	r3, [r7, #0]
 80060d2:	0418      	lsls	r0, r3, #16
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6819      	ldr	r1, [r3, #0]
 80060d8:	78fb      	ldrb	r3, [r7, #3]
 80060da:	3b01      	subs	r3, #1
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	4302      	orrs	r2, r0
 80060e0:	3340      	adds	r3, #64	@ 0x40
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	440b      	add	r3, r1
 80060e6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	460b      	mov	r3, r1
 8006100:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	887a      	ldrh	r2, [r7, #2]
 8006108:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006146:	4b05      	ldr	r3, [pc, #20]	@ (800615c <HAL_PCDEx_ActivateLPM+0x44>)
 8006148:	4313      	orrs	r3, r2
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	10000003 	.word	0x10000003

08006160 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	460b      	mov	r3, r1
 800616a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006180:	4b19      	ldr	r3, [pc, #100]	@ (80061e8 <HAL_PWREx_ConfigSupply+0x70>)
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b04      	cmp	r3, #4
 800618a:	d00a      	beq.n	80061a2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800618c:	4b16      	ldr	r3, [pc, #88]	@ (80061e8 <HAL_PWREx_ConfigSupply+0x70>)
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f003 0307 	and.w	r3, r3, #7
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	429a      	cmp	r2, r3
 8006198:	d001      	beq.n	800619e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e01f      	b.n	80061de <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800619e:	2300      	movs	r3, #0
 80061a0:	e01d      	b.n	80061de <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80061a2:	4b11      	ldr	r3, [pc, #68]	@ (80061e8 <HAL_PWREx_ConfigSupply+0x70>)
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	f023 0207 	bic.w	r2, r3, #7
 80061aa:	490f      	ldr	r1, [pc, #60]	@ (80061e8 <HAL_PWREx_ConfigSupply+0x70>)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80061b2:	f7fa fd55 	bl	8000c60 <HAL_GetTick>
 80061b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80061b8:	e009      	b.n	80061ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80061ba:	f7fa fd51 	bl	8000c60 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061c8:	d901      	bls.n	80061ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e007      	b.n	80061de <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80061ce:	4b06      	ldr	r3, [pc, #24]	@ (80061e8 <HAL_PWREx_ConfigSupply+0x70>)
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061da:	d1ee      	bne.n	80061ba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	58024800 	.word	0x58024800

080061ec <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80061f0:	4b05      	ldr	r3, [pc, #20]	@ (8006208 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	4a04      	ldr	r2, [pc, #16]	@ (8006208 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80061f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061fa:	60d3      	str	r3, [r2, #12]
}
 80061fc:	bf00      	nop
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	58024800 	.word	0x58024800

0800620c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08c      	sub	sp, #48	@ 0x30
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d102      	bne.n	8006220 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	f000 bc48 	b.w	8006ab0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 8088 	beq.w	800633e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800622e:	4b99      	ldr	r3, [pc, #612]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006236:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006238:	4b96      	ldr	r3, [pc, #600]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 800623a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800623e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006240:	2b10      	cmp	r3, #16
 8006242:	d007      	beq.n	8006254 <HAL_RCC_OscConfig+0x48>
 8006244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006246:	2b18      	cmp	r3, #24
 8006248:	d111      	bne.n	800626e <HAL_RCC_OscConfig+0x62>
 800624a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624c:	f003 0303 	and.w	r3, r3, #3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d10c      	bne.n	800626e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006254:	4b8f      	ldr	r3, [pc, #572]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d06d      	beq.n	800633c <HAL_RCC_OscConfig+0x130>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d169      	bne.n	800633c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	f000 bc21 	b.w	8006ab0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006276:	d106      	bne.n	8006286 <HAL_RCC_OscConfig+0x7a>
 8006278:	4b86      	ldr	r3, [pc, #536]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a85      	ldr	r2, [pc, #532]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 800627e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	e02e      	b.n	80062e4 <HAL_RCC_OscConfig+0xd8>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10c      	bne.n	80062a8 <HAL_RCC_OscConfig+0x9c>
 800628e:	4b81      	ldr	r3, [pc, #516]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a80      	ldr	r2, [pc, #512]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 8006294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	4b7e      	ldr	r3, [pc, #504]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a7d      	ldr	r2, [pc, #500]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 80062a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062a4:	6013      	str	r3, [r2, #0]
 80062a6:	e01d      	b.n	80062e4 <HAL_RCC_OscConfig+0xd8>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062b0:	d10c      	bne.n	80062cc <HAL_RCC_OscConfig+0xc0>
 80062b2:	4b78      	ldr	r3, [pc, #480]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a77      	ldr	r2, [pc, #476]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 80062b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	4b75      	ldr	r3, [pc, #468]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a74      	ldr	r2, [pc, #464]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 80062c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062c8:	6013      	str	r3, [r2, #0]
 80062ca:	e00b      	b.n	80062e4 <HAL_RCC_OscConfig+0xd8>
 80062cc:	4b71      	ldr	r3, [pc, #452]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a70      	ldr	r2, [pc, #448]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 80062d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062d6:	6013      	str	r3, [r2, #0]
 80062d8:	4b6e      	ldr	r3, [pc, #440]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a6d      	ldr	r2, [pc, #436]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 80062de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d013      	beq.n	8006314 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ec:	f7fa fcb8 	bl	8000c60 <HAL_GetTick>
 80062f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062f2:	e008      	b.n	8006306 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062f4:	f7fa fcb4 	bl	8000c60 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b64      	cmp	r3, #100	@ 0x64
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e3d4      	b.n	8006ab0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006306:	4b63      	ldr	r3, [pc, #396]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d0f0      	beq.n	80062f4 <HAL_RCC_OscConfig+0xe8>
 8006312:	e014      	b.n	800633e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006314:	f7fa fca4 	bl	8000c60 <HAL_GetTick>
 8006318:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800631a:	e008      	b.n	800632e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800631c:	f7fa fca0 	bl	8000c60 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	2b64      	cmp	r3, #100	@ 0x64
 8006328:	d901      	bls.n	800632e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e3c0      	b.n	8006ab0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800632e:	4b59      	ldr	r3, [pc, #356]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1f0      	bne.n	800631c <HAL_RCC_OscConfig+0x110>
 800633a:	e000      	b.n	800633e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800633c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 80ca 	beq.w	80064e0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800634c:	4b51      	ldr	r3, [pc, #324]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006354:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006356:	4b4f      	ldr	r3, [pc, #316]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 8006358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800635a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d007      	beq.n	8006372 <HAL_RCC_OscConfig+0x166>
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	2b18      	cmp	r3, #24
 8006366:	d156      	bne.n	8006416 <HAL_RCC_OscConfig+0x20a>
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	f003 0303 	and.w	r3, r3, #3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d151      	bne.n	8006416 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006372:	4b48      	ldr	r3, [pc, #288]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0304 	and.w	r3, r3, #4
 800637a:	2b00      	cmp	r3, #0
 800637c:	d005      	beq.n	800638a <HAL_RCC_OscConfig+0x17e>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e392      	b.n	8006ab0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800638a:	4b42      	ldr	r3, [pc, #264]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f023 0219 	bic.w	r2, r3, #25
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	493f      	ldr	r1, [pc, #252]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 8006398:	4313      	orrs	r3, r2
 800639a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800639c:	f7fa fc60 	bl	8000c60 <HAL_GetTick>
 80063a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063a2:	e008      	b.n	80063b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063a4:	f7fa fc5c 	bl	8000c60 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e37c      	b.n	8006ab0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063b6:	4b37      	ldr	r3, [pc, #220]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0304 	and.w	r3, r3, #4
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d0f0      	beq.n	80063a4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063c2:	f7fa fc7d 	bl	8000cc0 <HAL_GetREVID>
 80063c6:	4603      	mov	r3, r0
 80063c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d817      	bhi.n	8006400 <HAL_RCC_OscConfig+0x1f4>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	2b40      	cmp	r3, #64	@ 0x40
 80063d6:	d108      	bne.n	80063ea <HAL_RCC_OscConfig+0x1de>
 80063d8:	4b2e      	ldr	r3, [pc, #184]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80063e0:	4a2c      	ldr	r2, [pc, #176]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 80063e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063e6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063e8:	e07a      	b.n	80064e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ea:	4b2a      	ldr	r3, [pc, #168]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	031b      	lsls	r3, r3, #12
 80063f8:	4926      	ldr	r1, [pc, #152]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063fe:	e06f      	b.n	80064e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006400:	4b24      	ldr	r3, [pc, #144]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	061b      	lsls	r3, r3, #24
 800640e:	4921      	ldr	r1, [pc, #132]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 8006410:	4313      	orrs	r3, r2
 8006412:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006414:	e064      	b.n	80064e0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d047      	beq.n	80064ae <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800641e:	4b1d      	ldr	r3, [pc, #116]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f023 0219 	bic.w	r2, r3, #25
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	491a      	ldr	r1, [pc, #104]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 800642c:	4313      	orrs	r3, r2
 800642e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006430:	f7fa fc16 	bl	8000c60 <HAL_GetTick>
 8006434:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006438:	f7fa fc12 	bl	8000c60 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e332      	b.n	8006ab0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800644a:	4b12      	ldr	r3, [pc, #72]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0304 	and.w	r3, r3, #4
 8006452:	2b00      	cmp	r3, #0
 8006454:	d0f0      	beq.n	8006438 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006456:	f7fa fc33 	bl	8000cc0 <HAL_GetREVID>
 800645a:	4603      	mov	r3, r0
 800645c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006460:	4293      	cmp	r3, r2
 8006462:	d819      	bhi.n	8006498 <HAL_RCC_OscConfig+0x28c>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	2b40      	cmp	r3, #64	@ 0x40
 800646a:	d108      	bne.n	800647e <HAL_RCC_OscConfig+0x272>
 800646c:	4b09      	ldr	r3, [pc, #36]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006474:	4a07      	ldr	r2, [pc, #28]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 8006476:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800647a:	6053      	str	r3, [r2, #4]
 800647c:	e030      	b.n	80064e0 <HAL_RCC_OscConfig+0x2d4>
 800647e:	4b05      	ldr	r3, [pc, #20]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	031b      	lsls	r3, r3, #12
 800648c:	4901      	ldr	r1, [pc, #4]	@ (8006494 <HAL_RCC_OscConfig+0x288>)
 800648e:	4313      	orrs	r3, r2
 8006490:	604b      	str	r3, [r1, #4]
 8006492:	e025      	b.n	80064e0 <HAL_RCC_OscConfig+0x2d4>
 8006494:	58024400 	.word	0x58024400
 8006498:	4b9a      	ldr	r3, [pc, #616]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	061b      	lsls	r3, r3, #24
 80064a6:	4997      	ldr	r1, [pc, #604]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	604b      	str	r3, [r1, #4]
 80064ac:	e018      	b.n	80064e0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064ae:	4b95      	ldr	r3, [pc, #596]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a94      	ldr	r2, [pc, #592]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80064b4:	f023 0301 	bic.w	r3, r3, #1
 80064b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ba:	f7fa fbd1 	bl	8000c60 <HAL_GetTick>
 80064be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064c0:	e008      	b.n	80064d4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064c2:	f7fa fbcd 	bl	8000c60 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d901      	bls.n	80064d4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e2ed      	b.n	8006ab0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064d4:	4b8b      	ldr	r3, [pc, #556]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1f0      	bne.n	80064c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0310 	and.w	r3, r3, #16
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f000 80a9 	beq.w	8006640 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064ee:	4b85      	ldr	r3, [pc, #532]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064f8:	4b82      	ldr	r3, [pc, #520]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80064fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064fc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	2b08      	cmp	r3, #8
 8006502:	d007      	beq.n	8006514 <HAL_RCC_OscConfig+0x308>
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	2b18      	cmp	r3, #24
 8006508:	d13a      	bne.n	8006580 <HAL_RCC_OscConfig+0x374>
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f003 0303 	and.w	r3, r3, #3
 8006510:	2b01      	cmp	r3, #1
 8006512:	d135      	bne.n	8006580 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006514:	4b7b      	ldr	r3, [pc, #492]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800651c:	2b00      	cmp	r3, #0
 800651e:	d005      	beq.n	800652c <HAL_RCC_OscConfig+0x320>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	2b80      	cmp	r3, #128	@ 0x80
 8006526:	d001      	beq.n	800652c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e2c1      	b.n	8006ab0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800652c:	f7fa fbc8 	bl	8000cc0 <HAL_GetREVID>
 8006530:	4603      	mov	r3, r0
 8006532:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006536:	4293      	cmp	r3, r2
 8006538:	d817      	bhi.n	800656a <HAL_RCC_OscConfig+0x35e>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	2b20      	cmp	r3, #32
 8006540:	d108      	bne.n	8006554 <HAL_RCC_OscConfig+0x348>
 8006542:	4b70      	ldr	r3, [pc, #448]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800654a:	4a6e      	ldr	r2, [pc, #440]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 800654c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006550:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006552:	e075      	b.n	8006640 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006554:	4b6b      	ldr	r3, [pc, #428]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	069b      	lsls	r3, r3, #26
 8006562:	4968      	ldr	r1, [pc, #416]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 8006564:	4313      	orrs	r3, r2
 8006566:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006568:	e06a      	b.n	8006640 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800656a:	4b66      	ldr	r3, [pc, #408]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	061b      	lsls	r3, r3, #24
 8006578:	4962      	ldr	r1, [pc, #392]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 800657a:	4313      	orrs	r3, r2
 800657c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800657e:	e05f      	b.n	8006640 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d042      	beq.n	800660e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006588:	4b5e      	ldr	r3, [pc, #376]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a5d      	ldr	r2, [pc, #372]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 800658e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006594:	f7fa fb64 	bl	8000c60 <HAL_GetTick>
 8006598:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800659c:	f7fa fb60 	bl	8000c60 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e280      	b.n	8006ab0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065ae:	4b55      	ldr	r3, [pc, #340]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0f0      	beq.n	800659c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065ba:	f7fa fb81 	bl	8000cc0 <HAL_GetREVID>
 80065be:	4603      	mov	r3, r0
 80065c0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d817      	bhi.n	80065f8 <HAL_RCC_OscConfig+0x3ec>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a1b      	ldr	r3, [r3, #32]
 80065cc:	2b20      	cmp	r3, #32
 80065ce:	d108      	bne.n	80065e2 <HAL_RCC_OscConfig+0x3d6>
 80065d0:	4b4c      	ldr	r3, [pc, #304]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80065d8:	4a4a      	ldr	r2, [pc, #296]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80065da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065de:	6053      	str	r3, [r2, #4]
 80065e0:	e02e      	b.n	8006640 <HAL_RCC_OscConfig+0x434>
 80065e2:	4b48      	ldr	r3, [pc, #288]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	069b      	lsls	r3, r3, #26
 80065f0:	4944      	ldr	r1, [pc, #272]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	604b      	str	r3, [r1, #4]
 80065f6:	e023      	b.n	8006640 <HAL_RCC_OscConfig+0x434>
 80065f8:	4b42      	ldr	r3, [pc, #264]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	061b      	lsls	r3, r3, #24
 8006606:	493f      	ldr	r1, [pc, #252]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 8006608:	4313      	orrs	r3, r2
 800660a:	60cb      	str	r3, [r1, #12]
 800660c:	e018      	b.n	8006640 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800660e:	4b3d      	ldr	r3, [pc, #244]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a3c      	ldr	r2, [pc, #240]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 8006614:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800661a:	f7fa fb21 	bl	8000c60 <HAL_GetTick>
 800661e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006620:	e008      	b.n	8006634 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006622:	f7fa fb1d 	bl	8000c60 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	2b02      	cmp	r3, #2
 800662e:	d901      	bls.n	8006634 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e23d      	b.n	8006ab0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006634:	4b33      	ldr	r3, [pc, #204]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1f0      	bne.n	8006622 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0308 	and.w	r3, r3, #8
 8006648:	2b00      	cmp	r3, #0
 800664a:	d036      	beq.n	80066ba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d019      	beq.n	8006688 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006654:	4b2b      	ldr	r3, [pc, #172]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 8006656:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006658:	4a2a      	ldr	r2, [pc, #168]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 800665a:	f043 0301 	orr.w	r3, r3, #1
 800665e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006660:	f7fa fafe 	bl	8000c60 <HAL_GetTick>
 8006664:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006666:	e008      	b.n	800667a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006668:	f7fa fafa 	bl	8000c60 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b02      	cmp	r3, #2
 8006674:	d901      	bls.n	800667a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e21a      	b.n	8006ab0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800667a:	4b22      	ldr	r3, [pc, #136]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 800667c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0f0      	beq.n	8006668 <HAL_RCC_OscConfig+0x45c>
 8006686:	e018      	b.n	80066ba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006688:	4b1e      	ldr	r3, [pc, #120]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 800668a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800668c:	4a1d      	ldr	r2, [pc, #116]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 800668e:	f023 0301 	bic.w	r3, r3, #1
 8006692:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006694:	f7fa fae4 	bl	8000c60 <HAL_GetTick>
 8006698:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800669a:	e008      	b.n	80066ae <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800669c:	f7fa fae0 	bl	8000c60 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e200      	b.n	8006ab0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066ae:	4b15      	ldr	r3, [pc, #84]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80066b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1f0      	bne.n	800669c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0320 	and.w	r3, r3, #32
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d039      	beq.n	800673a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d01c      	beq.n	8006708 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80066ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a0c      	ldr	r2, [pc, #48]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80066d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80066d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80066da:	f7fa fac1 	bl	8000c60 <HAL_GetTick>
 80066de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80066e0:	e008      	b.n	80066f4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066e2:	f7fa fabd 	bl	8000c60 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d901      	bls.n	80066f4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e1dd      	b.n	8006ab0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80066f4:	4b03      	ldr	r3, [pc, #12]	@ (8006704 <HAL_RCC_OscConfig+0x4f8>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0f0      	beq.n	80066e2 <HAL_RCC_OscConfig+0x4d6>
 8006700:	e01b      	b.n	800673a <HAL_RCC_OscConfig+0x52e>
 8006702:	bf00      	nop
 8006704:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006708:	4b9b      	ldr	r3, [pc, #620]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a9a      	ldr	r2, [pc, #616]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 800670e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006712:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006714:	f7fa faa4 	bl	8000c60 <HAL_GetTick>
 8006718:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800671a:	e008      	b.n	800672e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800671c:	f7fa faa0 	bl	8000c60 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b02      	cmp	r3, #2
 8006728:	d901      	bls.n	800672e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e1c0      	b.n	8006ab0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800672e:	4b92      	ldr	r3, [pc, #584]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1f0      	bne.n	800671c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0304 	and.w	r3, r3, #4
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 8081 	beq.w	800684a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006748:	4b8c      	ldr	r3, [pc, #560]	@ (800697c <HAL_RCC_OscConfig+0x770>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a8b      	ldr	r2, [pc, #556]	@ (800697c <HAL_RCC_OscConfig+0x770>)
 800674e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006752:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006754:	f7fa fa84 	bl	8000c60 <HAL_GetTick>
 8006758:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800675a:	e008      	b.n	800676e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800675c:	f7fa fa80 	bl	8000c60 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	2b64      	cmp	r3, #100	@ 0x64
 8006768:	d901      	bls.n	800676e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e1a0      	b.n	8006ab0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800676e:	4b83      	ldr	r3, [pc, #524]	@ (800697c <HAL_RCC_OscConfig+0x770>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006776:	2b00      	cmp	r3, #0
 8006778:	d0f0      	beq.n	800675c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d106      	bne.n	8006790 <HAL_RCC_OscConfig+0x584>
 8006782:	4b7d      	ldr	r3, [pc, #500]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006786:	4a7c      	ldr	r2, [pc, #496]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006788:	f043 0301 	orr.w	r3, r3, #1
 800678c:	6713      	str	r3, [r2, #112]	@ 0x70
 800678e:	e02d      	b.n	80067ec <HAL_RCC_OscConfig+0x5e0>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10c      	bne.n	80067b2 <HAL_RCC_OscConfig+0x5a6>
 8006798:	4b77      	ldr	r3, [pc, #476]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 800679a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800679c:	4a76      	ldr	r2, [pc, #472]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 800679e:	f023 0301 	bic.w	r3, r3, #1
 80067a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80067a4:	4b74      	ldr	r3, [pc, #464]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 80067a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067a8:	4a73      	ldr	r2, [pc, #460]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 80067aa:	f023 0304 	bic.w	r3, r3, #4
 80067ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80067b0:	e01c      	b.n	80067ec <HAL_RCC_OscConfig+0x5e0>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	2b05      	cmp	r3, #5
 80067b8:	d10c      	bne.n	80067d4 <HAL_RCC_OscConfig+0x5c8>
 80067ba:	4b6f      	ldr	r3, [pc, #444]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 80067bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067be:	4a6e      	ldr	r2, [pc, #440]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 80067c0:	f043 0304 	orr.w	r3, r3, #4
 80067c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80067c6:	4b6c      	ldr	r3, [pc, #432]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 80067c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ca:	4a6b      	ldr	r2, [pc, #428]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 80067cc:	f043 0301 	orr.w	r3, r3, #1
 80067d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80067d2:	e00b      	b.n	80067ec <HAL_RCC_OscConfig+0x5e0>
 80067d4:	4b68      	ldr	r3, [pc, #416]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 80067d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067d8:	4a67      	ldr	r2, [pc, #412]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 80067da:	f023 0301 	bic.w	r3, r3, #1
 80067de:	6713      	str	r3, [r2, #112]	@ 0x70
 80067e0:	4b65      	ldr	r3, [pc, #404]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 80067e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067e4:	4a64      	ldr	r2, [pc, #400]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 80067e6:	f023 0304 	bic.w	r3, r3, #4
 80067ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d015      	beq.n	8006820 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067f4:	f7fa fa34 	bl	8000c60 <HAL_GetTick>
 80067f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067fa:	e00a      	b.n	8006812 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067fc:	f7fa fa30 	bl	8000c60 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800680a:	4293      	cmp	r3, r2
 800680c:	d901      	bls.n	8006812 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e14e      	b.n	8006ab0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006812:	4b59      	ldr	r3, [pc, #356]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0ee      	beq.n	80067fc <HAL_RCC_OscConfig+0x5f0>
 800681e:	e014      	b.n	800684a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006820:	f7fa fa1e 	bl	8000c60 <HAL_GetTick>
 8006824:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006826:	e00a      	b.n	800683e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006828:	f7fa fa1a 	bl	8000c60 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006836:	4293      	cmp	r3, r2
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e138      	b.n	8006ab0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800683e:	4b4e      	ldr	r3, [pc, #312]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1ee      	bne.n	8006828 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684e:	2b00      	cmp	r3, #0
 8006850:	f000 812d 	beq.w	8006aae <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006854:	4b48      	ldr	r3, [pc, #288]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800685c:	2b18      	cmp	r3, #24
 800685e:	f000 80bd 	beq.w	80069dc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006866:	2b02      	cmp	r3, #2
 8006868:	f040 809e 	bne.w	80069a8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800686c:	4b42      	ldr	r3, [pc, #264]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a41      	ldr	r2, [pc, #260]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006872:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006878:	f7fa f9f2 	bl	8000c60 <HAL_GetTick>
 800687c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006880:	f7fa f9ee 	bl	8000c60 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e10e      	b.n	8006ab0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006892:	4b39      	ldr	r3, [pc, #228]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1f0      	bne.n	8006880 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800689e:	4b36      	ldr	r3, [pc, #216]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 80068a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068a2:	4b37      	ldr	r3, [pc, #220]	@ (8006980 <HAL_RCC_OscConfig+0x774>)
 80068a4:	4013      	ands	r3, r2
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80068ae:	0112      	lsls	r2, r2, #4
 80068b0:	430a      	orrs	r2, r1
 80068b2:	4931      	ldr	r1, [pc, #196]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068bc:	3b01      	subs	r3, #1
 80068be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068c6:	3b01      	subs	r3, #1
 80068c8:	025b      	lsls	r3, r3, #9
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	431a      	orrs	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d2:	3b01      	subs	r3, #1
 80068d4:	041b      	lsls	r3, r3, #16
 80068d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80068da:	431a      	orrs	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e0:	3b01      	subs	r3, #1
 80068e2:	061b      	lsls	r3, r3, #24
 80068e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80068e8:	4923      	ldr	r1, [pc, #140]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80068ee:	4b22      	ldr	r3, [pc, #136]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 80068f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f2:	4a21      	ldr	r2, [pc, #132]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 80068f4:	f023 0301 	bic.w	r3, r3, #1
 80068f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80068fa:	4b1f      	ldr	r3, [pc, #124]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 80068fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068fe:	4b21      	ldr	r3, [pc, #132]	@ (8006984 <HAL_RCC_OscConfig+0x778>)
 8006900:	4013      	ands	r3, r2
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006906:	00d2      	lsls	r2, r2, #3
 8006908:	491b      	ldr	r1, [pc, #108]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 800690a:	4313      	orrs	r3, r2
 800690c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800690e:	4b1a      	ldr	r3, [pc, #104]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006912:	f023 020c 	bic.w	r2, r3, #12
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691a:	4917      	ldr	r1, [pc, #92]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 800691c:	4313      	orrs	r3, r2
 800691e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006920:	4b15      	ldr	r3, [pc, #84]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006924:	f023 0202 	bic.w	r2, r3, #2
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800692c:	4912      	ldr	r1, [pc, #72]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 800692e:	4313      	orrs	r3, r2
 8006930:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006932:	4b11      	ldr	r3, [pc, #68]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006936:	4a10      	ldr	r2, [pc, #64]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800693c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800693e:	4b0e      	ldr	r3, [pc, #56]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006942:	4a0d      	ldr	r2, [pc, #52]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006948:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800694a:	4b0b      	ldr	r3, [pc, #44]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 800694c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800694e:	4a0a      	ldr	r2, [pc, #40]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006950:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006954:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006956:	4b08      	ldr	r3, [pc, #32]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695a:	4a07      	ldr	r2, [pc, #28]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 800695c:	f043 0301 	orr.w	r3, r3, #1
 8006960:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006962:	4b05      	ldr	r3, [pc, #20]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a04      	ldr	r2, [pc, #16]	@ (8006978 <HAL_RCC_OscConfig+0x76c>)
 8006968:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800696c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696e:	f7fa f977 	bl	8000c60 <HAL_GetTick>
 8006972:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006974:	e011      	b.n	800699a <HAL_RCC_OscConfig+0x78e>
 8006976:	bf00      	nop
 8006978:	58024400 	.word	0x58024400
 800697c:	58024800 	.word	0x58024800
 8006980:	fffffc0c 	.word	0xfffffc0c
 8006984:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006988:	f7fa f96a 	bl	8000c60 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	2b02      	cmp	r3, #2
 8006994:	d901      	bls.n	800699a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e08a      	b.n	8006ab0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800699a:	4b47      	ldr	r3, [pc, #284]	@ (8006ab8 <HAL_RCC_OscConfig+0x8ac>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d0f0      	beq.n	8006988 <HAL_RCC_OscConfig+0x77c>
 80069a6:	e082      	b.n	8006aae <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069a8:	4b43      	ldr	r3, [pc, #268]	@ (8006ab8 <HAL_RCC_OscConfig+0x8ac>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a42      	ldr	r2, [pc, #264]	@ (8006ab8 <HAL_RCC_OscConfig+0x8ac>)
 80069ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b4:	f7fa f954 	bl	8000c60 <HAL_GetTick>
 80069b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069ba:	e008      	b.n	80069ce <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069bc:	f7fa f950 	bl	8000c60 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d901      	bls.n	80069ce <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e070      	b.n	8006ab0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069ce:	4b3a      	ldr	r3, [pc, #232]	@ (8006ab8 <HAL_RCC_OscConfig+0x8ac>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1f0      	bne.n	80069bc <HAL_RCC_OscConfig+0x7b0>
 80069da:	e068      	b.n	8006aae <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80069dc:	4b36      	ldr	r3, [pc, #216]	@ (8006ab8 <HAL_RCC_OscConfig+0x8ac>)
 80069de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80069e2:	4b35      	ldr	r3, [pc, #212]	@ (8006ab8 <HAL_RCC_OscConfig+0x8ac>)
 80069e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d031      	beq.n	8006a54 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f003 0203 	and.w	r2, r3, #3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d12a      	bne.n	8006a54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	091b      	lsrs	r3, r3, #4
 8006a02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d122      	bne.n	8006a54 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a18:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d11a      	bne.n	8006a54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	0a5b      	lsrs	r3, r3, #9
 8006a22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a2a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d111      	bne.n	8006a54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	0c1b      	lsrs	r3, r3, #16
 8006a34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d108      	bne.n	8006a54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	0e1b      	lsrs	r3, r3, #24
 8006a46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d001      	beq.n	8006a58 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e02b      	b.n	8006ab0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006a58:	4b17      	ldr	r3, [pc, #92]	@ (8006ab8 <HAL_RCC_OscConfig+0x8ac>)
 8006a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a5c:	08db      	lsrs	r3, r3, #3
 8006a5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a62:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d01f      	beq.n	8006aae <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006a6e:	4b12      	ldr	r3, [pc, #72]	@ (8006ab8 <HAL_RCC_OscConfig+0x8ac>)
 8006a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a72:	4a11      	ldr	r2, [pc, #68]	@ (8006ab8 <HAL_RCC_OscConfig+0x8ac>)
 8006a74:	f023 0301 	bic.w	r3, r3, #1
 8006a78:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a7a:	f7fa f8f1 	bl	8000c60 <HAL_GetTick>
 8006a7e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006a80:	bf00      	nop
 8006a82:	f7fa f8ed 	bl	8000c60 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d0f9      	beq.n	8006a82 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8006ab8 <HAL_RCC_OscConfig+0x8ac>)
 8006a90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a92:	4b0a      	ldr	r3, [pc, #40]	@ (8006abc <HAL_RCC_OscConfig+0x8b0>)
 8006a94:	4013      	ands	r3, r2
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006a9a:	00d2      	lsls	r2, r2, #3
 8006a9c:	4906      	ldr	r1, [pc, #24]	@ (8006ab8 <HAL_RCC_OscConfig+0x8ac>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006aa2:	4b05      	ldr	r3, [pc, #20]	@ (8006ab8 <HAL_RCC_OscConfig+0x8ac>)
 8006aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa6:	4a04      	ldr	r2, [pc, #16]	@ (8006ab8 <HAL_RCC_OscConfig+0x8ac>)
 8006aa8:	f043 0301 	orr.w	r3, r3, #1
 8006aac:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3730      	adds	r7, #48	@ 0x30
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	58024400 	.word	0x58024400
 8006abc:	ffff0007 	.word	0xffff0007

08006ac0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e19c      	b.n	8006e0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ad4:	4b8a      	ldr	r3, [pc, #552]	@ (8006d00 <HAL_RCC_ClockConfig+0x240>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 030f 	and.w	r3, r3, #15
 8006adc:	683a      	ldr	r2, [r7, #0]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d910      	bls.n	8006b04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ae2:	4b87      	ldr	r3, [pc, #540]	@ (8006d00 <HAL_RCC_ClockConfig+0x240>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f023 020f 	bic.w	r2, r3, #15
 8006aea:	4985      	ldr	r1, [pc, #532]	@ (8006d00 <HAL_RCC_ClockConfig+0x240>)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006af2:	4b83      	ldr	r3, [pc, #524]	@ (8006d00 <HAL_RCC_ClockConfig+0x240>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 030f 	and.w	r3, r3, #15
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d001      	beq.n	8006b04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e184      	b.n	8006e0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d010      	beq.n	8006b32 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691a      	ldr	r2, [r3, #16]
 8006b14:	4b7b      	ldr	r3, [pc, #492]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d908      	bls.n	8006b32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b20:	4b78      	ldr	r3, [pc, #480]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	4975      	ldr	r1, [pc, #468]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0308 	and.w	r3, r3, #8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d010      	beq.n	8006b60 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	695a      	ldr	r2, [r3, #20]
 8006b42:	4b70      	ldr	r3, [pc, #448]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d908      	bls.n	8006b60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b4e:	4b6d      	ldr	r3, [pc, #436]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	496a      	ldr	r1, [pc, #424]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0310 	and.w	r3, r3, #16
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d010      	beq.n	8006b8e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	699a      	ldr	r2, [r3, #24]
 8006b70:	4b64      	ldr	r3, [pc, #400]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006b72:	69db      	ldr	r3, [r3, #28]
 8006b74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d908      	bls.n	8006b8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b7c:	4b61      	ldr	r3, [pc, #388]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	495e      	ldr	r1, [pc, #376]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0320 	and.w	r3, r3, #32
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d010      	beq.n	8006bbc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	69da      	ldr	r2, [r3, #28]
 8006b9e:	4b59      	ldr	r3, [pc, #356]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d908      	bls.n	8006bbc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006baa:	4b56      	ldr	r3, [pc, #344]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	4953      	ldr	r1, [pc, #332]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d010      	beq.n	8006bea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68da      	ldr	r2, [r3, #12]
 8006bcc:	4b4d      	ldr	r3, [pc, #308]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	f003 030f 	and.w	r3, r3, #15
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d908      	bls.n	8006bea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bd8:	4b4a      	ldr	r3, [pc, #296]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	f023 020f 	bic.w	r2, r3, #15
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	4947      	ldr	r1, [pc, #284]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d055      	beq.n	8006ca2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006bf6:	4b43      	ldr	r3, [pc, #268]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	4940      	ldr	r1, [pc, #256]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d107      	bne.n	8006c20 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c10:	4b3c      	ldr	r3, [pc, #240]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d121      	bne.n	8006c60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e0f6      	b.n	8006e0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	d107      	bne.n	8006c38 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c28:	4b36      	ldr	r3, [pc, #216]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d115      	bne.n	8006c60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e0ea      	b.n	8006e0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d107      	bne.n	8006c50 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c40:	4b30      	ldr	r3, [pc, #192]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d109      	bne.n	8006c60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e0de      	b.n	8006e0e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c50:	4b2c      	ldr	r3, [pc, #176]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0304 	and.w	r3, r3, #4
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e0d6      	b.n	8006e0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c60:	4b28      	ldr	r3, [pc, #160]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	f023 0207 	bic.w	r2, r3, #7
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	4925      	ldr	r1, [pc, #148]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c72:	f7f9 fff5 	bl	8000c60 <HAL_GetTick>
 8006c76:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c78:	e00a      	b.n	8006c90 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c7a:	f7f9 fff1 	bl	8000c60 <HAL_GetTick>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d901      	bls.n	8006c90 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e0be      	b.n	8006e0e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c90:	4b1c      	ldr	r3, [pc, #112]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	00db      	lsls	r3, r3, #3
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d1eb      	bne.n	8006c7a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d010      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68da      	ldr	r2, [r3, #12]
 8006cb2:	4b14      	ldr	r3, [pc, #80]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	f003 030f 	and.w	r3, r3, #15
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d208      	bcs.n	8006cd0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cbe:	4b11      	ldr	r3, [pc, #68]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	f023 020f 	bic.w	r2, r3, #15
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	490e      	ldr	r1, [pc, #56]	@ (8006d04 <HAL_RCC_ClockConfig+0x244>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8006d00 <HAL_RCC_ClockConfig+0x240>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 030f 	and.w	r3, r3, #15
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d214      	bcs.n	8006d08 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cde:	4b08      	ldr	r3, [pc, #32]	@ (8006d00 <HAL_RCC_ClockConfig+0x240>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f023 020f 	bic.w	r2, r3, #15
 8006ce6:	4906      	ldr	r1, [pc, #24]	@ (8006d00 <HAL_RCC_ClockConfig+0x240>)
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cee:	4b04      	ldr	r3, [pc, #16]	@ (8006d00 <HAL_RCC_ClockConfig+0x240>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 030f 	and.w	r3, r3, #15
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d005      	beq.n	8006d08 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e086      	b.n	8006e0e <HAL_RCC_ClockConfig+0x34e>
 8006d00:	52002000 	.word	0x52002000
 8006d04:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0304 	and.w	r3, r3, #4
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d010      	beq.n	8006d36 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	691a      	ldr	r2, [r3, #16]
 8006d18:	4b3f      	ldr	r3, [pc, #252]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d208      	bcs.n	8006d36 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d24:	4b3c      	ldr	r3, [pc, #240]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	4939      	ldr	r1, [pc, #228]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0308 	and.w	r3, r3, #8
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d010      	beq.n	8006d64 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	695a      	ldr	r2, [r3, #20]
 8006d46:	4b34      	ldr	r3, [pc, #208]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d208      	bcs.n	8006d64 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d52:	4b31      	ldr	r3, [pc, #196]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	492e      	ldr	r1, [pc, #184]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0310 	and.w	r3, r3, #16
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d010      	beq.n	8006d92 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	699a      	ldr	r2, [r3, #24]
 8006d74:	4b28      	ldr	r3, [pc, #160]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d208      	bcs.n	8006d92 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d80:	4b25      	ldr	r3, [pc, #148]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	4922      	ldr	r1, [pc, #136]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0320 	and.w	r3, r3, #32
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d010      	beq.n	8006dc0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	69da      	ldr	r2, [r3, #28]
 8006da2:	4b1d      	ldr	r3, [pc, #116]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d208      	bcs.n	8006dc0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006dae:	4b1a      	ldr	r3, [pc, #104]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	4917      	ldr	r1, [pc, #92]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006dc0:	f000 f834 	bl	8006e2c <HAL_RCC_GetSysClockFreq>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	4b14      	ldr	r3, [pc, #80]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	0a1b      	lsrs	r3, r3, #8
 8006dcc:	f003 030f 	and.w	r3, r3, #15
 8006dd0:	4912      	ldr	r1, [pc, #72]	@ (8006e1c <HAL_RCC_ClockConfig+0x35c>)
 8006dd2:	5ccb      	ldrb	r3, [r1, r3]
 8006dd4:	f003 031f 	and.w	r3, r3, #31
 8006dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ddc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006dde:	4b0e      	ldr	r3, [pc, #56]	@ (8006e18 <HAL_RCC_ClockConfig+0x358>)
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	f003 030f 	and.w	r3, r3, #15
 8006de6:	4a0d      	ldr	r2, [pc, #52]	@ (8006e1c <HAL_RCC_ClockConfig+0x35c>)
 8006de8:	5cd3      	ldrb	r3, [r2, r3]
 8006dea:	f003 031f 	and.w	r3, r3, #31
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	fa22 f303 	lsr.w	r3, r2, r3
 8006df4:	4a0a      	ldr	r2, [pc, #40]	@ (8006e20 <HAL_RCC_ClockConfig+0x360>)
 8006df6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006df8:	4a0a      	ldr	r2, [pc, #40]	@ (8006e24 <HAL_RCC_ClockConfig+0x364>)
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8006e28 <HAL_RCC_ClockConfig+0x368>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7f9 fee2 	bl	8000bcc <HAL_InitTick>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3718      	adds	r7, #24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	58024400 	.word	0x58024400
 8006e1c:	0800e4a4 	.word	0x0800e4a4
 8006e20:	24000004 	.word	0x24000004
 8006e24:	24000000 	.word	0x24000000
 8006e28:	24000008 	.word	0x24000008

08006e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b089      	sub	sp, #36	@ 0x24
 8006e30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e32:	4bb3      	ldr	r3, [pc, #716]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e3a:	2b18      	cmp	r3, #24
 8006e3c:	f200 8155 	bhi.w	80070ea <HAL_RCC_GetSysClockFreq+0x2be>
 8006e40:	a201      	add	r2, pc, #4	@ (adr r2, 8006e48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e46:	bf00      	nop
 8006e48:	08006ead 	.word	0x08006ead
 8006e4c:	080070eb 	.word	0x080070eb
 8006e50:	080070eb 	.word	0x080070eb
 8006e54:	080070eb 	.word	0x080070eb
 8006e58:	080070eb 	.word	0x080070eb
 8006e5c:	080070eb 	.word	0x080070eb
 8006e60:	080070eb 	.word	0x080070eb
 8006e64:	080070eb 	.word	0x080070eb
 8006e68:	08006ed3 	.word	0x08006ed3
 8006e6c:	080070eb 	.word	0x080070eb
 8006e70:	080070eb 	.word	0x080070eb
 8006e74:	080070eb 	.word	0x080070eb
 8006e78:	080070eb 	.word	0x080070eb
 8006e7c:	080070eb 	.word	0x080070eb
 8006e80:	080070eb 	.word	0x080070eb
 8006e84:	080070eb 	.word	0x080070eb
 8006e88:	08006ed9 	.word	0x08006ed9
 8006e8c:	080070eb 	.word	0x080070eb
 8006e90:	080070eb 	.word	0x080070eb
 8006e94:	080070eb 	.word	0x080070eb
 8006e98:	080070eb 	.word	0x080070eb
 8006e9c:	080070eb 	.word	0x080070eb
 8006ea0:	080070eb 	.word	0x080070eb
 8006ea4:	080070eb 	.word	0x080070eb
 8006ea8:	08006edf 	.word	0x08006edf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006eac:	4b94      	ldr	r3, [pc, #592]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0320 	and.w	r3, r3, #32
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d009      	beq.n	8006ecc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006eb8:	4b91      	ldr	r3, [pc, #580]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	08db      	lsrs	r3, r3, #3
 8006ebe:	f003 0303 	and.w	r3, r3, #3
 8006ec2:	4a90      	ldr	r2, [pc, #576]	@ (8007104 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006eca:	e111      	b.n	80070f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006ecc:	4b8d      	ldr	r3, [pc, #564]	@ (8007104 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ece:	61bb      	str	r3, [r7, #24]
      break;
 8006ed0:	e10e      	b.n	80070f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006ed2:	4b8d      	ldr	r3, [pc, #564]	@ (8007108 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ed4:	61bb      	str	r3, [r7, #24]
      break;
 8006ed6:	e10b      	b.n	80070f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006ed8:	4b8c      	ldr	r3, [pc, #560]	@ (800710c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006eda:	61bb      	str	r3, [r7, #24]
      break;
 8006edc:	e108      	b.n	80070f0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ede:	4b88      	ldr	r3, [pc, #544]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee2:	f003 0303 	and.w	r3, r3, #3
 8006ee6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006ee8:	4b85      	ldr	r3, [pc, #532]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eec:	091b      	lsrs	r3, r3, #4
 8006eee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ef2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006ef4:	4b82      	ldr	r3, [pc, #520]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006efe:	4b80      	ldr	r3, [pc, #512]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f02:	08db      	lsrs	r3, r3, #3
 8006f04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	fb02 f303 	mul.w	r3, r2, r3
 8006f0e:	ee07 3a90 	vmov	s15, r3
 8006f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f16:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 80e1 	beq.w	80070e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	f000 8083 	beq.w	8007030 <HAL_RCC_GetSysClockFreq+0x204>
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	f200 80a1 	bhi.w	8007074 <HAL_RCC_GetSysClockFreq+0x248>
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d003      	beq.n	8006f40 <HAL_RCC_GetSysClockFreq+0x114>
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d056      	beq.n	8006fec <HAL_RCC_GetSysClockFreq+0x1c0>
 8006f3e:	e099      	b.n	8007074 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f40:	4b6f      	ldr	r3, [pc, #444]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0320 	and.w	r3, r3, #32
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d02d      	beq.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f4c:	4b6c      	ldr	r3, [pc, #432]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	08db      	lsrs	r3, r3, #3
 8006f52:	f003 0303 	and.w	r3, r3, #3
 8006f56:	4a6b      	ldr	r2, [pc, #428]	@ (8007104 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f58:	fa22 f303 	lsr.w	r3, r2, r3
 8006f5c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	ee07 3a90 	vmov	s15, r3
 8006f64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	ee07 3a90 	vmov	s15, r3
 8006f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f76:	4b62      	ldr	r3, [pc, #392]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7e:	ee07 3a90 	vmov	s15, r3
 8006f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f86:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f8a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007110 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006fa6:	e087      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	ee07 3a90 	vmov	s15, r3
 8006fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007114 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fba:	4b51      	ldr	r3, [pc, #324]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc2:	ee07 3a90 	vmov	s15, r3
 8006fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fca:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fce:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007110 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006fea:	e065      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	ee07 3a90 	vmov	s15, r3
 8006ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007118 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffe:	4b40      	ldr	r3, [pc, #256]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007006:	ee07 3a90 	vmov	s15, r3
 800700a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007012:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007110 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800701a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800702a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800702e:	e043      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800711c <HAL_RCC_GetSysClockFreq+0x2f0>
 800703e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007042:	4b2f      	ldr	r3, [pc, #188]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007052:	ed97 6a02 	vldr	s12, [r7, #8]
 8007056:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007110 <HAL_RCC_GetSysClockFreq+0x2e4>
 800705a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800705e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007062:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800706a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007072:	e021      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007118 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007086:	4b1e      	ldr	r3, [pc, #120]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800708a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007096:	ed97 6a02 	vldr	s12, [r7, #8]
 800709a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007110 <HAL_RCC_GetSysClockFreq+0x2e4>
 800709e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070b6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80070b8:	4b11      	ldr	r3, [pc, #68]	@ (8007100 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070bc:	0a5b      	lsrs	r3, r3, #9
 80070be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070c2:	3301      	adds	r3, #1
 80070c4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	ee07 3a90 	vmov	s15, r3
 80070cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80070d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80070d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070dc:	ee17 3a90 	vmov	r3, s15
 80070e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80070e2:	e005      	b.n	80070f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	61bb      	str	r3, [r7, #24]
      break;
 80070e8:	e002      	b.n	80070f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80070ea:	4b07      	ldr	r3, [pc, #28]	@ (8007108 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80070ec:	61bb      	str	r3, [r7, #24]
      break;
 80070ee:	bf00      	nop
  }

  return sysclockfreq;
 80070f0:	69bb      	ldr	r3, [r7, #24]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3724      	adds	r7, #36	@ 0x24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	58024400 	.word	0x58024400
 8007104:	03d09000 	.word	0x03d09000
 8007108:	003d0900 	.word	0x003d0900
 800710c:	017d7840 	.word	0x017d7840
 8007110:	46000000 	.word	0x46000000
 8007114:	4c742400 	.word	0x4c742400
 8007118:	4a742400 	.word	0x4a742400
 800711c:	4bbebc20 	.word	0x4bbebc20

08007120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007126:	f7ff fe81 	bl	8006e2c <HAL_RCC_GetSysClockFreq>
 800712a:	4602      	mov	r2, r0
 800712c:	4b10      	ldr	r3, [pc, #64]	@ (8007170 <HAL_RCC_GetHCLKFreq+0x50>)
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	0a1b      	lsrs	r3, r3, #8
 8007132:	f003 030f 	and.w	r3, r3, #15
 8007136:	490f      	ldr	r1, [pc, #60]	@ (8007174 <HAL_RCC_GetHCLKFreq+0x54>)
 8007138:	5ccb      	ldrb	r3, [r1, r3]
 800713a:	f003 031f 	and.w	r3, r3, #31
 800713e:	fa22 f303 	lsr.w	r3, r2, r3
 8007142:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007144:	4b0a      	ldr	r3, [pc, #40]	@ (8007170 <HAL_RCC_GetHCLKFreq+0x50>)
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	f003 030f 	and.w	r3, r3, #15
 800714c:	4a09      	ldr	r2, [pc, #36]	@ (8007174 <HAL_RCC_GetHCLKFreq+0x54>)
 800714e:	5cd3      	ldrb	r3, [r2, r3]
 8007150:	f003 031f 	and.w	r3, r3, #31
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	fa22 f303 	lsr.w	r3, r2, r3
 800715a:	4a07      	ldr	r2, [pc, #28]	@ (8007178 <HAL_RCC_GetHCLKFreq+0x58>)
 800715c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800715e:	4a07      	ldr	r2, [pc, #28]	@ (800717c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007164:	4b04      	ldr	r3, [pc, #16]	@ (8007178 <HAL_RCC_GetHCLKFreq+0x58>)
 8007166:	681b      	ldr	r3, [r3, #0]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	58024400 	.word	0x58024400
 8007174:	0800e4a4 	.word	0x0800e4a4
 8007178:	24000004 	.word	0x24000004
 800717c:	24000000 	.word	0x24000000

08007180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007184:	f7ff ffcc 	bl	8007120 <HAL_RCC_GetHCLKFreq>
 8007188:	4602      	mov	r2, r0
 800718a:	4b06      	ldr	r3, [pc, #24]	@ (80071a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	091b      	lsrs	r3, r3, #4
 8007190:	f003 0307 	and.w	r3, r3, #7
 8007194:	4904      	ldr	r1, [pc, #16]	@ (80071a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007196:	5ccb      	ldrb	r3, [r1, r3]
 8007198:	f003 031f 	and.w	r3, r3, #31
 800719c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	58024400 	.word	0x58024400
 80071a8:	0800e4a4 	.word	0x0800e4a4

080071ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071b0:	b0ca      	sub	sp, #296	@ 0x128
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80071b8:	2300      	movs	r3, #0
 80071ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80071be:	2300      	movs	r3, #0
 80071c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80071c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071cc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80071d0:	2500      	movs	r5, #0
 80071d2:	ea54 0305 	orrs.w	r3, r4, r5
 80071d6:	d049      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80071d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071e2:	d02f      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80071e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071e8:	d828      	bhi.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80071ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071ee:	d01a      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80071f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071f4:	d822      	bhi.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80071fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071fe:	d007      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007200:	e01c      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007202:	4bb8      	ldr	r3, [pc, #736]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007206:	4ab7      	ldr	r2, [pc, #732]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007208:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800720c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800720e:	e01a      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007214:	3308      	adds	r3, #8
 8007216:	2102      	movs	r1, #2
 8007218:	4618      	mov	r0, r3
 800721a:	f002 fb61 	bl	80098e0 <RCCEx_PLL2_Config>
 800721e:	4603      	mov	r3, r0
 8007220:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007224:	e00f      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800722a:	3328      	adds	r3, #40	@ 0x28
 800722c:	2102      	movs	r1, #2
 800722e:	4618      	mov	r0, r3
 8007230:	f002 fc08 	bl	8009a44 <RCCEx_PLL3_Config>
 8007234:	4603      	mov	r3, r0
 8007236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800723a:	e004      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007242:	e000      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007246:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10a      	bne.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800724e:	4ba5      	ldr	r3, [pc, #660]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007252:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800725a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800725c:	4aa1      	ldr	r2, [pc, #644]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800725e:	430b      	orrs	r3, r1
 8007260:	6513      	str	r3, [r2, #80]	@ 0x50
 8007262:	e003      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007264:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007268:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800726c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007278:	f04f 0900 	mov.w	r9, #0
 800727c:	ea58 0309 	orrs.w	r3, r8, r9
 8007280:	d047      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007288:	2b04      	cmp	r3, #4
 800728a:	d82a      	bhi.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800728c:	a201      	add	r2, pc, #4	@ (adr r2, 8007294 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800728e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007292:	bf00      	nop
 8007294:	080072a9 	.word	0x080072a9
 8007298:	080072b7 	.word	0x080072b7
 800729c:	080072cd 	.word	0x080072cd
 80072a0:	080072eb 	.word	0x080072eb
 80072a4:	080072eb 	.word	0x080072eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072a8:	4b8e      	ldr	r3, [pc, #568]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ac:	4a8d      	ldr	r2, [pc, #564]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072b4:	e01a      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ba:	3308      	adds	r3, #8
 80072bc:	2100      	movs	r1, #0
 80072be:	4618      	mov	r0, r3
 80072c0:	f002 fb0e 	bl	80098e0 <RCCEx_PLL2_Config>
 80072c4:	4603      	mov	r3, r0
 80072c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072ca:	e00f      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d0:	3328      	adds	r3, #40	@ 0x28
 80072d2:	2100      	movs	r1, #0
 80072d4:	4618      	mov	r0, r3
 80072d6:	f002 fbb5 	bl	8009a44 <RCCEx_PLL3_Config>
 80072da:	4603      	mov	r3, r0
 80072dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072e0:	e004      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072e8:	e000      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80072ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10a      	bne.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072f4:	4b7b      	ldr	r3, [pc, #492]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072f8:	f023 0107 	bic.w	r1, r3, #7
 80072fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007302:	4a78      	ldr	r2, [pc, #480]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007304:	430b      	orrs	r3, r1
 8007306:	6513      	str	r3, [r2, #80]	@ 0x50
 8007308:	e003      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800730a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800730e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800731e:	f04f 0b00 	mov.w	fp, #0
 8007322:	ea5a 030b 	orrs.w	r3, sl, fp
 8007326:	d04c      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800732e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007332:	d030      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007334:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007338:	d829      	bhi.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800733a:	2bc0      	cmp	r3, #192	@ 0xc0
 800733c:	d02d      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800733e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007340:	d825      	bhi.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007342:	2b80      	cmp	r3, #128	@ 0x80
 8007344:	d018      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007346:	2b80      	cmp	r3, #128	@ 0x80
 8007348:	d821      	bhi.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800734a:	2b00      	cmp	r3, #0
 800734c:	d002      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800734e:	2b40      	cmp	r3, #64	@ 0x40
 8007350:	d007      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007352:	e01c      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007354:	4b63      	ldr	r3, [pc, #396]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007358:	4a62      	ldr	r2, [pc, #392]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800735a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800735e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007360:	e01c      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007366:	3308      	adds	r3, #8
 8007368:	2100      	movs	r1, #0
 800736a:	4618      	mov	r0, r3
 800736c:	f002 fab8 	bl	80098e0 <RCCEx_PLL2_Config>
 8007370:	4603      	mov	r3, r0
 8007372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007376:	e011      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800737c:	3328      	adds	r3, #40	@ 0x28
 800737e:	2100      	movs	r1, #0
 8007380:	4618      	mov	r0, r3
 8007382:	f002 fb5f 	bl	8009a44 <RCCEx_PLL3_Config>
 8007386:	4603      	mov	r3, r0
 8007388:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800738c:	e006      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007394:	e002      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007396:	bf00      	nop
 8007398:	e000      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800739a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800739c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10a      	bne.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80073a4:	4b4f      	ldr	r3, [pc, #316]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073a8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80073ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073b2:	4a4c      	ldr	r2, [pc, #304]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073b4:	430b      	orrs	r3, r1
 80073b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80073b8:	e003      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80073c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ca:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80073ce:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80073d2:	2300      	movs	r3, #0
 80073d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80073d8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80073dc:	460b      	mov	r3, r1
 80073de:	4313      	orrs	r3, r2
 80073e0:	d053      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80073e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80073ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80073ee:	d035      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80073f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80073f4:	d82e      	bhi.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80073f6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80073fa:	d031      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80073fc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007400:	d828      	bhi.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007402:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007406:	d01a      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007408:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800740c:	d822      	bhi.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007412:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007416:	d007      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007418:	e01c      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800741a:	4b32      	ldr	r3, [pc, #200]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800741c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741e:	4a31      	ldr	r2, [pc, #196]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007424:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007426:	e01c      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800742c:	3308      	adds	r3, #8
 800742e:	2100      	movs	r1, #0
 8007430:	4618      	mov	r0, r3
 8007432:	f002 fa55 	bl	80098e0 <RCCEx_PLL2_Config>
 8007436:	4603      	mov	r3, r0
 8007438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800743c:	e011      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800743e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007442:	3328      	adds	r3, #40	@ 0x28
 8007444:	2100      	movs	r1, #0
 8007446:	4618      	mov	r0, r3
 8007448:	f002 fafc 	bl	8009a44 <RCCEx_PLL3_Config>
 800744c:	4603      	mov	r3, r0
 800744e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007452:	e006      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800745a:	e002      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800745c:	bf00      	nop
 800745e:	e000      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10b      	bne.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800746a:	4b1e      	ldr	r3, [pc, #120]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800746c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800746e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007476:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800747a:	4a1a      	ldr	r2, [pc, #104]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800747c:	430b      	orrs	r3, r1
 800747e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007480:	e003      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007486:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800748a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800748e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007492:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007496:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800749a:	2300      	movs	r3, #0
 800749c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80074a0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80074a4:	460b      	mov	r3, r1
 80074a6:	4313      	orrs	r3, r2
 80074a8:	d056      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80074aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80074b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80074b6:	d038      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80074b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80074bc:	d831      	bhi.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80074be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80074c2:	d034      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80074c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80074c8:	d82b      	bhi.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80074ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074ce:	d01d      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80074d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074d4:	d825      	bhi.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d006      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80074da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074de:	d00a      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80074e0:	e01f      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80074e2:	bf00      	nop
 80074e4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074e8:	4ba2      	ldr	r3, [pc, #648]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ec:	4aa1      	ldr	r2, [pc, #644]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074f4:	e01c      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074fa:	3308      	adds	r3, #8
 80074fc:	2100      	movs	r1, #0
 80074fe:	4618      	mov	r0, r3
 8007500:	f002 f9ee 	bl	80098e0 <RCCEx_PLL2_Config>
 8007504:	4603      	mov	r3, r0
 8007506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800750a:	e011      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800750c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007510:	3328      	adds	r3, #40	@ 0x28
 8007512:	2100      	movs	r1, #0
 8007514:	4618      	mov	r0, r3
 8007516:	f002 fa95 	bl	8009a44 <RCCEx_PLL3_Config>
 800751a:	4603      	mov	r3, r0
 800751c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007520:	e006      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007528:	e002      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800752a:	bf00      	nop
 800752c:	e000      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800752e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007530:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10b      	bne.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007538:	4b8e      	ldr	r3, [pc, #568]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800753a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800753c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007544:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007548:	4a8a      	ldr	r2, [pc, #552]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800754a:	430b      	orrs	r3, r1
 800754c:	6593      	str	r3, [r2, #88]	@ 0x58
 800754e:	e003      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007550:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007554:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800755c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007560:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007564:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007568:	2300      	movs	r3, #0
 800756a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800756e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007572:	460b      	mov	r3, r1
 8007574:	4313      	orrs	r3, r2
 8007576:	d03a      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800757c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800757e:	2b30      	cmp	r3, #48	@ 0x30
 8007580:	d01f      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007582:	2b30      	cmp	r3, #48	@ 0x30
 8007584:	d819      	bhi.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007586:	2b20      	cmp	r3, #32
 8007588:	d00c      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800758a:	2b20      	cmp	r3, #32
 800758c:	d815      	bhi.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800758e:	2b00      	cmp	r3, #0
 8007590:	d019      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007592:	2b10      	cmp	r3, #16
 8007594:	d111      	bne.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007596:	4b77      	ldr	r3, [pc, #476]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759a:	4a76      	ldr	r2, [pc, #472]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800759c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80075a2:	e011      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80075a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a8:	3308      	adds	r3, #8
 80075aa:	2102      	movs	r1, #2
 80075ac:	4618      	mov	r0, r3
 80075ae:	f002 f997 	bl	80098e0 <RCCEx_PLL2_Config>
 80075b2:	4603      	mov	r3, r0
 80075b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80075b8:	e006      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075c0:	e002      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80075c2:	bf00      	nop
 80075c4:	e000      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80075c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10a      	bne.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80075d0:	4b68      	ldr	r3, [pc, #416]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075d4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80075d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075de:	4a65      	ldr	r2, [pc, #404]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075e0:	430b      	orrs	r3, r1
 80075e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80075e4:	e003      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80075ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80075fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80075fe:	2300      	movs	r3, #0
 8007600:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007604:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007608:	460b      	mov	r3, r1
 800760a:	4313      	orrs	r3, r2
 800760c:	d051      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800760e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007614:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007618:	d035      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800761a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800761e:	d82e      	bhi.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007620:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007624:	d031      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007626:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800762a:	d828      	bhi.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800762c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007630:	d01a      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007636:	d822      	bhi.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800763c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007640:	d007      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007642:	e01c      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007644:	4b4b      	ldr	r3, [pc, #300]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007648:	4a4a      	ldr	r2, [pc, #296]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800764a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800764e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007650:	e01c      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007656:	3308      	adds	r3, #8
 8007658:	2100      	movs	r1, #0
 800765a:	4618      	mov	r0, r3
 800765c:	f002 f940 	bl	80098e0 <RCCEx_PLL2_Config>
 8007660:	4603      	mov	r3, r0
 8007662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007666:	e011      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800766c:	3328      	adds	r3, #40	@ 0x28
 800766e:	2100      	movs	r1, #0
 8007670:	4618      	mov	r0, r3
 8007672:	f002 f9e7 	bl	8009a44 <RCCEx_PLL3_Config>
 8007676:	4603      	mov	r3, r0
 8007678:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800767c:	e006      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007684:	e002      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007686:	bf00      	nop
 8007688:	e000      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800768a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800768c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10a      	bne.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007694:	4b37      	ldr	r3, [pc, #220]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007698:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800769c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076a2:	4a34      	ldr	r2, [pc, #208]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076a4:	430b      	orrs	r3, r1
 80076a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80076a8:	e003      	b.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80076b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80076be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80076c2:	2300      	movs	r3, #0
 80076c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80076c8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80076cc:	460b      	mov	r3, r1
 80076ce:	4313      	orrs	r3, r2
 80076d0:	d056      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80076d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80076dc:	d033      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80076de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80076e2:	d82c      	bhi.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80076e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80076e8:	d02f      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80076ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80076ee:	d826      	bhi.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80076f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80076f4:	d02b      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80076f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80076fa:	d820      	bhi.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80076fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007700:	d012      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007702:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007706:	d81a      	bhi.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007708:	2b00      	cmp	r3, #0
 800770a:	d022      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800770c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007710:	d115      	bne.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007716:	3308      	adds	r3, #8
 8007718:	2101      	movs	r1, #1
 800771a:	4618      	mov	r0, r3
 800771c:	f002 f8e0 	bl	80098e0 <RCCEx_PLL2_Config>
 8007720:	4603      	mov	r3, r0
 8007722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007726:	e015      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800772c:	3328      	adds	r3, #40	@ 0x28
 800772e:	2101      	movs	r1, #1
 8007730:	4618      	mov	r0, r3
 8007732:	f002 f987 	bl	8009a44 <RCCEx_PLL3_Config>
 8007736:	4603      	mov	r3, r0
 8007738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800773c:	e00a      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007744:	e006      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007746:	bf00      	nop
 8007748:	e004      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800774a:	bf00      	nop
 800774c:	e002      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800774e:	bf00      	nop
 8007750:	e000      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007752:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007754:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10d      	bne.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800775c:	4b05      	ldr	r3, [pc, #20]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800775e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007760:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007768:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800776a:	4a02      	ldr	r2, [pc, #8]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800776c:	430b      	orrs	r3, r1
 800776e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007770:	e006      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007772:	bf00      	nop
 8007774:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007778:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800777c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007788:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800778c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007790:	2300      	movs	r3, #0
 8007792:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007796:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800779a:	460b      	mov	r3, r1
 800779c:	4313      	orrs	r3, r2
 800779e:	d055      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80077a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80077a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077ac:	d033      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80077ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077b2:	d82c      	bhi.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80077b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077b8:	d02f      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80077ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077be:	d826      	bhi.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80077c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80077c4:	d02b      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80077c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80077ca:	d820      	bhi.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80077cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077d0:	d012      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80077d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077d6:	d81a      	bhi.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d022      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80077dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077e0:	d115      	bne.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e6:	3308      	adds	r3, #8
 80077e8:	2101      	movs	r1, #1
 80077ea:	4618      	mov	r0, r3
 80077ec:	f002 f878 	bl	80098e0 <RCCEx_PLL2_Config>
 80077f0:	4603      	mov	r3, r0
 80077f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80077f6:	e015      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077fc:	3328      	adds	r3, #40	@ 0x28
 80077fe:	2101      	movs	r1, #1
 8007800:	4618      	mov	r0, r3
 8007802:	f002 f91f 	bl	8009a44 <RCCEx_PLL3_Config>
 8007806:	4603      	mov	r3, r0
 8007808:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800780c:	e00a      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007814:	e006      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007816:	bf00      	nop
 8007818:	e004      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800781a:	bf00      	nop
 800781c:	e002      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800781e:	bf00      	nop
 8007820:	e000      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007822:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10b      	bne.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800782c:	4ba3      	ldr	r3, [pc, #652]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800782e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007830:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007838:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800783c:	4a9f      	ldr	r2, [pc, #636]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800783e:	430b      	orrs	r3, r1
 8007840:	6593      	str	r3, [r2, #88]	@ 0x58
 8007842:	e003      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007848:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800784c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007854:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007858:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800785c:	2300      	movs	r3, #0
 800785e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007862:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007866:	460b      	mov	r3, r1
 8007868:	4313      	orrs	r3, r2
 800786a:	d037      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800786c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007876:	d00e      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007878:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800787c:	d816      	bhi.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x700>
 800787e:	2b00      	cmp	r3, #0
 8007880:	d018      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007882:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007886:	d111      	bne.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007888:	4b8c      	ldr	r3, [pc, #560]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800788a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800788c:	4a8b      	ldr	r2, [pc, #556]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800788e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007892:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007894:	e00f      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800789a:	3308      	adds	r3, #8
 800789c:	2101      	movs	r1, #1
 800789e:	4618      	mov	r0, r3
 80078a0:	f002 f81e 	bl	80098e0 <RCCEx_PLL2_Config>
 80078a4:	4603      	mov	r3, r0
 80078a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80078aa:	e004      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078b2:	e000      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80078b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10a      	bne.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80078be:	4b7f      	ldr	r3, [pc, #508]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078c2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80078c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078cc:	4a7b      	ldr	r2, [pc, #492]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078ce:	430b      	orrs	r3, r1
 80078d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80078d2:	e003      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80078dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80078e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078ec:	2300      	movs	r3, #0
 80078ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80078f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80078f6:	460b      	mov	r3, r1
 80078f8:	4313      	orrs	r3, r2
 80078fa:	d039      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80078fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007902:	2b03      	cmp	r3, #3
 8007904:	d81c      	bhi.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007906:	a201      	add	r2, pc, #4	@ (adr r2, 800790c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790c:	08007949 	.word	0x08007949
 8007910:	0800791d 	.word	0x0800791d
 8007914:	0800792b 	.word	0x0800792b
 8007918:	08007949 	.word	0x08007949
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800791c:	4b67      	ldr	r3, [pc, #412]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800791e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007920:	4a66      	ldr	r2, [pc, #408]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007928:	e00f      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800792a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800792e:	3308      	adds	r3, #8
 8007930:	2102      	movs	r1, #2
 8007932:	4618      	mov	r0, r3
 8007934:	f001 ffd4 	bl	80098e0 <RCCEx_PLL2_Config>
 8007938:	4603      	mov	r3, r0
 800793a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800793e:	e004      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007946:	e000      	b.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800794a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10a      	bne.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007952:	4b5a      	ldr	r3, [pc, #360]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007956:	f023 0103 	bic.w	r1, r3, #3
 800795a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800795e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007960:	4a56      	ldr	r2, [pc, #344]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007962:	430b      	orrs	r3, r1
 8007964:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007966:	e003      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800796c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007978:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800797c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007980:	2300      	movs	r3, #0
 8007982:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007986:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800798a:	460b      	mov	r3, r1
 800798c:	4313      	orrs	r3, r2
 800798e:	f000 809f 	beq.w	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007992:	4b4b      	ldr	r3, [pc, #300]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a4a      	ldr	r2, [pc, #296]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800799c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800799e:	f7f9 f95f 	bl	8000c60 <HAL_GetTick>
 80079a2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079a6:	e00b      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079a8:	f7f9 f95a 	bl	8000c60 <HAL_GetTick>
 80079ac:	4602      	mov	r2, r0
 80079ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	2b64      	cmp	r3, #100	@ 0x64
 80079b6:	d903      	bls.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079be:	e005      	b.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079c0:	4b3f      	ldr	r3, [pc, #252]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d0ed      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80079cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d179      	bne.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80079d4:	4b39      	ldr	r3, [pc, #228]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80079d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80079e0:	4053      	eors	r3, r2
 80079e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d015      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079ea:	4b34      	ldr	r3, [pc, #208]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80079f6:	4b31      	ldr	r3, [pc, #196]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079fa:	4a30      	ldr	r2, [pc, #192]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a00:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a02:	4b2e      	ldr	r3, [pc, #184]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a06:	4a2d      	ldr	r2, [pc, #180]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a0c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007a0e:	4a2b      	ldr	r2, [pc, #172]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007a14:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a22:	d118      	bne.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a24:	f7f9 f91c 	bl	8000c60 <HAL_GetTick>
 8007a28:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a2c:	e00d      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a2e:	f7f9 f917 	bl	8000c60 <HAL_GetTick>
 8007a32:	4602      	mov	r2, r0
 8007a34:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007a38:	1ad2      	subs	r2, r2, r3
 8007a3a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d903      	bls.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007a48:	e005      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a4e:	f003 0302 	and.w	r3, r3, #2
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d0eb      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d129      	bne.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a6e:	d10e      	bne.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007a70:	4b12      	ldr	r3, [pc, #72]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a80:	091a      	lsrs	r2, r3, #4
 8007a82:	4b10      	ldr	r3, [pc, #64]	@ (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007a84:	4013      	ands	r3, r2
 8007a86:	4a0d      	ldr	r2, [pc, #52]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a88:	430b      	orrs	r3, r1
 8007a8a:	6113      	str	r3, [r2, #16]
 8007a8c:	e005      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	4a0a      	ldr	r2, [pc, #40]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a94:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007a98:	6113      	str	r3, [r2, #16]
 8007a9a:	4b08      	ldr	r3, [pc, #32]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a9c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007aa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007aaa:	4a04      	ldr	r2, [pc, #16]	@ (8007abc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aac:	430b      	orrs	r3, r1
 8007aae:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ab0:	e00e      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ab6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007aba:	e009      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007abc:	58024400 	.word	0x58024400
 8007ac0:	58024800 	.word	0x58024800
 8007ac4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007acc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	f002 0301 	and.w	r3, r2, #1
 8007adc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007ae6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007aea:	460b      	mov	r3, r1
 8007aec:	4313      	orrs	r3, r2
 8007aee:	f000 8089 	beq.w	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007af8:	2b28      	cmp	r3, #40	@ 0x28
 8007afa:	d86b      	bhi.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007afc:	a201      	add	r2, pc, #4	@ (adr r2, 8007b04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b02:	bf00      	nop
 8007b04:	08007bdd 	.word	0x08007bdd
 8007b08:	08007bd5 	.word	0x08007bd5
 8007b0c:	08007bd5 	.word	0x08007bd5
 8007b10:	08007bd5 	.word	0x08007bd5
 8007b14:	08007bd5 	.word	0x08007bd5
 8007b18:	08007bd5 	.word	0x08007bd5
 8007b1c:	08007bd5 	.word	0x08007bd5
 8007b20:	08007bd5 	.word	0x08007bd5
 8007b24:	08007ba9 	.word	0x08007ba9
 8007b28:	08007bd5 	.word	0x08007bd5
 8007b2c:	08007bd5 	.word	0x08007bd5
 8007b30:	08007bd5 	.word	0x08007bd5
 8007b34:	08007bd5 	.word	0x08007bd5
 8007b38:	08007bd5 	.word	0x08007bd5
 8007b3c:	08007bd5 	.word	0x08007bd5
 8007b40:	08007bd5 	.word	0x08007bd5
 8007b44:	08007bbf 	.word	0x08007bbf
 8007b48:	08007bd5 	.word	0x08007bd5
 8007b4c:	08007bd5 	.word	0x08007bd5
 8007b50:	08007bd5 	.word	0x08007bd5
 8007b54:	08007bd5 	.word	0x08007bd5
 8007b58:	08007bd5 	.word	0x08007bd5
 8007b5c:	08007bd5 	.word	0x08007bd5
 8007b60:	08007bd5 	.word	0x08007bd5
 8007b64:	08007bdd 	.word	0x08007bdd
 8007b68:	08007bd5 	.word	0x08007bd5
 8007b6c:	08007bd5 	.word	0x08007bd5
 8007b70:	08007bd5 	.word	0x08007bd5
 8007b74:	08007bd5 	.word	0x08007bd5
 8007b78:	08007bd5 	.word	0x08007bd5
 8007b7c:	08007bd5 	.word	0x08007bd5
 8007b80:	08007bd5 	.word	0x08007bd5
 8007b84:	08007bdd 	.word	0x08007bdd
 8007b88:	08007bd5 	.word	0x08007bd5
 8007b8c:	08007bd5 	.word	0x08007bd5
 8007b90:	08007bd5 	.word	0x08007bd5
 8007b94:	08007bd5 	.word	0x08007bd5
 8007b98:	08007bd5 	.word	0x08007bd5
 8007b9c:	08007bd5 	.word	0x08007bd5
 8007ba0:	08007bd5 	.word	0x08007bd5
 8007ba4:	08007bdd 	.word	0x08007bdd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bac:	3308      	adds	r3, #8
 8007bae:	2101      	movs	r1, #1
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f001 fe95 	bl	80098e0 <RCCEx_PLL2_Config>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007bbc:	e00f      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc2:	3328      	adds	r3, #40	@ 0x28
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f001 ff3c 	bl	8009a44 <RCCEx_PLL3_Config>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007bd2:	e004      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bda:	e000      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10a      	bne.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007be6:	4bbf      	ldr	r3, [pc, #764]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007bf4:	4abb      	ldr	r2, [pc, #748]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007bf6:	430b      	orrs	r3, r1
 8007bf8:	6553      	str	r3, [r2, #84]	@ 0x54
 8007bfa:	e003      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0c:	f002 0302 	and.w	r3, r2, #2
 8007c10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c14:	2300      	movs	r3, #0
 8007c16:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007c1a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4313      	orrs	r3, r2
 8007c22:	d041      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c2a:	2b05      	cmp	r3, #5
 8007c2c:	d824      	bhi.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c34 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c34:	08007c81 	.word	0x08007c81
 8007c38:	08007c4d 	.word	0x08007c4d
 8007c3c:	08007c63 	.word	0x08007c63
 8007c40:	08007c81 	.word	0x08007c81
 8007c44:	08007c81 	.word	0x08007c81
 8007c48:	08007c81 	.word	0x08007c81
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c50:	3308      	adds	r3, #8
 8007c52:	2101      	movs	r1, #1
 8007c54:	4618      	mov	r0, r3
 8007c56:	f001 fe43 	bl	80098e0 <RCCEx_PLL2_Config>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007c60:	e00f      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c66:	3328      	adds	r3, #40	@ 0x28
 8007c68:	2101      	movs	r1, #1
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f001 feea 	bl	8009a44 <RCCEx_PLL3_Config>
 8007c70:	4603      	mov	r3, r0
 8007c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007c76:	e004      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c7e:	e000      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007c80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10a      	bne.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007c8a:	4b96      	ldr	r3, [pc, #600]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c8e:	f023 0107 	bic.w	r1, r3, #7
 8007c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c98:	4a92      	ldr	r2, [pc, #584]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c9a:	430b      	orrs	r3, r1
 8007c9c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c9e:	e003      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ca4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb0:	f002 0304 	and.w	r3, r2, #4
 8007cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007cb8:	2300      	movs	r3, #0
 8007cba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007cbe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	d044      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cd0:	2b05      	cmp	r3, #5
 8007cd2:	d825      	bhi.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8007cdc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cda:	bf00      	nop
 8007cdc:	08007d29 	.word	0x08007d29
 8007ce0:	08007cf5 	.word	0x08007cf5
 8007ce4:	08007d0b 	.word	0x08007d0b
 8007ce8:	08007d29 	.word	0x08007d29
 8007cec:	08007d29 	.word	0x08007d29
 8007cf0:	08007d29 	.word	0x08007d29
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf8:	3308      	adds	r3, #8
 8007cfa:	2101      	movs	r1, #1
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f001 fdef 	bl	80098e0 <RCCEx_PLL2_Config>
 8007d02:	4603      	mov	r3, r0
 8007d04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007d08:	e00f      	b.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d0e:	3328      	adds	r3, #40	@ 0x28
 8007d10:	2101      	movs	r1, #1
 8007d12:	4618      	mov	r0, r3
 8007d14:	f001 fe96 	bl	8009a44 <RCCEx_PLL3_Config>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007d1e:	e004      	b.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d26:	e000      	b.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10b      	bne.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d32:	4b6c      	ldr	r3, [pc, #432]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d36:	f023 0107 	bic.w	r1, r3, #7
 8007d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d42:	4a68      	ldr	r2, [pc, #416]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d44:	430b      	orrs	r3, r1
 8007d46:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d48:	e003      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5a:	f002 0320 	and.w	r3, r2, #32
 8007d5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d62:	2300      	movs	r3, #0
 8007d64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	d055      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d7e:	d033      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d84:	d82c      	bhi.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d8a:	d02f      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d90:	d826      	bhi.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007d92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d96:	d02b      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007d98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d9c:	d820      	bhi.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007d9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007da2:	d012      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007da4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007da8:	d81a      	bhi.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d022      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007dae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007db2:	d115      	bne.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db8:	3308      	adds	r3, #8
 8007dba:	2100      	movs	r1, #0
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f001 fd8f 	bl	80098e0 <RCCEx_PLL2_Config>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007dc8:	e015      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dce:	3328      	adds	r3, #40	@ 0x28
 8007dd0:	2102      	movs	r1, #2
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f001 fe36 	bl	8009a44 <RCCEx_PLL3_Config>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007dde:	e00a      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007de6:	e006      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007de8:	bf00      	nop
 8007dea:	e004      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007dec:	bf00      	nop
 8007dee:	e002      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007df0:	bf00      	nop
 8007df2:	e000      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10b      	bne.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007dfe:	4b39      	ldr	r3, [pc, #228]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e02:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e0e:	4a35      	ldr	r2, [pc, #212]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e10:	430b      	orrs	r3, r1
 8007e12:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e14:	e003      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e26:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e2e:	2300      	movs	r3, #0
 8007e30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007e34:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	d058      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e46:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007e4a:	d033      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007e4c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007e50:	d82c      	bhi.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007e52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e56:	d02f      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007e58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e5c:	d826      	bhi.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007e5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e62:	d02b      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007e64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e68:	d820      	bhi.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007e6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e6e:	d012      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007e70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e74:	d81a      	bhi.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d022      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e7e:	d115      	bne.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e84:	3308      	adds	r3, #8
 8007e86:	2100      	movs	r1, #0
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f001 fd29 	bl	80098e0 <RCCEx_PLL2_Config>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007e94:	e015      	b.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e9a:	3328      	adds	r3, #40	@ 0x28
 8007e9c:	2102      	movs	r1, #2
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f001 fdd0 	bl	8009a44 <RCCEx_PLL3_Config>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007eaa:	e00a      	b.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007eb2:	e006      	b.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007eb4:	bf00      	nop
 8007eb6:	e004      	b.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007eb8:	bf00      	nop
 8007eba:	e002      	b.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ebc:	bf00      	nop
 8007ebe:	e000      	b.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10e      	bne.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007eca:	4b06      	ldr	r3, [pc, #24]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ece:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007eda:	4a02      	ldr	r2, [pc, #8]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007edc:	430b      	orrs	r3, r1
 8007ede:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ee0:	e006      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007ee2:	bf00      	nop
 8007ee4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007efc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f00:	2300      	movs	r3, #0
 8007f02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f06:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	d055      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f18:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007f1c:	d033      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007f1e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007f22:	d82c      	bhi.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007f24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f28:	d02f      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007f2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f2e:	d826      	bhi.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007f30:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007f34:	d02b      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007f36:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007f3a:	d820      	bhi.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007f3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f40:	d012      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007f42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f46:	d81a      	bhi.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d022      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007f4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f50:	d115      	bne.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f56:	3308      	adds	r3, #8
 8007f58:	2100      	movs	r1, #0
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f001 fcc0 	bl	80098e0 <RCCEx_PLL2_Config>
 8007f60:	4603      	mov	r3, r0
 8007f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007f66:	e015      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6c:	3328      	adds	r3, #40	@ 0x28
 8007f6e:	2102      	movs	r1, #2
 8007f70:	4618      	mov	r0, r3
 8007f72:	f001 fd67 	bl	8009a44 <RCCEx_PLL3_Config>
 8007f76:	4603      	mov	r3, r0
 8007f78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007f7c:	e00a      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f84:	e006      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007f86:	bf00      	nop
 8007f88:	e004      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007f8a:	bf00      	nop
 8007f8c:	e002      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007f8e:	bf00      	nop
 8007f90:	e000      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10b      	bne.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007f9c:	4ba1      	ldr	r3, [pc, #644]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fa0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007fac:	4a9d      	ldr	r2, [pc, #628]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fae:	430b      	orrs	r3, r1
 8007fb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fb2:	e003      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc4:	f002 0308 	and.w	r3, r2, #8
 8007fc8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007fcc:	2300      	movs	r3, #0
 8007fce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007fd2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	d01e      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fe4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fe8:	d10c      	bne.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fee:	3328      	adds	r3, #40	@ 0x28
 8007ff0:	2102      	movs	r1, #2
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f001 fd26 	bl	8009a44 <RCCEx_PLL3_Config>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d002      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008004:	4b87      	ldr	r3, [pc, #540]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008008:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800800c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008010:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008014:	4a83      	ldr	r2, [pc, #524]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008016:	430b      	orrs	r3, r1
 8008018:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800801a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800801e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008022:	f002 0310 	and.w	r3, r2, #16
 8008026:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800802a:	2300      	movs	r3, #0
 800802c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008030:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008034:	460b      	mov	r3, r1
 8008036:	4313      	orrs	r3, r2
 8008038:	d01e      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800803a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800803e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008046:	d10c      	bne.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800804c:	3328      	adds	r3, #40	@ 0x28
 800804e:	2102      	movs	r1, #2
 8008050:	4618      	mov	r0, r3
 8008052:	f001 fcf7 	bl	8009a44 <RCCEx_PLL3_Config>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008062:	4b70      	ldr	r3, [pc, #448]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008066:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800806a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800806e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008072:	4a6c      	ldr	r2, [pc, #432]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008074:	430b      	orrs	r3, r1
 8008076:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008080:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008084:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008088:	2300      	movs	r3, #0
 800808a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800808e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008092:	460b      	mov	r3, r1
 8008094:	4313      	orrs	r3, r2
 8008096:	d03e      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800809c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80080a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080a4:	d022      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80080a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080aa:	d81b      	bhi.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d003      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80080b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080b4:	d00b      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80080b6:	e015      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080bc:	3308      	adds	r3, #8
 80080be:	2100      	movs	r1, #0
 80080c0:	4618      	mov	r0, r3
 80080c2:	f001 fc0d 	bl	80098e0 <RCCEx_PLL2_Config>
 80080c6:	4603      	mov	r3, r0
 80080c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80080cc:	e00f      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d2:	3328      	adds	r3, #40	@ 0x28
 80080d4:	2102      	movs	r1, #2
 80080d6:	4618      	mov	r0, r3
 80080d8:	f001 fcb4 	bl	8009a44 <RCCEx_PLL3_Config>
 80080dc:	4603      	mov	r3, r0
 80080de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80080e2:	e004      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080ea:	e000      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80080ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10b      	bne.n	800810e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80080f6:	4b4b      	ldr	r3, [pc, #300]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080fa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80080fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008102:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008106:	4a47      	ldr	r2, [pc, #284]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008108:	430b      	orrs	r3, r1
 800810a:	6593      	str	r3, [r2, #88]	@ 0x58
 800810c:	e003      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800810e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008112:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008122:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008124:	2300      	movs	r3, #0
 8008126:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008128:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800812c:	460b      	mov	r3, r1
 800812e:	4313      	orrs	r3, r2
 8008130:	d03b      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800813a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800813e:	d01f      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008140:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008144:	d818      	bhi.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008146:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800814a:	d003      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800814c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008150:	d007      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008152:	e011      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008154:	4b33      	ldr	r3, [pc, #204]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008158:	4a32      	ldr	r2, [pc, #200]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800815a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800815e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008160:	e00f      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008166:	3328      	adds	r3, #40	@ 0x28
 8008168:	2101      	movs	r1, #1
 800816a:	4618      	mov	r0, r3
 800816c:	f001 fc6a 	bl	8009a44 <RCCEx_PLL3_Config>
 8008170:	4603      	mov	r3, r0
 8008172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008176:	e004      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800817e:	e000      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10b      	bne.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800818a:	4b26      	ldr	r3, [pc, #152]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800818c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800818e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800819a:	4a22      	ldr	r2, [pc, #136]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800819c:	430b      	orrs	r3, r1
 800819e:	6553      	str	r3, [r2, #84]	@ 0x54
 80081a0:	e003      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80081aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80081b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80081b8:	2300      	movs	r3, #0
 80081ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80081bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80081c0:	460b      	mov	r3, r1
 80081c2:	4313      	orrs	r3, r2
 80081c4:	d034      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80081c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d003      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80081d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081d4:	d007      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80081d6:	e011      	b.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081d8:	4b12      	ldr	r3, [pc, #72]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081dc:	4a11      	ldr	r2, [pc, #68]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80081e4:	e00e      	b.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80081e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ea:	3308      	adds	r3, #8
 80081ec:	2102      	movs	r1, #2
 80081ee:	4618      	mov	r0, r3
 80081f0:	f001 fb76 	bl	80098e0 <RCCEx_PLL2_Config>
 80081f4:	4603      	mov	r3, r0
 80081f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80081fa:	e003      	b.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008202:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008204:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10d      	bne.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800820c:	4b05      	ldr	r3, [pc, #20]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800820e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008210:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800821a:	4a02      	ldr	r2, [pc, #8]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800821c:	430b      	orrs	r3, r1
 800821e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008220:	e006      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008222:	bf00      	nop
 8008224:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008228:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800822c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008238:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800823c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800823e:	2300      	movs	r3, #0
 8008240:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008242:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008246:	460b      	mov	r3, r1
 8008248:	4313      	orrs	r3, r2
 800824a:	d00c      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800824c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008250:	3328      	adds	r3, #40	@ 0x28
 8008252:	2102      	movs	r1, #2
 8008254:	4618      	mov	r0, r3
 8008256:	f001 fbf5 	bl	8009a44 <RCCEx_PLL3_Config>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d002      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800826a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008272:	663b      	str	r3, [r7, #96]	@ 0x60
 8008274:	2300      	movs	r3, #0
 8008276:	667b      	str	r3, [r7, #100]	@ 0x64
 8008278:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800827c:	460b      	mov	r3, r1
 800827e:	4313      	orrs	r3, r2
 8008280:	d038      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008286:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800828a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800828e:	d018      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008290:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008294:	d811      	bhi.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008296:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800829a:	d014      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800829c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082a0:	d80b      	bhi.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d011      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80082a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082aa:	d106      	bne.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082ac:	4bc3      	ldr	r3, [pc, #780]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b0:	4ac2      	ldr	r2, [pc, #776]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80082b8:	e008      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082c0:	e004      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80082c2:	bf00      	nop
 80082c4:	e002      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80082c6:	bf00      	nop
 80082c8:	e000      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80082ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10b      	bne.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80082d4:	4bb9      	ldr	r3, [pc, #740]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082d8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80082dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082e4:	4ab5      	ldr	r2, [pc, #724]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082e6:	430b      	orrs	r3, r1
 80082e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80082ea:	e003      	b.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80082f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008300:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008302:	2300      	movs	r3, #0
 8008304:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008306:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800830a:	460b      	mov	r3, r1
 800830c:	4313      	orrs	r3, r2
 800830e:	d009      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008310:	4baa      	ldr	r3, [pc, #680]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008314:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800831c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800831e:	4aa7      	ldr	r2, [pc, #668]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008320:	430b      	orrs	r3, r1
 8008322:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008330:	653b      	str	r3, [r7, #80]	@ 0x50
 8008332:	2300      	movs	r3, #0
 8008334:	657b      	str	r3, [r7, #84]	@ 0x54
 8008336:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800833a:	460b      	mov	r3, r1
 800833c:	4313      	orrs	r3, r2
 800833e:	d00a      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008340:	4b9e      	ldr	r3, [pc, #632]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800834c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008350:	4a9a      	ldr	r2, [pc, #616]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008352:	430b      	orrs	r3, r1
 8008354:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800835a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008362:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008364:	2300      	movs	r3, #0
 8008366:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008368:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800836c:	460b      	mov	r3, r1
 800836e:	4313      	orrs	r3, r2
 8008370:	d009      	beq.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008372:	4b92      	ldr	r3, [pc, #584]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008376:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800837a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800837e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008380:	4a8e      	ldr	r2, [pc, #568]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008382:	430b      	orrs	r3, r1
 8008384:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800838a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008392:	643b      	str	r3, [r7, #64]	@ 0x40
 8008394:	2300      	movs	r3, #0
 8008396:	647b      	str	r3, [r7, #68]	@ 0x44
 8008398:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800839c:	460b      	mov	r3, r1
 800839e:	4313      	orrs	r3, r2
 80083a0:	d00e      	beq.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80083a2:	4b86      	ldr	r3, [pc, #536]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	4a85      	ldr	r2, [pc, #532]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80083ac:	6113      	str	r3, [r2, #16]
 80083ae:	4b83      	ldr	r3, [pc, #524]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083b0:	6919      	ldr	r1, [r3, #16]
 80083b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80083ba:	4a80      	ldr	r2, [pc, #512]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083bc:	430b      	orrs	r3, r1
 80083be:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80083c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80083cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80083ce:	2300      	movs	r3, #0
 80083d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80083d6:	460b      	mov	r3, r1
 80083d8:	4313      	orrs	r3, r2
 80083da:	d009      	beq.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80083dc:	4b77      	ldr	r3, [pc, #476]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083e0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80083e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083ea:	4a74      	ldr	r2, [pc, #464]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083ec:	430b      	orrs	r3, r1
 80083ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80083f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80083fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80083fe:	2300      	movs	r3, #0
 8008400:	637b      	str	r3, [r7, #52]	@ 0x34
 8008402:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008406:	460b      	mov	r3, r1
 8008408:	4313      	orrs	r3, r2
 800840a:	d00a      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800840c:	4b6b      	ldr	r3, [pc, #428]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800840e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008410:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800841c:	4a67      	ldr	r2, [pc, #412]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800841e:	430b      	orrs	r3, r1
 8008420:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842a:	2100      	movs	r1, #0
 800842c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008434:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008438:	460b      	mov	r3, r1
 800843a:	4313      	orrs	r3, r2
 800843c:	d011      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800843e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008442:	3308      	adds	r3, #8
 8008444:	2100      	movs	r1, #0
 8008446:	4618      	mov	r0, r3
 8008448:	f001 fa4a 	bl	80098e0 <RCCEx_PLL2_Config>
 800844c:	4603      	mov	r3, r0
 800844e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800845a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800845e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846a:	2100      	movs	r1, #0
 800846c:	6239      	str	r1, [r7, #32]
 800846e:	f003 0302 	and.w	r3, r3, #2
 8008472:	627b      	str	r3, [r7, #36]	@ 0x24
 8008474:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008478:	460b      	mov	r3, r1
 800847a:	4313      	orrs	r3, r2
 800847c:	d011      	beq.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800847e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008482:	3308      	adds	r3, #8
 8008484:	2101      	movs	r1, #1
 8008486:	4618      	mov	r0, r3
 8008488:	f001 fa2a 	bl	80098e0 <RCCEx_PLL2_Config>
 800848c:	4603      	mov	r3, r0
 800848e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008496:	2b00      	cmp	r3, #0
 8008498:	d003      	beq.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800849a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800849e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80084a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084aa:	2100      	movs	r1, #0
 80084ac:	61b9      	str	r1, [r7, #24]
 80084ae:	f003 0304 	and.w	r3, r3, #4
 80084b2:	61fb      	str	r3, [r7, #28]
 80084b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80084b8:	460b      	mov	r3, r1
 80084ba:	4313      	orrs	r3, r2
 80084bc:	d011      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80084be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084c2:	3308      	adds	r3, #8
 80084c4:	2102      	movs	r1, #2
 80084c6:	4618      	mov	r0, r3
 80084c8:	f001 fa0a 	bl	80098e0 <RCCEx_PLL2_Config>
 80084cc:	4603      	mov	r3, r0
 80084ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80084d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80084e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ea:	2100      	movs	r1, #0
 80084ec:	6139      	str	r1, [r7, #16]
 80084ee:	f003 0308 	and.w	r3, r3, #8
 80084f2:	617b      	str	r3, [r7, #20]
 80084f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80084f8:	460b      	mov	r3, r1
 80084fa:	4313      	orrs	r3, r2
 80084fc:	d011      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80084fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008502:	3328      	adds	r3, #40	@ 0x28
 8008504:	2100      	movs	r1, #0
 8008506:	4618      	mov	r0, r3
 8008508:	f001 fa9c 	bl	8009a44 <RCCEx_PLL3_Config>
 800850c:	4603      	mov	r3, r0
 800850e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008516:	2b00      	cmp	r3, #0
 8008518:	d003      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800851a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800851e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852a:	2100      	movs	r1, #0
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	f003 0310 	and.w	r3, r3, #16
 8008532:	60fb      	str	r3, [r7, #12]
 8008534:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008538:	460b      	mov	r3, r1
 800853a:	4313      	orrs	r3, r2
 800853c:	d011      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800853e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008542:	3328      	adds	r3, #40	@ 0x28
 8008544:	2101      	movs	r1, #1
 8008546:	4618      	mov	r0, r3
 8008548:	f001 fa7c 	bl	8009a44 <RCCEx_PLL3_Config>
 800854c:	4603      	mov	r3, r0
 800854e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008556:	2b00      	cmp	r3, #0
 8008558:	d003      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800855a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800855e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856a:	2100      	movs	r1, #0
 800856c:	6039      	str	r1, [r7, #0]
 800856e:	f003 0320 	and.w	r3, r3, #32
 8008572:	607b      	str	r3, [r7, #4]
 8008574:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008578:	460b      	mov	r3, r1
 800857a:	4313      	orrs	r3, r2
 800857c:	d011      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800857e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008582:	3328      	adds	r3, #40	@ 0x28
 8008584:	2102      	movs	r1, #2
 8008586:	4618      	mov	r0, r3
 8008588:	f001 fa5c 	bl	8009a44 <RCCEx_PLL3_Config>
 800858c:	4603      	mov	r3, r0
 800858e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008592:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008596:	2b00      	cmp	r3, #0
 8008598:	d003      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800859a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800859e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80085a2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d101      	bne.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	e000      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80085b6:	46bd      	mov	sp, r7
 80085b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085bc:	58024400 	.word	0x58024400

080085c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b090      	sub	sp, #64	@ 0x40
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80085ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085ce:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80085d2:	430b      	orrs	r3, r1
 80085d4:	f040 8094 	bne.w	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80085d8:	4b9e      	ldr	r3, [pc, #632]	@ (8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085dc:	f003 0307 	and.w	r3, r3, #7
 80085e0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80085e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e4:	2b04      	cmp	r3, #4
 80085e6:	f200 8087 	bhi.w	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80085ea:	a201      	add	r2, pc, #4	@ (adr r2, 80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80085ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f0:	08008605 	.word	0x08008605
 80085f4:	0800862d 	.word	0x0800862d
 80085f8:	08008655 	.word	0x08008655
 80085fc:	080086f1 	.word	0x080086f1
 8008600:	0800867d 	.word	0x0800867d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008604:	4b93      	ldr	r3, [pc, #588]	@ (8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800860c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008610:	d108      	bne.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008612:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008616:	4618      	mov	r0, r3
 8008618:	f001 f810 	bl	800963c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800861c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008620:	f000 bd45 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008624:	2300      	movs	r3, #0
 8008626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008628:	f000 bd41 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800862c:	4b89      	ldr	r3, [pc, #548]	@ (8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008634:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008638:	d108      	bne.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800863a:	f107 0318 	add.w	r3, r7, #24
 800863e:	4618      	mov	r0, r3
 8008640:	f000 fd54 	bl	80090ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008648:	f000 bd31 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800864c:	2300      	movs	r3, #0
 800864e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008650:	f000 bd2d 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008654:	4b7f      	ldr	r3, [pc, #508]	@ (8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800865c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008660:	d108      	bne.n	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008662:	f107 030c 	add.w	r3, r7, #12
 8008666:	4618      	mov	r0, r3
 8008668:	f000 fe94 	bl	8009394 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008670:	f000 bd1d 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008674:	2300      	movs	r3, #0
 8008676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008678:	f000 bd19 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800867c:	4b75      	ldr	r3, [pc, #468]	@ (8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800867e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008680:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008684:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008686:	4b73      	ldr	r3, [pc, #460]	@ (8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 0304 	and.w	r3, r3, #4
 800868e:	2b04      	cmp	r3, #4
 8008690:	d10c      	bne.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008694:	2b00      	cmp	r3, #0
 8008696:	d109      	bne.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008698:	4b6e      	ldr	r3, [pc, #440]	@ (8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	08db      	lsrs	r3, r3, #3
 800869e:	f003 0303 	and.w	r3, r3, #3
 80086a2:	4a6d      	ldr	r2, [pc, #436]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80086a4:	fa22 f303 	lsr.w	r3, r2, r3
 80086a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086aa:	e01f      	b.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086ac:	4b69      	ldr	r3, [pc, #420]	@ (8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086b8:	d106      	bne.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80086ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086c0:	d102      	bne.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80086c2:	4b66      	ldr	r3, [pc, #408]	@ (800885c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80086c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086c6:	e011      	b.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086c8:	4b62      	ldr	r3, [pc, #392]	@ (8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086d4:	d106      	bne.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80086d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086dc:	d102      	bne.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80086de:	4b60      	ldr	r3, [pc, #384]	@ (8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80086e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086e2:	e003      	b.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80086e4:	2300      	movs	r3, #0
 80086e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80086e8:	f000 bce1 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80086ec:	f000 bcdf 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80086f0:	4b5c      	ldr	r3, [pc, #368]	@ (8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80086f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086f4:	f000 bcdb 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80086f8:	2300      	movs	r3, #0
 80086fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086fc:	f000 bcd7 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008700:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008704:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008708:	430b      	orrs	r3, r1
 800870a:	f040 80ad 	bne.w	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800870e:	4b51      	ldr	r3, [pc, #324]	@ (8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008712:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008716:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800871e:	d056      	beq.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008726:	f200 8090 	bhi.w	800884a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800872a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800872c:	2bc0      	cmp	r3, #192	@ 0xc0
 800872e:	f000 8088 	beq.w	8008842 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008734:	2bc0      	cmp	r3, #192	@ 0xc0
 8008736:	f200 8088 	bhi.w	800884a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800873a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800873c:	2b80      	cmp	r3, #128	@ 0x80
 800873e:	d032      	beq.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008742:	2b80      	cmp	r3, #128	@ 0x80
 8008744:	f200 8081 	bhi.w	800884a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874a:	2b00      	cmp	r3, #0
 800874c:	d003      	beq.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800874e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008750:	2b40      	cmp	r3, #64	@ 0x40
 8008752:	d014      	beq.n	800877e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008754:	e079      	b.n	800884a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008756:	4b3f      	ldr	r3, [pc, #252]	@ (8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800875e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008762:	d108      	bne.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008768:	4618      	mov	r0, r3
 800876a:	f000 ff67 	bl	800963c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800876e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008772:	f000 bc9c 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008776:	2300      	movs	r3, #0
 8008778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800877a:	f000 bc98 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800877e:	4b35      	ldr	r3, [pc, #212]	@ (8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008786:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800878a:	d108      	bne.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800878c:	f107 0318 	add.w	r3, r7, #24
 8008790:	4618      	mov	r0, r3
 8008792:	f000 fcab 	bl	80090ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800879a:	f000 bc88 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800879e:	2300      	movs	r3, #0
 80087a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087a2:	f000 bc84 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087a6:	4b2b      	ldr	r3, [pc, #172]	@ (8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087b2:	d108      	bne.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087b4:	f107 030c 	add.w	r3, r7, #12
 80087b8:	4618      	mov	r0, r3
 80087ba:	f000 fdeb 	bl	8009394 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087c2:	f000 bc74 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087c6:	2300      	movs	r3, #0
 80087c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087ca:	f000 bc70 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087ce:	4b21      	ldr	r3, [pc, #132]	@ (8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80087d6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087d8:	4b1e      	ldr	r3, [pc, #120]	@ (8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 0304 	and.w	r3, r3, #4
 80087e0:	2b04      	cmp	r3, #4
 80087e2:	d10c      	bne.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80087e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d109      	bne.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087ea:	4b1a      	ldr	r3, [pc, #104]	@ (8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	08db      	lsrs	r3, r3, #3
 80087f0:	f003 0303 	and.w	r3, r3, #3
 80087f4:	4a18      	ldr	r2, [pc, #96]	@ (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80087f6:	fa22 f303 	lsr.w	r3, r2, r3
 80087fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087fc:	e01f      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087fe:	4b15      	ldr	r3, [pc, #84]	@ (8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800880a:	d106      	bne.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800880c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800880e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008812:	d102      	bne.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008814:	4b11      	ldr	r3, [pc, #68]	@ (800885c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008816:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008818:	e011      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800881a:	4b0e      	ldr	r3, [pc, #56]	@ (8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008822:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008826:	d106      	bne.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800882a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800882e:	d102      	bne.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008830:	4b0b      	ldr	r3, [pc, #44]	@ (8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008832:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008834:	e003      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008836:	2300      	movs	r3, #0
 8008838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800883a:	f000 bc38 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800883e:	f000 bc36 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008842:	4b08      	ldr	r3, [pc, #32]	@ (8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008846:	f000 bc32 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800884a:	2300      	movs	r3, #0
 800884c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800884e:	f000 bc2e 	b.w	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008852:	bf00      	nop
 8008854:	58024400 	.word	0x58024400
 8008858:	03d09000 	.word	0x03d09000
 800885c:	003d0900 	.word	0x003d0900
 8008860:	017d7840 	.word	0x017d7840
 8008864:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800886c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008870:	430b      	orrs	r3, r1
 8008872:	f040 809c 	bne.w	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008876:	4b9e      	ldr	r3, [pc, #632]	@ (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800887a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800887e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008882:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008886:	d054      	beq.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800888e:	f200 808b 	bhi.w	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008894:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008898:	f000 8083 	beq.w	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800889c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80088a2:	f200 8081 	bhi.w	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80088a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088ac:	d02f      	beq.n	800890e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80088ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088b4:	d878      	bhi.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80088b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d004      	beq.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80088bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80088c2:	d012      	beq.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80088c4:	e070      	b.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088c6:	4b8a      	ldr	r3, [pc, #552]	@ (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088d2:	d107      	bne.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088d8:	4618      	mov	r0, r3
 80088da:	f000 feaf 	bl	800963c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088e2:	e3e4      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088e4:	2300      	movs	r3, #0
 80088e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088e8:	e3e1      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088ea:	4b81      	ldr	r3, [pc, #516]	@ (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088f6:	d107      	bne.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088f8:	f107 0318 	add.w	r3, r7, #24
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 fbf5 	bl	80090ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008906:	e3d2      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008908:	2300      	movs	r3, #0
 800890a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800890c:	e3cf      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800890e:	4b78      	ldr	r3, [pc, #480]	@ (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008916:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800891a:	d107      	bne.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800891c:	f107 030c 	add.w	r3, r7, #12
 8008920:	4618      	mov	r0, r3
 8008922:	f000 fd37 	bl	8009394 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800892a:	e3c0      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800892c:	2300      	movs	r3, #0
 800892e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008930:	e3bd      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008932:	4b6f      	ldr	r3, [pc, #444]	@ (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008936:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800893a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800893c:	4b6c      	ldr	r3, [pc, #432]	@ (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0304 	and.w	r3, r3, #4
 8008944:	2b04      	cmp	r3, #4
 8008946:	d10c      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800894a:	2b00      	cmp	r3, #0
 800894c:	d109      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800894e:	4b68      	ldr	r3, [pc, #416]	@ (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	08db      	lsrs	r3, r3, #3
 8008954:	f003 0303 	and.w	r3, r3, #3
 8008958:	4a66      	ldr	r2, [pc, #408]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800895a:	fa22 f303 	lsr.w	r3, r2, r3
 800895e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008960:	e01e      	b.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008962:	4b63      	ldr	r3, [pc, #396]	@ (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800896a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800896e:	d106      	bne.n	800897e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008972:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008976:	d102      	bne.n	800897e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008978:	4b5f      	ldr	r3, [pc, #380]	@ (8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800897a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800897c:	e010      	b.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800897e:	4b5c      	ldr	r3, [pc, #368]	@ (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008986:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800898a:	d106      	bne.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800898c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800898e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008992:	d102      	bne.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008994:	4b59      	ldr	r3, [pc, #356]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008998:	e002      	b.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800899a:	2300      	movs	r3, #0
 800899c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800899e:	e386      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089a0:	e385      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80089a2:	4b57      	ldr	r3, [pc, #348]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80089a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089a6:	e382      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80089a8:	2300      	movs	r3, #0
 80089aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ac:	e37f      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80089ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089b2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80089b6:	430b      	orrs	r3, r1
 80089b8:	f040 80a7 	bne.w	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80089bc:	4b4c      	ldr	r3, [pc, #304]	@ (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089c0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80089c4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80089c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80089cc:	d055      	beq.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80089ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80089d4:	f200 8096 	bhi.w	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80089d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80089de:	f000 8084 	beq.w	8008aea <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80089e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80089e8:	f200 808c 	bhi.w	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80089ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089f2:	d030      	beq.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80089f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089fa:	f200 8083 	bhi.w	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80089fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d004      	beq.n	8008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a0a:	d012      	beq.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008a0c:	e07a      	b.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a0e:	4b38      	ldr	r3, [pc, #224]	@ (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a1a:	d107      	bne.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a20:	4618      	mov	r0, r3
 8008a22:	f000 fe0b 	bl	800963c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a2a:	e340      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a30:	e33d      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a32:	4b2f      	ldr	r3, [pc, #188]	@ (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a3e:	d107      	bne.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a40:	f107 0318 	add.w	r3, r7, #24
 8008a44:	4618      	mov	r0, r3
 8008a46:	f000 fb51 	bl	80090ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a4e:	e32e      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a54:	e32b      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a56:	4b26      	ldr	r3, [pc, #152]	@ (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a62:	d107      	bne.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a64:	f107 030c 	add.w	r3, r7, #12
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 fc93 	bl	8009394 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a72:	e31c      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a74:	2300      	movs	r3, #0
 8008a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a78:	e319      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a7e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a82:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a84:	4b1a      	ldr	r3, [pc, #104]	@ (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 0304 	and.w	r3, r3, #4
 8008a8c:	2b04      	cmp	r3, #4
 8008a8e:	d10c      	bne.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d109      	bne.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a96:	4b16      	ldr	r3, [pc, #88]	@ (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	08db      	lsrs	r3, r3, #3
 8008a9c:	f003 0303 	and.w	r3, r3, #3
 8008aa0:	4a14      	ldr	r2, [pc, #80]	@ (8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008aa8:	e01e      	b.n	8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008aaa:	4b11      	ldr	r3, [pc, #68]	@ (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ab2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ab6:	d106      	bne.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008abe:	d102      	bne.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ac4:	e010      	b.n	8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ace:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ad2:	d106      	bne.n	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ad6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ada:	d102      	bne.n	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008adc:	4b07      	ldr	r3, [pc, #28]	@ (8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ae0:	e002      	b.n	8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008ae6:	e2e2      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ae8:	e2e1      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008aea:	4b05      	ldr	r3, [pc, #20]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aee:	e2de      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008af0:	58024400 	.word	0x58024400
 8008af4:	03d09000 	.word	0x03d09000
 8008af8:	003d0900 	.word	0x003d0900
 8008afc:	017d7840 	.word	0x017d7840
 8008b00:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008b04:	2300      	movs	r3, #0
 8008b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b08:	e2d1      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008b0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b0e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008b12:	430b      	orrs	r3, r1
 8008b14:	f040 809c 	bne.w	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008b18:	4b93      	ldr	r3, [pc, #588]	@ (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b1c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008b20:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b28:	d054      	beq.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b30:	f200 808b 	bhi.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b36:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b3a:	f000 8083 	beq.w	8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b44:	f200 8081 	bhi.w	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b4e:	d02f      	beq.n	8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b56:	d878      	bhi.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d004      	beq.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b64:	d012      	beq.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008b66:	e070      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b68:	4b7f      	ldr	r3, [pc, #508]	@ (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b74:	d107      	bne.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 fd5e 	bl	800963c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b84:	e293      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b8a:	e290      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b8c:	4b76      	ldr	r3, [pc, #472]	@ (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b98:	d107      	bne.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b9a:	f107 0318 	add.w	r3, r7, #24
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 faa4 	bl	80090ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ba8:	e281      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008baa:	2300      	movs	r3, #0
 8008bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bae:	e27e      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bb0:	4b6d      	ldr	r3, [pc, #436]	@ (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bbc:	d107      	bne.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bbe:	f107 030c 	add.w	r3, r7, #12
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 fbe6 	bl	8009394 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bcc:	e26f      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bd2:	e26c      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008bd4:	4b64      	ldr	r3, [pc, #400]	@ (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bd8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008bdc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bde:	4b62      	ldr	r3, [pc, #392]	@ (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 0304 	and.w	r3, r3, #4
 8008be6:	2b04      	cmp	r3, #4
 8008be8:	d10c      	bne.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d109      	bne.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bf0:	4b5d      	ldr	r3, [pc, #372]	@ (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	08db      	lsrs	r3, r3, #3
 8008bf6:	f003 0303 	and.w	r3, r3, #3
 8008bfa:	4a5c      	ldr	r2, [pc, #368]	@ (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8008c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c02:	e01e      	b.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c04:	4b58      	ldr	r3, [pc, #352]	@ (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c10:	d106      	bne.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c18:	d102      	bne.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c1a:	4b55      	ldr	r3, [pc, #340]	@ (8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c1e:	e010      	b.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c20:	4b51      	ldr	r3, [pc, #324]	@ (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c2c:	d106      	bne.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c34:	d102      	bne.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c36:	4b4f      	ldr	r3, [pc, #316]	@ (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c3a:	e002      	b.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008c40:	e235      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c42:	e234      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c44:	4b4c      	ldr	r3, [pc, #304]	@ (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c48:	e231      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c4e:	e22e      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c54:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008c58:	430b      	orrs	r3, r1
 8008c5a:	f040 808f 	bne.w	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008c5e:	4b42      	ldr	r3, [pc, #264]	@ (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c62:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008c66:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c6e:	d06b      	beq.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c72:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c76:	d874      	bhi.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c7e:	d056      	beq.n	8008d2e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c86:	d86c      	bhi.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c8e:	d03b      	beq.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c96:	d864      	bhi.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c9e:	d021      	beq.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ca6:	d85c      	bhi.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d004      	beq.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cb4:	d004      	beq.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008cb6:	e054      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008cb8:	f7fe fa62 	bl	8007180 <HAL_RCC_GetPCLK1Freq>
 8008cbc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008cbe:	e1f6      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cc0:	4b29      	ldr	r3, [pc, #164]	@ (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ccc:	d107      	bne.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cce:	f107 0318 	add.w	r3, r7, #24
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f000 fa0a 	bl	80090ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cdc:	e1e7      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ce2:	e1e4      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ce4:	4b20      	ldr	r3, [pc, #128]	@ (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cf0:	d107      	bne.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cf2:	f107 030c 	add.w	r3, r7, #12
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 fb4c 	bl	8009394 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d00:	e1d5      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d02:	2300      	movs	r3, #0
 8008d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d06:	e1d2      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d08:	4b17      	ldr	r3, [pc, #92]	@ (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 0304 	and.w	r3, r3, #4
 8008d10:	2b04      	cmp	r3, #4
 8008d12:	d109      	bne.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d14:	4b14      	ldr	r3, [pc, #80]	@ (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	08db      	lsrs	r3, r3, #3
 8008d1a:	f003 0303 	and.w	r3, r3, #3
 8008d1e:	4a13      	ldr	r2, [pc, #76]	@ (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008d20:	fa22 f303 	lsr.w	r3, r2, r3
 8008d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d26:	e1c2      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d2c:	e1bf      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d3a:	d102      	bne.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d40:	e1b5      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d42:	2300      	movs	r3, #0
 8008d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d46:	e1b2      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008d48:	4b07      	ldr	r3, [pc, #28]	@ (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d54:	d102      	bne.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008d56:	4b07      	ldr	r3, [pc, #28]	@ (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d5a:	e1a8      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d60:	e1a5      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008d62:	2300      	movs	r3, #0
 8008d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d66:	e1a2      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008d68:	58024400 	.word	0x58024400
 8008d6c:	03d09000 	.word	0x03d09000
 8008d70:	003d0900 	.word	0x003d0900
 8008d74:	017d7840 	.word	0x017d7840
 8008d78:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008d7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d80:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008d84:	430b      	orrs	r3, r1
 8008d86:	d173      	bne.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008d88:	4b9c      	ldr	r3, [pc, #624]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008d90:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d98:	d02f      	beq.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008da0:	d863      	bhi.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d004      	beq.n	8008db2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008daa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dae:	d012      	beq.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008db0:	e05b      	b.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008db2:	4b92      	ldr	r3, [pc, #584]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008dbe:	d107      	bne.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dc0:	f107 0318 	add.w	r3, r7, #24
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f000 f991 	bl	80090ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dce:	e16e      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dd4:	e16b      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008dd6:	4b89      	ldr	r3, [pc, #548]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008dde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008de2:	d107      	bne.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008de4:	f107 030c 	add.w	r3, r7, #12
 8008de8:	4618      	mov	r0, r3
 8008dea:	f000 fad3 	bl	8009394 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008df2:	e15c      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008df4:	2300      	movs	r3, #0
 8008df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008df8:	e159      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008dfa:	4b80      	ldr	r3, [pc, #512]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dfe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008e02:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e04:	4b7d      	ldr	r3, [pc, #500]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 0304 	and.w	r3, r3, #4
 8008e0c:	2b04      	cmp	r3, #4
 8008e0e:	d10c      	bne.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d109      	bne.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e16:	4b79      	ldr	r3, [pc, #484]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	08db      	lsrs	r3, r3, #3
 8008e1c:	f003 0303 	and.w	r3, r3, #3
 8008e20:	4a77      	ldr	r2, [pc, #476]	@ (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008e22:	fa22 f303 	lsr.w	r3, r2, r3
 8008e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e28:	e01e      	b.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e2a:	4b74      	ldr	r3, [pc, #464]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e36:	d106      	bne.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e3e:	d102      	bne.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008e40:	4b70      	ldr	r3, [pc, #448]	@ (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e44:	e010      	b.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e46:	4b6d      	ldr	r3, [pc, #436]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e52:	d106      	bne.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e5a:	d102      	bne.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008e5c:	4b6a      	ldr	r3, [pc, #424]	@ (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e60:	e002      	b.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008e66:	e122      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008e68:	e121      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e6e:	e11e      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008e70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e74:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008e78:	430b      	orrs	r3, r1
 8008e7a:	d133      	bne.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008e7c:	4b5f      	ldr	r3, [pc, #380]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e84:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d004      	beq.n	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e92:	d012      	beq.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008e94:	e023      	b.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e96:	4b59      	ldr	r3, [pc, #356]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ea2:	d107      	bne.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ea4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f000 fbc7 	bl	800963c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eb2:	e0fc      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eb8:	e0f9      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008eba:	4b50      	ldr	r3, [pc, #320]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ec2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ec6:	d107      	bne.n	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ec8:	f107 0318 	add.w	r3, r7, #24
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f000 f90d 	bl	80090ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008ed2:	6a3b      	ldr	r3, [r7, #32]
 8008ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ed6:	e0ea      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008edc:	e0e7      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ee2:	e0e4      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ee8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008eec:	430b      	orrs	r3, r1
 8008eee:	f040 808d 	bne.w	800900c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008ef2:	4b42      	ldr	r3, [pc, #264]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ef6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008efa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f02:	d06b      	beq.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f0a:	d874      	bhi.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f12:	d056      	beq.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f1a:	d86c      	bhi.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008f22:	d03b      	beq.n	8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008f2a:	d864      	bhi.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f32:	d021      	beq.n	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f3a:	d85c      	bhi.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d004      	beq.n	8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f48:	d004      	beq.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008f4a:	e054      	b.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008f4c:	f000 f8b8 	bl	80090c0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008f50:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008f52:	e0ac      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f54:	4b29      	ldr	r3, [pc, #164]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f60:	d107      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f62:	f107 0318 	add.w	r3, r7, #24
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 f8c0 	bl	80090ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f70:	e09d      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f72:	2300      	movs	r3, #0
 8008f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f76:	e09a      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f78:	4b20      	ldr	r3, [pc, #128]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f84:	d107      	bne.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f86:	f107 030c 	add.w	r3, r7, #12
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 fa02 	bl	8009394 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f94:	e08b      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f96:	2300      	movs	r3, #0
 8008f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f9a:	e088      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f9c:	4b17      	ldr	r3, [pc, #92]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0304 	and.w	r3, r3, #4
 8008fa4:	2b04      	cmp	r3, #4
 8008fa6:	d109      	bne.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fa8:	4b14      	ldr	r3, [pc, #80]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	08db      	lsrs	r3, r3, #3
 8008fae:	f003 0303 	and.w	r3, r3, #3
 8008fb2:	4a13      	ldr	r2, [pc, #76]	@ (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8008fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fba:	e078      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fc0:	e075      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fce:	d102      	bne.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fd4:	e06b      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fda:	e068      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008fdc:	4b07      	ldr	r3, [pc, #28]	@ (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fe4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fe8:	d102      	bne.n	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008fea:	4b07      	ldr	r3, [pc, #28]	@ (8009008 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fee:	e05e      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ff4:	e05b      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ffa:	e058      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ffc:	58024400 	.word	0x58024400
 8009000:	03d09000 	.word	0x03d09000
 8009004:	003d0900 	.word	0x003d0900
 8009008:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800900c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009010:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009014:	430b      	orrs	r3, r1
 8009016:	d148      	bne.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009018:	4b27      	ldr	r3, [pc, #156]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800901a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800901c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009020:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009024:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009028:	d02a      	beq.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800902a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800902c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009030:	d838      	bhi.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009034:	2b00      	cmp	r3, #0
 8009036:	d004      	beq.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800903a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800903e:	d00d      	beq.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009040:	e030      	b.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009042:	4b1d      	ldr	r3, [pc, #116]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800904a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800904e:	d102      	bne.n	8009056 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009050:	4b1a      	ldr	r3, [pc, #104]	@ (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009054:	e02b      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009056:	2300      	movs	r3, #0
 8009058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800905a:	e028      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800905c:	4b16      	ldr	r3, [pc, #88]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009064:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009068:	d107      	bne.n	800907a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800906a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800906e:	4618      	mov	r0, r3
 8009070:	f000 fae4 	bl	800963c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009078:	e019      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800907a:	2300      	movs	r3, #0
 800907c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800907e:	e016      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009080:	4b0d      	ldr	r3, [pc, #52]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009088:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800908c:	d107      	bne.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800908e:	f107 0318 	add.w	r3, r7, #24
 8009092:	4618      	mov	r0, r3
 8009094:	f000 f82a 	bl	80090ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800909c:	e007      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800909e:	2300      	movs	r3, #0
 80090a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090a2:	e004      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80090a4:	2300      	movs	r3, #0
 80090a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090a8:	e001      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80090aa:	2300      	movs	r3, #0
 80090ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80090ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3740      	adds	r7, #64	@ 0x40
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	58024400 	.word	0x58024400
 80090bc:	017d7840 	.word	0x017d7840

080090c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80090c4:	f7fe f82c 	bl	8007120 <HAL_RCC_GetHCLKFreq>
 80090c8:	4602      	mov	r2, r0
 80090ca:	4b06      	ldr	r3, [pc, #24]	@ (80090e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80090cc:	6a1b      	ldr	r3, [r3, #32]
 80090ce:	091b      	lsrs	r3, r3, #4
 80090d0:	f003 0307 	and.w	r3, r3, #7
 80090d4:	4904      	ldr	r1, [pc, #16]	@ (80090e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80090d6:	5ccb      	ldrb	r3, [r1, r3]
 80090d8:	f003 031f 	and.w	r3, r3, #31
 80090dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	58024400 	.word	0x58024400
 80090e8:	0800e4a4 	.word	0x0800e4a4

080090ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b089      	sub	sp, #36	@ 0x24
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090f4:	4ba1      	ldr	r3, [pc, #644]	@ (800937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f8:	f003 0303 	and.w	r3, r3, #3
 80090fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80090fe:	4b9f      	ldr	r3, [pc, #636]	@ (800937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009102:	0b1b      	lsrs	r3, r3, #12
 8009104:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009108:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800910a:	4b9c      	ldr	r3, [pc, #624]	@ (800937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800910c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910e:	091b      	lsrs	r3, r3, #4
 8009110:	f003 0301 	and.w	r3, r3, #1
 8009114:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009116:	4b99      	ldr	r3, [pc, #612]	@ (800937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800911a:	08db      	lsrs	r3, r3, #3
 800911c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009120:	693a      	ldr	r2, [r7, #16]
 8009122:	fb02 f303 	mul.w	r3, r2, r3
 8009126:	ee07 3a90 	vmov	s15, r3
 800912a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800912e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	2b00      	cmp	r3, #0
 8009136:	f000 8111 	beq.w	800935c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	2b02      	cmp	r3, #2
 800913e:	f000 8083 	beq.w	8009248 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	2b02      	cmp	r3, #2
 8009146:	f200 80a1 	bhi.w	800928c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d003      	beq.n	8009158 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	2b01      	cmp	r3, #1
 8009154:	d056      	beq.n	8009204 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009156:	e099      	b.n	800928c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009158:	4b88      	ldr	r3, [pc, #544]	@ (800937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 0320 	and.w	r3, r3, #32
 8009160:	2b00      	cmp	r3, #0
 8009162:	d02d      	beq.n	80091c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009164:	4b85      	ldr	r3, [pc, #532]	@ (800937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	08db      	lsrs	r3, r3, #3
 800916a:	f003 0303 	and.w	r3, r3, #3
 800916e:	4a84      	ldr	r2, [pc, #528]	@ (8009380 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009170:	fa22 f303 	lsr.w	r3, r2, r3
 8009174:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	ee07 3a90 	vmov	s15, r3
 800917c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	ee07 3a90 	vmov	s15, r3
 8009186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800918a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800918e:	4b7b      	ldr	r3, [pc, #492]	@ (800937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009196:	ee07 3a90 	vmov	s15, r3
 800919a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800919e:	ed97 6a03 	vldr	s12, [r7, #12]
 80091a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80091be:	e087      	b.n	80092d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	ee07 3a90 	vmov	s15, r3
 80091c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009388 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80091ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091d2:	4b6a      	ldr	r3, [pc, #424]	@ (800937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091da:	ee07 3a90 	vmov	s15, r3
 80091de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80091e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009202:	e065      	b.n	80092d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	ee07 3a90 	vmov	s15, r3
 800920a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800920e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800938c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009216:	4b59      	ldr	r3, [pc, #356]	@ (800937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800921a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800921e:	ee07 3a90 	vmov	s15, r3
 8009222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009226:	ed97 6a03 	vldr	s12, [r7, #12]
 800922a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800922e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800923a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800923e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009246:	e043      	b.n	80092d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	ee07 3a90 	vmov	s15, r3
 800924e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009252:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009390 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800925a:	4b48      	ldr	r3, [pc, #288]	@ (800937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800925c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800925e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009262:	ee07 3a90 	vmov	s15, r3
 8009266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800926a:	ed97 6a03 	vldr	s12, [r7, #12]
 800926e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800927a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800927e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800928a:	e021      	b.n	80092d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	ee07 3a90 	vmov	s15, r3
 8009292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009296:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800938c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800929a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800929e:	4b37      	ldr	r3, [pc, #220]	@ (800937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092a6:	ee07 3a90 	vmov	s15, r3
 80092aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80092b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80092d0:	4b2a      	ldr	r3, [pc, #168]	@ (800937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092d4:	0a5b      	lsrs	r3, r3, #9
 80092d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092da:	ee07 3a90 	vmov	s15, r3
 80092de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80092ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092f6:	ee17 2a90 	vmov	r2, s15
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80092fe:	4b1f      	ldr	r3, [pc, #124]	@ (800937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009302:	0c1b      	lsrs	r3, r3, #16
 8009304:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009308:	ee07 3a90 	vmov	s15, r3
 800930c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009310:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009314:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009318:	edd7 6a07 	vldr	s13, [r7, #28]
 800931c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009324:	ee17 2a90 	vmov	r2, s15
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800932c:	4b13      	ldr	r3, [pc, #76]	@ (800937c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800932e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009330:	0e1b      	lsrs	r3, r3, #24
 8009332:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009336:	ee07 3a90 	vmov	s15, r3
 800933a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800933e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009342:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009346:	edd7 6a07 	vldr	s13, [r7, #28]
 800934a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800934e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009352:	ee17 2a90 	vmov	r2, s15
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800935a:	e008      	b.n	800936e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	609a      	str	r2, [r3, #8]
}
 800936e:	bf00      	nop
 8009370:	3724      	adds	r7, #36	@ 0x24
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	58024400 	.word	0x58024400
 8009380:	03d09000 	.word	0x03d09000
 8009384:	46000000 	.word	0x46000000
 8009388:	4c742400 	.word	0x4c742400
 800938c:	4a742400 	.word	0x4a742400
 8009390:	4bbebc20 	.word	0x4bbebc20

08009394 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009394:	b480      	push	{r7}
 8009396:	b089      	sub	sp, #36	@ 0x24
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800939c:	4ba1      	ldr	r3, [pc, #644]	@ (8009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800939e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093a0:	f003 0303 	and.w	r3, r3, #3
 80093a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80093a6:	4b9f      	ldr	r3, [pc, #636]	@ (8009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093aa:	0d1b      	lsrs	r3, r3, #20
 80093ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80093b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80093b2:	4b9c      	ldr	r3, [pc, #624]	@ (8009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b6:	0a1b      	lsrs	r3, r3, #8
 80093b8:	f003 0301 	and.w	r3, r3, #1
 80093bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80093be:	4b99      	ldr	r3, [pc, #612]	@ (8009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093c2:	08db      	lsrs	r3, r3, #3
 80093c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093c8:	693a      	ldr	r2, [r7, #16]
 80093ca:	fb02 f303 	mul.w	r3, r2, r3
 80093ce:	ee07 3a90 	vmov	s15, r3
 80093d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 8111 	beq.w	8009604 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	f000 8083 	beq.w	80094f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	f200 80a1 	bhi.w	8009534 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d003      	beq.n	8009400 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d056      	beq.n	80094ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80093fe:	e099      	b.n	8009534 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009400:	4b88      	ldr	r3, [pc, #544]	@ (8009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 0320 	and.w	r3, r3, #32
 8009408:	2b00      	cmp	r3, #0
 800940a:	d02d      	beq.n	8009468 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800940c:	4b85      	ldr	r3, [pc, #532]	@ (8009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	08db      	lsrs	r3, r3, #3
 8009412:	f003 0303 	and.w	r3, r3, #3
 8009416:	4a84      	ldr	r2, [pc, #528]	@ (8009628 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009418:	fa22 f303 	lsr.w	r3, r2, r3
 800941c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	ee07 3a90 	vmov	s15, r3
 8009424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	ee07 3a90 	vmov	s15, r3
 800942e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009436:	4b7b      	ldr	r3, [pc, #492]	@ (8009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800943a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800943e:	ee07 3a90 	vmov	s15, r3
 8009442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009446:	ed97 6a03 	vldr	s12, [r7, #12]
 800944a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800962c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800944e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800945a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800945e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009462:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009466:	e087      	b.n	8009578 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	ee07 3a90 	vmov	s15, r3
 800946e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009472:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009630 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800947a:	4b6a      	ldr	r3, [pc, #424]	@ (8009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800947c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800947e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009482:	ee07 3a90 	vmov	s15, r3
 8009486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800948a:	ed97 6a03 	vldr	s12, [r7, #12]
 800948e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800962c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800949a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800949e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094aa:	e065      	b.n	8009578 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	ee07 3a90 	vmov	s15, r3
 80094b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009634 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80094ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094be:	4b59      	ldr	r3, [pc, #356]	@ (8009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094c6:	ee07 3a90 	vmov	s15, r3
 80094ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80094d2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800962c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094ee:	e043      	b.n	8009578 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	ee07 3a90 	vmov	s15, r3
 80094f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094fa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009638 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80094fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009502:	4b48      	ldr	r3, [pc, #288]	@ (8009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800950a:	ee07 3a90 	vmov	s15, r3
 800950e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009512:	ed97 6a03 	vldr	s12, [r7, #12]
 8009516:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800962c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800951a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800951e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800952a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800952e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009532:	e021      	b.n	8009578 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	ee07 3a90 	vmov	s15, r3
 800953a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800953e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009634 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009546:	4b37      	ldr	r3, [pc, #220]	@ (8009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800954a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800954e:	ee07 3a90 	vmov	s15, r3
 8009552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009556:	ed97 6a03 	vldr	s12, [r7, #12]
 800955a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800962c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800955e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009566:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800956a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800956e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009576:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009578:	4b2a      	ldr	r3, [pc, #168]	@ (8009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800957a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800957c:	0a5b      	lsrs	r3, r3, #9
 800957e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009582:	ee07 3a90 	vmov	s15, r3
 8009586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800958a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800958e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009592:	edd7 6a07 	vldr	s13, [r7, #28]
 8009596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800959a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800959e:	ee17 2a90 	vmov	r2, s15
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80095a6:	4b1f      	ldr	r3, [pc, #124]	@ (8009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095aa:	0c1b      	lsrs	r3, r3, #16
 80095ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095b0:	ee07 3a90 	vmov	s15, r3
 80095b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80095c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095cc:	ee17 2a90 	vmov	r2, s15
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80095d4:	4b13      	ldr	r3, [pc, #76]	@ (8009624 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095d8:	0e1b      	lsrs	r3, r3, #24
 80095da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095de:	ee07 3a90 	vmov	s15, r3
 80095e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80095f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095fa:	ee17 2a90 	vmov	r2, s15
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009602:	e008      	b.n	8009616 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	609a      	str	r2, [r3, #8]
}
 8009616:	bf00      	nop
 8009618:	3724      	adds	r7, #36	@ 0x24
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	58024400 	.word	0x58024400
 8009628:	03d09000 	.word	0x03d09000
 800962c:	46000000 	.word	0x46000000
 8009630:	4c742400 	.word	0x4c742400
 8009634:	4a742400 	.word	0x4a742400
 8009638:	4bbebc20 	.word	0x4bbebc20

0800963c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800963c:	b480      	push	{r7}
 800963e:	b089      	sub	sp, #36	@ 0x24
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009644:	4ba0      	ldr	r3, [pc, #640]	@ (80098c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009648:	f003 0303 	and.w	r3, r3, #3
 800964c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800964e:	4b9e      	ldr	r3, [pc, #632]	@ (80098c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009652:	091b      	lsrs	r3, r3, #4
 8009654:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009658:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800965a:	4b9b      	ldr	r3, [pc, #620]	@ (80098c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800965c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800965e:	f003 0301 	and.w	r3, r3, #1
 8009662:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009664:	4b98      	ldr	r3, [pc, #608]	@ (80098c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009668:	08db      	lsrs	r3, r3, #3
 800966a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800966e:	693a      	ldr	r2, [r7, #16]
 8009670:	fb02 f303 	mul.w	r3, r2, r3
 8009674:	ee07 3a90 	vmov	s15, r3
 8009678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800967c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	2b00      	cmp	r3, #0
 8009684:	f000 8111 	beq.w	80098aa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	2b02      	cmp	r3, #2
 800968c:	f000 8083 	beq.w	8009796 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	2b02      	cmp	r3, #2
 8009694:	f200 80a1 	bhi.w	80097da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d003      	beq.n	80096a6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d056      	beq.n	8009752 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80096a4:	e099      	b.n	80097da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096a6:	4b88      	ldr	r3, [pc, #544]	@ (80098c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 0320 	and.w	r3, r3, #32
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d02d      	beq.n	800970e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096b2:	4b85      	ldr	r3, [pc, #532]	@ (80098c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	08db      	lsrs	r3, r3, #3
 80096b8:	f003 0303 	and.w	r3, r3, #3
 80096bc:	4a83      	ldr	r2, [pc, #524]	@ (80098cc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80096be:	fa22 f303 	lsr.w	r3, r2, r3
 80096c2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	ee07 3a90 	vmov	s15, r3
 80096ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	ee07 3a90 	vmov	s15, r3
 80096d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096dc:	4b7a      	ldr	r3, [pc, #488]	@ (80098c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e4:	ee07 3a90 	vmov	s15, r3
 80096e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80096f0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80098d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009700:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009708:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800970c:	e087      	b.n	800981e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	ee07 3a90 	vmov	s15, r3
 8009714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009718:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80098d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800971c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009720:	4b69      	ldr	r3, [pc, #420]	@ (80098c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009728:	ee07 3a90 	vmov	s15, r3
 800972c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009730:	ed97 6a03 	vldr	s12, [r7, #12]
 8009734:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80098d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009738:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800973c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009740:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009744:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800974c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009750:	e065      	b.n	800981e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	ee07 3a90 	vmov	s15, r3
 8009758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800975c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80098d8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009760:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009764:	4b58      	ldr	r3, [pc, #352]	@ (80098c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800976c:	ee07 3a90 	vmov	s15, r3
 8009770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009774:	ed97 6a03 	vldr	s12, [r7, #12]
 8009778:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80098d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800977c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009780:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009784:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009788:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800978c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009790:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009794:	e043      	b.n	800981e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	ee07 3a90 	vmov	s15, r3
 800979c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097a0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80098dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80097a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097a8:	4b47      	ldr	r3, [pc, #284]	@ (80098c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097b0:	ee07 3a90 	vmov	s15, r3
 80097b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80097bc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80098d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80097c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097d8:	e021      	b.n	800981e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	ee07 3a90 	vmov	s15, r3
 80097e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097e4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80098d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80097e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097ec:	4b36      	ldr	r3, [pc, #216]	@ (80098c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097f4:	ee07 3a90 	vmov	s15, r3
 80097f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009800:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80098d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009804:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009808:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800980c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009810:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009818:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800981c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800981e:	4b2a      	ldr	r3, [pc, #168]	@ (80098c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009822:	0a5b      	lsrs	r3, r3, #9
 8009824:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009828:	ee07 3a90 	vmov	s15, r3
 800982c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009830:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009834:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009838:	edd7 6a07 	vldr	s13, [r7, #28]
 800983c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009844:	ee17 2a90 	vmov	r2, s15
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800984c:	4b1e      	ldr	r3, [pc, #120]	@ (80098c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800984e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009850:	0c1b      	lsrs	r3, r3, #16
 8009852:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009856:	ee07 3a90 	vmov	s15, r3
 800985a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800985e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009862:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009866:	edd7 6a07 	vldr	s13, [r7, #28]
 800986a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800986e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009872:	ee17 2a90 	vmov	r2, s15
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800987a:	4b13      	ldr	r3, [pc, #76]	@ (80098c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800987c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800987e:	0e1b      	lsrs	r3, r3, #24
 8009880:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009884:	ee07 3a90 	vmov	s15, r3
 8009888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800988c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009890:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009894:	edd7 6a07 	vldr	s13, [r7, #28]
 8009898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800989c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098a0:	ee17 2a90 	vmov	r2, s15
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80098a8:	e008      	b.n	80098bc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	609a      	str	r2, [r3, #8]
}
 80098bc:	bf00      	nop
 80098be:	3724      	adds	r7, #36	@ 0x24
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr
 80098c8:	58024400 	.word	0x58024400
 80098cc:	03d09000 	.word	0x03d09000
 80098d0:	46000000 	.word	0x46000000
 80098d4:	4c742400 	.word	0x4c742400
 80098d8:	4a742400 	.word	0x4a742400
 80098dc:	4bbebc20 	.word	0x4bbebc20

080098e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80098ea:	2300      	movs	r3, #0
 80098ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80098ee:	4b53      	ldr	r3, [pc, #332]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80098f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098f2:	f003 0303 	and.w	r3, r3, #3
 80098f6:	2b03      	cmp	r3, #3
 80098f8:	d101      	bne.n	80098fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e099      	b.n	8009a32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80098fe:	4b4f      	ldr	r3, [pc, #316]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a4e      	ldr	r2, [pc, #312]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 8009904:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800990a:	f7f7 f9a9 	bl	8000c60 <HAL_GetTick>
 800990e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009910:	e008      	b.n	8009924 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009912:	f7f7 f9a5 	bl	8000c60 <HAL_GetTick>
 8009916:	4602      	mov	r2, r0
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	1ad3      	subs	r3, r2, r3
 800991c:	2b02      	cmp	r3, #2
 800991e:	d901      	bls.n	8009924 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009920:	2303      	movs	r3, #3
 8009922:	e086      	b.n	8009a32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009924:	4b45      	ldr	r3, [pc, #276]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800992c:	2b00      	cmp	r3, #0
 800992e:	d1f0      	bne.n	8009912 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009930:	4b42      	ldr	r3, [pc, #264]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 8009932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009934:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	031b      	lsls	r3, r3, #12
 800993e:	493f      	ldr	r1, [pc, #252]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 8009940:	4313      	orrs	r3, r2
 8009942:	628b      	str	r3, [r1, #40]	@ 0x28
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	3b01      	subs	r3, #1
 800994a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	3b01      	subs	r3, #1
 8009954:	025b      	lsls	r3, r3, #9
 8009956:	b29b      	uxth	r3, r3
 8009958:	431a      	orrs	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	3b01      	subs	r3, #1
 8009960:	041b      	lsls	r3, r3, #16
 8009962:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009966:	431a      	orrs	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	3b01      	subs	r3, #1
 800996e:	061b      	lsls	r3, r3, #24
 8009970:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009974:	4931      	ldr	r1, [pc, #196]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 8009976:	4313      	orrs	r3, r2
 8009978:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800997a:	4b30      	ldr	r3, [pc, #192]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 800997c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800997e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	695b      	ldr	r3, [r3, #20]
 8009986:	492d      	ldr	r1, [pc, #180]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 8009988:	4313      	orrs	r3, r2
 800998a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800998c:	4b2b      	ldr	r3, [pc, #172]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 800998e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009990:	f023 0220 	bic.w	r2, r3, #32
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	699b      	ldr	r3, [r3, #24]
 8009998:	4928      	ldr	r1, [pc, #160]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 800999a:	4313      	orrs	r3, r2
 800999c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800999e:	4b27      	ldr	r3, [pc, #156]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80099a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a2:	4a26      	ldr	r2, [pc, #152]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80099a4:	f023 0310 	bic.w	r3, r3, #16
 80099a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80099aa:	4b24      	ldr	r3, [pc, #144]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80099ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80099ae:	4b24      	ldr	r3, [pc, #144]	@ (8009a40 <RCCEx_PLL2_Config+0x160>)
 80099b0:	4013      	ands	r3, r2
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	69d2      	ldr	r2, [r2, #28]
 80099b6:	00d2      	lsls	r2, r2, #3
 80099b8:	4920      	ldr	r1, [pc, #128]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80099ba:	4313      	orrs	r3, r2
 80099bc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80099be:	4b1f      	ldr	r3, [pc, #124]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80099c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099c2:	4a1e      	ldr	r2, [pc, #120]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80099c4:	f043 0310 	orr.w	r3, r3, #16
 80099c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d106      	bne.n	80099de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80099d0:	4b1a      	ldr	r3, [pc, #104]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80099d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099d4:	4a19      	ldr	r2, [pc, #100]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80099d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80099da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80099dc:	e00f      	b.n	80099fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d106      	bne.n	80099f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80099e4:	4b15      	ldr	r3, [pc, #84]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80099e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e8:	4a14      	ldr	r2, [pc, #80]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80099ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80099f0:	e005      	b.n	80099fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80099f2:	4b12      	ldr	r3, [pc, #72]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80099f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f6:	4a11      	ldr	r2, [pc, #68]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80099f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80099fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80099fe:	4b0f      	ldr	r3, [pc, #60]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a0e      	ldr	r2, [pc, #56]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 8009a04:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009a08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a0a:	f7f7 f929 	bl	8000c60 <HAL_GetTick>
 8009a0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a10:	e008      	b.n	8009a24 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a12:	f7f7 f925 	bl	8000c60 <HAL_GetTick>
 8009a16:	4602      	mov	r2, r0
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	d901      	bls.n	8009a24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a20:	2303      	movs	r3, #3
 8009a22:	e006      	b.n	8009a32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a24:	4b05      	ldr	r3, [pc, #20]	@ (8009a3c <RCCEx_PLL2_Config+0x15c>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d0f0      	beq.n	8009a12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	58024400 	.word	0x58024400
 8009a40:	ffff0007 	.word	0xffff0007

08009a44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a52:	4b53      	ldr	r3, [pc, #332]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a56:	f003 0303 	and.w	r3, r3, #3
 8009a5a:	2b03      	cmp	r3, #3
 8009a5c:	d101      	bne.n	8009a62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e099      	b.n	8009b96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009a62:	4b4f      	ldr	r3, [pc, #316]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a4e      	ldr	r2, [pc, #312]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009a68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a6e:	f7f7 f8f7 	bl	8000c60 <HAL_GetTick>
 8009a72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a74:	e008      	b.n	8009a88 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a76:	f7f7 f8f3 	bl	8000c60 <HAL_GetTick>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	1ad3      	subs	r3, r2, r3
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d901      	bls.n	8009a88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a84:	2303      	movs	r3, #3
 8009a86:	e086      	b.n	8009b96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a88:	4b45      	ldr	r3, [pc, #276]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1f0      	bne.n	8009a76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009a94:	4b42      	ldr	r3, [pc, #264]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a98:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	051b      	lsls	r3, r3, #20
 8009aa2:	493f      	ldr	r1, [pc, #252]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	628b      	str	r3, [r1, #40]	@ 0x28
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	3b01      	subs	r3, #1
 8009aae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	025b      	lsls	r3, r3, #9
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	431a      	orrs	r2, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	041b      	lsls	r3, r3, #16
 8009ac6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009aca:	431a      	orrs	r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	061b      	lsls	r3, r3, #24
 8009ad4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009ad8:	4931      	ldr	r1, [pc, #196]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009ada:	4313      	orrs	r3, r2
 8009adc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009ade:	4b30      	ldr	r3, [pc, #192]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ae2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	695b      	ldr	r3, [r3, #20]
 8009aea:	492d      	ldr	r1, [pc, #180]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009aec:	4313      	orrs	r3, r2
 8009aee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009af0:	4b2b      	ldr	r3, [pc, #172]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	4928      	ldr	r1, [pc, #160]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009afe:	4313      	orrs	r3, r2
 8009b00:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009b02:	4b27      	ldr	r3, [pc, #156]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b06:	4a26      	ldr	r2, [pc, #152]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009b0e:	4b24      	ldr	r3, [pc, #144]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b12:	4b24      	ldr	r3, [pc, #144]	@ (8009ba4 <RCCEx_PLL3_Config+0x160>)
 8009b14:	4013      	ands	r3, r2
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	69d2      	ldr	r2, [r2, #28]
 8009b1a:	00d2      	lsls	r2, r2, #3
 8009b1c:	4920      	ldr	r1, [pc, #128]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009b22:	4b1f      	ldr	r3, [pc, #124]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b26:	4a1e      	ldr	r2, [pc, #120]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d106      	bne.n	8009b42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009b34:	4b1a      	ldr	r3, [pc, #104]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b38:	4a19      	ldr	r2, [pc, #100]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b3a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009b3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b40:	e00f      	b.n	8009b62 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d106      	bne.n	8009b56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009b48:	4b15      	ldr	r3, [pc, #84]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b4c:	4a14      	ldr	r2, [pc, #80]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b4e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009b52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b54:	e005      	b.n	8009b62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009b56:	4b12      	ldr	r3, [pc, #72]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b5a:	4a11      	ldr	r2, [pc, #68]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009b60:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009b62:	4b0f      	ldr	r3, [pc, #60]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a0e      	ldr	r2, [pc, #56]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b6e:	f7f7 f877 	bl	8000c60 <HAL_GetTick>
 8009b72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b74:	e008      	b.n	8009b88 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009b76:	f7f7 f873 	bl	8000c60 <HAL_GetTick>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	d901      	bls.n	8009b88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b84:	2303      	movs	r3, #3
 8009b86:	e006      	b.n	8009b96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b88:	4b05      	ldr	r3, [pc, #20]	@ (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d0f0      	beq.n	8009b76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3710      	adds	r7, #16
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	58024400 	.word	0x58024400
 8009ba4:	ffff0007 	.word	0xffff0007

08009ba8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d101      	bne.n	8009bba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e049      	b.n	8009c4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d106      	bne.n	8009bd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f7f6 fea8 	bl	8000924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2202      	movs	r2, #2
 8009bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	3304      	adds	r3, #4
 8009be4:	4619      	mov	r1, r3
 8009be6:	4610      	mov	r0, r2
 8009be8:	f000 f99e 	bl	8009f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2201      	movs	r2, #1
 8009c28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2201      	movs	r2, #1
 8009c38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
	...

08009c58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d001      	beq.n	8009c70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e04c      	b.n	8009d0a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2202      	movs	r2, #2
 8009c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a26      	ldr	r2, [pc, #152]	@ (8009d18 <HAL_TIM_Base_Start+0xc0>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d022      	beq.n	8009cc8 <HAL_TIM_Base_Start+0x70>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c8a:	d01d      	beq.n	8009cc8 <HAL_TIM_Base_Start+0x70>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a22      	ldr	r2, [pc, #136]	@ (8009d1c <HAL_TIM_Base_Start+0xc4>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d018      	beq.n	8009cc8 <HAL_TIM_Base_Start+0x70>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a21      	ldr	r2, [pc, #132]	@ (8009d20 <HAL_TIM_Base_Start+0xc8>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d013      	beq.n	8009cc8 <HAL_TIM_Base_Start+0x70>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a1f      	ldr	r2, [pc, #124]	@ (8009d24 <HAL_TIM_Base_Start+0xcc>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d00e      	beq.n	8009cc8 <HAL_TIM_Base_Start+0x70>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a1e      	ldr	r2, [pc, #120]	@ (8009d28 <HAL_TIM_Base_Start+0xd0>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d009      	beq.n	8009cc8 <HAL_TIM_Base_Start+0x70>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8009d2c <HAL_TIM_Base_Start+0xd4>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d004      	beq.n	8009cc8 <HAL_TIM_Base_Start+0x70>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8009d30 <HAL_TIM_Base_Start+0xd8>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d115      	bne.n	8009cf4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	689a      	ldr	r2, [r3, #8]
 8009cce:	4b19      	ldr	r3, [pc, #100]	@ (8009d34 <HAL_TIM_Base_Start+0xdc>)
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2b06      	cmp	r3, #6
 8009cd8:	d015      	beq.n	8009d06 <HAL_TIM_Base_Start+0xae>
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ce0:	d011      	beq.n	8009d06 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f042 0201 	orr.w	r2, r2, #1
 8009cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cf2:	e008      	b.n	8009d06 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f042 0201 	orr.w	r2, r2, #1
 8009d02:	601a      	str	r2, [r3, #0]
 8009d04:	e000      	b.n	8009d08 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3714      	adds	r7, #20
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	40010000 	.word	0x40010000
 8009d1c:	40000400 	.word	0x40000400
 8009d20:	40000800 	.word	0x40000800
 8009d24:	40000c00 	.word	0x40000c00
 8009d28:	40010400 	.word	0x40010400
 8009d2c:	40001800 	.word	0x40001800
 8009d30:	40014000 	.word	0x40014000
 8009d34:	00010007 	.word	0x00010007

08009d38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d42:	2300      	movs	r3, #0
 8009d44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d101      	bne.n	8009d54 <HAL_TIM_ConfigClockSource+0x1c>
 8009d50:	2302      	movs	r3, #2
 8009d52:	e0dc      	b.n	8009f0e <HAL_TIM_ConfigClockSource+0x1d6>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2202      	movs	r2, #2
 8009d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	4b6a      	ldr	r3, [pc, #424]	@ (8009f18 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009d70:	4013      	ands	r3, r2
 8009d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68ba      	ldr	r2, [r7, #8]
 8009d82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a64      	ldr	r2, [pc, #400]	@ (8009f1c <HAL_TIM_ConfigClockSource+0x1e4>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	f000 80a9 	beq.w	8009ee2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009d90:	4a62      	ldr	r2, [pc, #392]	@ (8009f1c <HAL_TIM_ConfigClockSource+0x1e4>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	f200 80ae 	bhi.w	8009ef4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d98:	4a61      	ldr	r2, [pc, #388]	@ (8009f20 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	f000 80a1 	beq.w	8009ee2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009da0:	4a5f      	ldr	r2, [pc, #380]	@ (8009f20 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	f200 80a6 	bhi.w	8009ef4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009da8:	4a5e      	ldr	r2, [pc, #376]	@ (8009f24 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	f000 8099 	beq.w	8009ee2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009db0:	4a5c      	ldr	r2, [pc, #368]	@ (8009f24 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	f200 809e 	bhi.w	8009ef4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009db8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009dbc:	f000 8091 	beq.w	8009ee2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009dc0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009dc4:	f200 8096 	bhi.w	8009ef4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009dc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dcc:	f000 8089 	beq.w	8009ee2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009dd0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dd4:	f200 808e 	bhi.w	8009ef4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009dd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ddc:	d03e      	beq.n	8009e5c <HAL_TIM_ConfigClockSource+0x124>
 8009dde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009de2:	f200 8087 	bhi.w	8009ef4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009de6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009dea:	f000 8086 	beq.w	8009efa <HAL_TIM_ConfigClockSource+0x1c2>
 8009dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009df2:	d87f      	bhi.n	8009ef4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009df4:	2b70      	cmp	r3, #112	@ 0x70
 8009df6:	d01a      	beq.n	8009e2e <HAL_TIM_ConfigClockSource+0xf6>
 8009df8:	2b70      	cmp	r3, #112	@ 0x70
 8009dfa:	d87b      	bhi.n	8009ef4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009dfc:	2b60      	cmp	r3, #96	@ 0x60
 8009dfe:	d050      	beq.n	8009ea2 <HAL_TIM_ConfigClockSource+0x16a>
 8009e00:	2b60      	cmp	r3, #96	@ 0x60
 8009e02:	d877      	bhi.n	8009ef4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e04:	2b50      	cmp	r3, #80	@ 0x50
 8009e06:	d03c      	beq.n	8009e82 <HAL_TIM_ConfigClockSource+0x14a>
 8009e08:	2b50      	cmp	r3, #80	@ 0x50
 8009e0a:	d873      	bhi.n	8009ef4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e0c:	2b40      	cmp	r3, #64	@ 0x40
 8009e0e:	d058      	beq.n	8009ec2 <HAL_TIM_ConfigClockSource+0x18a>
 8009e10:	2b40      	cmp	r3, #64	@ 0x40
 8009e12:	d86f      	bhi.n	8009ef4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e14:	2b30      	cmp	r3, #48	@ 0x30
 8009e16:	d064      	beq.n	8009ee2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009e18:	2b30      	cmp	r3, #48	@ 0x30
 8009e1a:	d86b      	bhi.n	8009ef4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e1c:	2b20      	cmp	r3, #32
 8009e1e:	d060      	beq.n	8009ee2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009e20:	2b20      	cmp	r3, #32
 8009e22:	d867      	bhi.n	8009ef4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d05c      	beq.n	8009ee2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009e28:	2b10      	cmp	r3, #16
 8009e2a:	d05a      	beq.n	8009ee2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009e2c:	e062      	b.n	8009ef4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009e3e:	f000 f997 	bl	800a170 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009e50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	609a      	str	r2, [r3, #8]
      break;
 8009e5a:	e04f      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009e6c:	f000 f980 	bl	800a170 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	689a      	ldr	r2, [r3, #8]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009e7e:	609a      	str	r2, [r3, #8]
      break;
 8009e80:	e03c      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e8e:	461a      	mov	r2, r3
 8009e90:	f000 f8f0 	bl	800a074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2150      	movs	r1, #80	@ 0x50
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 f94a 	bl	800a134 <TIM_ITRx_SetConfig>
      break;
 8009ea0:	e02c      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009eae:	461a      	mov	r2, r3
 8009eb0:	f000 f90f 	bl	800a0d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2160      	movs	r1, #96	@ 0x60
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f000 f93a 	bl	800a134 <TIM_ITRx_SetConfig>
      break;
 8009ec0:	e01c      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ece:	461a      	mov	r2, r3
 8009ed0:	f000 f8d0 	bl	800a074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2140      	movs	r1, #64	@ 0x40
 8009eda:	4618      	mov	r0, r3
 8009edc:	f000 f92a 	bl	800a134 <TIM_ITRx_SetConfig>
      break;
 8009ee0:	e00c      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4619      	mov	r1, r3
 8009eec:	4610      	mov	r0, r2
 8009eee:	f000 f921 	bl	800a134 <TIM_ITRx_SetConfig>
      break;
 8009ef2:	e003      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ef8:	e000      	b.n	8009efc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009efa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	ffceff88 	.word	0xffceff88
 8009f1c:	00100040 	.word	0x00100040
 8009f20:	00100030 	.word	0x00100030
 8009f24:	00100020 	.word	0x00100020

08009f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	4a46      	ldr	r2, [pc, #280]	@ (800a054 <TIM_Base_SetConfig+0x12c>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d013      	beq.n	8009f68 <TIM_Base_SetConfig+0x40>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f46:	d00f      	beq.n	8009f68 <TIM_Base_SetConfig+0x40>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	4a43      	ldr	r2, [pc, #268]	@ (800a058 <TIM_Base_SetConfig+0x130>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d00b      	beq.n	8009f68 <TIM_Base_SetConfig+0x40>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a42      	ldr	r2, [pc, #264]	@ (800a05c <TIM_Base_SetConfig+0x134>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d007      	beq.n	8009f68 <TIM_Base_SetConfig+0x40>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a41      	ldr	r2, [pc, #260]	@ (800a060 <TIM_Base_SetConfig+0x138>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d003      	beq.n	8009f68 <TIM_Base_SetConfig+0x40>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a40      	ldr	r2, [pc, #256]	@ (800a064 <TIM_Base_SetConfig+0x13c>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d108      	bne.n	8009f7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a35      	ldr	r2, [pc, #212]	@ (800a054 <TIM_Base_SetConfig+0x12c>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d01f      	beq.n	8009fc2 <TIM_Base_SetConfig+0x9a>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f88:	d01b      	beq.n	8009fc2 <TIM_Base_SetConfig+0x9a>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a32      	ldr	r2, [pc, #200]	@ (800a058 <TIM_Base_SetConfig+0x130>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d017      	beq.n	8009fc2 <TIM_Base_SetConfig+0x9a>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a31      	ldr	r2, [pc, #196]	@ (800a05c <TIM_Base_SetConfig+0x134>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d013      	beq.n	8009fc2 <TIM_Base_SetConfig+0x9a>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a30      	ldr	r2, [pc, #192]	@ (800a060 <TIM_Base_SetConfig+0x138>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d00f      	beq.n	8009fc2 <TIM_Base_SetConfig+0x9a>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4a2f      	ldr	r2, [pc, #188]	@ (800a064 <TIM_Base_SetConfig+0x13c>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d00b      	beq.n	8009fc2 <TIM_Base_SetConfig+0x9a>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4a2e      	ldr	r2, [pc, #184]	@ (800a068 <TIM_Base_SetConfig+0x140>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d007      	beq.n	8009fc2 <TIM_Base_SetConfig+0x9a>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	4a2d      	ldr	r2, [pc, #180]	@ (800a06c <TIM_Base_SetConfig+0x144>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d003      	beq.n	8009fc2 <TIM_Base_SetConfig+0x9a>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4a2c      	ldr	r2, [pc, #176]	@ (800a070 <TIM_Base_SetConfig+0x148>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d108      	bne.n	8009fd4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	695b      	ldr	r3, [r3, #20]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	689a      	ldr	r2, [r3, #8]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	4a16      	ldr	r2, [pc, #88]	@ (800a054 <TIM_Base_SetConfig+0x12c>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d00f      	beq.n	800a020 <TIM_Base_SetConfig+0xf8>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a18      	ldr	r2, [pc, #96]	@ (800a064 <TIM_Base_SetConfig+0x13c>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d00b      	beq.n	800a020 <TIM_Base_SetConfig+0xf8>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a17      	ldr	r2, [pc, #92]	@ (800a068 <TIM_Base_SetConfig+0x140>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d007      	beq.n	800a020 <TIM_Base_SetConfig+0xf8>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a16      	ldr	r2, [pc, #88]	@ (800a06c <TIM_Base_SetConfig+0x144>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d003      	beq.n	800a020 <TIM_Base_SetConfig+0xf8>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4a15      	ldr	r2, [pc, #84]	@ (800a070 <TIM_Base_SetConfig+0x148>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d103      	bne.n	800a028 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	691a      	ldr	r2, [r3, #16]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	f003 0301 	and.w	r3, r3, #1
 800a036:	2b01      	cmp	r3, #1
 800a038:	d105      	bne.n	800a046 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	f023 0201 	bic.w	r2, r3, #1
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	611a      	str	r2, [r3, #16]
  }
}
 800a046:	bf00      	nop
 800a048:	3714      	adds	r7, #20
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	40010000 	.word	0x40010000
 800a058:	40000400 	.word	0x40000400
 800a05c:	40000800 	.word	0x40000800
 800a060:	40000c00 	.word	0x40000c00
 800a064:	40010400 	.word	0x40010400
 800a068:	40014000 	.word	0x40014000
 800a06c:	40014400 	.word	0x40014400
 800a070:	40014800 	.word	0x40014800

0800a074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a074:	b480      	push	{r7}
 800a076:	b087      	sub	sp, #28
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6a1b      	ldr	r3, [r3, #32]
 800a084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	f023 0201 	bic.w	r2, r3, #1
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	699b      	ldr	r3, [r3, #24]
 800a096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a09e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	011b      	lsls	r3, r3, #4
 800a0a4:	693a      	ldr	r2, [r7, #16]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	f023 030a 	bic.w	r3, r3, #10
 800a0b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a0b2:	697a      	ldr	r2, [r7, #20]
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	693a      	ldr	r2, [r7, #16]
 800a0be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	621a      	str	r2, [r3, #32]
}
 800a0c6:	bf00      	nop
 800a0c8:	371c      	adds	r7, #28
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr

0800a0d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0d2:	b480      	push	{r7}
 800a0d4:	b087      	sub	sp, #28
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	60f8      	str	r0, [r7, #12]
 800a0da:	60b9      	str	r1, [r7, #8]
 800a0dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6a1b      	ldr	r3, [r3, #32]
 800a0e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6a1b      	ldr	r3, [r3, #32]
 800a0e8:	f023 0210 	bic.w	r2, r3, #16
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	699b      	ldr	r3, [r3, #24]
 800a0f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a0fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	031b      	lsls	r3, r3, #12
 800a102:	693a      	ldr	r2, [r7, #16]
 800a104:	4313      	orrs	r3, r2
 800a106:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a10e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	011b      	lsls	r3, r3, #4
 800a114:	697a      	ldr	r2, [r7, #20]
 800a116:	4313      	orrs	r3, r2
 800a118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	693a      	ldr	r2, [r7, #16]
 800a11e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	697a      	ldr	r2, [r7, #20]
 800a124:	621a      	str	r2, [r3, #32]
}
 800a126:	bf00      	nop
 800a128:	371c      	adds	r7, #28
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr
	...

0800a134 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a144:	68fa      	ldr	r2, [r7, #12]
 800a146:	4b09      	ldr	r3, [pc, #36]	@ (800a16c <TIM_ITRx_SetConfig+0x38>)
 800a148:	4013      	ands	r3, r2
 800a14a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a14c:	683a      	ldr	r2, [r7, #0]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	4313      	orrs	r3, r2
 800a152:	f043 0307 	orr.w	r3, r3, #7
 800a156:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	68fa      	ldr	r2, [r7, #12]
 800a15c:	609a      	str	r2, [r3, #8]
}
 800a15e:	bf00      	nop
 800a160:	3714      	adds	r7, #20
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	ffcfff8f 	.word	0xffcfff8f

0800a170 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a170:	b480      	push	{r7}
 800a172:	b087      	sub	sp, #28
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
 800a17c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a18a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	021a      	lsls	r2, r3, #8
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	431a      	orrs	r2, r3
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	4313      	orrs	r3, r2
 800a198:	697a      	ldr	r2, [r7, #20]
 800a19a:	4313      	orrs	r3, r2
 800a19c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	697a      	ldr	r2, [r7, #20]
 800a1a2:	609a      	str	r2, [r3, #8]
}
 800a1a4:	bf00      	nop
 800a1a6:	371c      	adds	r7, #28
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d101      	bne.n	800a1c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a1c4:	2302      	movs	r3, #2
 800a1c6:	e06d      	b.n	800a2a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2202      	movs	r2, #2
 800a1d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a30      	ldr	r2, [pc, #192]	@ (800a2b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d004      	beq.n	800a1fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a2f      	ldr	r2, [pc, #188]	@ (800a2b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d108      	bne.n	800a20e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a202:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a214:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68fa      	ldr	r2, [r7, #12]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a20      	ldr	r2, [pc, #128]	@ (800a2b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d022      	beq.n	800a278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a23a:	d01d      	beq.n	800a278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a1d      	ldr	r2, [pc, #116]	@ (800a2b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d018      	beq.n	800a278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a1c      	ldr	r2, [pc, #112]	@ (800a2bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d013      	beq.n	800a278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a1a      	ldr	r2, [pc, #104]	@ (800a2c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d00e      	beq.n	800a278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a15      	ldr	r2, [pc, #84]	@ (800a2b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d009      	beq.n	800a278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a16      	ldr	r2, [pc, #88]	@ (800a2c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d004      	beq.n	800a278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a15      	ldr	r2, [pc, #84]	@ (800a2c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d10c      	bne.n	800a292 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a27e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	68ba      	ldr	r2, [r7, #8]
 800a286:	4313      	orrs	r3, r2
 800a288:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	68ba      	ldr	r2, [r7, #8]
 800a290:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2201      	movs	r2, #1
 800a296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a2a2:	2300      	movs	r3, #0
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3714      	adds	r7, #20
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr
 800a2b0:	40010000 	.word	0x40010000
 800a2b4:	40010400 	.word	0x40010400
 800a2b8:	40000400 	.word	0x40000400
 800a2bc:	40000800 	.word	0x40000800
 800a2c0:	40000c00 	.word	0x40000c00
 800a2c4:	40001800 	.word	0x40001800
 800a2c8:	40014000 	.word	0x40014000

0800a2cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a2cc:	b084      	sub	sp, #16
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b084      	sub	sp, #16
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
 800a2d6:	f107 001c 	add.w	r0, r7, #28
 800a2da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a2de:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d121      	bne.n	800a32a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	68da      	ldr	r2, [r3, #12]
 800a2f6:	4b2c      	ldr	r3, [pc, #176]	@ (800a3a8 <USB_CoreInit+0xdc>)
 800a2f8:	4013      	ands	r3, r2
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a30a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d105      	bne.n	800a31e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f001 faf6 	bl	800b910 <USB_CoreReset>
 800a324:	4603      	mov	r3, r0
 800a326:	73fb      	strb	r3, [r7, #15]
 800a328:	e01b      	b.n	800a362 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f001 faea 	bl	800b910 <USB_CoreReset>
 800a33c:	4603      	mov	r3, r0
 800a33e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a340:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a344:	2b00      	cmp	r3, #0
 800a346:	d106      	bne.n	800a356 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a34c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	639a      	str	r2, [r3, #56]	@ 0x38
 800a354:	e005      	b.n	800a362 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a35a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a362:	7fbb      	ldrb	r3, [r7, #30]
 800a364:	2b01      	cmp	r3, #1
 800a366:	d116      	bne.n	800a396 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a376:	4b0d      	ldr	r3, [pc, #52]	@ (800a3ac <USB_CoreInit+0xe0>)
 800a378:	4313      	orrs	r3, r2
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	f043 0206 	orr.w	r2, r3, #6
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	f043 0220 	orr.w	r2, r3, #32
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a396:	7bfb      	ldrb	r3, [r7, #15]
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3710      	adds	r7, #16
 800a39c:	46bd      	mov	sp, r7
 800a39e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a3a2:	b004      	add	sp, #16
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	ffbdffbf 	.word	0xffbdffbf
 800a3ac:	03ee0000 	.word	0x03ee0000

0800a3b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b087      	sub	sp, #28
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a3be:	79fb      	ldrb	r3, [r7, #7]
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	d165      	bne.n	800a490 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	4a41      	ldr	r2, [pc, #260]	@ (800a4cc <USB_SetTurnaroundTime+0x11c>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d906      	bls.n	800a3da <USB_SetTurnaroundTime+0x2a>
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	4a40      	ldr	r2, [pc, #256]	@ (800a4d0 <USB_SetTurnaroundTime+0x120>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d202      	bcs.n	800a3da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a3d4:	230f      	movs	r3, #15
 800a3d6:	617b      	str	r3, [r7, #20]
 800a3d8:	e062      	b.n	800a4a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	4a3c      	ldr	r2, [pc, #240]	@ (800a4d0 <USB_SetTurnaroundTime+0x120>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d306      	bcc.n	800a3f0 <USB_SetTurnaroundTime+0x40>
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	4a3b      	ldr	r2, [pc, #236]	@ (800a4d4 <USB_SetTurnaroundTime+0x124>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d202      	bcs.n	800a3f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a3ea:	230e      	movs	r3, #14
 800a3ec:	617b      	str	r3, [r7, #20]
 800a3ee:	e057      	b.n	800a4a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	4a38      	ldr	r2, [pc, #224]	@ (800a4d4 <USB_SetTurnaroundTime+0x124>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d306      	bcc.n	800a406 <USB_SetTurnaroundTime+0x56>
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	4a37      	ldr	r2, [pc, #220]	@ (800a4d8 <USB_SetTurnaroundTime+0x128>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d202      	bcs.n	800a406 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a400:	230d      	movs	r3, #13
 800a402:	617b      	str	r3, [r7, #20]
 800a404:	e04c      	b.n	800a4a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	4a33      	ldr	r2, [pc, #204]	@ (800a4d8 <USB_SetTurnaroundTime+0x128>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d306      	bcc.n	800a41c <USB_SetTurnaroundTime+0x6c>
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	4a32      	ldr	r2, [pc, #200]	@ (800a4dc <USB_SetTurnaroundTime+0x12c>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d802      	bhi.n	800a41c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a416:	230c      	movs	r3, #12
 800a418:	617b      	str	r3, [r7, #20]
 800a41a:	e041      	b.n	800a4a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	4a2f      	ldr	r2, [pc, #188]	@ (800a4dc <USB_SetTurnaroundTime+0x12c>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d906      	bls.n	800a432 <USB_SetTurnaroundTime+0x82>
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	4a2e      	ldr	r2, [pc, #184]	@ (800a4e0 <USB_SetTurnaroundTime+0x130>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d802      	bhi.n	800a432 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a42c:	230b      	movs	r3, #11
 800a42e:	617b      	str	r3, [r7, #20]
 800a430:	e036      	b.n	800a4a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	4a2a      	ldr	r2, [pc, #168]	@ (800a4e0 <USB_SetTurnaroundTime+0x130>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d906      	bls.n	800a448 <USB_SetTurnaroundTime+0x98>
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	4a29      	ldr	r2, [pc, #164]	@ (800a4e4 <USB_SetTurnaroundTime+0x134>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d802      	bhi.n	800a448 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a442:	230a      	movs	r3, #10
 800a444:	617b      	str	r3, [r7, #20]
 800a446:	e02b      	b.n	800a4a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	4a26      	ldr	r2, [pc, #152]	@ (800a4e4 <USB_SetTurnaroundTime+0x134>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d906      	bls.n	800a45e <USB_SetTurnaroundTime+0xae>
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	4a25      	ldr	r2, [pc, #148]	@ (800a4e8 <USB_SetTurnaroundTime+0x138>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d202      	bcs.n	800a45e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a458:	2309      	movs	r3, #9
 800a45a:	617b      	str	r3, [r7, #20]
 800a45c:	e020      	b.n	800a4a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	4a21      	ldr	r2, [pc, #132]	@ (800a4e8 <USB_SetTurnaroundTime+0x138>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d306      	bcc.n	800a474 <USB_SetTurnaroundTime+0xc4>
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	4a20      	ldr	r2, [pc, #128]	@ (800a4ec <USB_SetTurnaroundTime+0x13c>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d802      	bhi.n	800a474 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a46e:	2308      	movs	r3, #8
 800a470:	617b      	str	r3, [r7, #20]
 800a472:	e015      	b.n	800a4a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	4a1d      	ldr	r2, [pc, #116]	@ (800a4ec <USB_SetTurnaroundTime+0x13c>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d906      	bls.n	800a48a <USB_SetTurnaroundTime+0xda>
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	4a1c      	ldr	r2, [pc, #112]	@ (800a4f0 <USB_SetTurnaroundTime+0x140>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d202      	bcs.n	800a48a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a484:	2307      	movs	r3, #7
 800a486:	617b      	str	r3, [r7, #20]
 800a488:	e00a      	b.n	800a4a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a48a:	2306      	movs	r3, #6
 800a48c:	617b      	str	r3, [r7, #20]
 800a48e:	e007      	b.n	800a4a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a490:	79fb      	ldrb	r3, [r7, #7]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d102      	bne.n	800a49c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a496:	2309      	movs	r3, #9
 800a498:	617b      	str	r3, [r7, #20]
 800a49a:	e001      	b.n	800a4a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a49c:	2309      	movs	r3, #9
 800a49e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	68da      	ldr	r2, [r3, #12]
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	029b      	lsls	r3, r3, #10
 800a4b4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a4b8:	431a      	orrs	r2, r3
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	371c      	adds	r7, #28
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr
 800a4cc:	00d8acbf 	.word	0x00d8acbf
 800a4d0:	00e4e1c0 	.word	0x00e4e1c0
 800a4d4:	00f42400 	.word	0x00f42400
 800a4d8:	01067380 	.word	0x01067380
 800a4dc:	011a499f 	.word	0x011a499f
 800a4e0:	01312cff 	.word	0x01312cff
 800a4e4:	014ca43f 	.word	0x014ca43f
 800a4e8:	016e3600 	.word	0x016e3600
 800a4ec:	01a6ab1f 	.word	0x01a6ab1f
 800a4f0:	01e84800 	.word	0x01e84800

0800a4f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	f043 0201 	orr.w	r2, r3, #1
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	370c      	adds	r7, #12
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr

0800a516 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a516:	b480      	push	{r7}
 800a518:	b083      	sub	sp, #12
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	f023 0201 	bic.w	r2, r3, #1
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a52a:	2300      	movs	r3, #0
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	460b      	mov	r3, r1
 800a542:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a544:	2300      	movs	r3, #0
 800a546:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a554:	78fb      	ldrb	r3, [r7, #3]
 800a556:	2b01      	cmp	r3, #1
 800a558:	d115      	bne.n	800a586 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a566:	200a      	movs	r0, #10
 800a568:	f7f6 fb86 	bl	8000c78 <HAL_Delay>
      ms += 10U;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	330a      	adds	r3, #10
 800a570:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f001 f93b 	bl	800b7ee <USB_GetMode>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d01e      	beq.n	800a5bc <USB_SetCurrentMode+0x84>
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2bc7      	cmp	r3, #199	@ 0xc7
 800a582:	d9f0      	bls.n	800a566 <USB_SetCurrentMode+0x2e>
 800a584:	e01a      	b.n	800a5bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a586:	78fb      	ldrb	r3, [r7, #3]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d115      	bne.n	800a5b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	68db      	ldr	r3, [r3, #12]
 800a590:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a598:	200a      	movs	r0, #10
 800a59a:	f7f6 fb6d 	bl	8000c78 <HAL_Delay>
      ms += 10U;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	330a      	adds	r3, #10
 800a5a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f001 f922 	bl	800b7ee <USB_GetMode>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d005      	beq.n	800a5bc <USB_SetCurrentMode+0x84>
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2bc7      	cmp	r3, #199	@ 0xc7
 800a5b4:	d9f0      	bls.n	800a598 <USB_SetCurrentMode+0x60>
 800a5b6:	e001      	b.n	800a5bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	e005      	b.n	800a5c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2bc8      	cmp	r3, #200	@ 0xc8
 800a5c0:	d101      	bne.n	800a5c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e000      	b.n	800a5c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5d0:	b084      	sub	sp, #16
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b086      	sub	sp, #24
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
 800a5da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a5de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	613b      	str	r3, [r7, #16]
 800a5ee:	e009      	b.n	800a604 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	3340      	adds	r3, #64	@ 0x40
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4413      	add	r3, r2
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	3301      	adds	r3, #1
 800a602:	613b      	str	r3, [r7, #16]
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	2b0e      	cmp	r3, #14
 800a608:	d9f2      	bls.n	800a5f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a60a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d11c      	bne.n	800a64c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	68fa      	ldr	r2, [r7, #12]
 800a61c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a620:	f043 0302 	orr.w	r3, r3, #2
 800a624:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a62a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	601a      	str	r2, [r3, #0]
 800a64a:	e005      	b.n	800a658 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a650:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a65e:	461a      	mov	r2, r3
 800a660:	2300      	movs	r3, #0
 800a662:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a664:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d10d      	bne.n	800a688 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a66c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a670:	2b00      	cmp	r3, #0
 800a672:	d104      	bne.n	800a67e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a674:	2100      	movs	r1, #0
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f968 	bl	800a94c <USB_SetDevSpeed>
 800a67c:	e008      	b.n	800a690 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a67e:	2101      	movs	r1, #1
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 f963 	bl	800a94c <USB_SetDevSpeed>
 800a686:	e003      	b.n	800a690 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a688:	2103      	movs	r1, #3
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 f95e 	bl	800a94c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a690:	2110      	movs	r1, #16
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 f8fa 	bl	800a88c <USB_FlushTxFifo>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d001      	beq.n	800a6a2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 f924 	bl	800a8f0 <USB_FlushRxFifo>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d001      	beq.n	800a6b2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	613b      	str	r3, [r7, #16]
 800a6da:	e043      	b.n	800a764 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	015a      	lsls	r2, r3, #5
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6f2:	d118      	bne.n	800a726 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d10a      	bne.n	800a710 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	015a      	lsls	r2, r3, #5
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	4413      	add	r3, r2
 800a702:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a706:	461a      	mov	r2, r3
 800a708:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a70c:	6013      	str	r3, [r2, #0]
 800a70e:	e013      	b.n	800a738 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	015a      	lsls	r2, r3, #5
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	4413      	add	r3, r2
 800a718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a71c:	461a      	mov	r2, r3
 800a71e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a722:	6013      	str	r3, [r2, #0]
 800a724:	e008      	b.n	800a738 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	015a      	lsls	r2, r3, #5
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	4413      	add	r3, r2
 800a72e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a732:	461a      	mov	r2, r3
 800a734:	2300      	movs	r3, #0
 800a736:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	015a      	lsls	r2, r3, #5
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	4413      	add	r3, r2
 800a740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a744:	461a      	mov	r2, r3
 800a746:	2300      	movs	r3, #0
 800a748:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	015a      	lsls	r2, r3, #5
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	4413      	add	r3, r2
 800a752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a756:	461a      	mov	r2, r3
 800a758:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a75c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	3301      	adds	r3, #1
 800a762:	613b      	str	r3, [r7, #16]
 800a764:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a768:	461a      	mov	r2, r3
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d3b5      	bcc.n	800a6dc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a770:	2300      	movs	r3, #0
 800a772:	613b      	str	r3, [r7, #16]
 800a774:	e043      	b.n	800a7fe <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	015a      	lsls	r2, r3, #5
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	4413      	add	r3, r2
 800a77e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a788:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a78c:	d118      	bne.n	800a7c0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d10a      	bne.n	800a7aa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	015a      	lsls	r2, r3, #5
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	4413      	add	r3, r2
 800a79c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a7a6:	6013      	str	r3, [r2, #0]
 800a7a8:	e013      	b.n	800a7d2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	015a      	lsls	r2, r3, #5
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a7bc:	6013      	str	r3, [r2, #0]
 800a7be:	e008      	b.n	800a7d2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	015a      	lsls	r2, r3, #5
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	015a      	lsls	r2, r3, #5
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	4413      	add	r3, r2
 800a7da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7de:	461a      	mov	r2, r3
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	015a      	lsls	r2, r3, #5
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a7f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	613b      	str	r3, [r7, #16]
 800a7fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a802:	461a      	mov	r2, r3
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	4293      	cmp	r3, r2
 800a808:	d3b5      	bcc.n	800a776 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a810:	691b      	ldr	r3, [r3, #16]
 800a812:	68fa      	ldr	r2, [r7, #12]
 800a814:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a81c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2200      	movs	r2, #0
 800a822:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a82a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a82c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a830:	2b00      	cmp	r3, #0
 800a832:	d105      	bne.n	800a840 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	699b      	ldr	r3, [r3, #24]
 800a838:	f043 0210 	orr.w	r2, r3, #16
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	699a      	ldr	r2, [r3, #24]
 800a844:	4b0f      	ldr	r3, [pc, #60]	@ (800a884 <USB_DevInit+0x2b4>)
 800a846:	4313      	orrs	r3, r2
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a84c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a850:	2b00      	cmp	r3, #0
 800a852:	d005      	beq.n	800a860 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	699b      	ldr	r3, [r3, #24]
 800a858:	f043 0208 	orr.w	r2, r3, #8
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a860:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a864:	2b01      	cmp	r3, #1
 800a866:	d105      	bne.n	800a874 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	699a      	ldr	r2, [r3, #24]
 800a86c:	4b06      	ldr	r3, [pc, #24]	@ (800a888 <USB_DevInit+0x2b8>)
 800a86e:	4313      	orrs	r3, r2
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a874:	7dfb      	ldrb	r3, [r7, #23]
}
 800a876:	4618      	mov	r0, r3
 800a878:	3718      	adds	r7, #24
 800a87a:	46bd      	mov	sp, r7
 800a87c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a880:	b004      	add	sp, #16
 800a882:	4770      	bx	lr
 800a884:	803c3800 	.word	0x803c3800
 800a888:	40000004 	.word	0x40000004

0800a88c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a896:	2300      	movs	r3, #0
 800a898:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	3301      	adds	r3, #1
 800a89e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8a6:	d901      	bls.n	800a8ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	e01b      	b.n	800a8e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	691b      	ldr	r3, [r3, #16]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	daf2      	bge.n	800a89a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	019b      	lsls	r3, r3, #6
 800a8bc:	f043 0220 	orr.w	r2, r3, #32
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8d0:	d901      	bls.n	800a8d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	e006      	b.n	800a8e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	f003 0320 	and.w	r3, r3, #32
 800a8de:	2b20      	cmp	r3, #32
 800a8e0:	d0f0      	beq.n	800a8c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	3301      	adds	r3, #1
 800a900:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a908:	d901      	bls.n	800a90e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a90a:	2303      	movs	r3, #3
 800a90c:	e018      	b.n	800a940 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	2b00      	cmp	r3, #0
 800a914:	daf2      	bge.n	800a8fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a916:	2300      	movs	r3, #0
 800a918:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2210      	movs	r2, #16
 800a91e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	3301      	adds	r3, #1
 800a924:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a92c:	d901      	bls.n	800a932 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a92e:	2303      	movs	r3, #3
 800a930:	e006      	b.n	800a940 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	691b      	ldr	r3, [r3, #16]
 800a936:	f003 0310 	and.w	r3, r3, #16
 800a93a:	2b10      	cmp	r3, #16
 800a93c:	d0f0      	beq.n	800a920 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3714      	adds	r7, #20
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	460b      	mov	r3, r1
 800a956:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	78fb      	ldrb	r3, [r7, #3]
 800a966:	68f9      	ldr	r1, [r7, #12]
 800a968:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a96c:	4313      	orrs	r3, r2
 800a96e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	3714      	adds	r7, #20
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr

0800a97e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a97e:	b480      	push	{r7}
 800a980:	b087      	sub	sp, #28
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a990:	689b      	ldr	r3, [r3, #8]
 800a992:	f003 0306 	and.w	r3, r3, #6
 800a996:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d102      	bne.n	800a9a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	75fb      	strb	r3, [r7, #23]
 800a9a2:	e00a      	b.n	800a9ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	d002      	beq.n	800a9b0 <USB_GetDevSpeed+0x32>
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2b06      	cmp	r3, #6
 800a9ae:	d102      	bne.n	800a9b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	75fb      	strb	r3, [r7, #23]
 800a9b4:	e001      	b.n	800a9ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a9b6:	230f      	movs	r3, #15
 800a9b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a9ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	371c      	adds	r7, #28
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	785b      	ldrb	r3, [r3, #1]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d139      	bne.n	800aa58 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9ea:	69da      	ldr	r2, [r3, #28]
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	f003 030f 	and.w	r3, r3, #15
 800a9f4:	2101      	movs	r1, #1
 800a9f6:	fa01 f303 	lsl.w	r3, r1, r3
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	68f9      	ldr	r1, [r7, #12]
 800a9fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa02:	4313      	orrs	r3, r2
 800aa04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	015a      	lsls	r2, r3, #5
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d153      	bne.n	800aac4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	015a      	lsls	r2, r3, #5
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	4413      	add	r3, r2
 800aa24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	791b      	ldrb	r3, [r3, #4]
 800aa36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	059b      	lsls	r3, r3, #22
 800aa3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa40:	431a      	orrs	r2, r3
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	0159      	lsls	r1, r3, #5
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	440b      	add	r3, r1
 800aa4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa4e:	4619      	mov	r1, r3
 800aa50:	4b20      	ldr	r3, [pc, #128]	@ (800aad4 <USB_ActivateEndpoint+0x10c>)
 800aa52:	4313      	orrs	r3, r2
 800aa54:	600b      	str	r3, [r1, #0]
 800aa56:	e035      	b.n	800aac4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa5e:	69da      	ldr	r2, [r3, #28]
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	f003 030f 	and.w	r3, r3, #15
 800aa68:	2101      	movs	r1, #1
 800aa6a:	fa01 f303 	lsl.w	r3, r1, r3
 800aa6e:	041b      	lsls	r3, r3, #16
 800aa70:	68f9      	ldr	r1, [r7, #12]
 800aa72:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa76:	4313      	orrs	r3, r2
 800aa78:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	015a      	lsls	r2, r3, #5
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	4413      	add	r3, r2
 800aa82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d119      	bne.n	800aac4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	015a      	lsls	r2, r3, #5
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	4413      	add	r3, r2
 800aa98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	791b      	ldrb	r3, [r3, #4]
 800aaaa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aaac:	430b      	orrs	r3, r1
 800aaae:	431a      	orrs	r2, r3
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	0159      	lsls	r1, r3, #5
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	440b      	add	r3, r1
 800aab8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aabc:	4619      	mov	r1, r3
 800aabe:	4b05      	ldr	r3, [pc, #20]	@ (800aad4 <USB_ActivateEndpoint+0x10c>)
 800aac0:	4313      	orrs	r3, r2
 800aac2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3714      	adds	r7, #20
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	10008000 	.word	0x10008000

0800aad8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aad8:	b480      	push	{r7}
 800aada:	b085      	sub	sp, #20
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	785b      	ldrb	r3, [r3, #1]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d161      	bne.n	800abb8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	015a      	lsls	r2, r3, #5
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	4413      	add	r3, r2
 800aafc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab0a:	d11f      	bne.n	800ab4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	015a      	lsls	r2, r3, #5
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	4413      	add	r3, r2
 800ab14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	68ba      	ldr	r2, [r7, #8]
 800ab1c:	0151      	lsls	r1, r2, #5
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	440a      	add	r2, r1
 800ab22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ab2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	015a      	lsls	r2, r3, #5
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	4413      	add	r3, r2
 800ab34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	0151      	lsls	r1, r2, #5
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	440a      	add	r2, r1
 800ab42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	f003 030f 	and.w	r3, r3, #15
 800ab5c:	2101      	movs	r1, #1
 800ab5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	43db      	mvns	r3, r3
 800ab66:	68f9      	ldr	r1, [r7, #12]
 800ab68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab6c:	4013      	ands	r3, r2
 800ab6e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab76:	69da      	ldr	r2, [r3, #28]
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	f003 030f 	and.w	r3, r3, #15
 800ab80:	2101      	movs	r1, #1
 800ab82:	fa01 f303 	lsl.w	r3, r1, r3
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	43db      	mvns	r3, r3
 800ab8a:	68f9      	ldr	r1, [r7, #12]
 800ab8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab90:	4013      	ands	r3, r2
 800ab92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	015a      	lsls	r2, r3, #5
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	4413      	add	r3, r2
 800ab9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	0159      	lsls	r1, r3, #5
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	440b      	add	r3, r1
 800abaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abae:	4619      	mov	r1, r3
 800abb0:	4b35      	ldr	r3, [pc, #212]	@ (800ac88 <USB_DeactivateEndpoint+0x1b0>)
 800abb2:	4013      	ands	r3, r2
 800abb4:	600b      	str	r3, [r1, #0]
 800abb6:	e060      	b.n	800ac7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	015a      	lsls	r2, r3, #5
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	4413      	add	r3, r2
 800abc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800abca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800abce:	d11f      	bne.n	800ac10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	015a      	lsls	r2, r3, #5
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	4413      	add	r3, r2
 800abd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	68ba      	ldr	r2, [r7, #8]
 800abe0:	0151      	lsls	r1, r2, #5
 800abe2:	68fa      	ldr	r2, [r7, #12]
 800abe4:	440a      	add	r2, r1
 800abe6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800abea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800abee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	015a      	lsls	r2, r3, #5
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	4413      	add	r3, r2
 800abf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	68ba      	ldr	r2, [r7, #8]
 800ac00:	0151      	lsls	r1, r2, #5
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	440a      	add	r2, r1
 800ac06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ac0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	f003 030f 	and.w	r3, r3, #15
 800ac20:	2101      	movs	r1, #1
 800ac22:	fa01 f303 	lsl.w	r3, r1, r3
 800ac26:	041b      	lsls	r3, r3, #16
 800ac28:	43db      	mvns	r3, r3
 800ac2a:	68f9      	ldr	r1, [r7, #12]
 800ac2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac30:	4013      	ands	r3, r2
 800ac32:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac3a:	69da      	ldr	r2, [r3, #28]
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	f003 030f 	and.w	r3, r3, #15
 800ac44:	2101      	movs	r1, #1
 800ac46:	fa01 f303 	lsl.w	r3, r1, r3
 800ac4a:	041b      	lsls	r3, r3, #16
 800ac4c:	43db      	mvns	r3, r3
 800ac4e:	68f9      	ldr	r1, [r7, #12]
 800ac50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac54:	4013      	ands	r3, r2
 800ac56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	015a      	lsls	r2, r3, #5
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	4413      	add	r3, r2
 800ac60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	0159      	lsls	r1, r3, #5
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	440b      	add	r3, r1
 800ac6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac72:	4619      	mov	r1, r3
 800ac74:	4b05      	ldr	r3, [pc, #20]	@ (800ac8c <USB_DeactivateEndpoint+0x1b4>)
 800ac76:	4013      	ands	r3, r2
 800ac78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3714      	adds	r7, #20
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr
 800ac88:	ec337800 	.word	0xec337800
 800ac8c:	eff37800 	.word	0xeff37800

0800ac90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b08a      	sub	sp, #40	@ 0x28
 800ac94:	af02      	add	r7, sp, #8
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	60b9      	str	r1, [r7, #8]
 800ac9a:	4613      	mov	r3, r2
 800ac9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	785b      	ldrb	r3, [r3, #1]
 800acac:	2b01      	cmp	r3, #1
 800acae:	f040 8181 	bne.w	800afb4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	691b      	ldr	r3, [r3, #16]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d132      	bne.n	800ad20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	015a      	lsls	r2, r3, #5
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	4413      	add	r3, r2
 800acc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acc6:	691a      	ldr	r2, [r3, #16]
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	0159      	lsls	r1, r3, #5
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	440b      	add	r3, r1
 800acd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acd4:	4619      	mov	r1, r3
 800acd6:	4ba5      	ldr	r3, [pc, #660]	@ (800af6c <USB_EPStartXfer+0x2dc>)
 800acd8:	4013      	ands	r3, r2
 800acda:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	015a      	lsls	r2, r3, #5
 800ace0:	69fb      	ldr	r3, [r7, #28]
 800ace2:	4413      	add	r3, r2
 800ace4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ace8:	691b      	ldr	r3, [r3, #16]
 800acea:	69ba      	ldr	r2, [r7, #24]
 800acec:	0151      	lsls	r1, r2, #5
 800acee:	69fa      	ldr	r2, [r7, #28]
 800acf0:	440a      	add	r2, r1
 800acf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acf6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800acfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	015a      	lsls	r2, r3, #5
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	4413      	add	r3, r2
 800ad04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad08:	691a      	ldr	r2, [r3, #16]
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	0159      	lsls	r1, r3, #5
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	440b      	add	r3, r1
 800ad12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad16:	4619      	mov	r1, r3
 800ad18:	4b95      	ldr	r3, [pc, #596]	@ (800af70 <USB_EPStartXfer+0x2e0>)
 800ad1a:	4013      	ands	r3, r2
 800ad1c:	610b      	str	r3, [r1, #16]
 800ad1e:	e092      	b.n	800ae46 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	015a      	lsls	r2, r3, #5
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	4413      	add	r3, r2
 800ad28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad2c:	691a      	ldr	r2, [r3, #16]
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	0159      	lsls	r1, r3, #5
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	440b      	add	r3, r1
 800ad36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	4b8c      	ldr	r3, [pc, #560]	@ (800af70 <USB_EPStartXfer+0x2e0>)
 800ad3e:	4013      	ands	r3, r2
 800ad40:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	015a      	lsls	r2, r3, #5
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	4413      	add	r3, r2
 800ad4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad4e:	691a      	ldr	r2, [r3, #16]
 800ad50:	69bb      	ldr	r3, [r7, #24]
 800ad52:	0159      	lsls	r1, r3, #5
 800ad54:	69fb      	ldr	r3, [r7, #28]
 800ad56:	440b      	add	r3, r1
 800ad58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	4b83      	ldr	r3, [pc, #524]	@ (800af6c <USB_EPStartXfer+0x2dc>)
 800ad60:	4013      	ands	r3, r2
 800ad62:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d11a      	bne.n	800ada0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	691a      	ldr	r2, [r3, #16]
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d903      	bls.n	800ad7e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	689a      	ldr	r2, [r3, #8]
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	015a      	lsls	r2, r3, #5
 800ad82:	69fb      	ldr	r3, [r7, #28]
 800ad84:	4413      	add	r3, r2
 800ad86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad8a:	691b      	ldr	r3, [r3, #16]
 800ad8c:	69ba      	ldr	r2, [r7, #24]
 800ad8e:	0151      	lsls	r1, r2, #5
 800ad90:	69fa      	ldr	r2, [r7, #28]
 800ad92:	440a      	add	r2, r1
 800ad94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ad9c:	6113      	str	r3, [r2, #16]
 800ad9e:	e01b      	b.n	800add8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	015a      	lsls	r2, r3, #5
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	4413      	add	r3, r2
 800ada8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adac:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	6919      	ldr	r1, [r3, #16]
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	440b      	add	r3, r1
 800adb8:	1e59      	subs	r1, r3, #1
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	fbb1 f3f3 	udiv	r3, r1, r3
 800adc2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800adc4:	4b6b      	ldr	r3, [pc, #428]	@ (800af74 <USB_EPStartXfer+0x2e4>)
 800adc6:	400b      	ands	r3, r1
 800adc8:	69b9      	ldr	r1, [r7, #24]
 800adca:	0148      	lsls	r0, r1, #5
 800adcc:	69f9      	ldr	r1, [r7, #28]
 800adce:	4401      	add	r1, r0
 800add0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800add4:	4313      	orrs	r3, r2
 800add6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800add8:	69bb      	ldr	r3, [r7, #24]
 800adda:	015a      	lsls	r2, r3, #5
 800addc:	69fb      	ldr	r3, [r7, #28]
 800adde:	4413      	add	r3, r2
 800ade0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ade4:	691a      	ldr	r2, [r3, #16]
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adee:	69b9      	ldr	r1, [r7, #24]
 800adf0:	0148      	lsls	r0, r1, #5
 800adf2:	69f9      	ldr	r1, [r7, #28]
 800adf4:	4401      	add	r1, r0
 800adf6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800adfa:	4313      	orrs	r3, r2
 800adfc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	791b      	ldrb	r3, [r3, #4]
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d11f      	bne.n	800ae46 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	015a      	lsls	r2, r3, #5
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae12:	691b      	ldr	r3, [r3, #16]
 800ae14:	69ba      	ldr	r2, [r7, #24]
 800ae16:	0151      	lsls	r1, r2, #5
 800ae18:	69fa      	ldr	r2, [r7, #28]
 800ae1a:	440a      	add	r2, r1
 800ae1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae20:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ae24:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	015a      	lsls	r2, r3, #5
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae32:	691b      	ldr	r3, [r3, #16]
 800ae34:	69ba      	ldr	r2, [r7, #24]
 800ae36:	0151      	lsls	r1, r2, #5
 800ae38:	69fa      	ldr	r2, [r7, #28]
 800ae3a:	440a      	add	r2, r1
 800ae3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ae44:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ae46:	79fb      	ldrb	r3, [r7, #7]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d14b      	bne.n	800aee4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	69db      	ldr	r3, [r3, #28]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d009      	beq.n	800ae68 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	015a      	lsls	r2, r3, #5
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae60:	461a      	mov	r2, r3
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	69db      	ldr	r3, [r3, #28]
 800ae66:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	791b      	ldrb	r3, [r3, #4]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d128      	bne.n	800aec2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d110      	bne.n	800aea2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ae80:	69bb      	ldr	r3, [r7, #24]
 800ae82:	015a      	lsls	r2, r3, #5
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	4413      	add	r3, r2
 800ae88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	69ba      	ldr	r2, [r7, #24]
 800ae90:	0151      	lsls	r1, r2, #5
 800ae92:	69fa      	ldr	r2, [r7, #28]
 800ae94:	440a      	add	r2, r1
 800ae96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae9a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ae9e:	6013      	str	r3, [r2, #0]
 800aea0:	e00f      	b.n	800aec2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	015a      	lsls	r2, r3, #5
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	4413      	add	r3, r2
 800aeaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	69ba      	ldr	r2, [r7, #24]
 800aeb2:	0151      	lsls	r1, r2, #5
 800aeb4:	69fa      	ldr	r2, [r7, #28]
 800aeb6:	440a      	add	r2, r1
 800aeb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aec0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	015a      	lsls	r2, r3, #5
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	4413      	add	r3, r2
 800aeca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	69ba      	ldr	r2, [r7, #24]
 800aed2:	0151      	lsls	r1, r2, #5
 800aed4:	69fa      	ldr	r2, [r7, #28]
 800aed6:	440a      	add	r2, r1
 800aed8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aedc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800aee0:	6013      	str	r3, [r2, #0]
 800aee2:	e16a      	b.n	800b1ba <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	015a      	lsls	r2, r3, #5
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	4413      	add	r3, r2
 800aeec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	69ba      	ldr	r2, [r7, #24]
 800aef4:	0151      	lsls	r1, r2, #5
 800aef6:	69fa      	ldr	r2, [r7, #28]
 800aef8:	440a      	add	r2, r1
 800aefa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aefe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800af02:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	791b      	ldrb	r3, [r3, #4]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d015      	beq.n	800af38 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	691b      	ldr	r3, [r3, #16]
 800af10:	2b00      	cmp	r3, #0
 800af12:	f000 8152 	beq.w	800b1ba <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	f003 030f 	and.w	r3, r3, #15
 800af26:	2101      	movs	r1, #1
 800af28:	fa01 f303 	lsl.w	r3, r1, r3
 800af2c:	69f9      	ldr	r1, [r7, #28]
 800af2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af32:	4313      	orrs	r3, r2
 800af34:	634b      	str	r3, [r1, #52]	@ 0x34
 800af36:	e140      	b.n	800b1ba <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800af38:	69fb      	ldr	r3, [r7, #28]
 800af3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af44:	2b00      	cmp	r3, #0
 800af46:	d117      	bne.n	800af78 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800af48:	69bb      	ldr	r3, [r7, #24]
 800af4a:	015a      	lsls	r2, r3, #5
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	4413      	add	r3, r2
 800af50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	69ba      	ldr	r2, [r7, #24]
 800af58:	0151      	lsls	r1, r2, #5
 800af5a:	69fa      	ldr	r2, [r7, #28]
 800af5c:	440a      	add	r2, r1
 800af5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af62:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800af66:	6013      	str	r3, [r2, #0]
 800af68:	e016      	b.n	800af98 <USB_EPStartXfer+0x308>
 800af6a:	bf00      	nop
 800af6c:	e007ffff 	.word	0xe007ffff
 800af70:	fff80000 	.word	0xfff80000
 800af74:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800af78:	69bb      	ldr	r3, [r7, #24]
 800af7a:	015a      	lsls	r2, r3, #5
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	4413      	add	r3, r2
 800af80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	69ba      	ldr	r2, [r7, #24]
 800af88:	0151      	lsls	r1, r2, #5
 800af8a:	69fa      	ldr	r2, [r7, #28]
 800af8c:	440a      	add	r2, r1
 800af8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af96:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	68d9      	ldr	r1, [r3, #12]
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	781a      	ldrb	r2, [r3, #0]
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	691b      	ldr	r3, [r3, #16]
 800afa4:	b298      	uxth	r0, r3
 800afa6:	79fb      	ldrb	r3, [r7, #7]
 800afa8:	9300      	str	r3, [sp, #0]
 800afaa:	4603      	mov	r3, r0
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	f000 f9b9 	bl	800b324 <USB_WritePacket>
 800afb2:	e102      	b.n	800b1ba <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	015a      	lsls	r2, r3, #5
 800afb8:	69fb      	ldr	r3, [r7, #28]
 800afba:	4413      	add	r3, r2
 800afbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afc0:	691a      	ldr	r2, [r3, #16]
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	0159      	lsls	r1, r3, #5
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	440b      	add	r3, r1
 800afca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afce:	4619      	mov	r1, r3
 800afd0:	4b7c      	ldr	r3, [pc, #496]	@ (800b1c4 <USB_EPStartXfer+0x534>)
 800afd2:	4013      	ands	r3, r2
 800afd4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	015a      	lsls	r2, r3, #5
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	4413      	add	r3, r2
 800afde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afe2:	691a      	ldr	r2, [r3, #16]
 800afe4:	69bb      	ldr	r3, [r7, #24]
 800afe6:	0159      	lsls	r1, r3, #5
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	440b      	add	r3, r1
 800afec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aff0:	4619      	mov	r1, r3
 800aff2:	4b75      	ldr	r3, [pc, #468]	@ (800b1c8 <USB_EPStartXfer+0x538>)
 800aff4:	4013      	ands	r3, r2
 800aff6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d12f      	bne.n	800b05e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	691b      	ldr	r3, [r3, #16]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d003      	beq.n	800b00e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	689a      	ldr	r2, [r3, #8]
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	689a      	ldr	r2, [r3, #8]
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	015a      	lsls	r2, r3, #5
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	4413      	add	r3, r2
 800b01e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b022:	691a      	ldr	r2, [r3, #16]
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	6a1b      	ldr	r3, [r3, #32]
 800b028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b02c:	69b9      	ldr	r1, [r7, #24]
 800b02e:	0148      	lsls	r0, r1, #5
 800b030:	69f9      	ldr	r1, [r7, #28]
 800b032:	4401      	add	r1, r0
 800b034:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b038:	4313      	orrs	r3, r2
 800b03a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	015a      	lsls	r2, r3, #5
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	4413      	add	r3, r2
 800b044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	69ba      	ldr	r2, [r7, #24]
 800b04c:	0151      	lsls	r1, r2, #5
 800b04e:	69fa      	ldr	r2, [r7, #28]
 800b050:	440a      	add	r2, r1
 800b052:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b056:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b05a:	6113      	str	r3, [r2, #16]
 800b05c:	e05f      	b.n	800b11e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d123      	bne.n	800b0ae <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	015a      	lsls	r2, r3, #5
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	4413      	add	r3, r2
 800b06e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b072:	691a      	ldr	r2, [r3, #16]
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b07c:	69b9      	ldr	r1, [r7, #24]
 800b07e:	0148      	lsls	r0, r1, #5
 800b080:	69f9      	ldr	r1, [r7, #28]
 800b082:	4401      	add	r1, r0
 800b084:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b088:	4313      	orrs	r3, r2
 800b08a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	015a      	lsls	r2, r3, #5
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	4413      	add	r3, r2
 800b094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b098:	691b      	ldr	r3, [r3, #16]
 800b09a:	69ba      	ldr	r2, [r7, #24]
 800b09c:	0151      	lsls	r1, r2, #5
 800b09e:	69fa      	ldr	r2, [r7, #28]
 800b0a0:	440a      	add	r2, r1
 800b0a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b0aa:	6113      	str	r3, [r2, #16]
 800b0ac:	e037      	b.n	800b11e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	691a      	ldr	r2, [r3, #16]
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	4413      	add	r3, r2
 800b0b8:	1e5a      	subs	r2, r3, #1
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0c2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	8afa      	ldrh	r2, [r7, #22]
 800b0ca:	fb03 f202 	mul.w	r2, r3, r2
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	015a      	lsls	r2, r3, #5
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	4413      	add	r3, r2
 800b0da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0de:	691a      	ldr	r2, [r3, #16]
 800b0e0:	8afb      	ldrh	r3, [r7, #22]
 800b0e2:	04d9      	lsls	r1, r3, #19
 800b0e4:	4b39      	ldr	r3, [pc, #228]	@ (800b1cc <USB_EPStartXfer+0x53c>)
 800b0e6:	400b      	ands	r3, r1
 800b0e8:	69b9      	ldr	r1, [r7, #24]
 800b0ea:	0148      	lsls	r0, r1, #5
 800b0ec:	69f9      	ldr	r1, [r7, #28]
 800b0ee:	4401      	add	r1, r0
 800b0f0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	015a      	lsls	r2, r3, #5
 800b0fc:	69fb      	ldr	r3, [r7, #28]
 800b0fe:	4413      	add	r3, r2
 800b100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b104:	691a      	ldr	r2, [r3, #16]
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	6a1b      	ldr	r3, [r3, #32]
 800b10a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b10e:	69b9      	ldr	r1, [r7, #24]
 800b110:	0148      	lsls	r0, r1, #5
 800b112:	69f9      	ldr	r1, [r7, #28]
 800b114:	4401      	add	r1, r0
 800b116:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b11a:	4313      	orrs	r3, r2
 800b11c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b11e:	79fb      	ldrb	r3, [r7, #7]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d10d      	bne.n	800b140 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d009      	beq.n	800b140 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	68d9      	ldr	r1, [r3, #12]
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	015a      	lsls	r2, r3, #5
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	4413      	add	r3, r2
 800b138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b13c:	460a      	mov	r2, r1
 800b13e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	791b      	ldrb	r3, [r3, #4]
 800b144:	2b01      	cmp	r3, #1
 800b146:	d128      	bne.n	800b19a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b148:	69fb      	ldr	r3, [r7, #28]
 800b14a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b154:	2b00      	cmp	r3, #0
 800b156:	d110      	bne.n	800b17a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	015a      	lsls	r2, r3, #5
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	4413      	add	r3, r2
 800b160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	69ba      	ldr	r2, [r7, #24]
 800b168:	0151      	lsls	r1, r2, #5
 800b16a:	69fa      	ldr	r2, [r7, #28]
 800b16c:	440a      	add	r2, r1
 800b16e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b172:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b176:	6013      	str	r3, [r2, #0]
 800b178:	e00f      	b.n	800b19a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	015a      	lsls	r2, r3, #5
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	4413      	add	r3, r2
 800b182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	69ba      	ldr	r2, [r7, #24]
 800b18a:	0151      	lsls	r1, r2, #5
 800b18c:	69fa      	ldr	r2, [r7, #28]
 800b18e:	440a      	add	r2, r1
 800b190:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b198:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	015a      	lsls	r2, r3, #5
 800b19e:	69fb      	ldr	r3, [r7, #28]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	69ba      	ldr	r2, [r7, #24]
 800b1aa:	0151      	lsls	r1, r2, #5
 800b1ac:	69fa      	ldr	r2, [r7, #28]
 800b1ae:	440a      	add	r2, r1
 800b1b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1b4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b1b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b1ba:	2300      	movs	r3, #0
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3720      	adds	r7, #32
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	fff80000 	.word	0xfff80000
 800b1c8:	e007ffff 	.word	0xe007ffff
 800b1cc:	1ff80000 	.word	0x1ff80000

0800b1d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b087      	sub	sp, #28
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	785b      	ldrb	r3, [r3, #1]
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d14a      	bne.n	800b284 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	015a      	lsls	r2, r3, #5
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b202:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b206:	f040 8086 	bne.w	800b316 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	015a      	lsls	r2, r3, #5
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	4413      	add	r3, r2
 800b214:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	683a      	ldr	r2, [r7, #0]
 800b21c:	7812      	ldrb	r2, [r2, #0]
 800b21e:	0151      	lsls	r1, r2, #5
 800b220:	693a      	ldr	r2, [r7, #16]
 800b222:	440a      	add	r2, r1
 800b224:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b228:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b22c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	015a      	lsls	r2, r3, #5
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	4413      	add	r3, r2
 800b238:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	683a      	ldr	r2, [r7, #0]
 800b240:	7812      	ldrb	r2, [r2, #0]
 800b242:	0151      	lsls	r1, r2, #5
 800b244:	693a      	ldr	r2, [r7, #16]
 800b246:	440a      	add	r2, r1
 800b248:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b24c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b250:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	3301      	adds	r3, #1
 800b256:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b25e:	4293      	cmp	r3, r2
 800b260:	d902      	bls.n	800b268 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b262:	2301      	movs	r3, #1
 800b264:	75fb      	strb	r3, [r7, #23]
          break;
 800b266:	e056      	b.n	800b316 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	015a      	lsls	r2, r3, #5
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	4413      	add	r3, r2
 800b272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b27c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b280:	d0e7      	beq.n	800b252 <USB_EPStopXfer+0x82>
 800b282:	e048      	b.n	800b316 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	015a      	lsls	r2, r3, #5
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	4413      	add	r3, r2
 800b28e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b298:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b29c:	d13b      	bne.n	800b316 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	015a      	lsls	r2, r3, #5
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	4413      	add	r3, r2
 800b2a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	683a      	ldr	r2, [r7, #0]
 800b2b0:	7812      	ldrb	r2, [r2, #0]
 800b2b2:	0151      	lsls	r1, r2, #5
 800b2b4:	693a      	ldr	r2, [r7, #16]
 800b2b6:	440a      	add	r2, r1
 800b2b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b2bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b2c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	015a      	lsls	r2, r3, #5
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	4413      	add	r3, r2
 800b2cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	683a      	ldr	r2, [r7, #0]
 800b2d4:	7812      	ldrb	r2, [r2, #0]
 800b2d6:	0151      	lsls	r1, r2, #5
 800b2d8:	693a      	ldr	r2, [r7, #16]
 800b2da:	440a      	add	r2, r1
 800b2dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b2e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b2e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d902      	bls.n	800b2fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	75fb      	strb	r3, [r7, #23]
          break;
 800b2fa:	e00c      	b.n	800b316 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	015a      	lsls	r2, r3, #5
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	4413      	add	r3, r2
 800b306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b310:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b314:	d0e7      	beq.n	800b2e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b316:	7dfb      	ldrb	r3, [r7, #23]
}
 800b318:	4618      	mov	r0, r3
 800b31a:	371c      	adds	r7, #28
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr

0800b324 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b324:	b480      	push	{r7}
 800b326:	b089      	sub	sp, #36	@ 0x24
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	4611      	mov	r1, r2
 800b330:	461a      	mov	r2, r3
 800b332:	460b      	mov	r3, r1
 800b334:	71fb      	strb	r3, [r7, #7]
 800b336:	4613      	mov	r3, r2
 800b338:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b342:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b346:	2b00      	cmp	r3, #0
 800b348:	d123      	bne.n	800b392 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b34a:	88bb      	ldrh	r3, [r7, #4]
 800b34c:	3303      	adds	r3, #3
 800b34e:	089b      	lsrs	r3, r3, #2
 800b350:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b352:	2300      	movs	r3, #0
 800b354:	61bb      	str	r3, [r7, #24]
 800b356:	e018      	b.n	800b38a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b358:	79fb      	ldrb	r3, [r7, #7]
 800b35a:	031a      	lsls	r2, r3, #12
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	4413      	add	r3, r2
 800b360:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b364:	461a      	mov	r2, r3
 800b366:	69fb      	ldr	r3, [r7, #28]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	3301      	adds	r3, #1
 800b370:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	3301      	adds	r3, #1
 800b376:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	3301      	adds	r3, #1
 800b37c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	3301      	adds	r3, #1
 800b382:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	3301      	adds	r3, #1
 800b388:	61bb      	str	r3, [r7, #24]
 800b38a:	69ba      	ldr	r2, [r7, #24]
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	429a      	cmp	r2, r3
 800b390:	d3e2      	bcc.n	800b358 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b392:	2300      	movs	r3, #0
}
 800b394:	4618      	mov	r0, r3
 800b396:	3724      	adds	r7, #36	@ 0x24
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b08b      	sub	sp, #44	@ 0x2c
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	4613      	mov	r3, r2
 800b3ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b3b6:	88fb      	ldrh	r3, [r7, #6]
 800b3b8:	089b      	lsrs	r3, r3, #2
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b3be:	88fb      	ldrh	r3, [r7, #6]
 800b3c0:	f003 0303 	and.w	r3, r3, #3
 800b3c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	623b      	str	r3, [r7, #32]
 800b3ca:	e014      	b.n	800b3f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d6:	601a      	str	r2, [r3, #0]
    pDest++;
 800b3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3da:	3301      	adds	r3, #1
 800b3dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b3f0:	6a3b      	ldr	r3, [r7, #32]
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	623b      	str	r3, [r7, #32]
 800b3f6:	6a3a      	ldr	r2, [r7, #32]
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d3e6      	bcc.n	800b3cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b3fe:	8bfb      	ldrh	r3, [r7, #30]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d01e      	beq.n	800b442 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b404:	2300      	movs	r3, #0
 800b406:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b408:	69bb      	ldr	r3, [r7, #24]
 800b40a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b40e:	461a      	mov	r2, r3
 800b410:	f107 0310 	add.w	r3, r7, #16
 800b414:	6812      	ldr	r2, [r2, #0]
 800b416:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b418:	693a      	ldr	r2, [r7, #16]
 800b41a:	6a3b      	ldr	r3, [r7, #32]
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	00db      	lsls	r3, r3, #3
 800b420:	fa22 f303 	lsr.w	r3, r2, r3
 800b424:	b2da      	uxtb	r2, r3
 800b426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b428:	701a      	strb	r2, [r3, #0]
      i++;
 800b42a:	6a3b      	ldr	r3, [r7, #32]
 800b42c:	3301      	adds	r3, #1
 800b42e:	623b      	str	r3, [r7, #32]
      pDest++;
 800b430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b432:	3301      	adds	r3, #1
 800b434:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b436:	8bfb      	ldrh	r3, [r7, #30]
 800b438:	3b01      	subs	r3, #1
 800b43a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b43c:	8bfb      	ldrh	r3, [r7, #30]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d1ea      	bne.n	800b418 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b444:	4618      	mov	r0, r3
 800b446:	372c      	adds	r7, #44	@ 0x2c
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr

0800b450 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b450:	b480      	push	{r7}
 800b452:	b085      	sub	sp, #20
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	785b      	ldrb	r3, [r3, #1]
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d12c      	bne.n	800b4c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	015a      	lsls	r2, r3, #5
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	4413      	add	r3, r2
 800b474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	db12      	blt.n	800b4a4 <USB_EPSetStall+0x54>
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d00f      	beq.n	800b4a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	015a      	lsls	r2, r3, #5
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	4413      	add	r3, r2
 800b48c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	68ba      	ldr	r2, [r7, #8]
 800b494:	0151      	lsls	r1, r2, #5
 800b496:	68fa      	ldr	r2, [r7, #12]
 800b498:	440a      	add	r2, r1
 800b49a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b49e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b4a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	015a      	lsls	r2, r3, #5
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	0151      	lsls	r1, r2, #5
 800b4b6:	68fa      	ldr	r2, [r7, #12]
 800b4b8:	440a      	add	r2, r1
 800b4ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b4c2:	6013      	str	r3, [r2, #0]
 800b4c4:	e02b      	b.n	800b51e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	015a      	lsls	r2, r3, #5
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	db12      	blt.n	800b4fe <USB_EPSetStall+0xae>
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00f      	beq.n	800b4fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	015a      	lsls	r2, r3, #5
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	4413      	add	r3, r2
 800b4e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	0151      	lsls	r1, r2, #5
 800b4f0:	68fa      	ldr	r2, [r7, #12]
 800b4f2:	440a      	add	r2, r1
 800b4f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b4f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b4fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	015a      	lsls	r2, r3, #5
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	4413      	add	r3, r2
 800b506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	68ba      	ldr	r2, [r7, #8]
 800b50e:	0151      	lsls	r1, r2, #5
 800b510:	68fa      	ldr	r2, [r7, #12]
 800b512:	440a      	add	r2, r1
 800b514:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b518:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b51c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b51e:	2300      	movs	r3, #0
}
 800b520:	4618      	mov	r0, r3
 800b522:	3714      	adds	r7, #20
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b085      	sub	sp, #20
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	785b      	ldrb	r3, [r3, #1]
 800b544:	2b01      	cmp	r3, #1
 800b546:	d128      	bne.n	800b59a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	015a      	lsls	r2, r3, #5
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	4413      	add	r3, r2
 800b550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	68ba      	ldr	r2, [r7, #8]
 800b558:	0151      	lsls	r1, r2, #5
 800b55a:	68fa      	ldr	r2, [r7, #12]
 800b55c:	440a      	add	r2, r1
 800b55e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b562:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b566:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	791b      	ldrb	r3, [r3, #4]
 800b56c:	2b03      	cmp	r3, #3
 800b56e:	d003      	beq.n	800b578 <USB_EPClearStall+0x4c>
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	791b      	ldrb	r3, [r3, #4]
 800b574:	2b02      	cmp	r3, #2
 800b576:	d138      	bne.n	800b5ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	015a      	lsls	r2, r3, #5
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	4413      	add	r3, r2
 800b580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	68ba      	ldr	r2, [r7, #8]
 800b588:	0151      	lsls	r1, r2, #5
 800b58a:	68fa      	ldr	r2, [r7, #12]
 800b58c:	440a      	add	r2, r1
 800b58e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b596:	6013      	str	r3, [r2, #0]
 800b598:	e027      	b.n	800b5ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	015a      	lsls	r2, r3, #5
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	4413      	add	r3, r2
 800b5a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	68ba      	ldr	r2, [r7, #8]
 800b5aa:	0151      	lsls	r1, r2, #5
 800b5ac:	68fa      	ldr	r2, [r7, #12]
 800b5ae:	440a      	add	r2, r1
 800b5b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b5b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	791b      	ldrb	r3, [r3, #4]
 800b5be:	2b03      	cmp	r3, #3
 800b5c0:	d003      	beq.n	800b5ca <USB_EPClearStall+0x9e>
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	791b      	ldrb	r3, [r3, #4]
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d10f      	bne.n	800b5ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	015a      	lsls	r2, r3, #5
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	4413      	add	r3, r2
 800b5d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	68ba      	ldr	r2, [r7, #8]
 800b5da:	0151      	lsls	r1, r2, #5
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	440a      	add	r2, r1
 800b5e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b5e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b5ea:	2300      	movs	r3, #0
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3714      	adds	r7, #20
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr

0800b5f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b085      	sub	sp, #20
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	460b      	mov	r3, r1
 800b602:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	68fa      	ldr	r2, [r7, #12]
 800b612:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b616:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b61a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	78fb      	ldrb	r3, [r7, #3]
 800b626:	011b      	lsls	r3, r3, #4
 800b628:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b62c:	68f9      	ldr	r1, [r7, #12]
 800b62e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b632:	4313      	orrs	r3, r2
 800b634:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b636:	2300      	movs	r3, #0
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3714      	adds	r7, #20
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr

0800b644 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b644:	b480      	push	{r7}
 800b646:	b085      	sub	sp, #20
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b65e:	f023 0303 	bic.w	r3, r3, #3
 800b662:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b672:	f023 0302 	bic.w	r3, r3, #2
 800b676:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b678:	2300      	movs	r3, #0
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3714      	adds	r7, #20
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr

0800b686 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b686:	b480      	push	{r7}
 800b688:	b085      	sub	sp, #20
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	68fa      	ldr	r2, [r7, #12]
 800b69c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b6a0:	f023 0303 	bic.w	r3, r3, #3
 800b6a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	68fa      	ldr	r2, [r7, #12]
 800b6b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b6b4:	f043 0302 	orr.w	r3, r3, #2
 800b6b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b6ba:	2300      	movs	r3, #0
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3714      	adds	r7, #20
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b085      	sub	sp, #20
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	695b      	ldr	r3, [r3, #20]
 800b6d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	699b      	ldr	r3, [r3, #24]
 800b6da:	68fa      	ldr	r2, [r7, #12]
 800b6dc:	4013      	ands	r3, r2
 800b6de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3714      	adds	r7, #20
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr

0800b6ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b6ee:	b480      	push	{r7}
 800b6f0:	b085      	sub	sp, #20
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b700:	699b      	ldr	r3, [r3, #24]
 800b702:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b70a:	69db      	ldr	r3, [r3, #28]
 800b70c:	68ba      	ldr	r2, [r7, #8]
 800b70e:	4013      	ands	r3, r2
 800b710:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	0c1b      	lsrs	r3, r3, #16
}
 800b716:	4618      	mov	r0, r3
 800b718:	3714      	adds	r7, #20
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr

0800b722 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b722:	b480      	push	{r7}
 800b724:	b085      	sub	sp, #20
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b734:	699b      	ldr	r3, [r3, #24]
 800b736:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b73e:	69db      	ldr	r3, [r3, #28]
 800b740:	68ba      	ldr	r2, [r7, #8]
 800b742:	4013      	ands	r3, r2
 800b744:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	b29b      	uxth	r3, r3
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3714      	adds	r7, #20
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr

0800b756 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b756:	b480      	push	{r7}
 800b758:	b085      	sub	sp, #20
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	460b      	mov	r3, r1
 800b760:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b766:	78fb      	ldrb	r3, [r7, #3]
 800b768:	015a      	lsls	r2, r3, #5
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	4413      	add	r3, r2
 800b76e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b772:	689b      	ldr	r3, [r3, #8]
 800b774:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b77c:	695b      	ldr	r3, [r3, #20]
 800b77e:	68ba      	ldr	r2, [r7, #8]
 800b780:	4013      	ands	r3, r2
 800b782:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b784:	68bb      	ldr	r3, [r7, #8]
}
 800b786:	4618      	mov	r0, r3
 800b788:	3714      	adds	r7, #20
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr

0800b792 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b792:	b480      	push	{r7}
 800b794:	b087      	sub	sp, #28
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
 800b79a:	460b      	mov	r3, r1
 800b79c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7a8:	691b      	ldr	r3, [r3, #16]
 800b7aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b7b6:	78fb      	ldrb	r3, [r7, #3]
 800b7b8:	f003 030f 	and.w	r3, r3, #15
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	fa22 f303 	lsr.w	r3, r2, r3
 800b7c2:	01db      	lsls	r3, r3, #7
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	693a      	ldr	r2, [r7, #16]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b7cc:	78fb      	ldrb	r3, [r7, #3]
 800b7ce:	015a      	lsls	r2, r3, #5
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	693a      	ldr	r2, [r7, #16]
 800b7dc:	4013      	ands	r3, r2
 800b7de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b7e0:	68bb      	ldr	r3, [r7, #8]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	371c      	adds	r7, #28
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr

0800b7ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b7ee:	b480      	push	{r7}
 800b7f0:	b083      	sub	sp, #12
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	695b      	ldr	r3, [r3, #20]
 800b7fa:	f003 0301 	and.w	r3, r3, #1
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	370c      	adds	r7, #12
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr
	...

0800b80c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b085      	sub	sp, #20
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b826:	4619      	mov	r1, r3
 800b828:	4b09      	ldr	r3, [pc, #36]	@ (800b850 <USB_ActivateSetup+0x44>)
 800b82a:	4013      	ands	r3, r2
 800b82c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b83c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b840:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b842:	2300      	movs	r3, #0
}
 800b844:	4618      	mov	r0, r3
 800b846:	3714      	adds	r7, #20
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr
 800b850:	fffff800 	.word	0xfffff800

0800b854 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b854:	b480      	push	{r7}
 800b856:	b087      	sub	sp, #28
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	460b      	mov	r3, r1
 800b85e:	607a      	str	r2, [r7, #4]
 800b860:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	333c      	adds	r3, #60	@ 0x3c
 800b86a:	3304      	adds	r3, #4
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	4a26      	ldr	r2, [pc, #152]	@ (800b90c <USB_EP0_OutStart+0xb8>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d90a      	bls.n	800b88e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b884:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b888:	d101      	bne.n	800b88e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b88a:	2300      	movs	r3, #0
 800b88c:	e037      	b.n	800b8fe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b894:	461a      	mov	r2, r3
 800b896:	2300      	movs	r3, #0
 800b898:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8a0:	691b      	ldr	r3, [r3, #16]
 800b8a2:	697a      	ldr	r2, [r7, #20]
 800b8a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b8ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8b4:	691b      	ldr	r3, [r3, #16]
 800b8b6:	697a      	ldr	r2, [r7, #20]
 800b8b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8bc:	f043 0318 	orr.w	r3, r3, #24
 800b8c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8c8:	691b      	ldr	r3, [r3, #16]
 800b8ca:	697a      	ldr	r2, [r7, #20]
 800b8cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8d0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b8d4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b8d6:	7afb      	ldrb	r3, [r7, #11]
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d10f      	bne.n	800b8fc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	697a      	ldr	r2, [r7, #20]
 800b8f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8f6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b8fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b8fc:	2300      	movs	r3, #0
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	371c      	adds	r7, #28
 800b902:	46bd      	mov	sp, r7
 800b904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b908:	4770      	bx	lr
 800b90a:	bf00      	nop
 800b90c:	4f54300a 	.word	0x4f54300a

0800b910 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b910:	b480      	push	{r7}
 800b912:	b085      	sub	sp, #20
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b918:	2300      	movs	r3, #0
 800b91a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	3301      	adds	r3, #1
 800b920:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b928:	d901      	bls.n	800b92e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b92a:	2303      	movs	r3, #3
 800b92c:	e01b      	b.n	800b966 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	691b      	ldr	r3, [r3, #16]
 800b932:	2b00      	cmp	r3, #0
 800b934:	daf2      	bge.n	800b91c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b936:	2300      	movs	r3, #0
 800b938:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	691b      	ldr	r3, [r3, #16]
 800b93e:	f043 0201 	orr.w	r2, r3, #1
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	3301      	adds	r3, #1
 800b94a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b952:	d901      	bls.n	800b958 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b954:	2303      	movs	r3, #3
 800b956:	e006      	b.n	800b966 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	691b      	ldr	r3, [r3, #16]
 800b95c:	f003 0301 	and.w	r3, r3, #1
 800b960:	2b01      	cmp	r3, #1
 800b962:	d0f0      	beq.n	800b946 <USB_CoreReset+0x36>

  return HAL_OK;
 800b964:	2300      	movs	r3, #0
}
 800b966:	4618      	mov	r0, r3
 800b968:	3714      	adds	r7, #20
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr
	...

0800b974 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	460b      	mov	r3, r1
 800b97e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b980:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b984:	f002 fcee 	bl	800e364 <USBD_static_malloc>
 800b988:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d109      	bne.n	800b9a4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	32b0      	adds	r2, #176	@ 0xb0
 800b99a:	2100      	movs	r1, #0
 800b99c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b9a0:	2302      	movs	r3, #2
 800b9a2:	e0d4      	b.n	800bb4e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b9a4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	68f8      	ldr	r0, [r7, #12]
 800b9ac:	f002 fd1e 	bl	800e3ec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	32b0      	adds	r2, #176	@ 0xb0
 800b9ba:	68f9      	ldr	r1, [r7, #12]
 800b9bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	32b0      	adds	r2, #176	@ 0xb0
 800b9ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	7c1b      	ldrb	r3, [r3, #16]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d138      	bne.n	800ba4e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b9dc:	4b5e      	ldr	r3, [pc, #376]	@ (800bb58 <USBD_CDC_Init+0x1e4>)
 800b9de:	7819      	ldrb	r1, [r3, #0]
 800b9e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b9e4:	2202      	movs	r2, #2
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f002 fb99 	bl	800e11e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b9ec:	4b5a      	ldr	r3, [pc, #360]	@ (800bb58 <USBD_CDC_Init+0x1e4>)
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	f003 020f 	and.w	r2, r3, #15
 800b9f4:	6879      	ldr	r1, [r7, #4]
 800b9f6:	4613      	mov	r3, r2
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	4413      	add	r3, r2
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	440b      	add	r3, r1
 800ba00:	3324      	adds	r3, #36	@ 0x24
 800ba02:	2201      	movs	r2, #1
 800ba04:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ba06:	4b55      	ldr	r3, [pc, #340]	@ (800bb5c <USBD_CDC_Init+0x1e8>)
 800ba08:	7819      	ldrb	r1, [r3, #0]
 800ba0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ba0e:	2202      	movs	r2, #2
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f002 fb84 	bl	800e11e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ba16:	4b51      	ldr	r3, [pc, #324]	@ (800bb5c <USBD_CDC_Init+0x1e8>)
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	f003 020f 	and.w	r2, r3, #15
 800ba1e:	6879      	ldr	r1, [r7, #4]
 800ba20:	4613      	mov	r3, r2
 800ba22:	009b      	lsls	r3, r3, #2
 800ba24:	4413      	add	r3, r2
 800ba26:	009b      	lsls	r3, r3, #2
 800ba28:	440b      	add	r3, r1
 800ba2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ba2e:	2201      	movs	r2, #1
 800ba30:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ba32:	4b4b      	ldr	r3, [pc, #300]	@ (800bb60 <USBD_CDC_Init+0x1ec>)
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	f003 020f 	and.w	r2, r3, #15
 800ba3a:	6879      	ldr	r1, [r7, #4]
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	4413      	add	r3, r2
 800ba42:	009b      	lsls	r3, r3, #2
 800ba44:	440b      	add	r3, r1
 800ba46:	3326      	adds	r3, #38	@ 0x26
 800ba48:	2210      	movs	r2, #16
 800ba4a:	801a      	strh	r2, [r3, #0]
 800ba4c:	e035      	b.n	800baba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ba4e:	4b42      	ldr	r3, [pc, #264]	@ (800bb58 <USBD_CDC_Init+0x1e4>)
 800ba50:	7819      	ldrb	r1, [r3, #0]
 800ba52:	2340      	movs	r3, #64	@ 0x40
 800ba54:	2202      	movs	r2, #2
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f002 fb61 	bl	800e11e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ba5c:	4b3e      	ldr	r3, [pc, #248]	@ (800bb58 <USBD_CDC_Init+0x1e4>)
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	f003 020f 	and.w	r2, r3, #15
 800ba64:	6879      	ldr	r1, [r7, #4]
 800ba66:	4613      	mov	r3, r2
 800ba68:	009b      	lsls	r3, r3, #2
 800ba6a:	4413      	add	r3, r2
 800ba6c:	009b      	lsls	r3, r3, #2
 800ba6e:	440b      	add	r3, r1
 800ba70:	3324      	adds	r3, #36	@ 0x24
 800ba72:	2201      	movs	r2, #1
 800ba74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ba76:	4b39      	ldr	r3, [pc, #228]	@ (800bb5c <USBD_CDC_Init+0x1e8>)
 800ba78:	7819      	ldrb	r1, [r3, #0]
 800ba7a:	2340      	movs	r3, #64	@ 0x40
 800ba7c:	2202      	movs	r2, #2
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f002 fb4d 	bl	800e11e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ba84:	4b35      	ldr	r3, [pc, #212]	@ (800bb5c <USBD_CDC_Init+0x1e8>)
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	f003 020f 	and.w	r2, r3, #15
 800ba8c:	6879      	ldr	r1, [r7, #4]
 800ba8e:	4613      	mov	r3, r2
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	4413      	add	r3, r2
 800ba94:	009b      	lsls	r3, r3, #2
 800ba96:	440b      	add	r3, r1
 800ba98:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800baa0:	4b2f      	ldr	r3, [pc, #188]	@ (800bb60 <USBD_CDC_Init+0x1ec>)
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	f003 020f 	and.w	r2, r3, #15
 800baa8:	6879      	ldr	r1, [r7, #4]
 800baaa:	4613      	mov	r3, r2
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	4413      	add	r3, r2
 800bab0:	009b      	lsls	r3, r3, #2
 800bab2:	440b      	add	r3, r1
 800bab4:	3326      	adds	r3, #38	@ 0x26
 800bab6:	2210      	movs	r2, #16
 800bab8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800baba:	4b29      	ldr	r3, [pc, #164]	@ (800bb60 <USBD_CDC_Init+0x1ec>)
 800babc:	7819      	ldrb	r1, [r3, #0]
 800babe:	2308      	movs	r3, #8
 800bac0:	2203      	movs	r2, #3
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f002 fb2b 	bl	800e11e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bac8:	4b25      	ldr	r3, [pc, #148]	@ (800bb60 <USBD_CDC_Init+0x1ec>)
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	f003 020f 	and.w	r2, r3, #15
 800bad0:	6879      	ldr	r1, [r7, #4]
 800bad2:	4613      	mov	r3, r2
 800bad4:	009b      	lsls	r3, r3, #2
 800bad6:	4413      	add	r3, r2
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	440b      	add	r3, r1
 800badc:	3324      	adds	r3, #36	@ 0x24
 800bade:	2201      	movs	r2, #1
 800bae0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2200      	movs	r2, #0
 800bae6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	33b0      	adds	r3, #176	@ 0xb0
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	4413      	add	r3, r2
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2200      	movs	r2, #0
 800bb02:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d101      	bne.n	800bb1c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bb18:	2302      	movs	r3, #2
 800bb1a:	e018      	b.n	800bb4e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	7c1b      	ldrb	r3, [r3, #16]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d10a      	bne.n	800bb3a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bb24:	4b0d      	ldr	r3, [pc, #52]	@ (800bb5c <USBD_CDC_Init+0x1e8>)
 800bb26:	7819      	ldrb	r1, [r3, #0]
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bb2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f002 fbe2 	bl	800e2fc <USBD_LL_PrepareReceive>
 800bb38:	e008      	b.n	800bb4c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bb3a:	4b08      	ldr	r3, [pc, #32]	@ (800bb5c <USBD_CDC_Init+0x1e8>)
 800bb3c:	7819      	ldrb	r1, [r3, #0]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bb44:	2340      	movs	r3, #64	@ 0x40
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f002 fbd8 	bl	800e2fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bb4c:	2300      	movs	r3, #0
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	24000097 	.word	0x24000097
 800bb5c:	24000098 	.word	0x24000098
 800bb60:	24000099 	.word	0x24000099

0800bb64 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bb70:	4b3a      	ldr	r3, [pc, #232]	@ (800bc5c <USBD_CDC_DeInit+0xf8>)
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	4619      	mov	r1, r3
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f002 faf7 	bl	800e16a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bb7c:	4b37      	ldr	r3, [pc, #220]	@ (800bc5c <USBD_CDC_DeInit+0xf8>)
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	f003 020f 	and.w	r2, r3, #15
 800bb84:	6879      	ldr	r1, [r7, #4]
 800bb86:	4613      	mov	r3, r2
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	4413      	add	r3, r2
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	440b      	add	r3, r1
 800bb90:	3324      	adds	r3, #36	@ 0x24
 800bb92:	2200      	movs	r2, #0
 800bb94:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bb96:	4b32      	ldr	r3, [pc, #200]	@ (800bc60 <USBD_CDC_DeInit+0xfc>)
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f002 fae4 	bl	800e16a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bba2:	4b2f      	ldr	r3, [pc, #188]	@ (800bc60 <USBD_CDC_DeInit+0xfc>)
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	f003 020f 	and.w	r2, r3, #15
 800bbaa:	6879      	ldr	r1, [r7, #4]
 800bbac:	4613      	mov	r3, r2
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	4413      	add	r3, r2
 800bbb2:	009b      	lsls	r3, r3, #2
 800bbb4:	440b      	add	r3, r1
 800bbb6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bbba:	2200      	movs	r2, #0
 800bbbc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bbbe:	4b29      	ldr	r3, [pc, #164]	@ (800bc64 <USBD_CDC_DeInit+0x100>)
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f002 fad0 	bl	800e16a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bbca:	4b26      	ldr	r3, [pc, #152]	@ (800bc64 <USBD_CDC_DeInit+0x100>)
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	f003 020f 	and.w	r2, r3, #15
 800bbd2:	6879      	ldr	r1, [r7, #4]
 800bbd4:	4613      	mov	r3, r2
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	4413      	add	r3, r2
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	440b      	add	r3, r1
 800bbde:	3324      	adds	r3, #36	@ 0x24
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bbe4:	4b1f      	ldr	r3, [pc, #124]	@ (800bc64 <USBD_CDC_DeInit+0x100>)
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	f003 020f 	and.w	r2, r3, #15
 800bbec:	6879      	ldr	r1, [r7, #4]
 800bbee:	4613      	mov	r3, r2
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	4413      	add	r3, r2
 800bbf4:	009b      	lsls	r3, r3, #2
 800bbf6:	440b      	add	r3, r1
 800bbf8:	3326      	adds	r3, #38	@ 0x26
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	32b0      	adds	r2, #176	@ 0xb0
 800bc08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d01f      	beq.n	800bc50 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	33b0      	adds	r3, #176	@ 0xb0
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	4413      	add	r3, r2
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	32b0      	adds	r2, #176	@ 0xb0
 800bc2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc32:	4618      	mov	r0, r3
 800bc34:	f002 fba4 	bl	800e380 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	32b0      	adds	r2, #176	@ 0xb0
 800bc42:	2100      	movs	r1, #0
 800bc44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3708      	adds	r7, #8
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	24000097 	.word	0x24000097
 800bc60:	24000098 	.word	0x24000098
 800bc64:	24000099 	.word	0x24000099

0800bc68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b086      	sub	sp, #24
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	32b0      	adds	r2, #176	@ 0xb0
 800bc7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc80:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bc82:	2300      	movs	r3, #0
 800bc84:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bc86:	2300      	movs	r3, #0
 800bc88:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d101      	bne.n	800bc98 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bc94:	2303      	movs	r3, #3
 800bc96:	e0bf      	b.n	800be18 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d050      	beq.n	800bd46 <USBD_CDC_Setup+0xde>
 800bca4:	2b20      	cmp	r3, #32
 800bca6:	f040 80af 	bne.w	800be08 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	88db      	ldrh	r3, [r3, #6]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d03a      	beq.n	800bd28 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	781b      	ldrb	r3, [r3, #0]
 800bcb6:	b25b      	sxtb	r3, r3
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	da1b      	bge.n	800bcf4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	33b0      	adds	r3, #176	@ 0xb0
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	4413      	add	r3, r2
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	689b      	ldr	r3, [r3, #8]
 800bcce:	683a      	ldr	r2, [r7, #0]
 800bcd0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bcd2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bcd4:	683a      	ldr	r2, [r7, #0]
 800bcd6:	88d2      	ldrh	r2, [r2, #6]
 800bcd8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	88db      	ldrh	r3, [r3, #6]
 800bcde:	2b07      	cmp	r3, #7
 800bce0:	bf28      	it	cs
 800bce2:	2307      	movcs	r3, #7
 800bce4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	89fa      	ldrh	r2, [r7, #14]
 800bcea:	4619      	mov	r1, r3
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f001 fdbd 	bl	800d86c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bcf2:	e090      	b.n	800be16 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	785a      	ldrb	r2, [r3, #1]
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	88db      	ldrh	r3, [r3, #6]
 800bd02:	2b3f      	cmp	r3, #63	@ 0x3f
 800bd04:	d803      	bhi.n	800bd0e <USBD_CDC_Setup+0xa6>
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	88db      	ldrh	r3, [r3, #6]
 800bd0a:	b2da      	uxtb	r2, r3
 800bd0c:	e000      	b.n	800bd10 <USBD_CDC_Setup+0xa8>
 800bd0e:	2240      	movs	r2, #64	@ 0x40
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bd16:	6939      	ldr	r1, [r7, #16]
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800bd1e:	461a      	mov	r2, r3
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f001 fdcf 	bl	800d8c4 <USBD_CtlPrepareRx>
      break;
 800bd26:	e076      	b.n	800be16 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	33b0      	adds	r3, #176	@ 0xb0
 800bd32:	009b      	lsls	r3, r3, #2
 800bd34:	4413      	add	r3, r2
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	683a      	ldr	r2, [r7, #0]
 800bd3c:	7850      	ldrb	r0, [r2, #1]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	6839      	ldr	r1, [r7, #0]
 800bd42:	4798      	blx	r3
      break;
 800bd44:	e067      	b.n	800be16 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	785b      	ldrb	r3, [r3, #1]
 800bd4a:	2b0b      	cmp	r3, #11
 800bd4c:	d851      	bhi.n	800bdf2 <USBD_CDC_Setup+0x18a>
 800bd4e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd54 <USBD_CDC_Setup+0xec>)
 800bd50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd54:	0800bd85 	.word	0x0800bd85
 800bd58:	0800be01 	.word	0x0800be01
 800bd5c:	0800bdf3 	.word	0x0800bdf3
 800bd60:	0800bdf3 	.word	0x0800bdf3
 800bd64:	0800bdf3 	.word	0x0800bdf3
 800bd68:	0800bdf3 	.word	0x0800bdf3
 800bd6c:	0800bdf3 	.word	0x0800bdf3
 800bd70:	0800bdf3 	.word	0x0800bdf3
 800bd74:	0800bdf3 	.word	0x0800bdf3
 800bd78:	0800bdf3 	.word	0x0800bdf3
 800bd7c:	0800bdaf 	.word	0x0800bdaf
 800bd80:	0800bdd9 	.word	0x0800bdd9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd8a:	b2db      	uxtb	r3, r3
 800bd8c:	2b03      	cmp	r3, #3
 800bd8e:	d107      	bne.n	800bda0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bd90:	f107 030a 	add.w	r3, r7, #10
 800bd94:	2202      	movs	r2, #2
 800bd96:	4619      	mov	r1, r3
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f001 fd67 	bl	800d86c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bd9e:	e032      	b.n	800be06 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bda0:	6839      	ldr	r1, [r7, #0]
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f001 fce5 	bl	800d772 <USBD_CtlError>
            ret = USBD_FAIL;
 800bda8:	2303      	movs	r3, #3
 800bdaa:	75fb      	strb	r3, [r7, #23]
          break;
 800bdac:	e02b      	b.n	800be06 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	2b03      	cmp	r3, #3
 800bdb8:	d107      	bne.n	800bdca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bdba:	f107 030d 	add.w	r3, r7, #13
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f001 fd52 	bl	800d86c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bdc8:	e01d      	b.n	800be06 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bdca:	6839      	ldr	r1, [r7, #0]
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f001 fcd0 	bl	800d772 <USBD_CtlError>
            ret = USBD_FAIL;
 800bdd2:	2303      	movs	r3, #3
 800bdd4:	75fb      	strb	r3, [r7, #23]
          break;
 800bdd6:	e016      	b.n	800be06 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	2b03      	cmp	r3, #3
 800bde2:	d00f      	beq.n	800be04 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bde4:	6839      	ldr	r1, [r7, #0]
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f001 fcc3 	bl	800d772 <USBD_CtlError>
            ret = USBD_FAIL;
 800bdec:	2303      	movs	r3, #3
 800bdee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bdf0:	e008      	b.n	800be04 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bdf2:	6839      	ldr	r1, [r7, #0]
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f001 fcbc 	bl	800d772 <USBD_CtlError>
          ret = USBD_FAIL;
 800bdfa:	2303      	movs	r3, #3
 800bdfc:	75fb      	strb	r3, [r7, #23]
          break;
 800bdfe:	e002      	b.n	800be06 <USBD_CDC_Setup+0x19e>
          break;
 800be00:	bf00      	nop
 800be02:	e008      	b.n	800be16 <USBD_CDC_Setup+0x1ae>
          break;
 800be04:	bf00      	nop
      }
      break;
 800be06:	e006      	b.n	800be16 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800be08:	6839      	ldr	r1, [r7, #0]
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f001 fcb1 	bl	800d772 <USBD_CtlError>
      ret = USBD_FAIL;
 800be10:	2303      	movs	r3, #3
 800be12:	75fb      	strb	r3, [r7, #23]
      break;
 800be14:	bf00      	nop
  }

  return (uint8_t)ret;
 800be16:	7dfb      	ldrb	r3, [r7, #23]
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3718      	adds	r7, #24
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	460b      	mov	r3, r1
 800be2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	32b0      	adds	r2, #176	@ 0xb0
 800be3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d101      	bne.n	800be4a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800be46:	2303      	movs	r3, #3
 800be48:	e065      	b.n	800bf16 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	32b0      	adds	r2, #176	@ 0xb0
 800be54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800be5a:	78fb      	ldrb	r3, [r7, #3]
 800be5c:	f003 020f 	and.w	r2, r3, #15
 800be60:	6879      	ldr	r1, [r7, #4]
 800be62:	4613      	mov	r3, r2
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	4413      	add	r3, r2
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	440b      	add	r3, r1
 800be6c:	3318      	adds	r3, #24
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d02f      	beq.n	800bed4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800be74:	78fb      	ldrb	r3, [r7, #3]
 800be76:	f003 020f 	and.w	r2, r3, #15
 800be7a:	6879      	ldr	r1, [r7, #4]
 800be7c:	4613      	mov	r3, r2
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	4413      	add	r3, r2
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	440b      	add	r3, r1
 800be86:	3318      	adds	r3, #24
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	78fb      	ldrb	r3, [r7, #3]
 800be8c:	f003 010f 	and.w	r1, r3, #15
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	460b      	mov	r3, r1
 800be94:	00db      	lsls	r3, r3, #3
 800be96:	440b      	add	r3, r1
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	4403      	add	r3, r0
 800be9c:	331c      	adds	r3, #28
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	fbb2 f1f3 	udiv	r1, r2, r3
 800bea4:	fb01 f303 	mul.w	r3, r1, r3
 800bea8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d112      	bne.n	800bed4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800beae:	78fb      	ldrb	r3, [r7, #3]
 800beb0:	f003 020f 	and.w	r2, r3, #15
 800beb4:	6879      	ldr	r1, [r7, #4]
 800beb6:	4613      	mov	r3, r2
 800beb8:	009b      	lsls	r3, r3, #2
 800beba:	4413      	add	r3, r2
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	440b      	add	r3, r1
 800bec0:	3318      	adds	r3, #24
 800bec2:	2200      	movs	r2, #0
 800bec4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bec6:	78f9      	ldrb	r1, [r7, #3]
 800bec8:	2300      	movs	r3, #0
 800beca:	2200      	movs	r2, #0
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f002 f9f4 	bl	800e2ba <USBD_LL_Transmit>
 800bed2:	e01f      	b.n	800bf14 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	2200      	movs	r2, #0
 800bed8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	33b0      	adds	r3, #176	@ 0xb0
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	4413      	add	r3, r2
 800beea:	685b      	ldr	r3, [r3, #4]
 800beec:	691b      	ldr	r3, [r3, #16]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d010      	beq.n	800bf14 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	33b0      	adds	r3, #176	@ 0xb0
 800befc:	009b      	lsls	r3, r3, #2
 800befe:	4413      	add	r3, r2
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	691b      	ldr	r3, [r3, #16]
 800bf04:	68ba      	ldr	r2, [r7, #8]
 800bf06:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800bf0a:	68ba      	ldr	r2, [r7, #8]
 800bf0c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800bf10:	78fa      	ldrb	r2, [r7, #3]
 800bf12:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b084      	sub	sp, #16
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
 800bf26:	460b      	mov	r3, r1
 800bf28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	32b0      	adds	r2, #176	@ 0xb0
 800bf34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf38:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	32b0      	adds	r2, #176	@ 0xb0
 800bf44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d101      	bne.n	800bf50 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bf4c:	2303      	movs	r3, #3
 800bf4e:	e01a      	b.n	800bf86 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bf50:	78fb      	ldrb	r3, [r7, #3]
 800bf52:	4619      	mov	r1, r3
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f002 f9f2 	bl	800e33e <USBD_LL_GetRxDataSize>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	33b0      	adds	r3, #176	@ 0xb0
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	4413      	add	r3, r2
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	68db      	ldr	r3, [r3, #12]
 800bf74:	68fa      	ldr	r2, [r7, #12]
 800bf76:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800bf7a:	68fa      	ldr	r2, [r7, #12]
 800bf7c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800bf80:	4611      	mov	r1, r2
 800bf82:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bf84:	2300      	movs	r3, #0
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3710      	adds	r7, #16
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}

0800bf8e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b084      	sub	sp, #16
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	32b0      	adds	r2, #176	@ 0xb0
 800bfa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfa4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d101      	bne.n	800bfb0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bfac:	2303      	movs	r3, #3
 800bfae:	e024      	b.n	800bffa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bfb6:	687a      	ldr	r2, [r7, #4]
 800bfb8:	33b0      	adds	r3, #176	@ 0xb0
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4413      	add	r3, r2
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d019      	beq.n	800bff8 <USBD_CDC_EP0_RxReady+0x6a>
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800bfca:	2bff      	cmp	r3, #255	@ 0xff
 800bfcc:	d014      	beq.n	800bff8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	33b0      	adds	r3, #176	@ 0xb0
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	4413      	add	r3, r2
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	68fa      	ldr	r2, [r7, #12]
 800bfe2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800bfe6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bfe8:	68fa      	ldr	r2, [r7, #12]
 800bfea:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bfee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	22ff      	movs	r2, #255	@ 0xff
 800bff4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800bff8:	2300      	movs	r3, #0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
	...

0800c004 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b086      	sub	sp, #24
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c00c:	2182      	movs	r1, #130	@ 0x82
 800c00e:	4818      	ldr	r0, [pc, #96]	@ (800c070 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c010:	f000 fd4f 	bl	800cab2 <USBD_GetEpDesc>
 800c014:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c016:	2101      	movs	r1, #1
 800c018:	4815      	ldr	r0, [pc, #84]	@ (800c070 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c01a:	f000 fd4a 	bl	800cab2 <USBD_GetEpDesc>
 800c01e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c020:	2181      	movs	r1, #129	@ 0x81
 800c022:	4813      	ldr	r0, [pc, #76]	@ (800c070 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c024:	f000 fd45 	bl	800cab2 <USBD_GetEpDesc>
 800c028:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d002      	beq.n	800c036 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	2210      	movs	r2, #16
 800c034:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d006      	beq.n	800c04a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	2200      	movs	r2, #0
 800c040:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c044:	711a      	strb	r2, [r3, #4]
 800c046:	2200      	movs	r2, #0
 800c048:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d006      	beq.n	800c05e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	2200      	movs	r2, #0
 800c054:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c058:	711a      	strb	r2, [r3, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2243      	movs	r2, #67	@ 0x43
 800c062:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c064:	4b02      	ldr	r3, [pc, #8]	@ (800c070 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c066:	4618      	mov	r0, r3
 800c068:	3718      	adds	r7, #24
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	24000054 	.word	0x24000054

0800c074 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b086      	sub	sp, #24
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c07c:	2182      	movs	r1, #130	@ 0x82
 800c07e:	4818      	ldr	r0, [pc, #96]	@ (800c0e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c080:	f000 fd17 	bl	800cab2 <USBD_GetEpDesc>
 800c084:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c086:	2101      	movs	r1, #1
 800c088:	4815      	ldr	r0, [pc, #84]	@ (800c0e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c08a:	f000 fd12 	bl	800cab2 <USBD_GetEpDesc>
 800c08e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c090:	2181      	movs	r1, #129	@ 0x81
 800c092:	4813      	ldr	r0, [pc, #76]	@ (800c0e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c094:	f000 fd0d 	bl	800cab2 <USBD_GetEpDesc>
 800c098:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d002      	beq.n	800c0a6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	2210      	movs	r2, #16
 800c0a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d006      	beq.n	800c0ba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	711a      	strb	r2, [r3, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f042 0202 	orr.w	r2, r2, #2
 800c0b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d006      	beq.n	800c0ce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	711a      	strb	r2, [r3, #4]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	f042 0202 	orr.w	r2, r2, #2
 800c0cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2243      	movs	r2, #67	@ 0x43
 800c0d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c0d4:	4b02      	ldr	r3, [pc, #8]	@ (800c0e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3718      	adds	r7, #24
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	24000054 	.word	0x24000054

0800c0e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b086      	sub	sp, #24
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c0ec:	2182      	movs	r1, #130	@ 0x82
 800c0ee:	4818      	ldr	r0, [pc, #96]	@ (800c150 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c0f0:	f000 fcdf 	bl	800cab2 <USBD_GetEpDesc>
 800c0f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c0f6:	2101      	movs	r1, #1
 800c0f8:	4815      	ldr	r0, [pc, #84]	@ (800c150 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c0fa:	f000 fcda 	bl	800cab2 <USBD_GetEpDesc>
 800c0fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c100:	2181      	movs	r1, #129	@ 0x81
 800c102:	4813      	ldr	r0, [pc, #76]	@ (800c150 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c104:	f000 fcd5 	bl	800cab2 <USBD_GetEpDesc>
 800c108:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d002      	beq.n	800c116 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	2210      	movs	r2, #16
 800c114:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d006      	beq.n	800c12a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	2200      	movs	r2, #0
 800c120:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c124:	711a      	strb	r2, [r3, #4]
 800c126:	2200      	movs	r2, #0
 800c128:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d006      	beq.n	800c13e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2200      	movs	r2, #0
 800c134:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c138:	711a      	strb	r2, [r3, #4]
 800c13a:	2200      	movs	r2, #0
 800c13c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2243      	movs	r2, #67	@ 0x43
 800c142:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c144:	4b02      	ldr	r3, [pc, #8]	@ (800c150 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c146:	4618      	mov	r0, r3
 800c148:	3718      	adds	r7, #24
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	24000054 	.word	0x24000054

0800c154 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c154:	b480      	push	{r7}
 800c156:	b083      	sub	sp, #12
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	220a      	movs	r2, #10
 800c160:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c162:	4b03      	ldr	r3, [pc, #12]	@ (800c170 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c164:	4618      	mov	r0, r3
 800c166:	370c      	adds	r7, #12
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr
 800c170:	24000010 	.word	0x24000010

0800c174 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d101      	bne.n	800c188 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c184:	2303      	movs	r3, #3
 800c186:	e009      	b.n	800c19c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	33b0      	adds	r3, #176	@ 0xb0
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	4413      	add	r3, r2
 800c196:	683a      	ldr	r2, [r7, #0]
 800c198:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c19a:	2300      	movs	r3, #0
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b087      	sub	sp, #28
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	32b0      	adds	r2, #176	@ 0xb0
 800c1be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1c2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d101      	bne.n	800c1ce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c1ca:	2303      	movs	r3, #3
 800c1cc:	e008      	b.n	800c1e0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	68ba      	ldr	r2, [r7, #8]
 800c1d2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c1de:	2300      	movs	r3, #0
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	371c      	adds	r7, #28
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr

0800c1ec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b085      	sub	sp, #20
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	32b0      	adds	r2, #176	@ 0xb0
 800c200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c204:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d101      	bne.n	800c210 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c20c:	2303      	movs	r3, #3
 800c20e:	e004      	b.n	800c21a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	683a      	ldr	r2, [r7, #0]
 800c214:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c218:	2300      	movs	r3, #0
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3714      	adds	r7, #20
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr
	...

0800c228 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	32b0      	adds	r2, #176	@ 0xb0
 800c23a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c23e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c240:	2301      	movs	r3, #1
 800c242:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d101      	bne.n	800c24e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c24a:	2303      	movs	r3, #3
 800c24c:	e025      	b.n	800c29a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c254:	2b00      	cmp	r3, #0
 800c256:	d11f      	bne.n	800c298 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	2201      	movs	r2, #1
 800c25c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c260:	4b10      	ldr	r3, [pc, #64]	@ (800c2a4 <USBD_CDC_TransmitPacket+0x7c>)
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	f003 020f 	and.w	r2, r3, #15
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	4613      	mov	r3, r2
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	4413      	add	r3, r2
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	4403      	add	r3, r0
 800c27a:	3318      	adds	r3, #24
 800c27c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c27e:	4b09      	ldr	r3, [pc, #36]	@ (800c2a4 <USBD_CDC_TransmitPacket+0x7c>)
 800c280:	7819      	ldrb	r1, [r3, #0]
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f002 f813 	bl	800e2ba <USBD_LL_Transmit>

    ret = USBD_OK;
 800c294:	2300      	movs	r3, #0
 800c296:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c298:	7bfb      	ldrb	r3, [r7, #15]
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3710      	adds	r7, #16
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	24000097 	.word	0x24000097

0800c2a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	32b0      	adds	r2, #176	@ 0xb0
 800c2ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2be:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	32b0      	adds	r2, #176	@ 0xb0
 800c2ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d101      	bne.n	800c2d6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c2d2:	2303      	movs	r3, #3
 800c2d4:	e018      	b.n	800c308 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	7c1b      	ldrb	r3, [r3, #16]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d10a      	bne.n	800c2f4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c2de:	4b0c      	ldr	r3, [pc, #48]	@ (800c310 <USBD_CDC_ReceivePacket+0x68>)
 800c2e0:	7819      	ldrb	r1, [r3, #0]
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c2e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f002 f805 	bl	800e2fc <USBD_LL_PrepareReceive>
 800c2f2:	e008      	b.n	800c306 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c2f4:	4b06      	ldr	r3, [pc, #24]	@ (800c310 <USBD_CDC_ReceivePacket+0x68>)
 800c2f6:	7819      	ldrb	r1, [r3, #0]
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c2fe:	2340      	movs	r3, #64	@ 0x40
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f001 fffb 	bl	800e2fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c306:	2300      	movs	r3, #0
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3710      	adds	r7, #16
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	24000098 	.word	0x24000098

0800c314 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b086      	sub	sp, #24
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	4613      	mov	r3, r2
 800c320:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d101      	bne.n	800c32c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c328:	2303      	movs	r3, #3
 800c32a:	e01f      	b.n	800c36c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2200      	movs	r2, #0
 800c330:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2200      	movs	r2, #0
 800c338:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2200      	movs	r2, #0
 800c340:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d003      	beq.n	800c352 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	68ba      	ldr	r2, [r7, #8]
 800c34e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2201      	movs	r2, #1
 800c356:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	79fa      	ldrb	r2, [r7, #7]
 800c35e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c360:	68f8      	ldr	r0, [r7, #12]
 800c362:	f001 fe71 	bl	800e048 <USBD_LL_Init>
 800c366:	4603      	mov	r3, r0
 800c368:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c36a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3718      	adds	r7, #24
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c37e:	2300      	movs	r3, #0
 800c380:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d101      	bne.n	800c38c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c388:	2303      	movs	r3, #3
 800c38a:	e025      	b.n	800c3d8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	683a      	ldr	r2, [r7, #0]
 800c390:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	32ae      	adds	r2, #174	@ 0xae
 800c39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d00f      	beq.n	800c3c8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	32ae      	adds	r2, #174	@ 0xae
 800c3b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3b8:	f107 020e 	add.w	r2, r7, #14
 800c3bc:	4610      	mov	r0, r2
 800c3be:	4798      	blx	r3
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c3ce:	1c5a      	adds	r2, r3, #1
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c3d6:	2300      	movs	r3, #0
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3710      	adds	r7, #16
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f001 fe7d 	bl	800e0e8 <USBD_LL_Start>
 800c3ee:	4603      	mov	r3, r0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3708      	adds	r7, #8
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b083      	sub	sp, #12
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c400:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c402:	4618      	mov	r0, r3
 800c404:	370c      	adds	r7, #12
 800c406:	46bd      	mov	sp, r7
 800c408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40c:	4770      	bx	lr

0800c40e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c40e:	b580      	push	{r7, lr}
 800c410:	b084      	sub	sp, #16
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
 800c416:	460b      	mov	r3, r1
 800c418:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c41a:	2300      	movs	r3, #0
 800c41c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c424:	2b00      	cmp	r3, #0
 800c426:	d009      	beq.n	800c43c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	78fa      	ldrb	r2, [r7, #3]
 800c432:	4611      	mov	r1, r2
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	4798      	blx	r3
 800c438:	4603      	mov	r3, r0
 800c43a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3710      	adds	r7, #16
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c446:	b580      	push	{r7, lr}
 800c448:	b084      	sub	sp, #16
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
 800c44e:	460b      	mov	r3, r1
 800c450:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c452:	2300      	movs	r3, #0
 800c454:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	78fa      	ldrb	r2, [r7, #3]
 800c460:	4611      	mov	r1, r2
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	4798      	blx	r3
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d001      	beq.n	800c470 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c46c:	2303      	movs	r3, #3
 800c46e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c470:	7bfb      	ldrb	r3, [r7, #15]
}
 800c472:	4618      	mov	r0, r3
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}

0800c47a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c47a:	b580      	push	{r7, lr}
 800c47c:	b084      	sub	sp, #16
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
 800c482:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c48a:	6839      	ldr	r1, [r7, #0]
 800c48c:	4618      	mov	r0, r3
 800c48e:	f001 f936 	bl	800d6fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2201      	movs	r2, #1
 800c496:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c4ae:	f003 031f 	and.w	r3, r3, #31
 800c4b2:	2b02      	cmp	r3, #2
 800c4b4:	d01a      	beq.n	800c4ec <USBD_LL_SetupStage+0x72>
 800c4b6:	2b02      	cmp	r3, #2
 800c4b8:	d822      	bhi.n	800c500 <USBD_LL_SetupStage+0x86>
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d002      	beq.n	800c4c4 <USBD_LL_SetupStage+0x4a>
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	d00a      	beq.n	800c4d8 <USBD_LL_SetupStage+0x5e>
 800c4c2:	e01d      	b.n	800c500 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f000 fb63 	bl	800cb98 <USBD_StdDevReq>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	73fb      	strb	r3, [r7, #15]
      break;
 800c4d6:	e020      	b.n	800c51a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c4de:	4619      	mov	r1, r3
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f000 fbcb 	bl	800cc7c <USBD_StdItfReq>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	73fb      	strb	r3, [r7, #15]
      break;
 800c4ea:	e016      	b.n	800c51a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 fc2d 	bl	800cd54 <USBD_StdEPReq>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	73fb      	strb	r3, [r7, #15]
      break;
 800c4fe:	e00c      	b.n	800c51a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c506:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c50a:	b2db      	uxtb	r3, r3
 800c50c:	4619      	mov	r1, r3
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f001 fe4a 	bl	800e1a8 <USBD_LL_StallEP>
 800c514:	4603      	mov	r3, r0
 800c516:	73fb      	strb	r3, [r7, #15]
      break;
 800c518:	bf00      	nop
  }

  return ret;
 800c51a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3710      	adds	r7, #16
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b086      	sub	sp, #24
 800c528:	af00      	add	r7, sp, #0
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	460b      	mov	r3, r1
 800c52e:	607a      	str	r2, [r7, #4]
 800c530:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c532:	2300      	movs	r3, #0
 800c534:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c536:	7afb      	ldrb	r3, [r7, #11]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d16e      	bne.n	800c61a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c542:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c54a:	2b03      	cmp	r3, #3
 800c54c:	f040 8098 	bne.w	800c680 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	689a      	ldr	r2, [r3, #8]
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	68db      	ldr	r3, [r3, #12]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d913      	bls.n	800c584 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	689a      	ldr	r2, [r3, #8]
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	1ad2      	subs	r2, r2, r3
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	68da      	ldr	r2, [r3, #12]
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	689b      	ldr	r3, [r3, #8]
 800c572:	4293      	cmp	r3, r2
 800c574:	bf28      	it	cs
 800c576:	4613      	movcs	r3, r2
 800c578:	461a      	mov	r2, r3
 800c57a:	6879      	ldr	r1, [r7, #4]
 800c57c:	68f8      	ldr	r0, [r7, #12]
 800c57e:	f001 f9be 	bl	800d8fe <USBD_CtlContinueRx>
 800c582:	e07d      	b.n	800c680 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c58a:	f003 031f 	and.w	r3, r3, #31
 800c58e:	2b02      	cmp	r3, #2
 800c590:	d014      	beq.n	800c5bc <USBD_LL_DataOutStage+0x98>
 800c592:	2b02      	cmp	r3, #2
 800c594:	d81d      	bhi.n	800c5d2 <USBD_LL_DataOutStage+0xae>
 800c596:	2b00      	cmp	r3, #0
 800c598:	d002      	beq.n	800c5a0 <USBD_LL_DataOutStage+0x7c>
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d003      	beq.n	800c5a6 <USBD_LL_DataOutStage+0x82>
 800c59e:	e018      	b.n	800c5d2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	75bb      	strb	r3, [r7, #22]
            break;
 800c5a4:	e018      	b.n	800c5d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	68f8      	ldr	r0, [r7, #12]
 800c5b2:	f000 fa64 	bl	800ca7e <USBD_CoreFindIF>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	75bb      	strb	r3, [r7, #22]
            break;
 800c5ba:	e00d      	b.n	800c5d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c5c2:	b2db      	uxtb	r3, r3
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	68f8      	ldr	r0, [r7, #12]
 800c5c8:	f000 fa66 	bl	800ca98 <USBD_CoreFindEP>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	75bb      	strb	r3, [r7, #22]
            break;
 800c5d0:	e002      	b.n	800c5d8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	75bb      	strb	r3, [r7, #22]
            break;
 800c5d6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c5d8:	7dbb      	ldrb	r3, [r7, #22]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d119      	bne.n	800c612 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5e4:	b2db      	uxtb	r3, r3
 800c5e6:	2b03      	cmp	r3, #3
 800c5e8:	d113      	bne.n	800c612 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c5ea:	7dba      	ldrb	r2, [r7, #22]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	32ae      	adds	r2, #174	@ 0xae
 800c5f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5f4:	691b      	ldr	r3, [r3, #16]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d00b      	beq.n	800c612 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c5fa:	7dba      	ldrb	r2, [r7, #22]
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c602:	7dba      	ldrb	r2, [r7, #22]
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	32ae      	adds	r2, #174	@ 0xae
 800c608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c60c:	691b      	ldr	r3, [r3, #16]
 800c60e:	68f8      	ldr	r0, [r7, #12]
 800c610:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	f001 f984 	bl	800d920 <USBD_CtlSendStatus>
 800c618:	e032      	b.n	800c680 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c61a:	7afb      	ldrb	r3, [r7, #11]
 800c61c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c620:	b2db      	uxtb	r3, r3
 800c622:	4619      	mov	r1, r3
 800c624:	68f8      	ldr	r0, [r7, #12]
 800c626:	f000 fa37 	bl	800ca98 <USBD_CoreFindEP>
 800c62a:	4603      	mov	r3, r0
 800c62c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c62e:	7dbb      	ldrb	r3, [r7, #22]
 800c630:	2bff      	cmp	r3, #255	@ 0xff
 800c632:	d025      	beq.n	800c680 <USBD_LL_DataOutStage+0x15c>
 800c634:	7dbb      	ldrb	r3, [r7, #22]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d122      	bne.n	800c680 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c640:	b2db      	uxtb	r3, r3
 800c642:	2b03      	cmp	r3, #3
 800c644:	d117      	bne.n	800c676 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c646:	7dba      	ldrb	r2, [r7, #22]
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	32ae      	adds	r2, #174	@ 0xae
 800c64c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c650:	699b      	ldr	r3, [r3, #24]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d00f      	beq.n	800c676 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c656:	7dba      	ldrb	r2, [r7, #22]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c65e:	7dba      	ldrb	r2, [r7, #22]
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	32ae      	adds	r2, #174	@ 0xae
 800c664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c668:	699b      	ldr	r3, [r3, #24]
 800c66a:	7afa      	ldrb	r2, [r7, #11]
 800c66c:	4611      	mov	r1, r2
 800c66e:	68f8      	ldr	r0, [r7, #12]
 800c670:	4798      	blx	r3
 800c672:	4603      	mov	r3, r0
 800c674:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c676:	7dfb      	ldrb	r3, [r7, #23]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d001      	beq.n	800c680 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c67c:	7dfb      	ldrb	r3, [r7, #23]
 800c67e:	e000      	b.n	800c682 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c680:	2300      	movs	r3, #0
}
 800c682:	4618      	mov	r0, r3
 800c684:	3718      	adds	r7, #24
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}

0800c68a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c68a:	b580      	push	{r7, lr}
 800c68c:	b086      	sub	sp, #24
 800c68e:	af00      	add	r7, sp, #0
 800c690:	60f8      	str	r0, [r7, #12]
 800c692:	460b      	mov	r3, r1
 800c694:	607a      	str	r2, [r7, #4]
 800c696:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c698:	7afb      	ldrb	r3, [r7, #11]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d16f      	bne.n	800c77e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	3314      	adds	r3, #20
 800c6a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c6aa:	2b02      	cmp	r3, #2
 800c6ac:	d15a      	bne.n	800c764 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	689a      	ldr	r2, [r3, #8]
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	d914      	bls.n	800c6e4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	689a      	ldr	r2, [r3, #8]
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	68db      	ldr	r3, [r3, #12]
 800c6c2:	1ad2      	subs	r2, r2, r3
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	689b      	ldr	r3, [r3, #8]
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	6879      	ldr	r1, [r7, #4]
 800c6d0:	68f8      	ldr	r0, [r7, #12]
 800c6d2:	f001 f8e6 	bl	800d8a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	2200      	movs	r2, #0
 800c6da:	2100      	movs	r1, #0
 800c6dc:	68f8      	ldr	r0, [r7, #12]
 800c6de:	f001 fe0d 	bl	800e2fc <USBD_LL_PrepareReceive>
 800c6e2:	e03f      	b.n	800c764 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	68da      	ldr	r2, [r3, #12]
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	689b      	ldr	r3, [r3, #8]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d11c      	bne.n	800c72a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	685a      	ldr	r2, [r3, #4]
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d316      	bcc.n	800c72a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	685a      	ldr	r2, [r3, #4]
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c706:	429a      	cmp	r2, r3
 800c708:	d20f      	bcs.n	800c72a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c70a:	2200      	movs	r2, #0
 800c70c:	2100      	movs	r1, #0
 800c70e:	68f8      	ldr	r0, [r7, #12]
 800c710:	f001 f8c7 	bl	800d8a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2200      	movs	r2, #0
 800c718:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c71c:	2300      	movs	r3, #0
 800c71e:	2200      	movs	r2, #0
 800c720:	2100      	movs	r1, #0
 800c722:	68f8      	ldr	r0, [r7, #12]
 800c724:	f001 fdea 	bl	800e2fc <USBD_LL_PrepareReceive>
 800c728:	e01c      	b.n	800c764 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c730:	b2db      	uxtb	r3, r3
 800c732:	2b03      	cmp	r3, #3
 800c734:	d10f      	bne.n	800c756 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d009      	beq.n	800c756 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2200      	movs	r2, #0
 800c746:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	68f8      	ldr	r0, [r7, #12]
 800c754:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c756:	2180      	movs	r1, #128	@ 0x80
 800c758:	68f8      	ldr	r0, [r7, #12]
 800c75a:	f001 fd25 	bl	800e1a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c75e:	68f8      	ldr	r0, [r7, #12]
 800c760:	f001 f8f1 	bl	800d946 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d03a      	beq.n	800c7e4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c76e:	68f8      	ldr	r0, [r7, #12]
 800c770:	f7ff fe42 	bl	800c3f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	2200      	movs	r2, #0
 800c778:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c77c:	e032      	b.n	800c7e4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c77e:	7afb      	ldrb	r3, [r7, #11]
 800c780:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c784:	b2db      	uxtb	r3, r3
 800c786:	4619      	mov	r1, r3
 800c788:	68f8      	ldr	r0, [r7, #12]
 800c78a:	f000 f985 	bl	800ca98 <USBD_CoreFindEP>
 800c78e:	4603      	mov	r3, r0
 800c790:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c792:	7dfb      	ldrb	r3, [r7, #23]
 800c794:	2bff      	cmp	r3, #255	@ 0xff
 800c796:	d025      	beq.n	800c7e4 <USBD_LL_DataInStage+0x15a>
 800c798:	7dfb      	ldrb	r3, [r7, #23]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d122      	bne.n	800c7e4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	2b03      	cmp	r3, #3
 800c7a8:	d11c      	bne.n	800c7e4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c7aa:	7dfa      	ldrb	r2, [r7, #23]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	32ae      	adds	r2, #174	@ 0xae
 800c7b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7b4:	695b      	ldr	r3, [r3, #20]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d014      	beq.n	800c7e4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c7ba:	7dfa      	ldrb	r2, [r7, #23]
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c7c2:	7dfa      	ldrb	r2, [r7, #23]
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	32ae      	adds	r2, #174	@ 0xae
 800c7c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7cc:	695b      	ldr	r3, [r3, #20]
 800c7ce:	7afa      	ldrb	r2, [r7, #11]
 800c7d0:	4611      	mov	r1, r2
 800c7d2:	68f8      	ldr	r0, [r7, #12]
 800c7d4:	4798      	blx	r3
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c7da:	7dbb      	ldrb	r3, [r7, #22]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d001      	beq.n	800c7e4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c7e0:	7dbb      	ldrb	r3, [r7, #22]
 800c7e2:	e000      	b.n	800c7e6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c7e4:	2300      	movs	r3, #0
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3718      	adds	r7, #24
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}

0800c7ee <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c7ee:	b580      	push	{r7, lr}
 800c7f0:	b084      	sub	sp, #16
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2200      	movs	r2, #0
 800c806:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2200      	movs	r2, #0
 800c80e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c826:	2b00      	cmp	r3, #0
 800c828:	d014      	beq.n	800c854 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d00e      	beq.n	800c854 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	6852      	ldr	r2, [r2, #4]
 800c842:	b2d2      	uxtb	r2, r2
 800c844:	4611      	mov	r1, r2
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	4798      	blx	r3
 800c84a:	4603      	mov	r3, r0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d001      	beq.n	800c854 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c850:	2303      	movs	r3, #3
 800c852:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c854:	2340      	movs	r3, #64	@ 0x40
 800c856:	2200      	movs	r2, #0
 800c858:	2100      	movs	r1, #0
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f001 fc5f 	bl	800e11e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2201      	movs	r2, #1
 800c864:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2240      	movs	r2, #64	@ 0x40
 800c86c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c870:	2340      	movs	r3, #64	@ 0x40
 800c872:	2200      	movs	r2, #0
 800c874:	2180      	movs	r1, #128	@ 0x80
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f001 fc51 	bl	800e11e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2201      	movs	r2, #1
 800c880:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2240      	movs	r2, #64	@ 0x40
 800c886:	621a      	str	r2, [r3, #32]

  return ret;
 800c888:	7bfb      	ldrb	r3, [r7, #15]
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3710      	adds	r7, #16
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c892:	b480      	push	{r7}
 800c894:	b083      	sub	sp, #12
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
 800c89a:	460b      	mov	r3, r1
 800c89c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	78fa      	ldrb	r2, [r7, #3]
 800c8a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c8a4:	2300      	movs	r3, #0
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	370c      	adds	r7, #12
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr

0800c8b2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c8b2:	b480      	push	{r7}
 800c8b4:	b083      	sub	sp, #12
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	2b04      	cmp	r3, #4
 800c8c4:	d006      	beq.n	800c8d4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8cc:	b2da      	uxtb	r2, r3
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2204      	movs	r2, #4
 800c8d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c8dc:	2300      	movs	r3, #0
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	370c      	adds	r7, #12
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr

0800c8ea <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c8ea:	b480      	push	{r7}
 800c8ec:	b083      	sub	sp, #12
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	2b04      	cmp	r3, #4
 800c8fc:	d106      	bne.n	800c90c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c904:	b2da      	uxtb	r2, r3
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c90c:	2300      	movs	r3, #0
}
 800c90e:	4618      	mov	r0, r3
 800c910:	370c      	adds	r7, #12
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr

0800c91a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c91a:	b580      	push	{r7, lr}
 800c91c:	b082      	sub	sp, #8
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	2b03      	cmp	r3, #3
 800c92c:	d110      	bne.n	800c950 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c934:	2b00      	cmp	r3, #0
 800c936:	d00b      	beq.n	800c950 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c93e:	69db      	ldr	r3, [r3, #28]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d005      	beq.n	800c950 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c94a:	69db      	ldr	r3, [r3, #28]
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c950:	2300      	movs	r3, #0
}
 800c952:	4618      	mov	r0, r3
 800c954:	3708      	adds	r7, #8
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}

0800c95a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b082      	sub	sp, #8
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
 800c962:	460b      	mov	r3, r1
 800c964:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	32ae      	adds	r2, #174	@ 0xae
 800c970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d101      	bne.n	800c97c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c978:	2303      	movs	r3, #3
 800c97a:	e01c      	b.n	800c9b6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c982:	b2db      	uxtb	r3, r3
 800c984:	2b03      	cmp	r3, #3
 800c986:	d115      	bne.n	800c9b4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	32ae      	adds	r2, #174	@ 0xae
 800c992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c996:	6a1b      	ldr	r3, [r3, #32]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d00b      	beq.n	800c9b4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	32ae      	adds	r2, #174	@ 0xae
 800c9a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9aa:	6a1b      	ldr	r3, [r3, #32]
 800c9ac:	78fa      	ldrb	r2, [r7, #3]
 800c9ae:	4611      	mov	r1, r2
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c9b4:	2300      	movs	r3, #0
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3708      	adds	r7, #8
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}

0800c9be <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c9be:	b580      	push	{r7, lr}
 800c9c0:	b082      	sub	sp, #8
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	6078      	str	r0, [r7, #4]
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	32ae      	adds	r2, #174	@ 0xae
 800c9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d101      	bne.n	800c9e0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c9dc:	2303      	movs	r3, #3
 800c9de:	e01c      	b.n	800ca1a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9e6:	b2db      	uxtb	r3, r3
 800c9e8:	2b03      	cmp	r3, #3
 800c9ea:	d115      	bne.n	800ca18 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	32ae      	adds	r2, #174	@ 0xae
 800c9f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00b      	beq.n	800ca18 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	32ae      	adds	r2, #174	@ 0xae
 800ca0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca10:	78fa      	ldrb	r2, [r7, #3]
 800ca12:	4611      	mov	r1, r2
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ca18:	2300      	movs	r3, #0
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3708      	adds	r7, #8
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ca22:	b480      	push	{r7}
 800ca24:	b083      	sub	sp, #12
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ca2a:	2300      	movs	r3, #0
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	370c      	adds	r7, #12
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b084      	sub	sp, #16
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ca40:	2300      	movs	r3, #0
 800ca42:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2201      	movs	r2, #1
 800ca48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d00e      	beq.n	800ca74 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	6852      	ldr	r2, [r2, #4]
 800ca62:	b2d2      	uxtb	r2, r2
 800ca64:	4611      	mov	r1, r2
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	4798      	blx	r3
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d001      	beq.n	800ca74 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ca70:	2303      	movs	r3, #3
 800ca72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ca74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3710      	adds	r7, #16
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}

0800ca7e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ca7e:	b480      	push	{r7}
 800ca80:	b083      	sub	sp, #12
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
 800ca86:	460b      	mov	r3, r1
 800ca88:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ca8a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	370c      	adds	r7, #12
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr

0800ca98 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b083      	sub	sp, #12
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	460b      	mov	r3, r1
 800caa2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800caa4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	370c      	adds	r7, #12
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr

0800cab2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cab2:	b580      	push	{r7, lr}
 800cab4:	b086      	sub	sp, #24
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
 800caba:	460b      	mov	r3, r1
 800cabc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cac6:	2300      	movs	r3, #0
 800cac8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	885b      	ldrh	r3, [r3, #2]
 800cace:	b29b      	uxth	r3, r3
 800cad0:	68fa      	ldr	r2, [r7, #12]
 800cad2:	7812      	ldrb	r2, [r2, #0]
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d91f      	bls.n	800cb18 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cade:	e013      	b.n	800cb08 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cae0:	f107 030a 	add.w	r3, r7, #10
 800cae4:	4619      	mov	r1, r3
 800cae6:	6978      	ldr	r0, [r7, #20]
 800cae8:	f000 f81b 	bl	800cb22 <USBD_GetNextDesc>
 800caec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	785b      	ldrb	r3, [r3, #1]
 800caf2:	2b05      	cmp	r3, #5
 800caf4:	d108      	bne.n	800cb08 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	789b      	ldrb	r3, [r3, #2]
 800cafe:	78fa      	ldrb	r2, [r7, #3]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d008      	beq.n	800cb16 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cb04:	2300      	movs	r3, #0
 800cb06:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	885b      	ldrh	r3, [r3, #2]
 800cb0c:	b29a      	uxth	r2, r3
 800cb0e:	897b      	ldrh	r3, [r7, #10]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d8e5      	bhi.n	800cae0 <USBD_GetEpDesc+0x2e>
 800cb14:	e000      	b.n	800cb18 <USBD_GetEpDesc+0x66>
          break;
 800cb16:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cb18:	693b      	ldr	r3, [r7, #16]
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3718      	adds	r7, #24
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}

0800cb22 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cb22:	b480      	push	{r7}
 800cb24:	b085      	sub	sp, #20
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	6078      	str	r0, [r7, #4]
 800cb2a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	881b      	ldrh	r3, [r3, #0]
 800cb34:	68fa      	ldr	r2, [r7, #12]
 800cb36:	7812      	ldrb	r2, [r2, #0]
 800cb38:	4413      	add	r3, r2
 800cb3a:	b29a      	uxth	r2, r3
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	461a      	mov	r2, r3
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	4413      	add	r3, r2
 800cb4a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cb4c:	68fb      	ldr	r3, [r7, #12]
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3714      	adds	r7, #20
 800cb52:	46bd      	mov	sp, r7
 800cb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb58:	4770      	bx	lr

0800cb5a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cb5a:	b480      	push	{r7}
 800cb5c:	b087      	sub	sp, #28
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	3301      	adds	r3, #1
 800cb70:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cb78:	8a3b      	ldrh	r3, [r7, #16]
 800cb7a:	021b      	lsls	r3, r3, #8
 800cb7c:	b21a      	sxth	r2, r3
 800cb7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cb82:	4313      	orrs	r3, r2
 800cb84:	b21b      	sxth	r3, r3
 800cb86:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cb88:	89fb      	ldrh	r3, [r7, #14]
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	371c      	adds	r7, #28
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb94:	4770      	bx	lr
	...

0800cb98 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cba2:	2300      	movs	r3, #0
 800cba4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cbae:	2b40      	cmp	r3, #64	@ 0x40
 800cbb0:	d005      	beq.n	800cbbe <USBD_StdDevReq+0x26>
 800cbb2:	2b40      	cmp	r3, #64	@ 0x40
 800cbb4:	d857      	bhi.n	800cc66 <USBD_StdDevReq+0xce>
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d00f      	beq.n	800cbda <USBD_StdDevReq+0x42>
 800cbba:	2b20      	cmp	r3, #32
 800cbbc:	d153      	bne.n	800cc66 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	32ae      	adds	r2, #174	@ 0xae
 800cbc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbcc:	689b      	ldr	r3, [r3, #8]
 800cbce:	6839      	ldr	r1, [r7, #0]
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	4798      	blx	r3
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	73fb      	strb	r3, [r7, #15]
      break;
 800cbd8:	e04a      	b.n	800cc70 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	785b      	ldrb	r3, [r3, #1]
 800cbde:	2b09      	cmp	r3, #9
 800cbe0:	d83b      	bhi.n	800cc5a <USBD_StdDevReq+0xc2>
 800cbe2:	a201      	add	r2, pc, #4	@ (adr r2, 800cbe8 <USBD_StdDevReq+0x50>)
 800cbe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbe8:	0800cc3d 	.word	0x0800cc3d
 800cbec:	0800cc51 	.word	0x0800cc51
 800cbf0:	0800cc5b 	.word	0x0800cc5b
 800cbf4:	0800cc47 	.word	0x0800cc47
 800cbf8:	0800cc5b 	.word	0x0800cc5b
 800cbfc:	0800cc1b 	.word	0x0800cc1b
 800cc00:	0800cc11 	.word	0x0800cc11
 800cc04:	0800cc5b 	.word	0x0800cc5b
 800cc08:	0800cc33 	.word	0x0800cc33
 800cc0c:	0800cc25 	.word	0x0800cc25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cc10:	6839      	ldr	r1, [r7, #0]
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f000 fa3c 	bl	800d090 <USBD_GetDescriptor>
          break;
 800cc18:	e024      	b.n	800cc64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cc1a:	6839      	ldr	r1, [r7, #0]
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f000 fbcb 	bl	800d3b8 <USBD_SetAddress>
          break;
 800cc22:	e01f      	b.n	800cc64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cc24:	6839      	ldr	r1, [r7, #0]
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 fc0a 	bl	800d440 <USBD_SetConfig>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	73fb      	strb	r3, [r7, #15]
          break;
 800cc30:	e018      	b.n	800cc64 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cc32:	6839      	ldr	r1, [r7, #0]
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 fcad 	bl	800d594 <USBD_GetConfig>
          break;
 800cc3a:	e013      	b.n	800cc64 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cc3c:	6839      	ldr	r1, [r7, #0]
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 fcde 	bl	800d600 <USBD_GetStatus>
          break;
 800cc44:	e00e      	b.n	800cc64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cc46:	6839      	ldr	r1, [r7, #0]
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 fd0d 	bl	800d668 <USBD_SetFeature>
          break;
 800cc4e:	e009      	b.n	800cc64 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cc50:	6839      	ldr	r1, [r7, #0]
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f000 fd31 	bl	800d6ba <USBD_ClrFeature>
          break;
 800cc58:	e004      	b.n	800cc64 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cc5a:	6839      	ldr	r1, [r7, #0]
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 fd88 	bl	800d772 <USBD_CtlError>
          break;
 800cc62:	bf00      	nop
      }
      break;
 800cc64:	e004      	b.n	800cc70 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cc66:	6839      	ldr	r1, [r7, #0]
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f000 fd82 	bl	800d772 <USBD_CtlError>
      break;
 800cc6e:	bf00      	nop
  }

  return ret;
 800cc70:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3710      	adds	r7, #16
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop

0800cc7c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b084      	sub	sp, #16
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc86:	2300      	movs	r3, #0
 800cc88:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cc92:	2b40      	cmp	r3, #64	@ 0x40
 800cc94:	d005      	beq.n	800cca2 <USBD_StdItfReq+0x26>
 800cc96:	2b40      	cmp	r3, #64	@ 0x40
 800cc98:	d852      	bhi.n	800cd40 <USBD_StdItfReq+0xc4>
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d001      	beq.n	800cca2 <USBD_StdItfReq+0x26>
 800cc9e:	2b20      	cmp	r3, #32
 800cca0:	d14e      	bne.n	800cd40 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cca8:	b2db      	uxtb	r3, r3
 800ccaa:	3b01      	subs	r3, #1
 800ccac:	2b02      	cmp	r3, #2
 800ccae:	d840      	bhi.n	800cd32 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	889b      	ldrh	r3, [r3, #4]
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d836      	bhi.n	800cd28 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	889b      	ldrh	r3, [r3, #4]
 800ccbe:	b2db      	uxtb	r3, r3
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f7ff fedb 	bl	800ca7e <USBD_CoreFindIF>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cccc:	7bbb      	ldrb	r3, [r7, #14]
 800ccce:	2bff      	cmp	r3, #255	@ 0xff
 800ccd0:	d01d      	beq.n	800cd0e <USBD_StdItfReq+0x92>
 800ccd2:	7bbb      	ldrb	r3, [r7, #14]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d11a      	bne.n	800cd0e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ccd8:	7bba      	ldrb	r2, [r7, #14]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	32ae      	adds	r2, #174	@ 0xae
 800ccde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cce2:	689b      	ldr	r3, [r3, #8]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d00f      	beq.n	800cd08 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cce8:	7bba      	ldrb	r2, [r7, #14]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ccf0:	7bba      	ldrb	r2, [r7, #14]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	32ae      	adds	r2, #174	@ 0xae
 800ccf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccfa:	689b      	ldr	r3, [r3, #8]
 800ccfc:	6839      	ldr	r1, [r7, #0]
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	4798      	blx	r3
 800cd02:	4603      	mov	r3, r0
 800cd04:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cd06:	e004      	b.n	800cd12 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cd08:	2303      	movs	r3, #3
 800cd0a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cd0c:	e001      	b.n	800cd12 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cd0e:	2303      	movs	r3, #3
 800cd10:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	88db      	ldrh	r3, [r3, #6]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d110      	bne.n	800cd3c <USBD_StdItfReq+0xc0>
 800cd1a:	7bfb      	ldrb	r3, [r7, #15]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d10d      	bne.n	800cd3c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 fdfd 	bl	800d920 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cd26:	e009      	b.n	800cd3c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cd28:	6839      	ldr	r1, [r7, #0]
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 fd21 	bl	800d772 <USBD_CtlError>
          break;
 800cd30:	e004      	b.n	800cd3c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cd32:	6839      	ldr	r1, [r7, #0]
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 fd1c 	bl	800d772 <USBD_CtlError>
          break;
 800cd3a:	e000      	b.n	800cd3e <USBD_StdItfReq+0xc2>
          break;
 800cd3c:	bf00      	nop
      }
      break;
 800cd3e:	e004      	b.n	800cd4a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cd40:	6839      	ldr	r1, [r7, #0]
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 fd15 	bl	800d772 <USBD_CtlError>
      break;
 800cd48:	bf00      	nop
  }

  return ret;
 800cd4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3710      	adds	r7, #16
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b084      	sub	sp, #16
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	889b      	ldrh	r3, [r3, #4]
 800cd66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cd70:	2b40      	cmp	r3, #64	@ 0x40
 800cd72:	d007      	beq.n	800cd84 <USBD_StdEPReq+0x30>
 800cd74:	2b40      	cmp	r3, #64	@ 0x40
 800cd76:	f200 817f 	bhi.w	800d078 <USBD_StdEPReq+0x324>
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d02a      	beq.n	800cdd4 <USBD_StdEPReq+0x80>
 800cd7e:	2b20      	cmp	r3, #32
 800cd80:	f040 817a 	bne.w	800d078 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cd84:	7bbb      	ldrb	r3, [r7, #14]
 800cd86:	4619      	mov	r1, r3
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f7ff fe85 	bl	800ca98 <USBD_CoreFindEP>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cd92:	7b7b      	ldrb	r3, [r7, #13]
 800cd94:	2bff      	cmp	r3, #255	@ 0xff
 800cd96:	f000 8174 	beq.w	800d082 <USBD_StdEPReq+0x32e>
 800cd9a:	7b7b      	ldrb	r3, [r7, #13]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	f040 8170 	bne.w	800d082 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cda2:	7b7a      	ldrb	r2, [r7, #13]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cdaa:	7b7a      	ldrb	r2, [r7, #13]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	32ae      	adds	r2, #174	@ 0xae
 800cdb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdb4:	689b      	ldr	r3, [r3, #8]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	f000 8163 	beq.w	800d082 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cdbc:	7b7a      	ldrb	r2, [r7, #13]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	32ae      	adds	r2, #174	@ 0xae
 800cdc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdc6:	689b      	ldr	r3, [r3, #8]
 800cdc8:	6839      	ldr	r1, [r7, #0]
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	4798      	blx	r3
 800cdce:	4603      	mov	r3, r0
 800cdd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cdd2:	e156      	b.n	800d082 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	785b      	ldrb	r3, [r3, #1]
 800cdd8:	2b03      	cmp	r3, #3
 800cdda:	d008      	beq.n	800cdee <USBD_StdEPReq+0x9a>
 800cddc:	2b03      	cmp	r3, #3
 800cdde:	f300 8145 	bgt.w	800d06c <USBD_StdEPReq+0x318>
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	f000 809b 	beq.w	800cf1e <USBD_StdEPReq+0x1ca>
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d03c      	beq.n	800ce66 <USBD_StdEPReq+0x112>
 800cdec:	e13e      	b.n	800d06c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	2b02      	cmp	r3, #2
 800cdf8:	d002      	beq.n	800ce00 <USBD_StdEPReq+0xac>
 800cdfa:	2b03      	cmp	r3, #3
 800cdfc:	d016      	beq.n	800ce2c <USBD_StdEPReq+0xd8>
 800cdfe:	e02c      	b.n	800ce5a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce00:	7bbb      	ldrb	r3, [r7, #14]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d00d      	beq.n	800ce22 <USBD_StdEPReq+0xce>
 800ce06:	7bbb      	ldrb	r3, [r7, #14]
 800ce08:	2b80      	cmp	r3, #128	@ 0x80
 800ce0a:	d00a      	beq.n	800ce22 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce0c:	7bbb      	ldrb	r3, [r7, #14]
 800ce0e:	4619      	mov	r1, r3
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f001 f9c9 	bl	800e1a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce16:	2180      	movs	r1, #128	@ 0x80
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f001 f9c5 	bl	800e1a8 <USBD_LL_StallEP>
 800ce1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ce20:	e020      	b.n	800ce64 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ce22:	6839      	ldr	r1, [r7, #0]
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f000 fca4 	bl	800d772 <USBD_CtlError>
              break;
 800ce2a:	e01b      	b.n	800ce64 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	885b      	ldrh	r3, [r3, #2]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d10e      	bne.n	800ce52 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ce34:	7bbb      	ldrb	r3, [r7, #14]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d00b      	beq.n	800ce52 <USBD_StdEPReq+0xfe>
 800ce3a:	7bbb      	ldrb	r3, [r7, #14]
 800ce3c:	2b80      	cmp	r3, #128	@ 0x80
 800ce3e:	d008      	beq.n	800ce52 <USBD_StdEPReq+0xfe>
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	88db      	ldrh	r3, [r3, #6]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d104      	bne.n	800ce52 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce48:	7bbb      	ldrb	r3, [r7, #14]
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f001 f9ab 	bl	800e1a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f000 fd64 	bl	800d920 <USBD_CtlSendStatus>

              break;
 800ce58:	e004      	b.n	800ce64 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ce5a:	6839      	ldr	r1, [r7, #0]
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f000 fc88 	bl	800d772 <USBD_CtlError>
              break;
 800ce62:	bf00      	nop
          }
          break;
 800ce64:	e107      	b.n	800d076 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce6c:	b2db      	uxtb	r3, r3
 800ce6e:	2b02      	cmp	r3, #2
 800ce70:	d002      	beq.n	800ce78 <USBD_StdEPReq+0x124>
 800ce72:	2b03      	cmp	r3, #3
 800ce74:	d016      	beq.n	800cea4 <USBD_StdEPReq+0x150>
 800ce76:	e04b      	b.n	800cf10 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce78:	7bbb      	ldrb	r3, [r7, #14]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d00d      	beq.n	800ce9a <USBD_StdEPReq+0x146>
 800ce7e:	7bbb      	ldrb	r3, [r7, #14]
 800ce80:	2b80      	cmp	r3, #128	@ 0x80
 800ce82:	d00a      	beq.n	800ce9a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce84:	7bbb      	ldrb	r3, [r7, #14]
 800ce86:	4619      	mov	r1, r3
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f001 f98d 	bl	800e1a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce8e:	2180      	movs	r1, #128	@ 0x80
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f001 f989 	bl	800e1a8 <USBD_LL_StallEP>
 800ce96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ce98:	e040      	b.n	800cf1c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ce9a:	6839      	ldr	r1, [r7, #0]
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f000 fc68 	bl	800d772 <USBD_CtlError>
              break;
 800cea2:	e03b      	b.n	800cf1c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	885b      	ldrh	r3, [r3, #2]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d136      	bne.n	800cf1a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ceac:	7bbb      	ldrb	r3, [r7, #14]
 800ceae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d004      	beq.n	800cec0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ceb6:	7bbb      	ldrb	r3, [r7, #14]
 800ceb8:	4619      	mov	r1, r3
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f001 f993 	bl	800e1e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f000 fd2d 	bl	800d920 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cec6:	7bbb      	ldrb	r3, [r7, #14]
 800cec8:	4619      	mov	r1, r3
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f7ff fde4 	bl	800ca98 <USBD_CoreFindEP>
 800ced0:	4603      	mov	r3, r0
 800ced2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ced4:	7b7b      	ldrb	r3, [r7, #13]
 800ced6:	2bff      	cmp	r3, #255	@ 0xff
 800ced8:	d01f      	beq.n	800cf1a <USBD_StdEPReq+0x1c6>
 800ceda:	7b7b      	ldrb	r3, [r7, #13]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d11c      	bne.n	800cf1a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cee0:	7b7a      	ldrb	r2, [r7, #13]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cee8:	7b7a      	ldrb	r2, [r7, #13]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	32ae      	adds	r2, #174	@ 0xae
 800ceee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cef2:	689b      	ldr	r3, [r3, #8]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d010      	beq.n	800cf1a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cef8:	7b7a      	ldrb	r2, [r7, #13]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	32ae      	adds	r2, #174	@ 0xae
 800cefe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf02:	689b      	ldr	r3, [r3, #8]
 800cf04:	6839      	ldr	r1, [r7, #0]
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	4798      	blx	r3
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cf0e:	e004      	b.n	800cf1a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cf10:	6839      	ldr	r1, [r7, #0]
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f000 fc2d 	bl	800d772 <USBD_CtlError>
              break;
 800cf18:	e000      	b.n	800cf1c <USBD_StdEPReq+0x1c8>
              break;
 800cf1a:	bf00      	nop
          }
          break;
 800cf1c:	e0ab      	b.n	800d076 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf24:	b2db      	uxtb	r3, r3
 800cf26:	2b02      	cmp	r3, #2
 800cf28:	d002      	beq.n	800cf30 <USBD_StdEPReq+0x1dc>
 800cf2a:	2b03      	cmp	r3, #3
 800cf2c:	d032      	beq.n	800cf94 <USBD_StdEPReq+0x240>
 800cf2e:	e097      	b.n	800d060 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cf30:	7bbb      	ldrb	r3, [r7, #14]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d007      	beq.n	800cf46 <USBD_StdEPReq+0x1f2>
 800cf36:	7bbb      	ldrb	r3, [r7, #14]
 800cf38:	2b80      	cmp	r3, #128	@ 0x80
 800cf3a:	d004      	beq.n	800cf46 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cf3c:	6839      	ldr	r1, [r7, #0]
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f000 fc17 	bl	800d772 <USBD_CtlError>
                break;
 800cf44:	e091      	b.n	800d06a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	da0b      	bge.n	800cf66 <USBD_StdEPReq+0x212>
 800cf4e:	7bbb      	ldrb	r3, [r7, #14]
 800cf50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf54:	4613      	mov	r3, r2
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	4413      	add	r3, r2
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	3310      	adds	r3, #16
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	4413      	add	r3, r2
 800cf62:	3304      	adds	r3, #4
 800cf64:	e00b      	b.n	800cf7e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cf66:	7bbb      	ldrb	r3, [r7, #14]
 800cf68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf6c:	4613      	mov	r3, r2
 800cf6e:	009b      	lsls	r3, r3, #2
 800cf70:	4413      	add	r3, r2
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cf78:	687a      	ldr	r2, [r7, #4]
 800cf7a:	4413      	add	r3, r2
 800cf7c:	3304      	adds	r3, #4
 800cf7e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	2200      	movs	r2, #0
 800cf84:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	2202      	movs	r2, #2
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f000 fc6d 	bl	800d86c <USBD_CtlSendData>
              break;
 800cf92:	e06a      	b.n	800d06a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cf94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	da11      	bge.n	800cfc0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cf9c:	7bbb      	ldrb	r3, [r7, #14]
 800cf9e:	f003 020f 	and.w	r2, r3, #15
 800cfa2:	6879      	ldr	r1, [r7, #4]
 800cfa4:	4613      	mov	r3, r2
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	4413      	add	r3, r2
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	440b      	add	r3, r1
 800cfae:	3324      	adds	r3, #36	@ 0x24
 800cfb0:	881b      	ldrh	r3, [r3, #0]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d117      	bne.n	800cfe6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cfb6:	6839      	ldr	r1, [r7, #0]
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f000 fbda 	bl	800d772 <USBD_CtlError>
                  break;
 800cfbe:	e054      	b.n	800d06a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cfc0:	7bbb      	ldrb	r3, [r7, #14]
 800cfc2:	f003 020f 	and.w	r2, r3, #15
 800cfc6:	6879      	ldr	r1, [r7, #4]
 800cfc8:	4613      	mov	r3, r2
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	4413      	add	r3, r2
 800cfce:	009b      	lsls	r3, r3, #2
 800cfd0:	440b      	add	r3, r1
 800cfd2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cfd6:	881b      	ldrh	r3, [r3, #0]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d104      	bne.n	800cfe6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cfdc:	6839      	ldr	r1, [r7, #0]
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 fbc7 	bl	800d772 <USBD_CtlError>
                  break;
 800cfe4:	e041      	b.n	800d06a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cfe6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	da0b      	bge.n	800d006 <USBD_StdEPReq+0x2b2>
 800cfee:	7bbb      	ldrb	r3, [r7, #14]
 800cff0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cff4:	4613      	mov	r3, r2
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	4413      	add	r3, r2
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	3310      	adds	r3, #16
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	4413      	add	r3, r2
 800d002:	3304      	adds	r3, #4
 800d004:	e00b      	b.n	800d01e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d006:	7bbb      	ldrb	r3, [r7, #14]
 800d008:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d00c:	4613      	mov	r3, r2
 800d00e:	009b      	lsls	r3, r3, #2
 800d010:	4413      	add	r3, r2
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d018:	687a      	ldr	r2, [r7, #4]
 800d01a:	4413      	add	r3, r2
 800d01c:	3304      	adds	r3, #4
 800d01e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d020:	7bbb      	ldrb	r3, [r7, #14]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d002      	beq.n	800d02c <USBD_StdEPReq+0x2d8>
 800d026:	7bbb      	ldrb	r3, [r7, #14]
 800d028:	2b80      	cmp	r3, #128	@ 0x80
 800d02a:	d103      	bne.n	800d034 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	2200      	movs	r2, #0
 800d030:	601a      	str	r2, [r3, #0]
 800d032:	e00e      	b.n	800d052 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d034:	7bbb      	ldrb	r3, [r7, #14]
 800d036:	4619      	mov	r1, r3
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f001 f8f3 	bl	800e224 <USBD_LL_IsStallEP>
 800d03e:	4603      	mov	r3, r0
 800d040:	2b00      	cmp	r3, #0
 800d042:	d003      	beq.n	800d04c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	2201      	movs	r2, #1
 800d048:	601a      	str	r2, [r3, #0]
 800d04a:	e002      	b.n	800d052 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	2200      	movs	r2, #0
 800d050:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	2202      	movs	r2, #2
 800d056:	4619      	mov	r1, r3
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f000 fc07 	bl	800d86c <USBD_CtlSendData>
              break;
 800d05e:	e004      	b.n	800d06a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d060:	6839      	ldr	r1, [r7, #0]
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f000 fb85 	bl	800d772 <USBD_CtlError>
              break;
 800d068:	bf00      	nop
          }
          break;
 800d06a:	e004      	b.n	800d076 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d06c:	6839      	ldr	r1, [r7, #0]
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f000 fb7f 	bl	800d772 <USBD_CtlError>
          break;
 800d074:	bf00      	nop
      }
      break;
 800d076:	e005      	b.n	800d084 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d078:	6839      	ldr	r1, [r7, #0]
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f000 fb79 	bl	800d772 <USBD_CtlError>
      break;
 800d080:	e000      	b.n	800d084 <USBD_StdEPReq+0x330>
      break;
 800d082:	bf00      	nop
  }

  return ret;
 800d084:	7bfb      	ldrb	r3, [r7, #15]
}
 800d086:	4618      	mov	r0, r3
 800d088:	3710      	adds	r7, #16
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
	...

0800d090 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b084      	sub	sp, #16
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d09a:	2300      	movs	r3, #0
 800d09c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	885b      	ldrh	r3, [r3, #2]
 800d0aa:	0a1b      	lsrs	r3, r3, #8
 800d0ac:	b29b      	uxth	r3, r3
 800d0ae:	3b01      	subs	r3, #1
 800d0b0:	2b0e      	cmp	r3, #14
 800d0b2:	f200 8152 	bhi.w	800d35a <USBD_GetDescriptor+0x2ca>
 800d0b6:	a201      	add	r2, pc, #4	@ (adr r2, 800d0bc <USBD_GetDescriptor+0x2c>)
 800d0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0bc:	0800d12d 	.word	0x0800d12d
 800d0c0:	0800d145 	.word	0x0800d145
 800d0c4:	0800d185 	.word	0x0800d185
 800d0c8:	0800d35b 	.word	0x0800d35b
 800d0cc:	0800d35b 	.word	0x0800d35b
 800d0d0:	0800d2fb 	.word	0x0800d2fb
 800d0d4:	0800d327 	.word	0x0800d327
 800d0d8:	0800d35b 	.word	0x0800d35b
 800d0dc:	0800d35b 	.word	0x0800d35b
 800d0e0:	0800d35b 	.word	0x0800d35b
 800d0e4:	0800d35b 	.word	0x0800d35b
 800d0e8:	0800d35b 	.word	0x0800d35b
 800d0ec:	0800d35b 	.word	0x0800d35b
 800d0f0:	0800d35b 	.word	0x0800d35b
 800d0f4:	0800d0f9 	.word	0x0800d0f9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0fe:	69db      	ldr	r3, [r3, #28]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d00b      	beq.n	800d11c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d10a:	69db      	ldr	r3, [r3, #28]
 800d10c:	687a      	ldr	r2, [r7, #4]
 800d10e:	7c12      	ldrb	r2, [r2, #16]
 800d110:	f107 0108 	add.w	r1, r7, #8
 800d114:	4610      	mov	r0, r2
 800d116:	4798      	blx	r3
 800d118:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d11a:	e126      	b.n	800d36a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d11c:	6839      	ldr	r1, [r7, #0]
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f000 fb27 	bl	800d772 <USBD_CtlError>
        err++;
 800d124:	7afb      	ldrb	r3, [r7, #11]
 800d126:	3301      	adds	r3, #1
 800d128:	72fb      	strb	r3, [r7, #11]
      break;
 800d12a:	e11e      	b.n	800d36a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	7c12      	ldrb	r2, [r2, #16]
 800d138:	f107 0108 	add.w	r1, r7, #8
 800d13c:	4610      	mov	r0, r2
 800d13e:	4798      	blx	r3
 800d140:	60f8      	str	r0, [r7, #12]
      break;
 800d142:	e112      	b.n	800d36a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	7c1b      	ldrb	r3, [r3, #16]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d10d      	bne.n	800d168 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d154:	f107 0208 	add.w	r2, r7, #8
 800d158:	4610      	mov	r0, r2
 800d15a:	4798      	blx	r3
 800d15c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	3301      	adds	r3, #1
 800d162:	2202      	movs	r2, #2
 800d164:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d166:	e100      	b.n	800d36a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d16e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d170:	f107 0208 	add.w	r2, r7, #8
 800d174:	4610      	mov	r0, r2
 800d176:	4798      	blx	r3
 800d178:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	3301      	adds	r3, #1
 800d17e:	2202      	movs	r2, #2
 800d180:	701a      	strb	r2, [r3, #0]
      break;
 800d182:	e0f2      	b.n	800d36a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	885b      	ldrh	r3, [r3, #2]
 800d188:	b2db      	uxtb	r3, r3
 800d18a:	2b05      	cmp	r3, #5
 800d18c:	f200 80ac 	bhi.w	800d2e8 <USBD_GetDescriptor+0x258>
 800d190:	a201      	add	r2, pc, #4	@ (adr r2, 800d198 <USBD_GetDescriptor+0x108>)
 800d192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d196:	bf00      	nop
 800d198:	0800d1b1 	.word	0x0800d1b1
 800d19c:	0800d1e5 	.word	0x0800d1e5
 800d1a0:	0800d219 	.word	0x0800d219
 800d1a4:	0800d24d 	.word	0x0800d24d
 800d1a8:	0800d281 	.word	0x0800d281
 800d1ac:	0800d2b5 	.word	0x0800d2b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d00b      	beq.n	800d1d4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	687a      	ldr	r2, [r7, #4]
 800d1c6:	7c12      	ldrb	r2, [r2, #16]
 800d1c8:	f107 0108 	add.w	r1, r7, #8
 800d1cc:	4610      	mov	r0, r2
 800d1ce:	4798      	blx	r3
 800d1d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1d2:	e091      	b.n	800d2f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d1d4:	6839      	ldr	r1, [r7, #0]
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 facb 	bl	800d772 <USBD_CtlError>
            err++;
 800d1dc:	7afb      	ldrb	r3, [r7, #11]
 800d1de:	3301      	adds	r3, #1
 800d1e0:	72fb      	strb	r3, [r7, #11]
          break;
 800d1e2:	e089      	b.n	800d2f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1ea:	689b      	ldr	r3, [r3, #8]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d00b      	beq.n	800d208 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1f6:	689b      	ldr	r3, [r3, #8]
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	7c12      	ldrb	r2, [r2, #16]
 800d1fc:	f107 0108 	add.w	r1, r7, #8
 800d200:	4610      	mov	r0, r2
 800d202:	4798      	blx	r3
 800d204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d206:	e077      	b.n	800d2f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d208:	6839      	ldr	r1, [r7, #0]
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 fab1 	bl	800d772 <USBD_CtlError>
            err++;
 800d210:	7afb      	ldrb	r3, [r7, #11]
 800d212:	3301      	adds	r3, #1
 800d214:	72fb      	strb	r3, [r7, #11]
          break;
 800d216:	e06f      	b.n	800d2f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d21e:	68db      	ldr	r3, [r3, #12]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d00b      	beq.n	800d23c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d22a:	68db      	ldr	r3, [r3, #12]
 800d22c:	687a      	ldr	r2, [r7, #4]
 800d22e:	7c12      	ldrb	r2, [r2, #16]
 800d230:	f107 0108 	add.w	r1, r7, #8
 800d234:	4610      	mov	r0, r2
 800d236:	4798      	blx	r3
 800d238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d23a:	e05d      	b.n	800d2f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d23c:	6839      	ldr	r1, [r7, #0]
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 fa97 	bl	800d772 <USBD_CtlError>
            err++;
 800d244:	7afb      	ldrb	r3, [r7, #11]
 800d246:	3301      	adds	r3, #1
 800d248:	72fb      	strb	r3, [r7, #11]
          break;
 800d24a:	e055      	b.n	800d2f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d252:	691b      	ldr	r3, [r3, #16]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d00b      	beq.n	800d270 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d25e:	691b      	ldr	r3, [r3, #16]
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	7c12      	ldrb	r2, [r2, #16]
 800d264:	f107 0108 	add.w	r1, r7, #8
 800d268:	4610      	mov	r0, r2
 800d26a:	4798      	blx	r3
 800d26c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d26e:	e043      	b.n	800d2f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d270:	6839      	ldr	r1, [r7, #0]
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f000 fa7d 	bl	800d772 <USBD_CtlError>
            err++;
 800d278:	7afb      	ldrb	r3, [r7, #11]
 800d27a:	3301      	adds	r3, #1
 800d27c:	72fb      	strb	r3, [r7, #11]
          break;
 800d27e:	e03b      	b.n	800d2f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d286:	695b      	ldr	r3, [r3, #20]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d00b      	beq.n	800d2a4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d292:	695b      	ldr	r3, [r3, #20]
 800d294:	687a      	ldr	r2, [r7, #4]
 800d296:	7c12      	ldrb	r2, [r2, #16]
 800d298:	f107 0108 	add.w	r1, r7, #8
 800d29c:	4610      	mov	r0, r2
 800d29e:	4798      	blx	r3
 800d2a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d2a2:	e029      	b.n	800d2f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d2a4:	6839      	ldr	r1, [r7, #0]
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f000 fa63 	bl	800d772 <USBD_CtlError>
            err++;
 800d2ac:	7afb      	ldrb	r3, [r7, #11]
 800d2ae:	3301      	adds	r3, #1
 800d2b0:	72fb      	strb	r3, [r7, #11]
          break;
 800d2b2:	e021      	b.n	800d2f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d2ba:	699b      	ldr	r3, [r3, #24]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d00b      	beq.n	800d2d8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d2c6:	699b      	ldr	r3, [r3, #24]
 800d2c8:	687a      	ldr	r2, [r7, #4]
 800d2ca:	7c12      	ldrb	r2, [r2, #16]
 800d2cc:	f107 0108 	add.w	r1, r7, #8
 800d2d0:	4610      	mov	r0, r2
 800d2d2:	4798      	blx	r3
 800d2d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d2d6:	e00f      	b.n	800d2f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d2d8:	6839      	ldr	r1, [r7, #0]
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f000 fa49 	bl	800d772 <USBD_CtlError>
            err++;
 800d2e0:	7afb      	ldrb	r3, [r7, #11]
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	72fb      	strb	r3, [r7, #11]
          break;
 800d2e6:	e007      	b.n	800d2f8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d2e8:	6839      	ldr	r1, [r7, #0]
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f000 fa41 	bl	800d772 <USBD_CtlError>
          err++;
 800d2f0:	7afb      	ldrb	r3, [r7, #11]
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d2f6:	bf00      	nop
      }
      break;
 800d2f8:	e037      	b.n	800d36a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	7c1b      	ldrb	r3, [r3, #16]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d109      	bne.n	800d316 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d30a:	f107 0208 	add.w	r2, r7, #8
 800d30e:	4610      	mov	r0, r2
 800d310:	4798      	blx	r3
 800d312:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d314:	e029      	b.n	800d36a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d316:	6839      	ldr	r1, [r7, #0]
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f000 fa2a 	bl	800d772 <USBD_CtlError>
        err++;
 800d31e:	7afb      	ldrb	r3, [r7, #11]
 800d320:	3301      	adds	r3, #1
 800d322:	72fb      	strb	r3, [r7, #11]
      break;
 800d324:	e021      	b.n	800d36a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	7c1b      	ldrb	r3, [r3, #16]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d10d      	bne.n	800d34a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d336:	f107 0208 	add.w	r2, r7, #8
 800d33a:	4610      	mov	r0, r2
 800d33c:	4798      	blx	r3
 800d33e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	3301      	adds	r3, #1
 800d344:	2207      	movs	r2, #7
 800d346:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d348:	e00f      	b.n	800d36a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d34a:	6839      	ldr	r1, [r7, #0]
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 fa10 	bl	800d772 <USBD_CtlError>
        err++;
 800d352:	7afb      	ldrb	r3, [r7, #11]
 800d354:	3301      	adds	r3, #1
 800d356:	72fb      	strb	r3, [r7, #11]
      break;
 800d358:	e007      	b.n	800d36a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d35a:	6839      	ldr	r1, [r7, #0]
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f000 fa08 	bl	800d772 <USBD_CtlError>
      err++;
 800d362:	7afb      	ldrb	r3, [r7, #11]
 800d364:	3301      	adds	r3, #1
 800d366:	72fb      	strb	r3, [r7, #11]
      break;
 800d368:	bf00      	nop
  }

  if (err != 0U)
 800d36a:	7afb      	ldrb	r3, [r7, #11]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d11e      	bne.n	800d3ae <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	88db      	ldrh	r3, [r3, #6]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d016      	beq.n	800d3a6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d378:	893b      	ldrh	r3, [r7, #8]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d00e      	beq.n	800d39c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	88da      	ldrh	r2, [r3, #6]
 800d382:	893b      	ldrh	r3, [r7, #8]
 800d384:	4293      	cmp	r3, r2
 800d386:	bf28      	it	cs
 800d388:	4613      	movcs	r3, r2
 800d38a:	b29b      	uxth	r3, r3
 800d38c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d38e:	893b      	ldrh	r3, [r7, #8]
 800d390:	461a      	mov	r2, r3
 800d392:	68f9      	ldr	r1, [r7, #12]
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f000 fa69 	bl	800d86c <USBD_CtlSendData>
 800d39a:	e009      	b.n	800d3b0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d39c:	6839      	ldr	r1, [r7, #0]
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f000 f9e7 	bl	800d772 <USBD_CtlError>
 800d3a4:	e004      	b.n	800d3b0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 faba 	bl	800d920 <USBD_CtlSendStatus>
 800d3ac:	e000      	b.n	800d3b0 <USBD_GetDescriptor+0x320>
    return;
 800d3ae:	bf00      	nop
  }
}
 800d3b0:	3710      	adds	r7, #16
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop

0800d3b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	889b      	ldrh	r3, [r3, #4]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d131      	bne.n	800d42e <USBD_SetAddress+0x76>
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	88db      	ldrh	r3, [r3, #6]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d12d      	bne.n	800d42e <USBD_SetAddress+0x76>
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	885b      	ldrh	r3, [r3, #2]
 800d3d6:	2b7f      	cmp	r3, #127	@ 0x7f
 800d3d8:	d829      	bhi.n	800d42e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	885b      	ldrh	r3, [r3, #2]
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3ec:	b2db      	uxtb	r3, r3
 800d3ee:	2b03      	cmp	r3, #3
 800d3f0:	d104      	bne.n	800d3fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d3f2:	6839      	ldr	r1, [r7, #0]
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f000 f9bc 	bl	800d772 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3fa:	e01d      	b.n	800d438 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	7bfa      	ldrb	r2, [r7, #15]
 800d400:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d404:	7bfb      	ldrb	r3, [r7, #15]
 800d406:	4619      	mov	r1, r3
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f000 ff37 	bl	800e27c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f000 fa86 	bl	800d920 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d414:	7bfb      	ldrb	r3, [r7, #15]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d004      	beq.n	800d424 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2202      	movs	r2, #2
 800d41e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d422:	e009      	b.n	800d438 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2201      	movs	r2, #1
 800d428:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d42c:	e004      	b.n	800d438 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d42e:	6839      	ldr	r1, [r7, #0]
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f000 f99e 	bl	800d772 <USBD_CtlError>
  }
}
 800d436:	bf00      	nop
 800d438:	bf00      	nop
 800d43a:	3710      	adds	r7, #16
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b084      	sub	sp, #16
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d44a:	2300      	movs	r3, #0
 800d44c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	885b      	ldrh	r3, [r3, #2]
 800d452:	b2da      	uxtb	r2, r3
 800d454:	4b4e      	ldr	r3, [pc, #312]	@ (800d590 <USBD_SetConfig+0x150>)
 800d456:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d458:	4b4d      	ldr	r3, [pc, #308]	@ (800d590 <USBD_SetConfig+0x150>)
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	2b01      	cmp	r3, #1
 800d45e:	d905      	bls.n	800d46c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d460:	6839      	ldr	r1, [r7, #0]
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f000 f985 	bl	800d772 <USBD_CtlError>
    return USBD_FAIL;
 800d468:	2303      	movs	r3, #3
 800d46a:	e08c      	b.n	800d586 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d472:	b2db      	uxtb	r3, r3
 800d474:	2b02      	cmp	r3, #2
 800d476:	d002      	beq.n	800d47e <USBD_SetConfig+0x3e>
 800d478:	2b03      	cmp	r3, #3
 800d47a:	d029      	beq.n	800d4d0 <USBD_SetConfig+0x90>
 800d47c:	e075      	b.n	800d56a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d47e:	4b44      	ldr	r3, [pc, #272]	@ (800d590 <USBD_SetConfig+0x150>)
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d020      	beq.n	800d4c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d486:	4b42      	ldr	r3, [pc, #264]	@ (800d590 <USBD_SetConfig+0x150>)
 800d488:	781b      	ldrb	r3, [r3, #0]
 800d48a:	461a      	mov	r2, r3
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d490:	4b3f      	ldr	r3, [pc, #252]	@ (800d590 <USBD_SetConfig+0x150>)
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	4619      	mov	r1, r3
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f7fe ffb9 	bl	800c40e <USBD_SetClassConfig>
 800d49c:	4603      	mov	r3, r0
 800d49e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d4a0:	7bfb      	ldrb	r3, [r7, #15]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d008      	beq.n	800d4b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d4a6:	6839      	ldr	r1, [r7, #0]
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f000 f962 	bl	800d772 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2202      	movs	r2, #2
 800d4b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d4b6:	e065      	b.n	800d584 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f000 fa31 	bl	800d920 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2203      	movs	r2, #3
 800d4c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d4c6:	e05d      	b.n	800d584 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 fa29 	bl	800d920 <USBD_CtlSendStatus>
      break;
 800d4ce:	e059      	b.n	800d584 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d4d0:	4b2f      	ldr	r3, [pc, #188]	@ (800d590 <USBD_SetConfig+0x150>)
 800d4d2:	781b      	ldrb	r3, [r3, #0]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d112      	bne.n	800d4fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2202      	movs	r2, #2
 800d4dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d4e0:	4b2b      	ldr	r3, [pc, #172]	@ (800d590 <USBD_SetConfig+0x150>)
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d4ea:	4b29      	ldr	r3, [pc, #164]	@ (800d590 <USBD_SetConfig+0x150>)
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f7fe ffa8 	bl	800c446 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f000 fa12 	bl	800d920 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d4fc:	e042      	b.n	800d584 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d4fe:	4b24      	ldr	r3, [pc, #144]	@ (800d590 <USBD_SetConfig+0x150>)
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	461a      	mov	r2, r3
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	685b      	ldr	r3, [r3, #4]
 800d508:	429a      	cmp	r2, r3
 800d50a:	d02a      	beq.n	800d562 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	b2db      	uxtb	r3, r3
 800d512:	4619      	mov	r1, r3
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f7fe ff96 	bl	800c446 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d51a:	4b1d      	ldr	r3, [pc, #116]	@ (800d590 <USBD_SetConfig+0x150>)
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	461a      	mov	r2, r3
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d524:	4b1a      	ldr	r3, [pc, #104]	@ (800d590 <USBD_SetConfig+0x150>)
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	4619      	mov	r1, r3
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f7fe ff6f 	bl	800c40e <USBD_SetClassConfig>
 800d530:	4603      	mov	r3, r0
 800d532:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d534:	7bfb      	ldrb	r3, [r7, #15]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d00f      	beq.n	800d55a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d53a:	6839      	ldr	r1, [r7, #0]
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f000 f918 	bl	800d772 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	685b      	ldr	r3, [r3, #4]
 800d546:	b2db      	uxtb	r3, r3
 800d548:	4619      	mov	r1, r3
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f7fe ff7b 	bl	800c446 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2202      	movs	r2, #2
 800d554:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d558:	e014      	b.n	800d584 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f000 f9e0 	bl	800d920 <USBD_CtlSendStatus>
      break;
 800d560:	e010      	b.n	800d584 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 f9dc 	bl	800d920 <USBD_CtlSendStatus>
      break;
 800d568:	e00c      	b.n	800d584 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d56a:	6839      	ldr	r1, [r7, #0]
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f000 f900 	bl	800d772 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d572:	4b07      	ldr	r3, [pc, #28]	@ (800d590 <USBD_SetConfig+0x150>)
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	4619      	mov	r1, r3
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f7fe ff64 	bl	800c446 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d57e:	2303      	movs	r3, #3
 800d580:	73fb      	strb	r3, [r7, #15]
      break;
 800d582:	bf00      	nop
  }

  return ret;
 800d584:	7bfb      	ldrb	r3, [r7, #15]
}
 800d586:	4618      	mov	r0, r3
 800d588:	3710      	adds	r7, #16
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	2400124c 	.word	0x2400124c

0800d594 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	88db      	ldrh	r3, [r3, #6]
 800d5a2:	2b01      	cmp	r3, #1
 800d5a4:	d004      	beq.n	800d5b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d5a6:	6839      	ldr	r1, [r7, #0]
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f000 f8e2 	bl	800d772 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d5ae:	e023      	b.n	800d5f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5b6:	b2db      	uxtb	r3, r3
 800d5b8:	2b02      	cmp	r3, #2
 800d5ba:	dc02      	bgt.n	800d5c2 <USBD_GetConfig+0x2e>
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	dc03      	bgt.n	800d5c8 <USBD_GetConfig+0x34>
 800d5c0:	e015      	b.n	800d5ee <USBD_GetConfig+0x5a>
 800d5c2:	2b03      	cmp	r3, #3
 800d5c4:	d00b      	beq.n	800d5de <USBD_GetConfig+0x4a>
 800d5c6:	e012      	b.n	800d5ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	3308      	adds	r3, #8
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f000 f948 	bl	800d86c <USBD_CtlSendData>
        break;
 800d5dc:	e00c      	b.n	800d5f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	3304      	adds	r3, #4
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f000 f940 	bl	800d86c <USBD_CtlSendData>
        break;
 800d5ec:	e004      	b.n	800d5f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d5ee:	6839      	ldr	r1, [r7, #0]
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f000 f8be 	bl	800d772 <USBD_CtlError>
        break;
 800d5f6:	bf00      	nop
}
 800d5f8:	bf00      	nop
 800d5fa:	3708      	adds	r7, #8
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b082      	sub	sp, #8
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d610:	b2db      	uxtb	r3, r3
 800d612:	3b01      	subs	r3, #1
 800d614:	2b02      	cmp	r3, #2
 800d616:	d81e      	bhi.n	800d656 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	88db      	ldrh	r3, [r3, #6]
 800d61c:	2b02      	cmp	r3, #2
 800d61e:	d004      	beq.n	800d62a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d620:	6839      	ldr	r1, [r7, #0]
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f000 f8a5 	bl	800d772 <USBD_CtlError>
        break;
 800d628:	e01a      	b.n	800d660 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2201      	movs	r2, #1
 800d62e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d636:	2b00      	cmp	r3, #0
 800d638:	d005      	beq.n	800d646 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	68db      	ldr	r3, [r3, #12]
 800d63e:	f043 0202 	orr.w	r2, r3, #2
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	330c      	adds	r3, #12
 800d64a:	2202      	movs	r2, #2
 800d64c:	4619      	mov	r1, r3
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 f90c 	bl	800d86c <USBD_CtlSendData>
      break;
 800d654:	e004      	b.n	800d660 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d656:	6839      	ldr	r1, [r7, #0]
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f000 f88a 	bl	800d772 <USBD_CtlError>
      break;
 800d65e:	bf00      	nop
  }
}
 800d660:	bf00      	nop
 800d662:	3708      	adds	r7, #8
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	885b      	ldrh	r3, [r3, #2]
 800d676:	2b01      	cmp	r3, #1
 800d678:	d107      	bne.n	800d68a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2201      	movs	r2, #1
 800d67e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f000 f94c 	bl	800d920 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d688:	e013      	b.n	800d6b2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	885b      	ldrh	r3, [r3, #2]
 800d68e:	2b02      	cmp	r3, #2
 800d690:	d10b      	bne.n	800d6aa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	889b      	ldrh	r3, [r3, #4]
 800d696:	0a1b      	lsrs	r3, r3, #8
 800d698:	b29b      	uxth	r3, r3
 800d69a:	b2da      	uxtb	r2, r3
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f000 f93c 	bl	800d920 <USBD_CtlSendStatus>
}
 800d6a8:	e003      	b.n	800d6b2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d6aa:	6839      	ldr	r1, [r7, #0]
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 f860 	bl	800d772 <USBD_CtlError>
}
 800d6b2:	bf00      	nop
 800d6b4:	3708      	adds	r7, #8
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}

0800d6ba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6ba:	b580      	push	{r7, lr}
 800d6bc:	b082      	sub	sp, #8
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]
 800d6c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6ca:	b2db      	uxtb	r3, r3
 800d6cc:	3b01      	subs	r3, #1
 800d6ce:	2b02      	cmp	r3, #2
 800d6d0:	d80b      	bhi.n	800d6ea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	885b      	ldrh	r3, [r3, #2]
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d10c      	bne.n	800d6f4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 f91c 	bl	800d920 <USBD_CtlSendStatus>
      }
      break;
 800d6e8:	e004      	b.n	800d6f4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d6ea:	6839      	ldr	r1, [r7, #0]
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f000 f840 	bl	800d772 <USBD_CtlError>
      break;
 800d6f2:	e000      	b.n	800d6f6 <USBD_ClrFeature+0x3c>
      break;
 800d6f4:	bf00      	nop
  }
}
 800d6f6:	bf00      	nop
 800d6f8:	3708      	adds	r7, #8
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}

0800d6fe <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d6fe:	b580      	push	{r7, lr}
 800d700:	b084      	sub	sp, #16
 800d702:	af00      	add	r7, sp, #0
 800d704:	6078      	str	r0, [r7, #4]
 800d706:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	781a      	ldrb	r2, [r3, #0]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	3301      	adds	r3, #1
 800d718:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	781a      	ldrb	r2, [r3, #0]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	3301      	adds	r3, #1
 800d726:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	f7ff fa16 	bl	800cb5a <SWAPBYTE>
 800d72e:	4603      	mov	r3, r0
 800d730:	461a      	mov	r2, r3
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	3301      	adds	r3, #1
 800d73a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	3301      	adds	r3, #1
 800d740:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d742:	68f8      	ldr	r0, [r7, #12]
 800d744:	f7ff fa09 	bl	800cb5a <SWAPBYTE>
 800d748:	4603      	mov	r3, r0
 800d74a:	461a      	mov	r2, r3
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	3301      	adds	r3, #1
 800d754:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	3301      	adds	r3, #1
 800d75a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d75c:	68f8      	ldr	r0, [r7, #12]
 800d75e:	f7ff f9fc 	bl	800cb5a <SWAPBYTE>
 800d762:	4603      	mov	r3, r0
 800d764:	461a      	mov	r2, r3
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	80da      	strh	r2, [r3, #6]
}
 800d76a:	bf00      	nop
 800d76c:	3710      	adds	r7, #16
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}

0800d772 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d772:	b580      	push	{r7, lr}
 800d774:	b082      	sub	sp, #8
 800d776:	af00      	add	r7, sp, #0
 800d778:	6078      	str	r0, [r7, #4]
 800d77a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d77c:	2180      	movs	r1, #128	@ 0x80
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f000 fd12 	bl	800e1a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d784:	2100      	movs	r1, #0
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f000 fd0e 	bl	800e1a8 <USBD_LL_StallEP>
}
 800d78c:	bf00      	nop
 800d78e:	3708      	adds	r7, #8
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b086      	sub	sp, #24
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d042      	beq.n	800d830 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d7ae:	6938      	ldr	r0, [r7, #16]
 800d7b0:	f000 f842 	bl	800d838 <USBD_GetLen>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	005b      	lsls	r3, r3, #1
 800d7ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d7be:	d808      	bhi.n	800d7d2 <USBD_GetString+0x3e>
 800d7c0:	6938      	ldr	r0, [r7, #16]
 800d7c2:	f000 f839 	bl	800d838 <USBD_GetLen>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	005b      	lsls	r3, r3, #1
 800d7ce:	b29a      	uxth	r2, r3
 800d7d0:	e001      	b.n	800d7d6 <USBD_GetString+0x42>
 800d7d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d7da:	7dfb      	ldrb	r3, [r7, #23]
 800d7dc:	68ba      	ldr	r2, [r7, #8]
 800d7de:	4413      	add	r3, r2
 800d7e0:	687a      	ldr	r2, [r7, #4]
 800d7e2:	7812      	ldrb	r2, [r2, #0]
 800d7e4:	701a      	strb	r2, [r3, #0]
  idx++;
 800d7e6:	7dfb      	ldrb	r3, [r7, #23]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d7ec:	7dfb      	ldrb	r3, [r7, #23]
 800d7ee:	68ba      	ldr	r2, [r7, #8]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	2203      	movs	r2, #3
 800d7f4:	701a      	strb	r2, [r3, #0]
  idx++;
 800d7f6:	7dfb      	ldrb	r3, [r7, #23]
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d7fc:	e013      	b.n	800d826 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d7fe:	7dfb      	ldrb	r3, [r7, #23]
 800d800:	68ba      	ldr	r2, [r7, #8]
 800d802:	4413      	add	r3, r2
 800d804:	693a      	ldr	r2, [r7, #16]
 800d806:	7812      	ldrb	r2, [r2, #0]
 800d808:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	3301      	adds	r3, #1
 800d80e:	613b      	str	r3, [r7, #16]
    idx++;
 800d810:	7dfb      	ldrb	r3, [r7, #23]
 800d812:	3301      	adds	r3, #1
 800d814:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d816:	7dfb      	ldrb	r3, [r7, #23]
 800d818:	68ba      	ldr	r2, [r7, #8]
 800d81a:	4413      	add	r3, r2
 800d81c:	2200      	movs	r2, #0
 800d81e:	701a      	strb	r2, [r3, #0]
    idx++;
 800d820:	7dfb      	ldrb	r3, [r7, #23]
 800d822:	3301      	adds	r3, #1
 800d824:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d1e7      	bne.n	800d7fe <USBD_GetString+0x6a>
 800d82e:	e000      	b.n	800d832 <USBD_GetString+0x9e>
    return;
 800d830:	bf00      	nop
  }
}
 800d832:	3718      	adds	r7, #24
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d838:	b480      	push	{r7}
 800d83a:	b085      	sub	sp, #20
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d840:	2300      	movs	r3, #0
 800d842:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d848:	e005      	b.n	800d856 <USBD_GetLen+0x1e>
  {
    len++;
 800d84a:	7bfb      	ldrb	r3, [r7, #15]
 800d84c:	3301      	adds	r3, #1
 800d84e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	3301      	adds	r3, #1
 800d854:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d1f5      	bne.n	800d84a <USBD_GetLen+0x12>
  }

  return len;
 800d85e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d860:	4618      	mov	r0, r3
 800d862:	3714      	adds	r7, #20
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr

0800d86c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b084      	sub	sp, #16
 800d870:	af00      	add	r7, sp, #0
 800d872:	60f8      	str	r0, [r7, #12]
 800d874:	60b9      	str	r1, [r7, #8]
 800d876:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	2202      	movs	r2, #2
 800d87c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	687a      	ldr	r2, [r7, #4]
 800d88a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	68ba      	ldr	r2, [r7, #8]
 800d890:	2100      	movs	r1, #0
 800d892:	68f8      	ldr	r0, [r7, #12]
 800d894:	f000 fd11 	bl	800e2ba <USBD_LL_Transmit>

  return USBD_OK;
 800d898:	2300      	movs	r3, #0
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3710      	adds	r7, #16
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}

0800d8a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d8a2:	b580      	push	{r7, lr}
 800d8a4:	b084      	sub	sp, #16
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	60f8      	str	r0, [r7, #12]
 800d8aa:	60b9      	str	r1, [r7, #8]
 800d8ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	68ba      	ldr	r2, [r7, #8]
 800d8b2:	2100      	movs	r1, #0
 800d8b4:	68f8      	ldr	r0, [r7, #12]
 800d8b6:	f000 fd00 	bl	800e2ba <USBD_LL_Transmit>

  return USBD_OK;
 800d8ba:	2300      	movs	r3, #0
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3710      	adds	r7, #16
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}

0800d8c4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b084      	sub	sp, #16
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	60f8      	str	r0, [r7, #12]
 800d8cc:	60b9      	str	r1, [r7, #8]
 800d8ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	2203      	movs	r2, #3
 800d8d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	687a      	ldr	r2, [r7, #4]
 800d8dc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	687a      	ldr	r2, [r7, #4]
 800d8e4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	68ba      	ldr	r2, [r7, #8]
 800d8ec:	2100      	movs	r1, #0
 800d8ee:	68f8      	ldr	r0, [r7, #12]
 800d8f0:	f000 fd04 	bl	800e2fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d8f4:	2300      	movs	r3, #0
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3710      	adds	r7, #16
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}

0800d8fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d8fe:	b580      	push	{r7, lr}
 800d900:	b084      	sub	sp, #16
 800d902:	af00      	add	r7, sp, #0
 800d904:	60f8      	str	r0, [r7, #12]
 800d906:	60b9      	str	r1, [r7, #8]
 800d908:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	68ba      	ldr	r2, [r7, #8]
 800d90e:	2100      	movs	r1, #0
 800d910:	68f8      	ldr	r0, [r7, #12]
 800d912:	f000 fcf3 	bl	800e2fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d916:	2300      	movs	r3, #0
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3710      	adds	r7, #16
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2204      	movs	r2, #4
 800d92c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d930:	2300      	movs	r3, #0
 800d932:	2200      	movs	r2, #0
 800d934:	2100      	movs	r1, #0
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f000 fcbf 	bl	800e2ba <USBD_LL_Transmit>

  return USBD_OK;
 800d93c:	2300      	movs	r3, #0
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3708      	adds	r7, #8
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}

0800d946 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d946:	b580      	push	{r7, lr}
 800d948:	b082      	sub	sp, #8
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2205      	movs	r2, #5
 800d952:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d956:	2300      	movs	r3, #0
 800d958:	2200      	movs	r2, #0
 800d95a:	2100      	movs	r1, #0
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f000 fccd 	bl	800e2fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d970:	2200      	movs	r2, #0
 800d972:	4913      	ldr	r1, [pc, #76]	@ (800d9c0 <MX_USB_DEVICE_Init+0x54>)
 800d974:	4813      	ldr	r0, [pc, #76]	@ (800d9c4 <MX_USB_DEVICE_Init+0x58>)
 800d976:	f7fe fccd 	bl	800c314 <USBD_Init>
 800d97a:	4603      	mov	r3, r0
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d001      	beq.n	800d984 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d980:	f7f2 ff08 	bl	8000794 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d984:	4910      	ldr	r1, [pc, #64]	@ (800d9c8 <MX_USB_DEVICE_Init+0x5c>)
 800d986:	480f      	ldr	r0, [pc, #60]	@ (800d9c4 <MX_USB_DEVICE_Init+0x58>)
 800d988:	f7fe fcf4 	bl	800c374 <USBD_RegisterClass>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d001      	beq.n	800d996 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d992:	f7f2 feff 	bl	8000794 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d996:	490d      	ldr	r1, [pc, #52]	@ (800d9cc <MX_USB_DEVICE_Init+0x60>)
 800d998:	480a      	ldr	r0, [pc, #40]	@ (800d9c4 <MX_USB_DEVICE_Init+0x58>)
 800d99a:	f7fe fbeb 	bl	800c174 <USBD_CDC_RegisterInterface>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d001      	beq.n	800d9a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d9a4:	f7f2 fef6 	bl	8000794 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d9a8:	4806      	ldr	r0, [pc, #24]	@ (800d9c4 <MX_USB_DEVICE_Init+0x58>)
 800d9aa:	f7fe fd19 	bl	800c3e0 <USBD_Start>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d001      	beq.n	800d9b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d9b4:	f7f2 feee 	bl	8000794 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800d9b8:	f7f8 fc18 	bl	80061ec <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d9bc:	bf00      	nop
 800d9be:	bd80      	pop	{r7, pc}
 800d9c0:	240000b0 	.word	0x240000b0
 800d9c4:	24001250 	.word	0x24001250
 800d9c8:	2400001c 	.word	0x2400001c
 800d9cc:	2400009c 	.word	0x2400009c

0800d9d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	4905      	ldr	r1, [pc, #20]	@ (800d9ec <CDC_Init_FS+0x1c>)
 800d9d8:	4805      	ldr	r0, [pc, #20]	@ (800d9f0 <CDC_Init_FS+0x20>)
 800d9da:	f7fe fbe5 	bl	800c1a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d9de:	4905      	ldr	r1, [pc, #20]	@ (800d9f4 <CDC_Init_FS+0x24>)
 800d9e0:	4803      	ldr	r0, [pc, #12]	@ (800d9f0 <CDC_Init_FS+0x20>)
 800d9e2:	f7fe fc03 	bl	800c1ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d9e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	bd80      	pop	{r7, pc}
 800d9ec:	24001d2c 	.word	0x24001d2c
 800d9f0:	24001250 	.word	0x24001250
 800d9f4:	2400152c 	.word	0x2400152c

0800d9f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d9fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr

0800da08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800da08:	b480      	push	{r7}
 800da0a:	b083      	sub	sp, #12
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	4603      	mov	r3, r0
 800da10:	6039      	str	r1, [r7, #0]
 800da12:	71fb      	strb	r3, [r7, #7]
 800da14:	4613      	mov	r3, r2
 800da16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800da18:	79fb      	ldrb	r3, [r7, #7]
 800da1a:	2b23      	cmp	r3, #35	@ 0x23
 800da1c:	d84a      	bhi.n	800dab4 <CDC_Control_FS+0xac>
 800da1e:	a201      	add	r2, pc, #4	@ (adr r2, 800da24 <CDC_Control_FS+0x1c>)
 800da20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da24:	0800dab5 	.word	0x0800dab5
 800da28:	0800dab5 	.word	0x0800dab5
 800da2c:	0800dab5 	.word	0x0800dab5
 800da30:	0800dab5 	.word	0x0800dab5
 800da34:	0800dab5 	.word	0x0800dab5
 800da38:	0800dab5 	.word	0x0800dab5
 800da3c:	0800dab5 	.word	0x0800dab5
 800da40:	0800dab5 	.word	0x0800dab5
 800da44:	0800dab5 	.word	0x0800dab5
 800da48:	0800dab5 	.word	0x0800dab5
 800da4c:	0800dab5 	.word	0x0800dab5
 800da50:	0800dab5 	.word	0x0800dab5
 800da54:	0800dab5 	.word	0x0800dab5
 800da58:	0800dab5 	.word	0x0800dab5
 800da5c:	0800dab5 	.word	0x0800dab5
 800da60:	0800dab5 	.word	0x0800dab5
 800da64:	0800dab5 	.word	0x0800dab5
 800da68:	0800dab5 	.word	0x0800dab5
 800da6c:	0800dab5 	.word	0x0800dab5
 800da70:	0800dab5 	.word	0x0800dab5
 800da74:	0800dab5 	.word	0x0800dab5
 800da78:	0800dab5 	.word	0x0800dab5
 800da7c:	0800dab5 	.word	0x0800dab5
 800da80:	0800dab5 	.word	0x0800dab5
 800da84:	0800dab5 	.word	0x0800dab5
 800da88:	0800dab5 	.word	0x0800dab5
 800da8c:	0800dab5 	.word	0x0800dab5
 800da90:	0800dab5 	.word	0x0800dab5
 800da94:	0800dab5 	.word	0x0800dab5
 800da98:	0800dab5 	.word	0x0800dab5
 800da9c:	0800dab5 	.word	0x0800dab5
 800daa0:	0800dab5 	.word	0x0800dab5
 800daa4:	0800dab5 	.word	0x0800dab5
 800daa8:	0800dab5 	.word	0x0800dab5
 800daac:	0800dab5 	.word	0x0800dab5
 800dab0:	0800dab5 	.word	0x0800dab5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dab4:	bf00      	nop
  }

  return (USBD_OK);
 800dab6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dab8:	4618      	mov	r0, r3
 800daba:	370c      	adds	r7, #12
 800dabc:	46bd      	mov	sp, r7
 800dabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac2:	4770      	bx	lr

0800dac4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b082      	sub	sp, #8
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dace:	6879      	ldr	r1, [r7, #4]
 800dad0:	4805      	ldr	r0, [pc, #20]	@ (800dae8 <CDC_Receive_FS+0x24>)
 800dad2:	f7fe fb8b 	bl	800c1ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dad6:	4804      	ldr	r0, [pc, #16]	@ (800dae8 <CDC_Receive_FS+0x24>)
 800dad8:	f7fe fbe6 	bl	800c2a8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dadc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3708      	adds	r7, #8
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}
 800dae6:	bf00      	nop
 800dae8:	24001250 	.word	0x24001250

0800daec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b084      	sub	sp, #16
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	460b      	mov	r3, r1
 800daf6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800daf8:	2300      	movs	r3, #0
 800dafa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dafc:	4b0d      	ldr	r3, [pc, #52]	@ (800db34 <CDC_Transmit_FS+0x48>)
 800dafe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800db02:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d001      	beq.n	800db12 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800db0e:	2301      	movs	r3, #1
 800db10:	e00b      	b.n	800db2a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800db12:	887b      	ldrh	r3, [r7, #2]
 800db14:	461a      	mov	r2, r3
 800db16:	6879      	ldr	r1, [r7, #4]
 800db18:	4806      	ldr	r0, [pc, #24]	@ (800db34 <CDC_Transmit_FS+0x48>)
 800db1a:	f7fe fb45 	bl	800c1a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800db1e:	4805      	ldr	r0, [pc, #20]	@ (800db34 <CDC_Transmit_FS+0x48>)
 800db20:	f7fe fb82 	bl	800c228 <USBD_CDC_TransmitPacket>
 800db24:	4603      	mov	r3, r0
 800db26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800db28:	7bfb      	ldrb	r3, [r7, #15]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3710      	adds	r7, #16
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	24001250 	.word	0x24001250

0800db38 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800db38:	b480      	push	{r7}
 800db3a:	b087      	sub	sp, #28
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	60f8      	str	r0, [r7, #12]
 800db40:	60b9      	str	r1, [r7, #8]
 800db42:	4613      	mov	r3, r2
 800db44:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800db46:	2300      	movs	r3, #0
 800db48:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800db4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db4e:	4618      	mov	r0, r3
 800db50:	371c      	adds	r7, #28
 800db52:	46bd      	mov	sp, r7
 800db54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db58:	4770      	bx	lr
	...

0800db5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db5c:	b480      	push	{r7}
 800db5e:	b083      	sub	sp, #12
 800db60:	af00      	add	r7, sp, #0
 800db62:	4603      	mov	r3, r0
 800db64:	6039      	str	r1, [r7, #0]
 800db66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	2212      	movs	r2, #18
 800db6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800db6e:	4b03      	ldr	r3, [pc, #12]	@ (800db7c <USBD_FS_DeviceDescriptor+0x20>)
}
 800db70:	4618      	mov	r0, r3
 800db72:	370c      	adds	r7, #12
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr
 800db7c:	240000d0 	.word	0x240000d0

0800db80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db80:	b480      	push	{r7}
 800db82:	b083      	sub	sp, #12
 800db84:	af00      	add	r7, sp, #0
 800db86:	4603      	mov	r3, r0
 800db88:	6039      	str	r1, [r7, #0]
 800db8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	2204      	movs	r2, #4
 800db90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800db92:	4b03      	ldr	r3, [pc, #12]	@ (800dba0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800db94:	4618      	mov	r0, r3
 800db96:	370c      	adds	r7, #12
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr
 800dba0:	240000e4 	.word	0x240000e4

0800dba4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	4603      	mov	r3, r0
 800dbac:	6039      	str	r1, [r7, #0]
 800dbae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dbb0:	79fb      	ldrb	r3, [r7, #7]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d105      	bne.n	800dbc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dbb6:	683a      	ldr	r2, [r7, #0]
 800dbb8:	4907      	ldr	r1, [pc, #28]	@ (800dbd8 <USBD_FS_ProductStrDescriptor+0x34>)
 800dbba:	4808      	ldr	r0, [pc, #32]	@ (800dbdc <USBD_FS_ProductStrDescriptor+0x38>)
 800dbbc:	f7ff fdea 	bl	800d794 <USBD_GetString>
 800dbc0:	e004      	b.n	800dbcc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dbc2:	683a      	ldr	r2, [r7, #0]
 800dbc4:	4904      	ldr	r1, [pc, #16]	@ (800dbd8 <USBD_FS_ProductStrDescriptor+0x34>)
 800dbc6:	4805      	ldr	r0, [pc, #20]	@ (800dbdc <USBD_FS_ProductStrDescriptor+0x38>)
 800dbc8:	f7ff fde4 	bl	800d794 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dbcc:	4b02      	ldr	r3, [pc, #8]	@ (800dbd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3708      	adds	r7, #8
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	2400252c 	.word	0x2400252c
 800dbdc:	0800e45c 	.word	0x0800e45c

0800dbe0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b082      	sub	sp, #8
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	6039      	str	r1, [r7, #0]
 800dbea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dbec:	683a      	ldr	r2, [r7, #0]
 800dbee:	4904      	ldr	r1, [pc, #16]	@ (800dc00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dbf0:	4804      	ldr	r0, [pc, #16]	@ (800dc04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dbf2:	f7ff fdcf 	bl	800d794 <USBD_GetString>
  return USBD_StrDesc;
 800dbf6:	4b02      	ldr	r3, [pc, #8]	@ (800dc00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3708      	adds	r7, #8
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}
 800dc00:	2400252c 	.word	0x2400252c
 800dc04:	0800e474 	.word	0x0800e474

0800dc08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	4603      	mov	r3, r0
 800dc10:	6039      	str	r1, [r7, #0]
 800dc12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	221a      	movs	r2, #26
 800dc18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dc1a:	f000 f843 	bl	800dca4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dc1e:	4b02      	ldr	r3, [pc, #8]	@ (800dc28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	240000e8 	.word	0x240000e8

0800dc2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	4603      	mov	r3, r0
 800dc34:	6039      	str	r1, [r7, #0]
 800dc36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dc38:	79fb      	ldrb	r3, [r7, #7]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d105      	bne.n	800dc4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dc3e:	683a      	ldr	r2, [r7, #0]
 800dc40:	4907      	ldr	r1, [pc, #28]	@ (800dc60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dc42:	4808      	ldr	r0, [pc, #32]	@ (800dc64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dc44:	f7ff fda6 	bl	800d794 <USBD_GetString>
 800dc48:	e004      	b.n	800dc54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dc4a:	683a      	ldr	r2, [r7, #0]
 800dc4c:	4904      	ldr	r1, [pc, #16]	@ (800dc60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dc4e:	4805      	ldr	r0, [pc, #20]	@ (800dc64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dc50:	f7ff fda0 	bl	800d794 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc54:	4b02      	ldr	r3, [pc, #8]	@ (800dc60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3708      	adds	r7, #8
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
 800dc5e:	bf00      	nop
 800dc60:	2400252c 	.word	0x2400252c
 800dc64:	0800e488 	.word	0x0800e488

0800dc68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	4603      	mov	r3, r0
 800dc70:	6039      	str	r1, [r7, #0]
 800dc72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dc74:	79fb      	ldrb	r3, [r7, #7]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d105      	bne.n	800dc86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dc7a:	683a      	ldr	r2, [r7, #0]
 800dc7c:	4907      	ldr	r1, [pc, #28]	@ (800dc9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dc7e:	4808      	ldr	r0, [pc, #32]	@ (800dca0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dc80:	f7ff fd88 	bl	800d794 <USBD_GetString>
 800dc84:	e004      	b.n	800dc90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dc86:	683a      	ldr	r2, [r7, #0]
 800dc88:	4904      	ldr	r1, [pc, #16]	@ (800dc9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dc8a:	4805      	ldr	r0, [pc, #20]	@ (800dca0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dc8c:	f7ff fd82 	bl	800d794 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc90:	4b02      	ldr	r3, [pc, #8]	@ (800dc9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3708      	adds	r7, #8
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	2400252c 	.word	0x2400252c
 800dca0:	0800e494 	.word	0x0800e494

0800dca4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dcaa:	4b0f      	ldr	r3, [pc, #60]	@ (800dce8 <Get_SerialNum+0x44>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dcb0:	4b0e      	ldr	r3, [pc, #56]	@ (800dcec <Get_SerialNum+0x48>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dcb6:	4b0e      	ldr	r3, [pc, #56]	@ (800dcf0 <Get_SerialNum+0x4c>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dcbc:	68fa      	ldr	r2, [r7, #12]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	4413      	add	r3, r2
 800dcc2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d009      	beq.n	800dcde <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dcca:	2208      	movs	r2, #8
 800dccc:	4909      	ldr	r1, [pc, #36]	@ (800dcf4 <Get_SerialNum+0x50>)
 800dcce:	68f8      	ldr	r0, [r7, #12]
 800dcd0:	f000 f814 	bl	800dcfc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dcd4:	2204      	movs	r2, #4
 800dcd6:	4908      	ldr	r1, [pc, #32]	@ (800dcf8 <Get_SerialNum+0x54>)
 800dcd8:	68b8      	ldr	r0, [r7, #8]
 800dcda:	f000 f80f 	bl	800dcfc <IntToUnicode>
  }
}
 800dcde:	bf00      	nop
 800dce0:	3710      	adds	r7, #16
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	1ff1e800 	.word	0x1ff1e800
 800dcec:	1ff1e804 	.word	0x1ff1e804
 800dcf0:	1ff1e808 	.word	0x1ff1e808
 800dcf4:	240000ea 	.word	0x240000ea
 800dcf8:	240000fa 	.word	0x240000fa

0800dcfc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b087      	sub	sp, #28
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	60f8      	str	r0, [r7, #12]
 800dd04:	60b9      	str	r1, [r7, #8]
 800dd06:	4613      	mov	r3, r2
 800dd08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dd0e:	2300      	movs	r3, #0
 800dd10:	75fb      	strb	r3, [r7, #23]
 800dd12:	e027      	b.n	800dd64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	0f1b      	lsrs	r3, r3, #28
 800dd18:	2b09      	cmp	r3, #9
 800dd1a:	d80b      	bhi.n	800dd34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	0f1b      	lsrs	r3, r3, #28
 800dd20:	b2da      	uxtb	r2, r3
 800dd22:	7dfb      	ldrb	r3, [r7, #23]
 800dd24:	005b      	lsls	r3, r3, #1
 800dd26:	4619      	mov	r1, r3
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	440b      	add	r3, r1
 800dd2c:	3230      	adds	r2, #48	@ 0x30
 800dd2e:	b2d2      	uxtb	r2, r2
 800dd30:	701a      	strb	r2, [r3, #0]
 800dd32:	e00a      	b.n	800dd4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	0f1b      	lsrs	r3, r3, #28
 800dd38:	b2da      	uxtb	r2, r3
 800dd3a:	7dfb      	ldrb	r3, [r7, #23]
 800dd3c:	005b      	lsls	r3, r3, #1
 800dd3e:	4619      	mov	r1, r3
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	440b      	add	r3, r1
 800dd44:	3237      	adds	r2, #55	@ 0x37
 800dd46:	b2d2      	uxtb	r2, r2
 800dd48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	011b      	lsls	r3, r3, #4
 800dd4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dd50:	7dfb      	ldrb	r3, [r7, #23]
 800dd52:	005b      	lsls	r3, r3, #1
 800dd54:	3301      	adds	r3, #1
 800dd56:	68ba      	ldr	r2, [r7, #8]
 800dd58:	4413      	add	r3, r2
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dd5e:	7dfb      	ldrb	r3, [r7, #23]
 800dd60:	3301      	adds	r3, #1
 800dd62:	75fb      	strb	r3, [r7, #23]
 800dd64:	7dfa      	ldrb	r2, [r7, #23]
 800dd66:	79fb      	ldrb	r3, [r7, #7]
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d3d3      	bcc.n	800dd14 <IntToUnicode+0x18>
  }
}
 800dd6c:	bf00      	nop
 800dd6e:	bf00      	nop
 800dd70:	371c      	adds	r7, #28
 800dd72:	46bd      	mov	sp, r7
 800dd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd78:	4770      	bx	lr
	...

0800dd7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b0ba      	sub	sp, #232	@ 0xe8
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dd84:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800dd88:	2200      	movs	r2, #0
 800dd8a:	601a      	str	r2, [r3, #0]
 800dd8c:	605a      	str	r2, [r3, #4]
 800dd8e:	609a      	str	r2, [r3, #8]
 800dd90:	60da      	str	r2, [r3, #12]
 800dd92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800dd94:	f107 0310 	add.w	r3, r7, #16
 800dd98:	22c0      	movs	r2, #192	@ 0xc0
 800dd9a:	2100      	movs	r1, #0
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f000 fb25 	bl	800e3ec <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	4a2c      	ldr	r2, [pc, #176]	@ (800de58 <HAL_PCD_MspInit+0xdc>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d151      	bne.n	800de50 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ddac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800ddb0:	f04f 0300 	mov.w	r3, #0
 800ddb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ddb8:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800ddbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ddc0:	f107 0310 	add.w	r3, r7, #16
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7f9 f9f1 	bl	80071ac <HAL_RCCEx_PeriphCLKConfig>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d001      	beq.n	800ddd4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800ddd0:	f7f2 fce0 	bl	8000794 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800ddd4:	f7f8 fa0a 	bl	80061ec <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ddd8:	4b20      	ldr	r3, [pc, #128]	@ (800de5c <HAL_PCD_MspInit+0xe0>)
 800ddda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ddde:	4a1f      	ldr	r2, [pc, #124]	@ (800de5c <HAL_PCD_MspInit+0xe0>)
 800dde0:	f043 0301 	orr.w	r3, r3, #1
 800dde4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800dde8:	4b1c      	ldr	r3, [pc, #112]	@ (800de5c <HAL_PCD_MspInit+0xe0>)
 800ddea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ddee:	f003 0301 	and.w	r3, r3, #1
 800ddf2:	60fb      	str	r3, [r7, #12]
 800ddf4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ddf6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ddfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddfe:	2302      	movs	r3, #2
 800de00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de04:	2300      	movs	r3, #0
 800de06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800de0a:	2300      	movs	r3, #0
 800de0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800de10:	230a      	movs	r3, #10
 800de12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800de16:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800de1a:	4619      	mov	r1, r3
 800de1c:	4810      	ldr	r0, [pc, #64]	@ (800de60 <HAL_PCD_MspInit+0xe4>)
 800de1e:	f7f6 fd43 	bl	80048a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800de22:	4b0e      	ldr	r3, [pc, #56]	@ (800de5c <HAL_PCD_MspInit+0xe0>)
 800de24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800de28:	4a0c      	ldr	r2, [pc, #48]	@ (800de5c <HAL_PCD_MspInit+0xe0>)
 800de2a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800de2e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800de32:	4b0a      	ldr	r3, [pc, #40]	@ (800de5c <HAL_PCD_MspInit+0xe0>)
 800de34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800de38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800de3c:	60bb      	str	r3, [r7, #8]
 800de3e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800de40:	2200      	movs	r2, #0
 800de42:	2100      	movs	r1, #0
 800de44:	2065      	movs	r0, #101	@ 0x65
 800de46:	f7f4 fc22 	bl	800268e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800de4a:	2065      	movs	r0, #101	@ 0x65
 800de4c:	f7f4 fc39 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800de50:	bf00      	nop
 800de52:	37e8      	adds	r7, #232	@ 0xe8
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}
 800de58:	40080000 	.word	0x40080000
 800de5c:	58024400 	.word	0x58024400
 800de60:	58020000 	.word	0x58020000

0800de64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800de78:	4619      	mov	r1, r3
 800de7a:	4610      	mov	r0, r2
 800de7c:	f7fe fafd 	bl	800c47a <USBD_LL_SetupStage>
}
 800de80:	bf00      	nop
 800de82:	3708      	adds	r7, #8
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	460b      	mov	r3, r1
 800de92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800de9a:	78fa      	ldrb	r2, [r7, #3]
 800de9c:	6879      	ldr	r1, [r7, #4]
 800de9e:	4613      	mov	r3, r2
 800dea0:	00db      	lsls	r3, r3, #3
 800dea2:	4413      	add	r3, r2
 800dea4:	009b      	lsls	r3, r3, #2
 800dea6:	440b      	add	r3, r1
 800dea8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800deac:	681a      	ldr	r2, [r3, #0]
 800deae:	78fb      	ldrb	r3, [r7, #3]
 800deb0:	4619      	mov	r1, r3
 800deb2:	f7fe fb37 	bl	800c524 <USBD_LL_DataOutStage>
}
 800deb6:	bf00      	nop
 800deb8:	3708      	adds	r7, #8
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}

0800debe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800debe:	b580      	push	{r7, lr}
 800dec0:	b082      	sub	sp, #8
 800dec2:	af00      	add	r7, sp, #0
 800dec4:	6078      	str	r0, [r7, #4]
 800dec6:	460b      	mov	r3, r1
 800dec8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ded0:	78fa      	ldrb	r2, [r7, #3]
 800ded2:	6879      	ldr	r1, [r7, #4]
 800ded4:	4613      	mov	r3, r2
 800ded6:	00db      	lsls	r3, r3, #3
 800ded8:	4413      	add	r3, r2
 800deda:	009b      	lsls	r3, r3, #2
 800dedc:	440b      	add	r3, r1
 800dede:	3320      	adds	r3, #32
 800dee0:	681a      	ldr	r2, [r3, #0]
 800dee2:	78fb      	ldrb	r3, [r7, #3]
 800dee4:	4619      	mov	r1, r3
 800dee6:	f7fe fbd0 	bl	800c68a <USBD_LL_DataInStage>
}
 800deea:	bf00      	nop
 800deec:	3708      	adds	r7, #8
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}

0800def2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800def2:	b580      	push	{r7, lr}
 800def4:	b082      	sub	sp, #8
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800df00:	4618      	mov	r0, r3
 800df02:	f7fe fd0a 	bl	800c91a <USBD_LL_SOF>
}
 800df06:	bf00      	nop
 800df08:	3708      	adds	r7, #8
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df0e:	b580      	push	{r7, lr}
 800df10:	b084      	sub	sp, #16
 800df12:	af00      	add	r7, sp, #0
 800df14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800df16:	2301      	movs	r3, #1
 800df18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	79db      	ldrb	r3, [r3, #7]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d102      	bne.n	800df28 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800df22:	2300      	movs	r3, #0
 800df24:	73fb      	strb	r3, [r7, #15]
 800df26:	e008      	b.n	800df3a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	79db      	ldrb	r3, [r3, #7]
 800df2c:	2b02      	cmp	r3, #2
 800df2e:	d102      	bne.n	800df36 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800df30:	2301      	movs	r3, #1
 800df32:	73fb      	strb	r3, [r7, #15]
 800df34:	e001      	b.n	800df3a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800df36:	f7f2 fc2d 	bl	8000794 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800df40:	7bfa      	ldrb	r2, [r7, #15]
 800df42:	4611      	mov	r1, r2
 800df44:	4618      	mov	r0, r3
 800df46:	f7fe fca4 	bl	800c892 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800df50:	4618      	mov	r0, r3
 800df52:	f7fe fc4c 	bl	800c7ee <USBD_LL_Reset>
}
 800df56:	bf00      	nop
 800df58:	3710      	adds	r7, #16
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}
	...

0800df60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b082      	sub	sp, #8
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800df6e:	4618      	mov	r0, r3
 800df70:	f7fe fc9f 	bl	800c8b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	687a      	ldr	r2, [r7, #4]
 800df80:	6812      	ldr	r2, [r2, #0]
 800df82:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800df86:	f043 0301 	orr.w	r3, r3, #1
 800df8a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	7adb      	ldrb	r3, [r3, #11]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d005      	beq.n	800dfa0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800df94:	4b04      	ldr	r3, [pc, #16]	@ (800dfa8 <HAL_PCD_SuspendCallback+0x48>)
 800df96:	691b      	ldr	r3, [r3, #16]
 800df98:	4a03      	ldr	r2, [pc, #12]	@ (800dfa8 <HAL_PCD_SuspendCallback+0x48>)
 800df9a:	f043 0306 	orr.w	r3, r3, #6
 800df9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dfa0:	bf00      	nop
 800dfa2:	3708      	adds	r7, #8
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	e000ed00 	.word	0xe000ed00

0800dfac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7fe fc95 	bl	800c8ea <USBD_LL_Resume>
}
 800dfc0:	bf00      	nop
 800dfc2:	3708      	adds	r7, #8
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dfda:	78fa      	ldrb	r2, [r7, #3]
 800dfdc:	4611      	mov	r1, r2
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7fe fced 	bl	800c9be <USBD_LL_IsoOUTIncomplete>
}
 800dfe4:	bf00      	nop
 800dfe6:	3708      	adds	r7, #8
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b082      	sub	sp, #8
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	460b      	mov	r3, r1
 800dff6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dffe:	78fa      	ldrb	r2, [r7, #3]
 800e000:	4611      	mov	r1, r2
 800e002:	4618      	mov	r0, r3
 800e004:	f7fe fca9 	bl	800c95a <USBD_LL_IsoINIncomplete>
}
 800e008:	bf00      	nop
 800e00a:	3708      	adds	r7, #8
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e01e:	4618      	mov	r0, r3
 800e020:	f7fe fcff 	bl	800ca22 <USBD_LL_DevConnected>
}
 800e024:	bf00      	nop
 800e026:	3708      	adds	r7, #8
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b082      	sub	sp, #8
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e03a:	4618      	mov	r0, r3
 800e03c:	f7fe fcfc 	bl	800ca38 <USBD_LL_DevDisconnected>
}
 800e040:	bf00      	nop
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}

0800e048 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d13e      	bne.n	800e0d6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e058:	4a21      	ldr	r2, [pc, #132]	@ (800e0e0 <USBD_LL_Init+0x98>)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	4a1f      	ldr	r2, [pc, #124]	@ (800e0e0 <USBD_LL_Init+0x98>)
 800e064:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e068:	4b1d      	ldr	r3, [pc, #116]	@ (800e0e0 <USBD_LL_Init+0x98>)
 800e06a:	4a1e      	ldr	r2, [pc, #120]	@ (800e0e4 <USBD_LL_Init+0x9c>)
 800e06c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800e06e:	4b1c      	ldr	r3, [pc, #112]	@ (800e0e0 <USBD_LL_Init+0x98>)
 800e070:	2209      	movs	r2, #9
 800e072:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e074:	4b1a      	ldr	r3, [pc, #104]	@ (800e0e0 <USBD_LL_Init+0x98>)
 800e076:	2202      	movs	r2, #2
 800e078:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e07a:	4b19      	ldr	r3, [pc, #100]	@ (800e0e0 <USBD_LL_Init+0x98>)
 800e07c:	2200      	movs	r2, #0
 800e07e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e080:	4b17      	ldr	r3, [pc, #92]	@ (800e0e0 <USBD_LL_Init+0x98>)
 800e082:	2202      	movs	r2, #2
 800e084:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e086:	4b16      	ldr	r3, [pc, #88]	@ (800e0e0 <USBD_LL_Init+0x98>)
 800e088:	2200      	movs	r2, #0
 800e08a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e08c:	4b14      	ldr	r3, [pc, #80]	@ (800e0e0 <USBD_LL_Init+0x98>)
 800e08e:	2200      	movs	r2, #0
 800e090:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e092:	4b13      	ldr	r3, [pc, #76]	@ (800e0e0 <USBD_LL_Init+0x98>)
 800e094:	2200      	movs	r2, #0
 800e096:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800e098:	4b11      	ldr	r3, [pc, #68]	@ (800e0e0 <USBD_LL_Init+0x98>)
 800e09a:	2200      	movs	r2, #0
 800e09c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e09e:	4b10      	ldr	r3, [pc, #64]	@ (800e0e0 <USBD_LL_Init+0x98>)
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e0a4:	4b0e      	ldr	r3, [pc, #56]	@ (800e0e0 <USBD_LL_Init+0x98>)
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e0aa:	480d      	ldr	r0, [pc, #52]	@ (800e0e0 <USBD_LL_Init+0x98>)
 800e0ac:	f7f6 fdc5 	bl	8004c3a <HAL_PCD_Init>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d001      	beq.n	800e0ba <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800e0b6:	f7f2 fb6d 	bl	8000794 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e0ba:	2180      	movs	r1, #128	@ 0x80
 800e0bc:	4808      	ldr	r0, [pc, #32]	@ (800e0e0 <USBD_LL_Init+0x98>)
 800e0be:	f7f8 f81a 	bl	80060f6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e0c2:	2240      	movs	r2, #64	@ 0x40
 800e0c4:	2100      	movs	r1, #0
 800e0c6:	4806      	ldr	r0, [pc, #24]	@ (800e0e0 <USBD_LL_Init+0x98>)
 800e0c8:	f7f7 ffce 	bl	8006068 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e0cc:	2280      	movs	r2, #128	@ 0x80
 800e0ce:	2101      	movs	r1, #1
 800e0d0:	4803      	ldr	r0, [pc, #12]	@ (800e0e0 <USBD_LL_Init+0x98>)
 800e0d2:	f7f7 ffc9 	bl	8006068 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800e0d6:	2300      	movs	r3, #0
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3708      	adds	r7, #8
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}
 800e0e0:	2400272c 	.word	0x2400272c
 800e0e4:	40080000 	.word	0x40080000

0800e0e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b084      	sub	sp, #16
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7f6 fea7 	bl	8004e52 <HAL_PCD_Start>
 800e104:	4603      	mov	r3, r0
 800e106:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e108:	7bfb      	ldrb	r3, [r7, #15]
 800e10a:	4618      	mov	r0, r3
 800e10c:	f000 f942 	bl	800e394 <USBD_Get_USB_Status>
 800e110:	4603      	mov	r3, r0
 800e112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e114:	7bbb      	ldrb	r3, [r7, #14]
}
 800e116:	4618      	mov	r0, r3
 800e118:	3710      	adds	r7, #16
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}

0800e11e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e11e:	b580      	push	{r7, lr}
 800e120:	b084      	sub	sp, #16
 800e122:	af00      	add	r7, sp, #0
 800e124:	6078      	str	r0, [r7, #4]
 800e126:	4608      	mov	r0, r1
 800e128:	4611      	mov	r1, r2
 800e12a:	461a      	mov	r2, r3
 800e12c:	4603      	mov	r3, r0
 800e12e:	70fb      	strb	r3, [r7, #3]
 800e130:	460b      	mov	r3, r1
 800e132:	70bb      	strb	r3, [r7, #2]
 800e134:	4613      	mov	r3, r2
 800e136:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e138:	2300      	movs	r3, #0
 800e13a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e13c:	2300      	movs	r3, #0
 800e13e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e146:	78bb      	ldrb	r3, [r7, #2]
 800e148:	883a      	ldrh	r2, [r7, #0]
 800e14a:	78f9      	ldrb	r1, [r7, #3]
 800e14c:	f7f7 fba8 	bl	80058a0 <HAL_PCD_EP_Open>
 800e150:	4603      	mov	r3, r0
 800e152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e154:	7bfb      	ldrb	r3, [r7, #15]
 800e156:	4618      	mov	r0, r3
 800e158:	f000 f91c 	bl	800e394 <USBD_Get_USB_Status>
 800e15c:	4603      	mov	r3, r0
 800e15e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e160:	7bbb      	ldrb	r3, [r7, #14]
}
 800e162:	4618      	mov	r0, r3
 800e164:	3710      	adds	r7, #16
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}

0800e16a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e16a:	b580      	push	{r7, lr}
 800e16c:	b084      	sub	sp, #16
 800e16e:	af00      	add	r7, sp, #0
 800e170:	6078      	str	r0, [r7, #4]
 800e172:	460b      	mov	r3, r1
 800e174:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e176:	2300      	movs	r3, #0
 800e178:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e17a:	2300      	movs	r3, #0
 800e17c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e184:	78fa      	ldrb	r2, [r7, #3]
 800e186:	4611      	mov	r1, r2
 800e188:	4618      	mov	r0, r3
 800e18a:	f7f7 fbf1 	bl	8005970 <HAL_PCD_EP_Close>
 800e18e:	4603      	mov	r3, r0
 800e190:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e192:	7bfb      	ldrb	r3, [r7, #15]
 800e194:	4618      	mov	r0, r3
 800e196:	f000 f8fd 	bl	800e394 <USBD_Get_USB_Status>
 800e19a:	4603      	mov	r3, r0
 800e19c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e19e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3710      	adds	r7, #16
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e1c2:	78fa      	ldrb	r2, [r7, #3]
 800e1c4:	4611      	mov	r1, r2
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7f7 fca9 	bl	8005b1e <HAL_PCD_EP_SetStall>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1d0:	7bfb      	ldrb	r3, [r7, #15]
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f000 f8de 	bl	800e394 <USBD_Get_USB_Status>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}

0800e1e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1e6:	b580      	push	{r7, lr}
 800e1e8:	b084      	sub	sp, #16
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	6078      	str	r0, [r7, #4]
 800e1ee:	460b      	mov	r3, r1
 800e1f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e200:	78fa      	ldrb	r2, [r7, #3]
 800e202:	4611      	mov	r1, r2
 800e204:	4618      	mov	r0, r3
 800e206:	f7f7 fced 	bl	8005be4 <HAL_PCD_EP_ClrStall>
 800e20a:	4603      	mov	r3, r0
 800e20c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e20e:	7bfb      	ldrb	r3, [r7, #15]
 800e210:	4618      	mov	r0, r3
 800e212:	f000 f8bf 	bl	800e394 <USBD_Get_USB_Status>
 800e216:	4603      	mov	r3, r0
 800e218:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e21a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3710      	adds	r7, #16
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e224:	b480      	push	{r7}
 800e226:	b085      	sub	sp, #20
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	460b      	mov	r3, r1
 800e22e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e236:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	da0b      	bge.n	800e258 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e240:	78fb      	ldrb	r3, [r7, #3]
 800e242:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e246:	68f9      	ldr	r1, [r7, #12]
 800e248:	4613      	mov	r3, r2
 800e24a:	00db      	lsls	r3, r3, #3
 800e24c:	4413      	add	r3, r2
 800e24e:	009b      	lsls	r3, r3, #2
 800e250:	440b      	add	r3, r1
 800e252:	3316      	adds	r3, #22
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	e00b      	b.n	800e270 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e258:	78fb      	ldrb	r3, [r7, #3]
 800e25a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e25e:	68f9      	ldr	r1, [r7, #12]
 800e260:	4613      	mov	r3, r2
 800e262:	00db      	lsls	r3, r3, #3
 800e264:	4413      	add	r3, r2
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	440b      	add	r3, r1
 800e26a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e26e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e270:	4618      	mov	r0, r3
 800e272:	3714      	adds	r7, #20
 800e274:	46bd      	mov	sp, r7
 800e276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27a:	4770      	bx	lr

0800e27c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	460b      	mov	r3, r1
 800e286:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e288:	2300      	movs	r3, #0
 800e28a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e28c:	2300      	movs	r3, #0
 800e28e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e296:	78fa      	ldrb	r2, [r7, #3]
 800e298:	4611      	mov	r1, r2
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7f7 fadc 	bl	8005858 <HAL_PCD_SetAddress>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2a4:	7bfb      	ldrb	r3, [r7, #15]
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f000 f874 	bl	800e394 <USBD_Get_USB_Status>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3710      	adds	r7, #16
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}

0800e2ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e2ba:	b580      	push	{r7, lr}
 800e2bc:	b086      	sub	sp, #24
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	60f8      	str	r0, [r7, #12]
 800e2c2:	607a      	str	r2, [r7, #4]
 800e2c4:	603b      	str	r3, [r7, #0]
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e2d8:	7af9      	ldrb	r1, [r7, #11]
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	687a      	ldr	r2, [r7, #4]
 800e2de:	f7f7 fbe4 	bl	8005aaa <HAL_PCD_EP_Transmit>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2e6:	7dfb      	ldrb	r3, [r7, #23]
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f000 f853 	bl	800e394 <USBD_Get_USB_Status>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e2f2:	7dbb      	ldrb	r3, [r7, #22]
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3718      	adds	r7, #24
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}

0800e2fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b086      	sub	sp, #24
 800e300:	af00      	add	r7, sp, #0
 800e302:	60f8      	str	r0, [r7, #12]
 800e304:	607a      	str	r2, [r7, #4]
 800e306:	603b      	str	r3, [r7, #0]
 800e308:	460b      	mov	r3, r1
 800e30a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e30c:	2300      	movs	r3, #0
 800e30e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e310:	2300      	movs	r3, #0
 800e312:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e31a:	7af9      	ldrb	r1, [r7, #11]
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	f7f7 fb70 	bl	8005a04 <HAL_PCD_EP_Receive>
 800e324:	4603      	mov	r3, r0
 800e326:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e328:	7dfb      	ldrb	r3, [r7, #23]
 800e32a:	4618      	mov	r0, r3
 800e32c:	f000 f832 	bl	800e394 <USBD_Get_USB_Status>
 800e330:	4603      	mov	r3, r0
 800e332:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e334:	7dbb      	ldrb	r3, [r7, #22]
}
 800e336:	4618      	mov	r0, r3
 800e338:	3718      	adds	r7, #24
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}

0800e33e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e33e:	b580      	push	{r7, lr}
 800e340:	b082      	sub	sp, #8
 800e342:	af00      	add	r7, sp, #0
 800e344:	6078      	str	r0, [r7, #4]
 800e346:	460b      	mov	r3, r1
 800e348:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e350:	78fa      	ldrb	r2, [r7, #3]
 800e352:	4611      	mov	r1, r2
 800e354:	4618      	mov	r0, r3
 800e356:	f7f7 fb90 	bl	8005a7a <HAL_PCD_EP_GetRxCount>
 800e35a:	4603      	mov	r3, r0
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3708      	adds	r7, #8
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e364:	b480      	push	{r7}
 800e366:	b083      	sub	sp, #12
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e36c:	4b03      	ldr	r3, [pc, #12]	@ (800e37c <USBD_static_malloc+0x18>)
}
 800e36e:	4618      	mov	r0, r3
 800e370:	370c      	adds	r7, #12
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr
 800e37a:	bf00      	nop
 800e37c:	24002c10 	.word	0x24002c10

0800e380 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e380:	b480      	push	{r7}
 800e382:	b083      	sub	sp, #12
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800e388:	bf00      	nop
 800e38a:	370c      	adds	r7, #12
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr

0800e394 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e394:	b480      	push	{r7}
 800e396:	b085      	sub	sp, #20
 800e398:	af00      	add	r7, sp, #0
 800e39a:	4603      	mov	r3, r0
 800e39c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e3a2:	79fb      	ldrb	r3, [r7, #7]
 800e3a4:	2b03      	cmp	r3, #3
 800e3a6:	d817      	bhi.n	800e3d8 <USBD_Get_USB_Status+0x44>
 800e3a8:	a201      	add	r2, pc, #4	@ (adr r2, 800e3b0 <USBD_Get_USB_Status+0x1c>)
 800e3aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ae:	bf00      	nop
 800e3b0:	0800e3c1 	.word	0x0800e3c1
 800e3b4:	0800e3c7 	.word	0x0800e3c7
 800e3b8:	0800e3cd 	.word	0x0800e3cd
 800e3bc:	0800e3d3 	.word	0x0800e3d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	73fb      	strb	r3, [r7, #15]
    break;
 800e3c4:	e00b      	b.n	800e3de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e3c6:	2303      	movs	r3, #3
 800e3c8:	73fb      	strb	r3, [r7, #15]
    break;
 800e3ca:	e008      	b.n	800e3de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	73fb      	strb	r3, [r7, #15]
    break;
 800e3d0:	e005      	b.n	800e3de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e3d2:	2303      	movs	r3, #3
 800e3d4:	73fb      	strb	r3, [r7, #15]
    break;
 800e3d6:	e002      	b.n	800e3de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e3d8:	2303      	movs	r3, #3
 800e3da:	73fb      	strb	r3, [r7, #15]
    break;
 800e3dc:	bf00      	nop
  }
  return usb_status;
 800e3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3714      	adds	r7, #20
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ea:	4770      	bx	lr

0800e3ec <memset>:
 800e3ec:	4402      	add	r2, r0
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	d100      	bne.n	800e3f6 <memset+0xa>
 800e3f4:	4770      	bx	lr
 800e3f6:	f803 1b01 	strb.w	r1, [r3], #1
 800e3fa:	e7f9      	b.n	800e3f0 <memset+0x4>

0800e3fc <__libc_init_array>:
 800e3fc:	b570      	push	{r4, r5, r6, lr}
 800e3fe:	4d0d      	ldr	r5, [pc, #52]	@ (800e434 <__libc_init_array+0x38>)
 800e400:	4c0d      	ldr	r4, [pc, #52]	@ (800e438 <__libc_init_array+0x3c>)
 800e402:	1b64      	subs	r4, r4, r5
 800e404:	10a4      	asrs	r4, r4, #2
 800e406:	2600      	movs	r6, #0
 800e408:	42a6      	cmp	r6, r4
 800e40a:	d109      	bne.n	800e420 <__libc_init_array+0x24>
 800e40c:	4d0b      	ldr	r5, [pc, #44]	@ (800e43c <__libc_init_array+0x40>)
 800e40e:	4c0c      	ldr	r4, [pc, #48]	@ (800e440 <__libc_init_array+0x44>)
 800e410:	f000 f818 	bl	800e444 <_init>
 800e414:	1b64      	subs	r4, r4, r5
 800e416:	10a4      	asrs	r4, r4, #2
 800e418:	2600      	movs	r6, #0
 800e41a:	42a6      	cmp	r6, r4
 800e41c:	d105      	bne.n	800e42a <__libc_init_array+0x2e>
 800e41e:	bd70      	pop	{r4, r5, r6, pc}
 800e420:	f855 3b04 	ldr.w	r3, [r5], #4
 800e424:	4798      	blx	r3
 800e426:	3601      	adds	r6, #1
 800e428:	e7ee      	b.n	800e408 <__libc_init_array+0xc>
 800e42a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e42e:	4798      	blx	r3
 800e430:	3601      	adds	r6, #1
 800e432:	e7f2      	b.n	800e41a <__libc_init_array+0x1e>
 800e434:	0800e4bc 	.word	0x0800e4bc
 800e438:	0800e4bc 	.word	0x0800e4bc
 800e43c:	0800e4bc 	.word	0x0800e4bc
 800e440:	0800e4c0 	.word	0x0800e4c0

0800e444 <_init>:
 800e444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e446:	bf00      	nop
 800e448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e44a:	bc08      	pop	{r3}
 800e44c:	469e      	mov	lr, r3
 800e44e:	4770      	bx	lr

0800e450 <_fini>:
 800e450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e452:	bf00      	nop
 800e454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e456:	bc08      	pop	{r3}
 800e458:	469e      	mov	lr, r3
 800e45a:	4770      	bx	lr
