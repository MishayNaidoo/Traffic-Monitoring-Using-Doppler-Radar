
STM32H7_ADC_CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df6c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800e204  0800e204  0000f204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800e264  0800e264  0000f264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800e268  0800e268  0000f268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000104  24000000  0800e26c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000044fc  24000104  0800e370  00010104  2**2
                  ALLOC
  7 ._user_heap_stack 00000c00  24004600  0800e370  00010600  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00010104  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001e2fe  00000000  00000000  00010132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004034  00000000  00000000  0002e430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000018c0  00000000  00000000  00032468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000012f5  00000000  00000000  00033d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003bd62  00000000  00000000  0003501d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002164c  00000000  00000000  00070d7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00176184  00000000  00000000  000923cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0020854f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000698c  00000000  00000000  00208594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000086  00000000  00000000  0020ef20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000104 	.word	0x24000104
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800e1ec 	.word	0x0800e1ec

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000108 	.word	0x24000108
 80002d4:	0800e1ec 	.word	0x0800e1ec

080002d8 <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
	CDC_Transmit_FS((uint8_t*)&dmaBuffer[DMABUFLEN/2], DMABUFLEN);
 80002e0:	f241 31e8 	movw	r1, #5096	@ 0x13e8
 80002e4:	4803      	ldr	r0, [pc, #12]	@ (80002f4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80002e6:	f00d fad5 	bl	800d894 <CDC_Transmit_FS>
//	HAL_ADC_Stop_DMA(&hadc1);
//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) dmaBuffer, DMABUFLEN);
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	24001630 	.word	0x24001630

080002f8 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
	CDC_Transmit_FS((uint8_t*)&dmaBuffer[0], DMABUFLEN);
 8000300:	f241 31e8 	movw	r1, #5096	@ 0x13e8
 8000304:	4803      	ldr	r0, [pc, #12]	@ (8000314 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8000306:	f00d fac5 	bl	800d894 <CDC_Transmit_FS>
}
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	24000248 	.word	0x24000248

08000318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800031c:	f000 fc0c 	bl	8000b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000320:	f000 f81c 	bl	800035c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000324:	f000 f9c6 	bl	80006b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000328:	f000 f9a4 	bl	8000674 <MX_DMA_Init>
  MX_ADC1_Init();
 800032c:	f000 f8c8 	bl	80004c0 <MX_ADC1_Init>
  MX_TIM8_Init();
 8000330:	f000 f94c 	bl	80005cc <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 8000334:	f00d f9ee 	bl	800d714 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)dmaBuffer, DMABUFLEN);
 8000338:	f241 32e8 	movw	r2, #5096	@ 0x13e8
 800033c:	4904      	ldr	r1, [pc, #16]	@ (8000350 <main+0x38>)
 800033e:	4805      	ldr	r0, [pc, #20]	@ (8000354 <main+0x3c>)
 8000340:	f001 f846 	bl	80013d0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim8);
 8000344:	4804      	ldr	r0, [pc, #16]	@ (8000358 <main+0x40>)
 8000346:	f009 fb5b 	bl	8009a00 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800034a:	bf00      	nop
 800034c:	e7fd      	b.n	800034a <main+0x32>
 800034e:	bf00      	nop
 8000350:	24000248 	.word	0x24000248
 8000354:	24000120 	.word	0x24000120
 8000358:	240001fc 	.word	0x240001fc

0800035c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b09e      	sub	sp, #120	@ 0x78
 8000360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000362:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000366:	224c      	movs	r2, #76	@ 0x4c
 8000368:	2100      	movs	r1, #0
 800036a:	4618      	mov	r0, r3
 800036c:	f00d ff12 	bl	800e194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000370:	f107 030c 	add.w	r3, r7, #12
 8000374:	2220      	movs	r2, #32
 8000376:	2100      	movs	r1, #0
 8000378:	4618      	mov	r0, r3
 800037a:	f00d ff0b 	bl	800e194 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800037e:	2002      	movs	r0, #2
 8000380:	f005 fdce 	bl	8005f20 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000384:	2300      	movs	r3, #0
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	4b4a      	ldr	r3, [pc, #296]	@ (80004b4 <SystemClock_Config+0x158>)
 800038a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800038c:	4a49      	ldr	r2, [pc, #292]	@ (80004b4 <SystemClock_Config+0x158>)
 800038e:	f023 0301 	bic.w	r3, r3, #1
 8000392:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000394:	4b47      	ldr	r3, [pc, #284]	@ (80004b4 <SystemClock_Config+0x158>)
 8000396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000398:	f003 0301 	and.w	r3, r3, #1
 800039c:	60bb      	str	r3, [r7, #8]
 800039e:	4b46      	ldr	r3, [pc, #280]	@ (80004b8 <SystemClock_Config+0x15c>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	4a45      	ldr	r2, [pc, #276]	@ (80004b8 <SystemClock_Config+0x15c>)
 80003a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80003a8:	6193      	str	r3, [r2, #24]
 80003aa:	4b43      	ldr	r3, [pc, #268]	@ (80004b8 <SystemClock_Config+0x15c>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80003b2:	60bb      	str	r3, [r7, #8]
 80003b4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003b6:	bf00      	nop
 80003b8:	4b3f      	ldr	r3, [pc, #252]	@ (80004b8 <SystemClock_Config+0x15c>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80003c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80003c4:	d1f8      	bne.n	80003b8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003c6:	4b3d      	ldr	r3, [pc, #244]	@ (80004bc <SystemClock_Config+0x160>)
 80003c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80003cc:	4a3b      	ldr	r2, [pc, #236]	@ (80004bc <SystemClock_Config+0x160>)
 80003ce:	f043 0302 	orr.w	r3, r3, #2
 80003d2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80003d6:	4b39      	ldr	r3, [pc, #228]	@ (80004bc <SystemClock_Config+0x160>)
 80003d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80003dc:	f003 0302 	and.w	r3, r3, #2
 80003e0:	607b      	str	r3, [r7, #4]
 80003e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003e4:	2300      	movs	r3, #0
 80003e6:	603b      	str	r3, [r7, #0]
 80003e8:	4b33      	ldr	r3, [pc, #204]	@ (80004b8 <SystemClock_Config+0x15c>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a32      	ldr	r2, [pc, #200]	@ (80004b8 <SystemClock_Config+0x15c>)
 80003ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b30      	ldr	r3, [pc, #192]	@ (80004b8 <SystemClock_Config+0x15c>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80003fc:	603b      	str	r3, [r7, #0]
 80003fe:	4b2d      	ldr	r3, [pc, #180]	@ (80004b4 <SystemClock_Config+0x158>)
 8000400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000402:	4a2c      	ldr	r2, [pc, #176]	@ (80004b4 <SystemClock_Config+0x158>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800040a:	4b2a      	ldr	r3, [pc, #168]	@ (80004b4 <SystemClock_Config+0x158>)
 800040c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	603b      	str	r3, [r7, #0]
 8000414:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000416:	bf00      	nop
 8000418:	4b27      	ldr	r3, [pc, #156]	@ (80004b8 <SystemClock_Config+0x15c>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000420:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000424:	d1f8      	bne.n	8000418 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000426:	2322      	movs	r3, #34	@ 0x22
 8000428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800042a:	2301      	movs	r3, #1
 800042c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800042e:	2340      	movs	r3, #64	@ 0x40
 8000430:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000432:	2301      	movs	r3, #1
 8000434:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000436:	2302      	movs	r3, #2
 8000438:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800043a:	2300      	movs	r3, #0
 800043c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800043e:	2304      	movs	r3, #4
 8000440:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000442:	233c      	movs	r3, #60	@ 0x3c
 8000444:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000446:	2302      	movs	r3, #2
 8000448:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800044a:	2302      	movs	r3, #2
 800044c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800044e:	2302      	movs	r3, #2
 8000450:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000452:	230c      	movs	r3, #12
 8000454:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000456:	2300      	movs	r3, #0
 8000458:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800045a:	2300      	movs	r3, #0
 800045c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000462:	4618      	mov	r0, r3
 8000464:	f005 fda6 	bl	8005fb4 <HAL_RCC_OscConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x116>
  {
    Error_Handler();
 800046e:	f000 f983 	bl	8000778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000472:	233f      	movs	r3, #63	@ 0x3f
 8000474:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000476:	2303      	movs	r3, #3
 8000478:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800047e:	2308      	movs	r3, #8
 8000480:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000482:	2340      	movs	r3, #64	@ 0x40
 8000484:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000486:	2340      	movs	r3, #64	@ 0x40
 8000488:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800048a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800048e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000490:	2340      	movs	r3, #64	@ 0x40
 8000492:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000494:	f107 030c 	add.w	r3, r7, #12
 8000498:	2104      	movs	r1, #4
 800049a:	4618      	mov	r0, r3
 800049c:	f006 f9e4 	bl	8006868 <HAL_RCC_ClockConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x14e>
  {
    Error_Handler();
 80004a6:	f000 f967 	bl	8000778 <Error_Handler>
  }
}
 80004aa:	bf00      	nop
 80004ac:	3778      	adds	r7, #120	@ 0x78
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	58000400 	.word	0x58000400
 80004b8:	58024800 	.word	0x58024800
 80004bc:	58024400 	.word	0x58024400

080004c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	@ 0x28
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004c6:	f107 031c 	add.w	r3, r7, #28
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004d2:	463b      	mov	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
 80004de:	611a      	str	r2, [r3, #16]
 80004e0:	615a      	str	r2, [r3, #20]
 80004e2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004e4:	4b36      	ldr	r3, [pc, #216]	@ (80005c0 <MX_ADC1_Init+0x100>)
 80004e6:	4a37      	ldr	r2, [pc, #220]	@ (80005c4 <MX_ADC1_Init+0x104>)
 80004e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ea:	4b35      	ldr	r3, [pc, #212]	@ (80005c0 <MX_ADC1_Init+0x100>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004f0:	4b33      	ldr	r3, [pc, #204]	@ (80005c0 <MX_ADC1_Init+0x100>)
 80004f2:	2204      	movs	r2, #4
 80004f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004f6:	4b32      	ldr	r3, [pc, #200]	@ (80005c0 <MX_ADC1_Init+0x100>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004fc:	4b30      	ldr	r3, [pc, #192]	@ (80005c0 <MX_ADC1_Init+0x100>)
 80004fe:	2200      	movs	r2, #0
 8000500:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000502:	4b2f      	ldr	r3, [pc, #188]	@ (80005c0 <MX_ADC1_Init+0x100>)
 8000504:	2201      	movs	r2, #1
 8000506:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000508:	4b2d      	ldr	r3, [pc, #180]	@ (80005c0 <MX_ADC1_Init+0x100>)
 800050a:	2200      	movs	r2, #0
 800050c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 800050e:	4b2c      	ldr	r3, [pc, #176]	@ (80005c0 <MX_ADC1_Init+0x100>)
 8000510:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8000514:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000516:	4b2a      	ldr	r3, [pc, #168]	@ (80005c0 <MX_ADC1_Init+0x100>)
 8000518:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800051c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800051e:	4b28      	ldr	r3, [pc, #160]	@ (80005c0 <MX_ADC1_Init+0x100>)
 8000520:	2203      	movs	r2, #3
 8000522:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000524:	4b26      	ldr	r3, [pc, #152]	@ (80005c0 <MX_ADC1_Init+0x100>)
 8000526:	2200      	movs	r2, #0
 8000528:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800052a:	4b25      	ldr	r3, [pc, #148]	@ (80005c0 <MX_ADC1_Init+0x100>)
 800052c:	2200      	movs	r2, #0
 800052e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000530:	4b23      	ldr	r3, [pc, #140]	@ (80005c0 <MX_ADC1_Init+0x100>)
 8000532:	2200      	movs	r2, #0
 8000534:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000538:	4b21      	ldr	r3, [pc, #132]	@ (80005c0 <MX_ADC1_Init+0x100>)
 800053a:	2201      	movs	r2, #1
 800053c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800053e:	4820      	ldr	r0, [pc, #128]	@ (80005c0 <MX_ADC1_Init+0x100>)
 8000540:	f000 fda4 	bl	800108c <HAL_ADC_Init>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800054a:	f000 f915 	bl	8000778 <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800054e:	4b1c      	ldr	r3, [pc, #112]	@ (80005c0 <MX_ADC1_Init+0x100>)
 8000550:	2200      	movs	r2, #0
 8000552:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000554:	4b1a      	ldr	r3, [pc, #104]	@ (80005c0 <MX_ADC1_Init+0x100>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800055a:	4819      	ldr	r0, [pc, #100]	@ (80005c0 <MX_ADC1_Init+0x100>)
 800055c:	f000 fd96 	bl	800108c <HAL_ADC_Init>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000566:	f000 f907 	bl	8000778 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800056a:	2300      	movs	r3, #0
 800056c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	4619      	mov	r1, r3
 8000574:	4812      	ldr	r0, [pc, #72]	@ (80005c0 <MX_ADC1_Init+0x100>)
 8000576:	f001 fda5 	bl	80020c4 <HAL_ADCEx_MultiModeConfigChannel>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000580:	f000 f8fa 	bl	8000778 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000584:	4b10      	ldr	r3, [pc, #64]	@ (80005c8 <MX_ADC1_Init+0x108>)
 8000586:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000588:	2306      	movs	r3, #6
 800058a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000590:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000594:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000596:	2304      	movs	r3, #4
 8000598:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800059e:	2300      	movs	r3, #0
 80005a0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a2:	463b      	mov	r3, r7
 80005a4:	4619      	mov	r1, r3
 80005a6:	4806      	ldr	r0, [pc, #24]	@ (80005c0 <MX_ADC1_Init+0x100>)
 80005a8:	f000 ffe0 	bl	800156c <HAL_ADC_ConfigChannel>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80005b2:	f000 f8e1 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005b6:	bf00      	nop
 80005b8:	3728      	adds	r7, #40	@ 0x28
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	24000120 	.word	0x24000120
 80005c4:	40022000 	.word	0x40022000
 80005c8:	0c900008 	.word	0x0c900008

080005cc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80005ea:	4b20      	ldr	r3, [pc, #128]	@ (800066c <MX_TIM8_Init+0xa0>)
 80005ec:	4a20      	ldr	r2, [pc, #128]	@ (8000670 <MX_TIM8_Init+0xa4>)
 80005ee:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 80005f0:	4b1e      	ldr	r3, [pc, #120]	@ (800066c <MX_TIM8_Init+0xa0>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f6:	4b1d      	ldr	r3, [pc, #116]	@ (800066c <MX_TIM8_Init+0xa0>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2500-1;
 80005fc:	4b1b      	ldr	r3, [pc, #108]	@ (800066c <MX_TIM8_Init+0xa0>)
 80005fe:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8000602:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000604:	4b19      	ldr	r3, [pc, #100]	@ (800066c <MX_TIM8_Init+0xa0>)
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800060a:	4b18      	ldr	r3, [pc, #96]	@ (800066c <MX_TIM8_Init+0xa0>)
 800060c:	2200      	movs	r2, #0
 800060e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000610:	4b16      	ldr	r3, [pc, #88]	@ (800066c <MX_TIM8_Init+0xa0>)
 8000612:	2200      	movs	r2, #0
 8000614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000616:	4815      	ldr	r0, [pc, #84]	@ (800066c <MX_TIM8_Init+0xa0>)
 8000618:	f009 f99a 	bl	8009950 <HAL_TIM_Base_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8000622:	f000 f8a9 	bl	8000778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000626:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800062a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	4619      	mov	r1, r3
 8000632:	480e      	ldr	r0, [pc, #56]	@ (800066c <MX_TIM8_Init+0xa0>)
 8000634:	f009 fa54 	bl	8009ae0 <HAL_TIM_ConfigClockSource>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800063e:	f000 f89b 	bl	8000778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000642:	2320      	movs	r3, #32
 8000644:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	4619      	mov	r1, r3
 8000652:	4806      	ldr	r0, [pc, #24]	@ (800066c <MX_TIM8_Init+0xa0>)
 8000654:	f009 fc80 	bl	8009f58 <HAL_TIMEx_MasterConfigSynchronization>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800065e:	f000 f88b 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	3720      	adds	r7, #32
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	240001fc 	.word	0x240001fc
 8000670:	40010400 	.word	0x40010400

08000674 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800067a:	4b0d      	ldr	r3, [pc, #52]	@ (80006b0 <MX_DMA_Init+0x3c>)
 800067c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000680:	4a0b      	ldr	r2, [pc, #44]	@ (80006b0 <MX_DMA_Init+0x3c>)
 8000682:	f043 0301 	orr.w	r3, r3, #1
 8000686:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800068a:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <MX_DMA_Init+0x3c>)
 800068c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000698:	2200      	movs	r2, #0
 800069a:	2100      	movs	r1, #0
 800069c:	200b      	movs	r0, #11
 800069e:	f001 feca 	bl	8002436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006a2:	200b      	movs	r0, #11
 80006a4:	f001 fee1 	bl	800246a <HAL_NVIC_EnableIRQ>

}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	58024400 	.word	0x58024400

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	@ 0x28
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ca:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <MX_GPIO_Init+0xbc>)
 80006cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d0:	4a27      	ldr	r2, [pc, #156]	@ (8000770 <MX_GPIO_Init+0xbc>)
 80006d2:	f043 0310 	orr.w	r3, r3, #16
 80006d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006da:	4b25      	ldr	r3, [pc, #148]	@ (8000770 <MX_GPIO_Init+0xbc>)
 80006dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e0:	f003 0310 	and.w	r3, r3, #16
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e8:	4b21      	ldr	r3, [pc, #132]	@ (8000770 <MX_GPIO_Init+0xbc>)
 80006ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ee:	4a20      	ldr	r2, [pc, #128]	@ (8000770 <MX_GPIO_Init+0xbc>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000770 <MX_GPIO_Init+0xbc>)
 80006fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000706:	4b1a      	ldr	r3, [pc, #104]	@ (8000770 <MX_GPIO_Init+0xbc>)
 8000708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800070c:	4a18      	ldr	r2, [pc, #96]	@ (8000770 <MX_GPIO_Init+0xbc>)
 800070e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000712:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000716:	4b16      	ldr	r3, [pc, #88]	@ (8000770 <MX_GPIO_Init+0xbc>)
 8000718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800071c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <MX_GPIO_Init+0xbc>)
 8000726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800072a:	4a11      	ldr	r2, [pc, #68]	@ (8000770 <MX_GPIO_Init+0xbc>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_GPIO_Init+0xbc>)
 8000736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2104      	movs	r1, #4
 8000746:	480b      	ldr	r0, [pc, #44]	@ (8000774 <MX_GPIO_Init+0xc0>)
 8000748:	f004 f932 	bl	80049b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 800074c:	2304      	movs	r3, #4
 800074e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4619      	mov	r1, r3
 8000762:	4804      	ldr	r0, [pc, #16]	@ (8000774 <MX_GPIO_Init+0xc0>)
 8000764:	f003 ff74 	bl	8004650 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	@ 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	58024400 	.word	0x58024400
 8000774:	58021000 	.word	0x58021000

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <Error_Handler+0x8>

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <HAL_MspInit+0x30>)
 800078c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000790:	4a08      	ldr	r2, [pc, #32]	@ (80007b4 <HAL_MspInit+0x30>)
 8000792:	f043 0302 	orr.w	r3, r3, #2
 8000796:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <HAL_MspInit+0x30>)
 800079c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007a0:	f003 0302 	and.w	r3, r3, #2
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	58024400 	.word	0x58024400

080007b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b0ba      	sub	sp, #232	@ 0xe8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	22c0      	movs	r2, #192	@ 0xc0
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f00d fcdb 	bl	800e194 <memset>
  if(hadc->Instance==ADC1)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a44      	ldr	r2, [pc, #272]	@ (80008f4 <HAL_ADC_MspInit+0x13c>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	f040 8081 	bne.w	80008ec <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007ea:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80007ee:	f04f 0300 	mov.w	r3, #0
 80007f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80007f6:	2304      	movs	r3, #4
 80007f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 80007fa:	230a      	movs	r3, #10
 80007fc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80007fe:	2302      	movs	r3, #2
 8000800:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000802:	2302      	movs	r3, #2
 8000804:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000806:	2302      	movs	r3, #2
 8000808:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800080a:	23c0      	movs	r3, #192	@ 0xc0
 800080c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800080e:	2320      	movs	r3, #32
 8000810:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000816:	2300      	movs	r3, #0
 8000818:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	4618      	mov	r0, r3
 8000822:	f006 fb97 	bl	8006f54 <HAL_RCCEx_PeriphCLKConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 800082c:	f7ff ffa4 	bl	8000778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000830:	4b31      	ldr	r3, [pc, #196]	@ (80008f8 <HAL_ADC_MspInit+0x140>)
 8000832:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000836:	4a30      	ldr	r2, [pc, #192]	@ (80008f8 <HAL_ADC_MspInit+0x140>)
 8000838:	f043 0320 	orr.w	r3, r3, #32
 800083c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000840:	4b2d      	ldr	r3, [pc, #180]	@ (80008f8 <HAL_ADC_MspInit+0x140>)
 8000842:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000846:	f003 0320 	and.w	r3, r3, #32
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b2a      	ldr	r3, [pc, #168]	@ (80008f8 <HAL_ADC_MspInit+0x140>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000854:	4a28      	ldr	r2, [pc, #160]	@ (80008f8 <HAL_ADC_MspInit+0x140>)
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800085e:	4b26      	ldr	r3, [pc, #152]	@ (80008f8 <HAL_ADC_MspInit+0x140>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800086c:	2340      	movs	r3, #64	@ 0x40
 800086e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000872:	2303      	movs	r3, #3
 8000874:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000882:	4619      	mov	r1, r3
 8000884:	481d      	ldr	r0, [pc, #116]	@ (80008fc <HAL_ADC_MspInit+0x144>)
 8000886:	f003 fee3 	bl	8004650 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800088a:	4b1d      	ldr	r3, [pc, #116]	@ (8000900 <HAL_ADC_MspInit+0x148>)
 800088c:	4a1d      	ldr	r2, [pc, #116]	@ (8000904 <HAL_ADC_MspInit+0x14c>)
 800088e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000890:	4b1b      	ldr	r3, [pc, #108]	@ (8000900 <HAL_ADC_MspInit+0x148>)
 8000892:	2209      	movs	r2, #9
 8000894:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000896:	4b1a      	ldr	r3, [pc, #104]	@ (8000900 <HAL_ADC_MspInit+0x148>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800089c:	4b18      	ldr	r3, [pc, #96]	@ (8000900 <HAL_ADC_MspInit+0x148>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008a2:	4b17      	ldr	r3, [pc, #92]	@ (8000900 <HAL_ADC_MspInit+0x148>)
 80008a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008aa:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <HAL_ADC_MspInit+0x148>)
 80008ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008b2:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <HAL_ADC_MspInit+0x148>)
 80008b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008ba:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <HAL_ADC_MspInit+0x148>)
 80008bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008c0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80008c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <HAL_ADC_MspInit+0x148>)
 80008c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80008c8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000900 <HAL_ADC_MspInit+0x148>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008d0:	480b      	ldr	r0, [pc, #44]	@ (8000900 <HAL_ADC_MspInit+0x148>)
 80008d2:	f001 fde5 	bl	80024a0 <HAL_DMA_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 80008dc:	f7ff ff4c 	bl	8000778 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a07      	ldr	r2, [pc, #28]	@ (8000900 <HAL_ADC_MspInit+0x148>)
 80008e4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80008e6:	4a06      	ldr	r2, [pc, #24]	@ (8000900 <HAL_ADC_MspInit+0x148>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80008ec:	bf00      	nop
 80008ee:	37e8      	adds	r7, #232	@ 0xe8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40022000 	.word	0x40022000
 80008f8:	58024400 	.word	0x58024400
 80008fc:	58020000 	.word	0x58020000
 8000900:	24000184 	.word	0x24000184
 8000904:	40020010 	.word	0x40020010

08000908 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a0b      	ldr	r2, [pc, #44]	@ (8000944 <HAL_TIM_Base_MspInit+0x3c>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d10e      	bne.n	8000938 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <HAL_TIM_Base_MspInit+0x40>)
 800091c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000920:	4a09      	ldr	r2, [pc, #36]	@ (8000948 <HAL_TIM_Base_MspInit+0x40>)
 8000922:	f043 0302 	orr.w	r3, r3, #2
 8000926:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800092a:	4b07      	ldr	r3, [pc, #28]	@ (8000948 <HAL_TIM_Base_MspInit+0x40>)
 800092c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000930:	f003 0302 	and.w	r3, r3, #2
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	40010400 	.word	0x40010400
 8000948:	58024400 	.word	0x58024400

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <NMI_Handler+0x4>

08000954 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <MemManage_Handler+0x4>

08000964 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <UsageFault_Handler+0x4>

08000974 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a2:	f000 f93b 	bl	8000c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009b0:	4802      	ldr	r0, [pc, #8]	@ (80009bc <DMA1_Stream0_IRQHandler+0x10>)
 80009b2:	f002 fb3b 	bl	800302c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	24000184 	.word	0x24000184

080009c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009c4:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <OTG_FS_IRQHandler+0x10>)
 80009c6:	f004 f94d 	bl	8004c64 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	24003efc 	.word	0x24003efc

080009d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009d8:	4b37      	ldr	r3, [pc, #220]	@ (8000ab8 <SystemInit+0xe4>)
 80009da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009de:	4a36      	ldr	r2, [pc, #216]	@ (8000ab8 <SystemInit+0xe4>)
 80009e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009e8:	4b34      	ldr	r3, [pc, #208]	@ (8000abc <SystemInit+0xe8>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f003 030f 	and.w	r3, r3, #15
 80009f0:	2b06      	cmp	r3, #6
 80009f2:	d807      	bhi.n	8000a04 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009f4:	4b31      	ldr	r3, [pc, #196]	@ (8000abc <SystemInit+0xe8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f023 030f 	bic.w	r3, r3, #15
 80009fc:	4a2f      	ldr	r2, [pc, #188]	@ (8000abc <SystemInit+0xe8>)
 80009fe:	f043 0307 	orr.w	r3, r3, #7
 8000a02:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a04:	4b2e      	ldr	r3, [pc, #184]	@ (8000ac0 <SystemInit+0xec>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a2d      	ldr	r2, [pc, #180]	@ (8000ac0 <SystemInit+0xec>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a10:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac0 <SystemInit+0xec>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a16:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac0 <SystemInit+0xec>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	4929      	ldr	r1, [pc, #164]	@ (8000ac0 <SystemInit+0xec>)
 8000a1c:	4b29      	ldr	r3, [pc, #164]	@ (8000ac4 <SystemInit+0xf0>)
 8000a1e:	4013      	ands	r3, r2
 8000a20:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a22:	4b26      	ldr	r3, [pc, #152]	@ (8000abc <SystemInit+0xe8>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f003 0308 	and.w	r3, r3, #8
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d007      	beq.n	8000a3e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a2e:	4b23      	ldr	r3, [pc, #140]	@ (8000abc <SystemInit+0xe8>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f023 030f 	bic.w	r3, r3, #15
 8000a36:	4a21      	ldr	r2, [pc, #132]	@ (8000abc <SystemInit+0xe8>)
 8000a38:	f043 0307 	orr.w	r3, r3, #7
 8000a3c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a3e:	4b20      	ldr	r3, [pc, #128]	@ (8000ac0 <SystemInit+0xec>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a44:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac0 <SystemInit+0xec>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac0 <SystemInit+0xec>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <SystemInit+0xec>)
 8000a52:	4a1d      	ldr	r2, [pc, #116]	@ (8000ac8 <SystemInit+0xf4>)
 8000a54:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <SystemInit+0xec>)
 8000a58:	4a1c      	ldr	r2, [pc, #112]	@ (8000acc <SystemInit+0xf8>)
 8000a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a5c:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <SystemInit+0xec>)
 8000a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ad0 <SystemInit+0xfc>)
 8000a60:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a62:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <SystemInit+0xec>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a68:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <SystemInit+0xec>)
 8000a6a:	4a19      	ldr	r2, [pc, #100]	@ (8000ad0 <SystemInit+0xfc>)
 8000a6c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <SystemInit+0xec>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a74:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <SystemInit+0xec>)
 8000a76:	4a16      	ldr	r2, [pc, #88]	@ (8000ad0 <SystemInit+0xfc>)
 8000a78:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <SystemInit+0xec>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <SystemInit+0xec>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac0 <SystemInit+0xec>)
 8000a86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a8a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <SystemInit+0xec>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a92:	4b10      	ldr	r3, [pc, #64]	@ (8000ad4 <SystemInit+0x100>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <SystemInit+0x104>)
 8000a98:	4013      	ands	r3, r2
 8000a9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a9e:	d202      	bcs.n	8000aa6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <SystemInit+0x108>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <SystemInit+0x10c>)
 8000aa8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000aac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed00 	.word	0xe000ed00
 8000abc:	52002000 	.word	0x52002000
 8000ac0:	58024400 	.word	0x58024400
 8000ac4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ac8:	02020200 	.word	0x02020200
 8000acc:	01ff0000 	.word	0x01ff0000
 8000ad0:	01010280 	.word	0x01010280
 8000ad4:	5c001000 	.word	0x5c001000
 8000ad8:	ffff0000 	.word	0xffff0000
 8000adc:	51008108 	.word	0x51008108
 8000ae0:	52004000 	.word	0x52004000

08000ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ae4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ae8:	f7ff ff74 	bl	80009d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aec:	480c      	ldr	r0, [pc, #48]	@ (8000b20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aee:	490d      	ldr	r1, [pc, #52]	@ (8000b24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000af0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b04:	4c0a      	ldr	r4, [pc, #40]	@ (8000b30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b12:	f00d fb47 	bl	800e1a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b16:	f7ff fbff 	bl	8000318 <main>
  bx  lr
 8000b1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b1c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b24:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 8000b28:	0800e26c 	.word	0x0800e26c
  ldr r2, =_sbss
 8000b2c:	24000104 	.word	0x24000104
  ldr r4, =_ebss
 8000b30:	24004600 	.word	0x24004600

08000b34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC3_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3e:	2003      	movs	r0, #3
 8000b40:	f001 fc6e 	bl	8002420 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b44:	f006 f846 	bl	8006bd4 <HAL_RCC_GetSysClockFreq>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <HAL_Init+0x68>)
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	0a1b      	lsrs	r3, r3, #8
 8000b50:	f003 030f 	and.w	r3, r3, #15
 8000b54:	4913      	ldr	r1, [pc, #76]	@ (8000ba4 <HAL_Init+0x6c>)
 8000b56:	5ccb      	ldrb	r3, [r1, r3]
 8000b58:	f003 031f 	and.w	r3, r3, #31
 8000b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <HAL_Init+0x68>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba4 <HAL_Init+0x6c>)
 8000b6c:	5cd3      	ldrb	r3, [r2, r3]
 8000b6e:	f003 031f 	and.w	r3, r3, #31
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	fa22 f303 	lsr.w	r3, r2, r3
 8000b78:	4a0b      	ldr	r2, [pc, #44]	@ (8000ba8 <HAL_Init+0x70>)
 8000b7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b7c:	4a0b      	ldr	r2, [pc, #44]	@ (8000bac <HAL_Init+0x74>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b82:	200f      	movs	r0, #15
 8000b84:	f000 f814 	bl	8000bb0 <HAL_InitTick>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e002      	b.n	8000b98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b92:	f7ff fdf7 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b96:	2300      	movs	r3, #0
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	58024400 	.word	0x58024400
 8000ba4:	0800e24c 	.word	0x0800e24c
 8000ba8:	24000004 	.word	0x24000004
 8000bac:	24000000 	.word	0x24000000

08000bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000bb8:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <HAL_InitTick+0x60>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d101      	bne.n	8000bc4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e021      	b.n	8000c08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000bc4:	4b13      	ldr	r3, [pc, #76]	@ (8000c14 <HAL_InitTick+0x64>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <HAL_InitTick+0x60>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 fc53 	bl	8002486 <HAL_SYSTICK_Config>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e00e      	b.n	8000c08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b0f      	cmp	r3, #15
 8000bee:	d80a      	bhi.n	8000c06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	f001 fc1d 	bl	8002436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bfc:	4a06      	ldr	r2, [pc, #24]	@ (8000c18 <HAL_InitTick+0x68>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c02:	2300      	movs	r3, #0
 8000c04:	e000      	b.n	8000c08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	2400000c 	.word	0x2400000c
 8000c14:	24000000 	.word	0x24000000
 8000c18:	24000008 	.word	0x24000008

08000c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <HAL_IncTick+0x20>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <HAL_IncTick+0x24>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a04      	ldr	r2, [pc, #16]	@ (8000c40 <HAL_IncTick+0x24>)
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	2400000c 	.word	0x2400000c
 8000c40:	24002a18 	.word	0x24002a18

08000c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return uwTick;
 8000c48:	4b03      	ldr	r3, [pc, #12]	@ (8000c58 <HAL_GetTick+0x14>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	24002a18 	.word	0x24002a18

08000c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c64:	f7ff ffee 	bl	8000c44 <HAL_GetTick>
 8000c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c74:	d005      	beq.n	8000c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <HAL_Delay+0x44>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c82:	bf00      	nop
 8000c84:	f7ff ffde 	bl	8000c44 <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d8f7      	bhi.n	8000c84 <HAL_Delay+0x28>
  {
  }
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2400000c 	.word	0x2400000c

08000ca4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ca8:	4b03      	ldr	r3, [pc, #12]	@ (8000cb8 <HAL_GetREVID+0x14>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	0c1b      	lsrs	r3, r3, #16
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	5c001000 	.word	0x5c001000

08000cbc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	431a      	orrs	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b087      	sub	sp, #28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	3360      	adds	r3, #96	@ 0x60
 8000d36:	461a      	mov	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4413      	add	r3, r2
 8000d3e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	430b      	orrs	r3, r1
 8000d52:	431a      	orrs	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000d58:	bf00      	nop
 8000d5a:	371c      	adds	r7, #28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	691b      	ldr	r3, [r3, #16]
 8000d74:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	f003 031f 	and.w	r3, r3, #31
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	fa01 f303 	lsl.w	r3, r1, r3
 8000d84:	431a      	orrs	r2, r3
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	611a      	str	r2, [r3, #16]
}
 8000d8a:	bf00      	nop
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b087      	sub	sp, #28
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	3360      	adds	r3, #96	@ 0x60
 8000da6:	461a      	mov	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	601a      	str	r2, [r3, #0]
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	371c      	adds	r7, #28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d101      	bne.n	8000de4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000de0:	2301      	movs	r3, #1
 8000de2:	e000      	b.n	8000de6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b087      	sub	sp, #28
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	60f8      	str	r0, [r7, #12]
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	3330      	adds	r3, #48	@ 0x30
 8000e02:	461a      	mov	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	0a1b      	lsrs	r3, r3, #8
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	f003 030c 	and.w	r3, r3, #12
 8000e0e:	4413      	add	r3, r2
 8000e10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	f003 031f 	and.w	r3, r3, #31
 8000e1c:	211f      	movs	r1, #31
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	401a      	ands	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	0e9b      	lsrs	r3, r3, #26
 8000e2a:	f003 011f 	and.w	r1, r3, #31
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	f003 031f 	and.w	r3, r3, #31
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e3e:	bf00      	nop
 8000e40:	371c      	adds	r7, #28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	f023 0203 	bic.w	r2, r3, #3
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	60da      	str	r2, [r3, #12]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	3314      	adds	r3, #20
 8000e80:	461a      	mov	r2, r3
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	0e5b      	lsrs	r3, r3, #25
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	f003 0304 	and.w	r3, r3, #4
 8000e8c:	4413      	add	r3, r2
 8000e8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	0d1b      	lsrs	r3, r3, #20
 8000e98:	f003 031f 	and.w	r3, r3, #31
 8000e9c:	2107      	movs	r1, #7
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	401a      	ands	r2, r3
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	0d1b      	lsrs	r3, r3, #20
 8000eaa:	f003 031f 	and.w	r3, r3, #31
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb4:	431a      	orrs	r2, r3
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000eba:	bf00      	nop
 8000ebc:	371c      	adds	r7, #28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0318 	and.w	r3, r3, #24
 8000eea:	4908      	ldr	r1, [pc, #32]	@ (8000f0c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000eec:	40d9      	lsrs	r1, r3
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	400b      	ands	r3, r1
 8000ef2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8000efe:	bf00      	nop
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	000fffff 	.word	0x000fffff

08000f10 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f003 031f 	and.w	r3, r3, #31
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <LL_ADC_DisableDeepPowerDown+0x20>)
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	6093      	str	r3, [r2, #8]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	5fffffc0 	.word	0x5fffffc0

08000f50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f64:	d101      	bne.n	8000f6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	4b05      	ldr	r3, [pc, #20]	@ (8000f9c <LL_ADC_EnableInternalRegulator+0x24>)
 8000f86:	4013      	ands	r3, r2
 8000f88:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	6fffffc0 	.word	0x6fffffc0

08000fa0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000fb4:	d101      	bne.n	8000fba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <LL_ADC_Enable+0x24>)
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	f043 0201 	orr.w	r2, r3, #1
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	7fffffc0 	.word	0x7fffffc0

08000ff0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b01      	cmp	r3, #1
 8001002:	d101      	bne.n	8001008 <LL_ADC_IsEnabled+0x18>
 8001004:	2301      	movs	r3, #1
 8001006:	e000      	b.n	800100a <LL_ADC_IsEnabled+0x1a>
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	4b05      	ldr	r3, [pc, #20]	@ (800103c <LL_ADC_REG_StartConversion+0x24>)
 8001026:	4013      	ands	r3, r2
 8001028:	f043 0204 	orr.w	r2, r3, #4
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	7fffffc0 	.word	0x7fffffc0

08001040 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f003 0304 	and.w	r3, r3, #4
 8001050:	2b04      	cmp	r3, #4
 8001052:	d101      	bne.n	8001058 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f003 0308 	and.w	r3, r3, #8
 8001076:	2b08      	cmp	r3, #8
 8001078:	d101      	bne.n	800107e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b089      	sub	sp, #36	@ 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e18f      	b.n	80013c6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d109      	bne.n	80010c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff fb7f 	bl	80007b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff3f 	bl	8000f50 <LL_ADC_IsDeepPowerDownEnabled>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d004      	beq.n	80010e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff25 	bl	8000f2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ff5a 	bl	8000fa0 <LL_ADC_IsInternalRegulatorEnabled>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d114      	bne.n	800111c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff3e 	bl	8000f78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010fc:	4b87      	ldr	r3, [pc, #540]	@ (800131c <HAL_ADC_Init+0x290>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	099b      	lsrs	r3, r3, #6
 8001102:	4a87      	ldr	r2, [pc, #540]	@ (8001320 <HAL_ADC_Init+0x294>)
 8001104:	fba2 2303 	umull	r2, r3, r2, r3
 8001108:	099b      	lsrs	r3, r3, #6
 800110a:	3301      	adds	r3, #1
 800110c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800110e:	e002      	b.n	8001116 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	3b01      	subs	r3, #1
 8001114:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1f9      	bne.n	8001110 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff3d 	bl	8000fa0 <LL_ADC_IsInternalRegulatorEnabled>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10d      	bne.n	8001148 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001130:	f043 0210 	orr.w	r2, r3, #16
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113c:	f043 0201 	orr.w	r2, r3, #1
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff77 	bl	8001040 <LL_ADC_REG_IsConversionOngoing>
 8001152:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001158:	f003 0310 	and.w	r3, r3, #16
 800115c:	2b00      	cmp	r3, #0
 800115e:	f040 8129 	bne.w	80013b4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	2b00      	cmp	r3, #0
 8001166:	f040 8125 	bne.w	80013b4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800116e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001172:	f043 0202 	orr.w	r2, r3, #2
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff36 	bl	8000ff0 <LL_ADC_IsEnabled>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d136      	bne.n	80011f8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a65      	ldr	r2, [pc, #404]	@ (8001324 <HAL_ADC_Init+0x298>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d004      	beq.n	800119e <HAL_ADC_Init+0x112>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a63      	ldr	r2, [pc, #396]	@ (8001328 <HAL_ADC_Init+0x29c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d10e      	bne.n	80011bc <HAL_ADC_Init+0x130>
 800119e:	4861      	ldr	r0, [pc, #388]	@ (8001324 <HAL_ADC_Init+0x298>)
 80011a0:	f7ff ff26 	bl	8000ff0 <LL_ADC_IsEnabled>
 80011a4:	4604      	mov	r4, r0
 80011a6:	4860      	ldr	r0, [pc, #384]	@ (8001328 <HAL_ADC_Init+0x29c>)
 80011a8:	f7ff ff22 	bl	8000ff0 <LL_ADC_IsEnabled>
 80011ac:	4603      	mov	r3, r0
 80011ae:	4323      	orrs	r3, r4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	bf0c      	ite	eq
 80011b4:	2301      	moveq	r3, #1
 80011b6:	2300      	movne	r3, #0
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	e008      	b.n	80011ce <HAL_ADC_Init+0x142>
 80011bc:	485b      	ldr	r0, [pc, #364]	@ (800132c <HAL_ADC_Init+0x2a0>)
 80011be:	f7ff ff17 	bl	8000ff0 <LL_ADC_IsEnabled>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	bf0c      	ite	eq
 80011c8:	2301      	moveq	r3, #1
 80011ca:	2300      	movne	r3, #0
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d012      	beq.n	80011f8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a53      	ldr	r2, [pc, #332]	@ (8001324 <HAL_ADC_Init+0x298>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d004      	beq.n	80011e6 <HAL_ADC_Init+0x15a>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a51      	ldr	r2, [pc, #324]	@ (8001328 <HAL_ADC_Init+0x29c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d101      	bne.n	80011ea <HAL_ADC_Init+0x15e>
 80011e6:	4a52      	ldr	r2, [pc, #328]	@ (8001330 <HAL_ADC_Init+0x2a4>)
 80011e8:	e000      	b.n	80011ec <HAL_ADC_Init+0x160>
 80011ea:	4a52      	ldr	r2, [pc, #328]	@ (8001334 <HAL_ADC_Init+0x2a8>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	4619      	mov	r1, r3
 80011f2:	4610      	mov	r0, r2
 80011f4:	f7ff fd62 	bl	8000cbc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80011f8:	f7ff fd54 	bl	8000ca4 <HAL_GetREVID>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001202:	4293      	cmp	r3, r2
 8001204:	d914      	bls.n	8001230 <HAL_ADC_Init+0x1a4>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	2b10      	cmp	r3, #16
 800120c:	d110      	bne.n	8001230 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7d5b      	ldrb	r3, [r3, #21]
 8001212:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001218:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800121e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	7f1b      	ldrb	r3, [r3, #28]
 8001224:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001226:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001228:	f043 030c 	orr.w	r3, r3, #12
 800122c:	61bb      	str	r3, [r7, #24]
 800122e:	e00d      	b.n	800124c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	7d5b      	ldrb	r3, [r3, #21]
 8001234:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800123a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001240:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	7f1b      	ldrb	r3, [r3, #28]
 8001246:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	7f1b      	ldrb	r3, [r3, #28]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d106      	bne.n	8001262 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	3b01      	subs	r3, #1
 800125a:	045b      	lsls	r3, r3, #17
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001266:	2b00      	cmp	r3, #0
 8001268:	d009      	beq.n	800127e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001276:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	4b2c      	ldr	r3, [pc, #176]	@ (8001338 <HAL_ADC_Init+0x2ac>)
 8001286:	4013      	ands	r3, r2
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	6812      	ldr	r2, [r2, #0]
 800128c:	69b9      	ldr	r1, [r7, #24]
 800128e:	430b      	orrs	r3, r1
 8001290:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fed2 	bl	8001040 <LL_ADC_REG_IsConversionOngoing>
 800129c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fedf 	bl	8001066 <LL_ADC_INJ_IsConversionOngoing>
 80012a8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d15f      	bne.n	8001370 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d15c      	bne.n	8001370 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	7d1b      	ldrb	r3, [r3, #20]
 80012ba:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	4b1c      	ldr	r3, [pc, #112]	@ (800133c <HAL_ADC_Init+0x2b0>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	6812      	ldr	r2, [r2, #0]
 80012d2:	69b9      	ldr	r1, [r7, #24]
 80012d4:	430b      	orrs	r3, r1
 80012d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d130      	bne.n	8001344 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	691a      	ldr	r2, [r3, #16]
 80012ee:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <HAL_ADC_Init+0x2b4>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80012f6:	3a01      	subs	r2, #1
 80012f8:	0411      	lsls	r1, r2, #16
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80012fe:	4311      	orrs	r1, r2
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001304:	4311      	orrs	r1, r2
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800130a:	430a      	orrs	r2, r1
 800130c:	431a      	orrs	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 0201 	orr.w	r2, r2, #1
 8001316:	611a      	str	r2, [r3, #16]
 8001318:	e01c      	b.n	8001354 <HAL_ADC_Init+0x2c8>
 800131a:	bf00      	nop
 800131c:	24000000 	.word	0x24000000
 8001320:	053e2d63 	.word	0x053e2d63
 8001324:	40022000 	.word	0x40022000
 8001328:	40022100 	.word	0x40022100
 800132c:	58026000 	.word	0x58026000
 8001330:	40022300 	.word	0x40022300
 8001334:	58026300 	.word	0x58026300
 8001338:	fff0c003 	.word	0xfff0c003
 800133c:	ffffbffc 	.word	0xffffbffc
 8001340:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	691a      	ldr	r2, [r3, #16]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0201 	bic.w	r2, r2, #1
 8001352:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 fd78 	bl	8001e60 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d10c      	bne.n	8001392 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f023 010f 	bic.w	r1, r3, #15
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	1e5a      	subs	r2, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001390:	e007      	b.n	80013a2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 020f 	bic.w	r2, r2, #15
 80013a0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013a6:	f023 0303 	bic.w	r3, r3, #3
 80013aa:	f043 0201 	orr.w	r2, r3, #1
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	655a      	str	r2, [r3, #84]	@ 0x54
 80013b2:	e007      	b.n	80013c4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013b8:	f043 0210 	orr.w	r2, r3, #16
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3724      	adds	r7, #36	@ 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd90      	pop	{r4, r7, pc}
 80013ce:	bf00      	nop

080013d0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a55      	ldr	r2, [pc, #340]	@ (8001538 <HAL_ADC_Start_DMA+0x168>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d004      	beq.n	80013f0 <HAL_ADC_Start_DMA+0x20>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a54      	ldr	r2, [pc, #336]	@ (800153c <HAL_ADC_Start_DMA+0x16c>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d101      	bne.n	80013f4 <HAL_ADC_Start_DMA+0x24>
 80013f0:	4b53      	ldr	r3, [pc, #332]	@ (8001540 <HAL_ADC_Start_DMA+0x170>)
 80013f2:	e000      	b.n	80013f6 <HAL_ADC_Start_DMA+0x26>
 80013f4:	4b53      	ldr	r3, [pc, #332]	@ (8001544 <HAL_ADC_Start_DMA+0x174>)
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fd8a 	bl	8000f10 <LL_ADC_GetMultimode>
 80013fc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fe1c 	bl	8001040 <LL_ADC_REG_IsConversionOngoing>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	f040 808c 	bne.w	8001528 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001416:	2b01      	cmp	r3, #1
 8001418:	d101      	bne.n	800141e <HAL_ADC_Start_DMA+0x4e>
 800141a:	2302      	movs	r3, #2
 800141c:	e087      	b.n	800152e <HAL_ADC_Start_DMA+0x15e>
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d005      	beq.n	8001438 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	2b05      	cmp	r3, #5
 8001430:	d002      	beq.n	8001438 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	2b09      	cmp	r3, #9
 8001436:	d170      	bne.n	800151a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f000 fbf3 	bl	8001c24 <ADC_Enable>
 800143e:	4603      	mov	r3, r0
 8001440:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001442:	7dfb      	ldrb	r3, [r7, #23]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d163      	bne.n	8001510 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800144c:	4b3e      	ldr	r3, [pc, #248]	@ (8001548 <HAL_ADC_Start_DMA+0x178>)
 800144e:	4013      	ands	r3, r2
 8001450:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a37      	ldr	r2, [pc, #220]	@ (800153c <HAL_ADC_Start_DMA+0x16c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d002      	beq.n	8001468 <HAL_ADC_Start_DMA+0x98>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	e000      	b.n	800146a <HAL_ADC_Start_DMA+0x9a>
 8001468:	4b33      	ldr	r3, [pc, #204]	@ (8001538 <HAL_ADC_Start_DMA+0x168>)
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	4293      	cmp	r3, r2
 8001470:	d002      	beq.n	8001478 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d105      	bne.n	8001484 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800147c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001488:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d006      	beq.n	800149e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001494:	f023 0206 	bic.w	r2, r3, #6
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	659a      	str	r2, [r3, #88]	@ 0x58
 800149c:	e002      	b.n	80014a4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a8:	4a28      	ldr	r2, [pc, #160]	@ (800154c <HAL_ADC_Start_DMA+0x17c>)
 80014aa:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b0:	4a27      	ldr	r2, [pc, #156]	@ (8001550 <HAL_ADC_Start_DMA+0x180>)
 80014b2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b8:	4a26      	ldr	r2, [pc, #152]	@ (8001554 <HAL_ADC_Start_DMA+0x184>)
 80014ba:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	221c      	movs	r2, #28
 80014c2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0210 	orr.w	r2, r2, #16
 80014da:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e4:	4619      	mov	r1, r3
 80014e6:	4610      	mov	r0, r2
 80014e8:	f7ff fcaf 	bl	8000e4a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3340      	adds	r3, #64	@ 0x40
 80014f6:	4619      	mov	r1, r3
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f001 fb2c 	bl	8002b58 <HAL_DMA_Start_IT>
 8001500:	4603      	mov	r3, r0
 8001502:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fd85 	bl	8001018 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800150e:	e00d      	b.n	800152c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8001518:	e008      	b.n	800152c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001526:	e001      	b.n	800152c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001528:	2302      	movs	r3, #2
 800152a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800152c:	7dfb      	ldrb	r3, [r7, #23]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40022000 	.word	0x40022000
 800153c:	40022100 	.word	0x40022100
 8001540:	40022300 	.word	0x40022300
 8001544:	58026300 	.word	0x58026300
 8001548:	fffff0fe 	.word	0xfffff0fe
 800154c:	08001d39 	.word	0x08001d39
 8001550:	08001e11 	.word	0x08001e11
 8001554:	08001e2d 	.word	0x08001e2d

08001558 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b0a1      	sub	sp, #132	@ 0x84
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	4a65      	ldr	r2, [pc, #404]	@ (800171c <HAL_ADC_ConfigChannel+0x1b0>)
 8001586:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800158e:	2b01      	cmp	r3, #1
 8001590:	d101      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x2a>
 8001592:	2302      	movs	r3, #2
 8001594:	e32e      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x688>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fd4c 	bl	8001040 <LL_ADC_REG_IsConversionOngoing>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f040 8313 	bne.w	8001bd6 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	db2c      	blt.n	8001612 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d108      	bne.n	80015d6 <HAL_ADC_ConfigChannel+0x6a>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	0e9b      	lsrs	r3, r3, #26
 80015ca:	f003 031f 	and.w	r3, r3, #31
 80015ce:	2201      	movs	r2, #1
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	e016      	b.n	8001604 <HAL_ADC_ConfigChannel+0x98>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80015de:	fa93 f3a3 	rbit	r3, r3
 80015e2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80015e6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80015ee:	2320      	movs	r3, #32
 80015f0:	e003      	b.n	80015fa <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80015f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015f4:	fab3 f383 	clz	r3, r3
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	f003 031f 	and.w	r3, r3, #31
 80015fe:	2201      	movs	r2, #1
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	6812      	ldr	r2, [r2, #0]
 8001608:	69d1      	ldr	r1, [r2, #28]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	430b      	orrs	r3, r1
 8001610:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	6859      	ldr	r1, [r3, #4]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	f7ff fbe7 	bl	8000df2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fd09 	bl	8001040 <LL_ADC_REG_IsConversionOngoing>
 800162e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fd16 	bl	8001066 <LL_ADC_INJ_IsConversionOngoing>
 800163a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800163c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800163e:	2b00      	cmp	r3, #0
 8001640:	f040 80b8 	bne.w	80017b4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001644:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001646:	2b00      	cmp	r3, #0
 8001648:	f040 80b4 	bne.w	80017b4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	6819      	ldr	r1, [r3, #0]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	461a      	mov	r2, r3
 800165a:	f7ff fc09 	bl	8000e70 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800165e:	4b30      	ldr	r3, [pc, #192]	@ (8001720 <HAL_ADC_ConfigChannel+0x1b4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001666:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800166a:	d10b      	bne.n	8001684 <HAL_ADC_ConfigChannel+0x118>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	695a      	ldr	r2, [r3, #20]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	e01d      	b.n	80016c0 <HAL_ADC_ConfigChannel+0x154>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10b      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x13e>
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	695a      	ldr	r2, [r3, #20]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	089b      	lsrs	r3, r3, #2
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	e00a      	b.n	80016c0 <HAL_ADC_ConfigChannel+0x154>
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	695a      	ldr	r2, [r3, #20]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	089b      	lsrs	r3, r3, #2
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d02c      	beq.n	8001724 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6818      	ldr	r0, [r3, #0]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	6919      	ldr	r1, [r3, #16]
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016d8:	f7ff fb24 	bl	8000d24 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	6919      	ldr	r1, [r3, #16]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	7e5b      	ldrb	r3, [r3, #25]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d102      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x186>
 80016ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80016f0:	e000      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x188>
 80016f2:	2300      	movs	r3, #0
 80016f4:	461a      	mov	r2, r3
 80016f6:	f7ff fb4e 	bl	8000d96 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6818      	ldr	r0, [r3, #0]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	6919      	ldr	r1, [r3, #16]
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	7e1b      	ldrb	r3, [r3, #24]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d102      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x1a4>
 800170a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800170e:	e000      	b.n	8001712 <HAL_ADC_ConfigChannel+0x1a6>
 8001710:	2300      	movs	r3, #0
 8001712:	461a      	mov	r2, r3
 8001714:	f7ff fb26 	bl	8000d64 <LL_ADC_SetDataRightShift>
 8001718:	e04c      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x248>
 800171a:	bf00      	nop
 800171c:	47ff0000 	.word	0x47ff0000
 8001720:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800172a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	069b      	lsls	r3, r3, #26
 8001734:	429a      	cmp	r2, r3
 8001736:	d107      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001746:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800174e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	069b      	lsls	r3, r3, #26
 8001758:	429a      	cmp	r2, r3
 800175a:	d107      	bne.n	800176c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800176a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001772:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	069b      	lsls	r3, r3, #26
 800177c:	429a      	cmp	r2, r3
 800177e:	d107      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800178e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001796:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	069b      	lsls	r3, r3, #26
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d107      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80017b2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fc19 	bl	8000ff0 <LL_ADC_IsEnabled>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f040 8211 	bne.w	8001be8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6818      	ldr	r0, [r3, #0]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	6819      	ldr	r1, [r3, #0]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	461a      	mov	r2, r3
 80017d4:	f7ff fb78 	bl	8000ec8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4aa1      	ldr	r2, [pc, #644]	@ (8001a64 <HAL_ADC_ConfigChannel+0x4f8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	f040 812e 	bne.w	8001a40 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10b      	bne.n	800180c <HAL_ADC_ConfigChannel+0x2a0>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	0e9b      	lsrs	r3, r3, #26
 80017fa:	3301      	adds	r3, #1
 80017fc:	f003 031f 	and.w	r3, r3, #31
 8001800:	2b09      	cmp	r3, #9
 8001802:	bf94      	ite	ls
 8001804:	2301      	movls	r3, #1
 8001806:	2300      	movhi	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	e019      	b.n	8001840 <HAL_ADC_ConfigChannel+0x2d4>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001812:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001814:	fa93 f3a3 	rbit	r3, r3
 8001818:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800181a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800181c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800181e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8001824:	2320      	movs	r3, #32
 8001826:	e003      	b.n	8001830 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8001828:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800182a:	fab3 f383 	clz	r3, r3
 800182e:	b2db      	uxtb	r3, r3
 8001830:	3301      	adds	r3, #1
 8001832:	f003 031f 	and.w	r3, r3, #31
 8001836:	2b09      	cmp	r3, #9
 8001838:	bf94      	ite	ls
 800183a:	2301      	movls	r3, #1
 800183c:	2300      	movhi	r3, #0
 800183e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001840:	2b00      	cmp	r3, #0
 8001842:	d079      	beq.n	8001938 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800184c:	2b00      	cmp	r3, #0
 800184e:	d107      	bne.n	8001860 <HAL_ADC_ConfigChannel+0x2f4>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	0e9b      	lsrs	r3, r3, #26
 8001856:	3301      	adds	r3, #1
 8001858:	069b      	lsls	r3, r3, #26
 800185a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800185e:	e015      	b.n	800188c <HAL_ADC_ConfigChannel+0x320>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001868:	fa93 f3a3 	rbit	r3, r3
 800186c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800186e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001870:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001872:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8001878:	2320      	movs	r3, #32
 800187a:	e003      	b.n	8001884 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800187c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800187e:	fab3 f383 	clz	r3, r3
 8001882:	b2db      	uxtb	r3, r3
 8001884:	3301      	adds	r3, #1
 8001886:	069b      	lsls	r3, r3, #26
 8001888:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001894:	2b00      	cmp	r3, #0
 8001896:	d109      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x340>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	0e9b      	lsrs	r3, r3, #26
 800189e:	3301      	adds	r3, #1
 80018a0:	f003 031f 	and.w	r3, r3, #31
 80018a4:	2101      	movs	r1, #1
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	e017      	b.n	80018dc <HAL_ADC_ConfigChannel+0x370>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018b4:	fa93 f3a3 	rbit	r3, r3
 80018b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80018ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018bc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80018be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80018c4:	2320      	movs	r3, #32
 80018c6:	e003      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80018c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018ca:	fab3 f383 	clz	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	3301      	adds	r3, #1
 80018d2:	f003 031f 	and.w	r3, r3, #31
 80018d6:	2101      	movs	r1, #1
 80018d8:	fa01 f303 	lsl.w	r3, r1, r3
 80018dc:	ea42 0103 	orr.w	r1, r2, r3
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10a      	bne.n	8001902 <HAL_ADC_ConfigChannel+0x396>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	0e9b      	lsrs	r3, r3, #26
 80018f2:	3301      	adds	r3, #1
 80018f4:	f003 021f 	and.w	r2, r3, #31
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	051b      	lsls	r3, r3, #20
 8001900:	e018      	b.n	8001934 <HAL_ADC_ConfigChannel+0x3c8>
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001912:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800191a:	2320      	movs	r3, #32
 800191c:	e003      	b.n	8001926 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800191e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001920:	fab3 f383 	clz	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	3301      	adds	r3, #1
 8001928:	f003 021f 	and.w	r2, r3, #31
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001934:	430b      	orrs	r3, r1
 8001936:	e07e      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001940:	2b00      	cmp	r3, #0
 8001942:	d107      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x3e8>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	0e9b      	lsrs	r3, r3, #26
 800194a:	3301      	adds	r3, #1
 800194c:	069b      	lsls	r3, r3, #26
 800194e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001952:	e015      	b.n	8001980 <HAL_ADC_ConfigChannel+0x414>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800195c:	fa93 f3a3 	rbit	r3, r3
 8001960:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800196c:	2320      	movs	r3, #32
 800196e:	e003      	b.n	8001978 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8001970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001972:	fab3 f383 	clz	r3, r3
 8001976:	b2db      	uxtb	r3, r3
 8001978:	3301      	adds	r3, #1
 800197a:	069b      	lsls	r3, r3, #26
 800197c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001988:	2b00      	cmp	r3, #0
 800198a:	d109      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x434>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	0e9b      	lsrs	r3, r3, #26
 8001992:	3301      	adds	r3, #1
 8001994:	f003 031f 	and.w	r3, r3, #31
 8001998:	2101      	movs	r1, #1
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	e017      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x464>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa93 f3a3 	rbit	r3, r3
 80019ac:	61bb      	str	r3, [r7, #24]
  return result;
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80019b8:	2320      	movs	r3, #32
 80019ba:	e003      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	fab3 f383 	clz	r3, r3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	3301      	adds	r3, #1
 80019c6:	f003 031f 	and.w	r3, r3, #31
 80019ca:	2101      	movs	r1, #1
 80019cc:	fa01 f303 	lsl.w	r3, r1, r3
 80019d0:	ea42 0103 	orr.w	r1, r2, r3
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10d      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x490>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	0e9b      	lsrs	r3, r3, #26
 80019e6:	3301      	adds	r3, #1
 80019e8:	f003 021f 	and.w	r2, r3, #31
 80019ec:	4613      	mov	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4413      	add	r3, r2
 80019f2:	3b1e      	subs	r3, #30
 80019f4:	051b      	lsls	r3, r3, #20
 80019f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019fa:	e01b      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x4c8>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	60fb      	str	r3, [r7, #12]
  return result;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8001a14:	2320      	movs	r3, #32
 8001a16:	e003      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	fab3 f383 	clz	r3, r3
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	3301      	adds	r3, #1
 8001a22:	f003 021f 	and.w	r2, r3, #31
 8001a26:	4613      	mov	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3b1e      	subs	r3, #30
 8001a2e:	051b      	lsls	r3, r3, #20
 8001a30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a34:	430b      	orrs	r3, r1
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	6892      	ldr	r2, [r2, #8]
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f7ff fa18 	bl	8000e70 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f280 80cf 	bge.w	8001be8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a06      	ldr	r2, [pc, #24]	@ (8001a68 <HAL_ADC_ConfigChannel+0x4fc>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d004      	beq.n	8001a5e <HAL_ADC_ConfigChannel+0x4f2>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a04      	ldr	r2, [pc, #16]	@ (8001a6c <HAL_ADC_ConfigChannel+0x500>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d10a      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x508>
 8001a5e:	4b04      	ldr	r3, [pc, #16]	@ (8001a70 <HAL_ADC_ConfigChannel+0x504>)
 8001a60:	e009      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x50a>
 8001a62:	bf00      	nop
 8001a64:	47ff0000 	.word	0x47ff0000
 8001a68:	40022000 	.word	0x40022000
 8001a6c:	40022100 	.word	0x40022100
 8001a70:	40022300 	.word	0x40022300
 8001a74:	4b61      	ldr	r3, [pc, #388]	@ (8001bfc <HAL_ADC_ConfigChannel+0x690>)
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff f946 	bl	8000d08 <LL_ADC_GetCommonPathInternalCh>
 8001a7c:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a5f      	ldr	r2, [pc, #380]	@ (8001c00 <HAL_ADC_ConfigChannel+0x694>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d004      	beq.n	8001a92 <HAL_ADC_ConfigChannel+0x526>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a5d      	ldr	r2, [pc, #372]	@ (8001c04 <HAL_ADC_ConfigChannel+0x698>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d10e      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x544>
 8001a92:	485b      	ldr	r0, [pc, #364]	@ (8001c00 <HAL_ADC_ConfigChannel+0x694>)
 8001a94:	f7ff faac 	bl	8000ff0 <LL_ADC_IsEnabled>
 8001a98:	4604      	mov	r4, r0
 8001a9a:	485a      	ldr	r0, [pc, #360]	@ (8001c04 <HAL_ADC_ConfigChannel+0x698>)
 8001a9c:	f7ff faa8 	bl	8000ff0 <LL_ADC_IsEnabled>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4323      	orrs	r3, r4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	e008      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x556>
 8001ab0:	4855      	ldr	r0, [pc, #340]	@ (8001c08 <HAL_ADC_ConfigChannel+0x69c>)
 8001ab2:	f7ff fa9d 	bl	8000ff0 <LL_ADC_IsEnabled>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d07d      	beq.n	8001bc2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a50      	ldr	r2, [pc, #320]	@ (8001c0c <HAL_ADC_ConfigChannel+0x6a0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d130      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x5c6>
 8001ad0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ad2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d12b      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a4a      	ldr	r2, [pc, #296]	@ (8001c08 <HAL_ADC_ConfigChannel+0x69c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	f040 8081 	bne.w	8001be8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a45      	ldr	r2, [pc, #276]	@ (8001c00 <HAL_ADC_ConfigChannel+0x694>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d004      	beq.n	8001afa <HAL_ADC_ConfigChannel+0x58e>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a43      	ldr	r2, [pc, #268]	@ (8001c04 <HAL_ADC_ConfigChannel+0x698>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d101      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x592>
 8001afa:	4a45      	ldr	r2, [pc, #276]	@ (8001c10 <HAL_ADC_ConfigChannel+0x6a4>)
 8001afc:	e000      	b.n	8001b00 <HAL_ADC_ConfigChannel+0x594>
 8001afe:	4a3f      	ldr	r2, [pc, #252]	@ (8001bfc <HAL_ADC_ConfigChannel+0x690>)
 8001b00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b02:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b06:	4619      	mov	r1, r3
 8001b08:	4610      	mov	r0, r2
 8001b0a:	f7ff f8ea 	bl	8000ce2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b0e:	4b41      	ldr	r3, [pc, #260]	@ (8001c14 <HAL_ADC_ConfigChannel+0x6a8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	099b      	lsrs	r3, r3, #6
 8001b14:	4a40      	ldr	r2, [pc, #256]	@ (8001c18 <HAL_ADC_ConfigChannel+0x6ac>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	099b      	lsrs	r3, r3, #6
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001b22:	e002      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f9      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b30:	e05a      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a39      	ldr	r2, [pc, #228]	@ (8001c1c <HAL_ADC_ConfigChannel+0x6b0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d11e      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x60e>
 8001b3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d119      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a2f      	ldr	r2, [pc, #188]	@ (8001c08 <HAL_ADC_ConfigChannel+0x69c>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d14b      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a2a      	ldr	r2, [pc, #168]	@ (8001c00 <HAL_ADC_ConfigChannel+0x694>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d004      	beq.n	8001b64 <HAL_ADC_ConfigChannel+0x5f8>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a29      	ldr	r2, [pc, #164]	@ (8001c04 <HAL_ADC_ConfigChannel+0x698>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d101      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x5fc>
 8001b64:	4a2a      	ldr	r2, [pc, #168]	@ (8001c10 <HAL_ADC_ConfigChannel+0x6a4>)
 8001b66:	e000      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x5fe>
 8001b68:	4a24      	ldr	r2, [pc, #144]	@ (8001bfc <HAL_ADC_ConfigChannel+0x690>)
 8001b6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b70:	4619      	mov	r1, r3
 8001b72:	4610      	mov	r0, r2
 8001b74:	f7ff f8b5 	bl	8000ce2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b78:	e036      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a28      	ldr	r2, [pc, #160]	@ (8001c20 <HAL_ADC_ConfigChannel+0x6b4>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d131      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x67c>
 8001b84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d12c      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a1d      	ldr	r2, [pc, #116]	@ (8001c08 <HAL_ADC_ConfigChannel+0x69c>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d127      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a18      	ldr	r2, [pc, #96]	@ (8001c00 <HAL_ADC_ConfigChannel+0x694>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d004      	beq.n	8001bac <HAL_ADC_ConfigChannel+0x640>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a17      	ldr	r2, [pc, #92]	@ (8001c04 <HAL_ADC_ConfigChannel+0x698>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d101      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x644>
 8001bac:	4a18      	ldr	r2, [pc, #96]	@ (8001c10 <HAL_ADC_ConfigChannel+0x6a4>)
 8001bae:	e000      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0x646>
 8001bb0:	4a12      	ldr	r2, [pc, #72]	@ (8001bfc <HAL_ADC_ConfigChannel+0x690>)
 8001bb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001bb4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4610      	mov	r0, r2
 8001bbc:	f7ff f891 	bl	8000ce2 <LL_ADC_SetCommonPathInternalCh>
 8001bc0:	e012      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc6:	f043 0220 	orr.w	r2, r3, #32
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001bd4:	e008      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bda:	f043 0220 	orr.w	r2, r3, #32
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001bf0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3784      	adds	r7, #132	@ 0x84
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd90      	pop	{r4, r7, pc}
 8001bfc:	58026300 	.word	0x58026300
 8001c00:	40022000 	.word	0x40022000
 8001c04:	40022100 	.word	0x40022100
 8001c08:	58026000 	.word	0x58026000
 8001c0c:	cb840000 	.word	0xcb840000
 8001c10:	40022300 	.word	0x40022300
 8001c14:	24000000 	.word	0x24000000
 8001c18:	053e2d63 	.word	0x053e2d63
 8001c1c:	c7520000 	.word	0xc7520000
 8001c20:	cfb80000 	.word	0xcfb80000

08001c24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff f9dd 	bl	8000ff0 <LL_ADC_IsEnabled>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d16e      	bne.n	8001d1a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	4b38      	ldr	r3, [pc, #224]	@ (8001d24 <ADC_Enable+0x100>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00d      	beq.n	8001c66 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c4e:	f043 0210 	orr.w	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5a:	f043 0201 	orr.w	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e05a      	b.n	8001d1c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff f9ac 	bl	8000fc8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001c70:	f7fe ffe8 	bl	8000c44 <HAL_GetTick>
 8001c74:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a2b      	ldr	r2, [pc, #172]	@ (8001d28 <ADC_Enable+0x104>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d004      	beq.n	8001c8a <ADC_Enable+0x66>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a29      	ldr	r2, [pc, #164]	@ (8001d2c <ADC_Enable+0x108>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d101      	bne.n	8001c8e <ADC_Enable+0x6a>
 8001c8a:	4b29      	ldr	r3, [pc, #164]	@ (8001d30 <ADC_Enable+0x10c>)
 8001c8c:	e000      	b.n	8001c90 <ADC_Enable+0x6c>
 8001c8e:	4b29      	ldr	r3, [pc, #164]	@ (8001d34 <ADC_Enable+0x110>)
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f93d 	bl	8000f10 <LL_ADC_GetMultimode>
 8001c96:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a23      	ldr	r2, [pc, #140]	@ (8001d2c <ADC_Enable+0x108>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d002      	beq.n	8001ca8 <ADC_Enable+0x84>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	e000      	b.n	8001caa <ADC_Enable+0x86>
 8001ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d28 <ADC_Enable+0x104>)
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d02c      	beq.n	8001d0c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d130      	bne.n	8001d1a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cb8:	e028      	b.n	8001d0c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff f996 	bl	8000ff0 <LL_ADC_IsEnabled>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d104      	bne.n	8001cd4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff f97a 	bl	8000fc8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cd4:	f7fe ffb6 	bl	8000c44 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d914      	bls.n	8001d0c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d00d      	beq.n	8001d0c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf4:	f043 0210 	orr.w	r2, r3, #16
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d00:	f043 0201 	orr.w	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e007      	b.n	8001d1c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d1cf      	bne.n	8001cba <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	8000003f 	.word	0x8000003f
 8001d28:	40022000 	.word	0x40022000
 8001d2c:	40022100 	.word	0x40022100
 8001d30:	40022300 	.word	0x40022300
 8001d34:	58026300 	.word	0x58026300

08001d38 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d44:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d4a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d14b      	bne.n	8001dea <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d56:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d021      	beq.n	8001db0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff f82b 	bl	8000dcc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d032      	beq.n	8001de2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d12b      	bne.n	8001de2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d8e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d11f      	bne.n	8001de2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da6:	f043 0201 	orr.w	r2, r3, #1
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	655a      	str	r2, [r3, #84]	@ 0x54
 8001dae:	e018      	b.n	8001de2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d111      	bne.n	8001de2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d105      	bne.n	8001de2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dda:	f043 0201 	orr.w	r2, r3, #1
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f7fe fa78 	bl	80002d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001de8:	e00e      	b.n	8001e08 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dee:	f003 0310 	and.w	r3, r3, #16
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f7ff fbae 	bl	8001558 <HAL_ADC_ErrorCallback>
}
 8001dfc:	e004      	b.n	8001e08 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	4798      	blx	r3
}
 8001e08:	bf00      	nop
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f7fe fa6a 	bl	80002f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e24:	bf00      	nop
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e38:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4a:	f043 0204 	orr.w	r2, r3, #4
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f7ff fb80 	bl	8001558 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e58:	bf00      	nop
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a7a      	ldr	r2, [pc, #488]	@ (8002058 <ADC_ConfigureBoostMode+0x1f8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d004      	beq.n	8001e7c <ADC_ConfigureBoostMode+0x1c>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a79      	ldr	r2, [pc, #484]	@ (800205c <ADC_ConfigureBoostMode+0x1fc>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d109      	bne.n	8001e90 <ADC_ConfigureBoostMode+0x30>
 8001e7c:	4b78      	ldr	r3, [pc, #480]	@ (8002060 <ADC_ConfigureBoostMode+0x200>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	bf14      	ite	ne
 8001e88:	2301      	movne	r3, #1
 8001e8a:	2300      	moveq	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	e008      	b.n	8001ea2 <ADC_ConfigureBoostMode+0x42>
 8001e90:	4b74      	ldr	r3, [pc, #464]	@ (8002064 <ADC_ConfigureBoostMode+0x204>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf14      	ite	ne
 8001e9c:	2301      	movne	r3, #1
 8001e9e:	2300      	moveq	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d01c      	beq.n	8001ee0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001ea6:	f005 f80f 	bl	8006ec8 <HAL_RCC_GetHCLKFreq>
 8001eaa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001eb4:	d010      	beq.n	8001ed8 <ADC_ConfigureBoostMode+0x78>
 8001eb6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001eba:	d873      	bhi.n	8001fa4 <ADC_ConfigureBoostMode+0x144>
 8001ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ec0:	d002      	beq.n	8001ec8 <ADC_ConfigureBoostMode+0x68>
 8001ec2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001ec6:	d16d      	bne.n	8001fa4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	0c1b      	lsrs	r3, r3, #16
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed4:	60fb      	str	r3, [r7, #12]
        break;
 8001ed6:	e068      	b.n	8001faa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	089b      	lsrs	r3, r3, #2
 8001edc:	60fb      	str	r3, [r7, #12]
        break;
 8001ede:	e064      	b.n	8001faa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001ee0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001ee4:	f04f 0100 	mov.w	r1, #0
 8001ee8:	f006 fa3e 	bl	8008368 <HAL_RCCEx_GetPeriphCLKFreq>
 8001eec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8001ef6:	d051      	beq.n	8001f9c <ADC_ConfigureBoostMode+0x13c>
 8001ef8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8001efc:	d854      	bhi.n	8001fa8 <ADC_ConfigureBoostMode+0x148>
 8001efe:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8001f02:	d047      	beq.n	8001f94 <ADC_ConfigureBoostMode+0x134>
 8001f04:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8001f08:	d84e      	bhi.n	8001fa8 <ADC_ConfigureBoostMode+0x148>
 8001f0a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001f0e:	d03d      	beq.n	8001f8c <ADC_ConfigureBoostMode+0x12c>
 8001f10:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001f14:	d848      	bhi.n	8001fa8 <ADC_ConfigureBoostMode+0x148>
 8001f16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001f1a:	d033      	beq.n	8001f84 <ADC_ConfigureBoostMode+0x124>
 8001f1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001f20:	d842      	bhi.n	8001fa8 <ADC_ConfigureBoostMode+0x148>
 8001f22:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8001f26:	d029      	beq.n	8001f7c <ADC_ConfigureBoostMode+0x11c>
 8001f28:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8001f2c:	d83c      	bhi.n	8001fa8 <ADC_ConfigureBoostMode+0x148>
 8001f2e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8001f32:	d01a      	beq.n	8001f6a <ADC_ConfigureBoostMode+0x10a>
 8001f34:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8001f38:	d836      	bhi.n	8001fa8 <ADC_ConfigureBoostMode+0x148>
 8001f3a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8001f3e:	d014      	beq.n	8001f6a <ADC_ConfigureBoostMode+0x10a>
 8001f40:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8001f44:	d830      	bhi.n	8001fa8 <ADC_ConfigureBoostMode+0x148>
 8001f46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f4a:	d00e      	beq.n	8001f6a <ADC_ConfigureBoostMode+0x10a>
 8001f4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f50:	d82a      	bhi.n	8001fa8 <ADC_ConfigureBoostMode+0x148>
 8001f52:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001f56:	d008      	beq.n	8001f6a <ADC_ConfigureBoostMode+0x10a>
 8001f58:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001f5c:	d824      	bhi.n	8001fa8 <ADC_ConfigureBoostMode+0x148>
 8001f5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001f62:	d002      	beq.n	8001f6a <ADC_ConfigureBoostMode+0x10a>
 8001f64:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001f68:	d11e      	bne.n	8001fa8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	0c9b      	lsrs	r3, r3, #18
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f78:	60fb      	str	r3, [r7, #12]
        break;
 8001f7a:	e016      	b.n	8001faa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	091b      	lsrs	r3, r3, #4
 8001f80:	60fb      	str	r3, [r7, #12]
        break;
 8001f82:	e012      	b.n	8001faa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	60fb      	str	r3, [r7, #12]
        break;
 8001f8a:	e00e      	b.n	8001faa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	099b      	lsrs	r3, r3, #6
 8001f90:	60fb      	str	r3, [r7, #12]
        break;
 8001f92:	e00a      	b.n	8001faa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	09db      	lsrs	r3, r3, #7
 8001f98:	60fb      	str	r3, [r7, #12]
        break;
 8001f9a:	e006      	b.n	8001faa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	60fb      	str	r3, [r7, #12]
        break;
 8001fa2:	e002      	b.n	8001faa <ADC_ConfigureBoostMode+0x14a>
        break;
 8001fa4:	bf00      	nop
 8001fa6:	e000      	b.n	8001faa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8001fa8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001faa:	f7fe fe7b 	bl	8000ca4 <HAL_GetREVID>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d815      	bhi.n	8001fe4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4a2b      	ldr	r2, [pc, #172]	@ (8002068 <ADC_ConfigureBoostMode+0x208>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d908      	bls.n	8001fd2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fce:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001fd0:	e03e      	b.n	8002050 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fe0:	609a      	str	r2, [r3, #8]
}
 8001fe2:	e035      	b.n	8002050 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	085b      	lsrs	r3, r3, #1
 8001fe8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4a1f      	ldr	r2, [pc, #124]	@ (800206c <ADC_ConfigureBoostMode+0x20c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d808      	bhi.n	8002004 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002000:	609a      	str	r2, [r3, #8]
}
 8002002:	e025      	b.n	8002050 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4a1a      	ldr	r2, [pc, #104]	@ (8002070 <ADC_ConfigureBoostMode+0x210>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d80a      	bhi.n	8002022 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800201e:	609a      	str	r2, [r3, #8]
}
 8002020:	e016      	b.n	8002050 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4a13      	ldr	r2, [pc, #76]	@ (8002074 <ADC_ConfigureBoostMode+0x214>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d80a      	bhi.n	8002040 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800203c:	609a      	str	r2, [r3, #8]
}
 800203e:	e007      	b.n	8002050 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800204e:	609a      	str	r2, [r3, #8]
}
 8002050:	bf00      	nop
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40022000 	.word	0x40022000
 800205c:	40022100 	.word	0x40022100
 8002060:	40022300 	.word	0x40022300
 8002064:	58026300 	.word	0x58026300
 8002068:	01312d00 	.word	0x01312d00
 800206c:	005f5e10 	.word	0x005f5e10
 8002070:	00bebc20 	.word	0x00bebc20
 8002074:	017d7840 	.word	0x017d7840

08002078 <LL_ADC_IsEnabled>:
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <LL_ADC_IsEnabled+0x18>
 800208c:	2301      	movs	r3, #1
 800208e:	e000      	b.n	8002092 <LL_ADC_IsEnabled+0x1a>
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <LL_ADC_REG_IsConversionOngoing>:
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d101      	bne.n	80020b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b09f      	sub	sp, #124	@ 0x7c
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80020de:	2302      	movs	r3, #2
 80020e0:	e0be      	b.n	8002260 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a5c      	ldr	r2, [pc, #368]	@ (8002268 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d102      	bne.n	8002102 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80020fc:	4b5b      	ldr	r3, [pc, #364]	@ (800226c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	e001      	b.n	8002106 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10b      	bne.n	8002124 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002110:	f043 0220 	orr.w	r2, r3, #32
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e09d      	b.n	8002260 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff ffb9 	bl	800209e <LL_ADC_REG_IsConversionOngoing>
 800212c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ffb3 	bl	800209e <LL_ADC_REG_IsConversionOngoing>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d17f      	bne.n	800223e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800213e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002140:	2b00      	cmp	r3, #0
 8002142:	d17c      	bne.n	800223e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a47      	ldr	r2, [pc, #284]	@ (8002268 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d004      	beq.n	8002158 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a46      	ldr	r2, [pc, #280]	@ (800226c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d101      	bne.n	800215c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002158:	4b45      	ldr	r3, [pc, #276]	@ (8002270 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800215a:	e000      	b.n	800215e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800215c:	4b45      	ldr	r3, [pc, #276]	@ (8002274 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800215e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d039      	beq.n	80021dc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002168:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	431a      	orrs	r2, r3
 8002176:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002178:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a3a      	ldr	r2, [pc, #232]	@ (8002268 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d004      	beq.n	800218e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a38      	ldr	r2, [pc, #224]	@ (800226c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d10e      	bne.n	80021ac <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800218e:	4836      	ldr	r0, [pc, #216]	@ (8002268 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002190:	f7ff ff72 	bl	8002078 <LL_ADC_IsEnabled>
 8002194:	4604      	mov	r4, r0
 8002196:	4835      	ldr	r0, [pc, #212]	@ (800226c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002198:	f7ff ff6e 	bl	8002078 <LL_ADC_IsEnabled>
 800219c:	4603      	mov	r3, r0
 800219e:	4323      	orrs	r3, r4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	bf0c      	ite	eq
 80021a4:	2301      	moveq	r3, #1
 80021a6:	2300      	movne	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	e008      	b.n	80021be <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80021ac:	4832      	ldr	r0, [pc, #200]	@ (8002278 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80021ae:	f7ff ff63 	bl	8002078 <LL_ADC_IsEnabled>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bf0c      	ite	eq
 80021b8:	2301      	moveq	r3, #1
 80021ba:	2300      	movne	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d047      	beq.n	8002252 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80021c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	4b2d      	ldr	r3, [pc, #180]	@ (800227c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	6811      	ldr	r1, [r2, #0]
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	6892      	ldr	r2, [r2, #8]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	431a      	orrs	r2, r3
 80021d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021d8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021da:	e03a      	b.n	8002252 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80021dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021e6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a1e      	ldr	r2, [pc, #120]	@ (8002268 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d004      	beq.n	80021fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a1d      	ldr	r2, [pc, #116]	@ (800226c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d10e      	bne.n	800221a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80021fc:	481a      	ldr	r0, [pc, #104]	@ (8002268 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80021fe:	f7ff ff3b 	bl	8002078 <LL_ADC_IsEnabled>
 8002202:	4604      	mov	r4, r0
 8002204:	4819      	ldr	r0, [pc, #100]	@ (800226c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002206:	f7ff ff37 	bl	8002078 <LL_ADC_IsEnabled>
 800220a:	4603      	mov	r3, r0
 800220c:	4323      	orrs	r3, r4
 800220e:	2b00      	cmp	r3, #0
 8002210:	bf0c      	ite	eq
 8002212:	2301      	moveq	r3, #1
 8002214:	2300      	movne	r3, #0
 8002216:	b2db      	uxtb	r3, r3
 8002218:	e008      	b.n	800222c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800221a:	4817      	ldr	r0, [pc, #92]	@ (8002278 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800221c:	f7ff ff2c 	bl	8002078 <LL_ADC_IsEnabled>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	bf0c      	ite	eq
 8002226:	2301      	moveq	r3, #1
 8002228:	2300      	movne	r3, #0
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d010      	beq.n	8002252 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002230:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	4b11      	ldr	r3, [pc, #68]	@ (800227c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002236:	4013      	ands	r3, r2
 8002238:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800223a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800223c:	e009      	b.n	8002252 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002242:	f043 0220 	orr.w	r2, r3, #32
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002250:	e000      	b.n	8002254 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002252:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800225c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002260:	4618      	mov	r0, r3
 8002262:	377c      	adds	r7, #124	@ 0x7c
 8002264:	46bd      	mov	sp, r7
 8002266:	bd90      	pop	{r4, r7, pc}
 8002268:	40022000 	.word	0x40022000
 800226c:	40022100 	.word	0x40022100
 8002270:	40022300 	.word	0x40022300
 8002274:	58026300 	.word	0x58026300
 8002278:	58026000 	.word	0x58026000
 800227c:	fffff0e0 	.word	0xfffff0e0

08002280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002290:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <__NVIC_SetPriorityGrouping+0x40>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800229c:	4013      	ands	r3, r2
 800229e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022a8:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <__NVIC_SetPriorityGrouping+0x44>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ae:	4a04      	ldr	r2, [pc, #16]	@ (80022c0 <__NVIC_SetPriorityGrouping+0x40>)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	60d3      	str	r3, [r2, #12]
}
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00
 80022c4:	05fa0000 	.word	0x05fa0000

080022c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022cc:	4b04      	ldr	r3, [pc, #16]	@ (80022e0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	f003 0307 	and.w	r3, r3, #7
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	db0b      	blt.n	800230e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	f003 021f 	and.w	r2, r3, #31
 80022fc:	4907      	ldr	r1, [pc, #28]	@ (800231c <__NVIC_EnableIRQ+0x38>)
 80022fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	2001      	movs	r0, #1
 8002306:	fa00 f202 	lsl.w	r2, r0, r2
 800230a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	e000e100 	.word	0xe000e100

08002320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	6039      	str	r1, [r7, #0]
 800232a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800232c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002330:	2b00      	cmp	r3, #0
 8002332:	db0a      	blt.n	800234a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	b2da      	uxtb	r2, r3
 8002338:	490c      	ldr	r1, [pc, #48]	@ (800236c <__NVIC_SetPriority+0x4c>)
 800233a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800233e:	0112      	lsls	r2, r2, #4
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	440b      	add	r3, r1
 8002344:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002348:	e00a      	b.n	8002360 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	b2da      	uxtb	r2, r3
 800234e:	4908      	ldr	r1, [pc, #32]	@ (8002370 <__NVIC_SetPriority+0x50>)
 8002350:	88fb      	ldrh	r3, [r7, #6]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	3b04      	subs	r3, #4
 8002358:	0112      	lsls	r2, r2, #4
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	440b      	add	r3, r1
 800235e:	761a      	strb	r2, [r3, #24]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	e000e100 	.word	0xe000e100
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002374:	b480      	push	{r7}
 8002376:	b089      	sub	sp, #36	@ 0x24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f1c3 0307 	rsb	r3, r3, #7
 800238e:	2b04      	cmp	r3, #4
 8002390:	bf28      	it	cs
 8002392:	2304      	movcs	r3, #4
 8002394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3304      	adds	r3, #4
 800239a:	2b06      	cmp	r3, #6
 800239c:	d902      	bls.n	80023a4 <NVIC_EncodePriority+0x30>
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3b03      	subs	r3, #3
 80023a2:	e000      	b.n	80023a6 <NVIC_EncodePriority+0x32>
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43da      	mvns	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	401a      	ands	r2, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023bc:	f04f 31ff 	mov.w	r1, #4294967295
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	fa01 f303 	lsl.w	r3, r1, r3
 80023c6:	43d9      	mvns	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	4313      	orrs	r3, r2
         );
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3724      	adds	r7, #36	@ 0x24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023ec:	d301      	bcc.n	80023f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ee:	2301      	movs	r3, #1
 80023f0:	e00f      	b.n	8002412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f2:	4a0a      	ldr	r2, [pc, #40]	@ (800241c <SysTick_Config+0x40>)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fa:	210f      	movs	r1, #15
 80023fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002400:	f7ff ff8e 	bl	8002320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002404:	4b05      	ldr	r3, [pc, #20]	@ (800241c <SysTick_Config+0x40>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240a:	4b04      	ldr	r3, [pc, #16]	@ (800241c <SysTick_Config+0x40>)
 800240c:	2207      	movs	r2, #7
 800240e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	e000e010 	.word	0xe000e010

08002420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff ff29 	bl	8002280 <__NVIC_SetPriorityGrouping>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b086      	sub	sp, #24
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
 8002442:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002444:	f7ff ff40 	bl	80022c8 <__NVIC_GetPriorityGrouping>
 8002448:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	6978      	ldr	r0, [r7, #20]
 8002450:	f7ff ff90 	bl	8002374 <NVIC_EncodePriority>
 8002454:	4602      	mov	r2, r0
 8002456:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800245a:	4611      	mov	r1, r2
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff5f 	bl	8002320 <__NVIC_SetPriority>
}
 8002462:	bf00      	nop
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	4603      	mov	r3, r0
 8002472:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002474:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff ff33 	bl	80022e4 <__NVIC_EnableIRQ>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff ffa4 	bl	80023dc <SysTick_Config>
 8002494:	4603      	mov	r3, r0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80024a8:	f7fe fbcc 	bl	8000c44 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e316      	b.n	8002ae6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a66      	ldr	r2, [pc, #408]	@ (8002658 <HAL_DMA_Init+0x1b8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d04a      	beq.n	8002558 <HAL_DMA_Init+0xb8>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a65      	ldr	r2, [pc, #404]	@ (800265c <HAL_DMA_Init+0x1bc>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d045      	beq.n	8002558 <HAL_DMA_Init+0xb8>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a63      	ldr	r2, [pc, #396]	@ (8002660 <HAL_DMA_Init+0x1c0>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d040      	beq.n	8002558 <HAL_DMA_Init+0xb8>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a62      	ldr	r2, [pc, #392]	@ (8002664 <HAL_DMA_Init+0x1c4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d03b      	beq.n	8002558 <HAL_DMA_Init+0xb8>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a60      	ldr	r2, [pc, #384]	@ (8002668 <HAL_DMA_Init+0x1c8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d036      	beq.n	8002558 <HAL_DMA_Init+0xb8>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a5f      	ldr	r2, [pc, #380]	@ (800266c <HAL_DMA_Init+0x1cc>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d031      	beq.n	8002558 <HAL_DMA_Init+0xb8>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a5d      	ldr	r2, [pc, #372]	@ (8002670 <HAL_DMA_Init+0x1d0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d02c      	beq.n	8002558 <HAL_DMA_Init+0xb8>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a5c      	ldr	r2, [pc, #368]	@ (8002674 <HAL_DMA_Init+0x1d4>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d027      	beq.n	8002558 <HAL_DMA_Init+0xb8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a5a      	ldr	r2, [pc, #360]	@ (8002678 <HAL_DMA_Init+0x1d8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d022      	beq.n	8002558 <HAL_DMA_Init+0xb8>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a59      	ldr	r2, [pc, #356]	@ (800267c <HAL_DMA_Init+0x1dc>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d01d      	beq.n	8002558 <HAL_DMA_Init+0xb8>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a57      	ldr	r2, [pc, #348]	@ (8002680 <HAL_DMA_Init+0x1e0>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d018      	beq.n	8002558 <HAL_DMA_Init+0xb8>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a56      	ldr	r2, [pc, #344]	@ (8002684 <HAL_DMA_Init+0x1e4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d013      	beq.n	8002558 <HAL_DMA_Init+0xb8>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a54      	ldr	r2, [pc, #336]	@ (8002688 <HAL_DMA_Init+0x1e8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00e      	beq.n	8002558 <HAL_DMA_Init+0xb8>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a53      	ldr	r2, [pc, #332]	@ (800268c <HAL_DMA_Init+0x1ec>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d009      	beq.n	8002558 <HAL_DMA_Init+0xb8>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a51      	ldr	r2, [pc, #324]	@ (8002690 <HAL_DMA_Init+0x1f0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d004      	beq.n	8002558 <HAL_DMA_Init+0xb8>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a50      	ldr	r2, [pc, #320]	@ (8002694 <HAL_DMA_Init+0x1f4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d101      	bne.n	800255c <HAL_DMA_Init+0xbc>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <HAL_DMA_Init+0xbe>
 800255c:	2300      	movs	r3, #0
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 813b 	beq.w	80027da <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a37      	ldr	r2, [pc, #220]	@ (8002658 <HAL_DMA_Init+0x1b8>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d04a      	beq.n	8002614 <HAL_DMA_Init+0x174>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a36      	ldr	r2, [pc, #216]	@ (800265c <HAL_DMA_Init+0x1bc>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d045      	beq.n	8002614 <HAL_DMA_Init+0x174>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a34      	ldr	r2, [pc, #208]	@ (8002660 <HAL_DMA_Init+0x1c0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d040      	beq.n	8002614 <HAL_DMA_Init+0x174>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a33      	ldr	r2, [pc, #204]	@ (8002664 <HAL_DMA_Init+0x1c4>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d03b      	beq.n	8002614 <HAL_DMA_Init+0x174>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a31      	ldr	r2, [pc, #196]	@ (8002668 <HAL_DMA_Init+0x1c8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d036      	beq.n	8002614 <HAL_DMA_Init+0x174>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a30      	ldr	r2, [pc, #192]	@ (800266c <HAL_DMA_Init+0x1cc>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d031      	beq.n	8002614 <HAL_DMA_Init+0x174>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a2e      	ldr	r2, [pc, #184]	@ (8002670 <HAL_DMA_Init+0x1d0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d02c      	beq.n	8002614 <HAL_DMA_Init+0x174>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a2d      	ldr	r2, [pc, #180]	@ (8002674 <HAL_DMA_Init+0x1d4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d027      	beq.n	8002614 <HAL_DMA_Init+0x174>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002678 <HAL_DMA_Init+0x1d8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d022      	beq.n	8002614 <HAL_DMA_Init+0x174>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a2a      	ldr	r2, [pc, #168]	@ (800267c <HAL_DMA_Init+0x1dc>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d01d      	beq.n	8002614 <HAL_DMA_Init+0x174>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a28      	ldr	r2, [pc, #160]	@ (8002680 <HAL_DMA_Init+0x1e0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d018      	beq.n	8002614 <HAL_DMA_Init+0x174>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a27      	ldr	r2, [pc, #156]	@ (8002684 <HAL_DMA_Init+0x1e4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d013      	beq.n	8002614 <HAL_DMA_Init+0x174>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a25      	ldr	r2, [pc, #148]	@ (8002688 <HAL_DMA_Init+0x1e8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00e      	beq.n	8002614 <HAL_DMA_Init+0x174>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a24      	ldr	r2, [pc, #144]	@ (800268c <HAL_DMA_Init+0x1ec>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d009      	beq.n	8002614 <HAL_DMA_Init+0x174>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a22      	ldr	r2, [pc, #136]	@ (8002690 <HAL_DMA_Init+0x1f0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d004      	beq.n	8002614 <HAL_DMA_Init+0x174>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a21      	ldr	r2, [pc, #132]	@ (8002694 <HAL_DMA_Init+0x1f4>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d108      	bne.n	8002626 <HAL_DMA_Init+0x186>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0201 	bic.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	e007      	b.n	8002636 <HAL_DMA_Init+0x196>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0201 	bic.w	r2, r2, #1
 8002634:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002636:	e02f      	b.n	8002698 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002638:	f7fe fb04 	bl	8000c44 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b05      	cmp	r3, #5
 8002644:	d928      	bls.n	8002698 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2220      	movs	r2, #32
 800264a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2203      	movs	r2, #3
 8002650:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e246      	b.n	8002ae6 <HAL_DMA_Init+0x646>
 8002658:	40020010 	.word	0x40020010
 800265c:	40020028 	.word	0x40020028
 8002660:	40020040 	.word	0x40020040
 8002664:	40020058 	.word	0x40020058
 8002668:	40020070 	.word	0x40020070
 800266c:	40020088 	.word	0x40020088
 8002670:	400200a0 	.word	0x400200a0
 8002674:	400200b8 	.word	0x400200b8
 8002678:	40020410 	.word	0x40020410
 800267c:	40020428 	.word	0x40020428
 8002680:	40020440 	.word	0x40020440
 8002684:	40020458 	.word	0x40020458
 8002688:	40020470 	.word	0x40020470
 800268c:	40020488 	.word	0x40020488
 8002690:	400204a0 	.word	0x400204a0
 8002694:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1c8      	bne.n	8002638 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4b83      	ldr	r3, [pc, #524]	@ (80028c0 <HAL_DMA_Init+0x420>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80026be:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d107      	bne.n	80026fc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f4:	4313      	orrs	r3, r2
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80026fc:	4b71      	ldr	r3, [pc, #452]	@ (80028c4 <HAL_DMA_Init+0x424>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b71      	ldr	r3, [pc, #452]	@ (80028c8 <HAL_DMA_Init+0x428>)
 8002702:	4013      	ands	r3, r2
 8002704:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002708:	d328      	bcc.n	800275c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b28      	cmp	r3, #40	@ 0x28
 8002710:	d903      	bls.n	800271a <HAL_DMA_Init+0x27a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b2e      	cmp	r3, #46	@ 0x2e
 8002718:	d917      	bls.n	800274a <HAL_DMA_Init+0x2aa>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002720:	d903      	bls.n	800272a <HAL_DMA_Init+0x28a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b42      	cmp	r3, #66	@ 0x42
 8002728:	d90f      	bls.n	800274a <HAL_DMA_Init+0x2aa>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b46      	cmp	r3, #70	@ 0x46
 8002730:	d903      	bls.n	800273a <HAL_DMA_Init+0x29a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b48      	cmp	r3, #72	@ 0x48
 8002738:	d907      	bls.n	800274a <HAL_DMA_Init+0x2aa>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b4e      	cmp	r3, #78	@ 0x4e
 8002740:	d905      	bls.n	800274e <HAL_DMA_Init+0x2ae>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b52      	cmp	r3, #82	@ 0x52
 8002748:	d801      	bhi.n	800274e <HAL_DMA_Init+0x2ae>
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <HAL_DMA_Init+0x2b0>
 800274e:	2300      	movs	r3, #0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800275a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f023 0307 	bic.w	r3, r3, #7
 8002772:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	4313      	orrs	r3, r2
 800277c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002782:	2b04      	cmp	r3, #4
 8002784:	d117      	bne.n	80027b6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	4313      	orrs	r3, r2
 800278e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00e      	beq.n	80027b6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f001 fdcf 	bl	800433c <DMA_CheckFifoParam>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2240      	movs	r2, #64	@ 0x40
 80027a8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e197      	b.n	8002ae6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f001 fd0a 	bl	80041d8 <DMA_CalcBaseAndBitshift>
 80027c4:	4603      	mov	r3, r0
 80027c6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	223f      	movs	r2, #63	@ 0x3f
 80027d2:	409a      	lsls	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	e0cd      	b.n	8002976 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a3b      	ldr	r2, [pc, #236]	@ (80028cc <HAL_DMA_Init+0x42c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d022      	beq.n	800282a <HAL_DMA_Init+0x38a>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a39      	ldr	r2, [pc, #228]	@ (80028d0 <HAL_DMA_Init+0x430>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d01d      	beq.n	800282a <HAL_DMA_Init+0x38a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a38      	ldr	r2, [pc, #224]	@ (80028d4 <HAL_DMA_Init+0x434>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d018      	beq.n	800282a <HAL_DMA_Init+0x38a>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a36      	ldr	r2, [pc, #216]	@ (80028d8 <HAL_DMA_Init+0x438>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d013      	beq.n	800282a <HAL_DMA_Init+0x38a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a35      	ldr	r2, [pc, #212]	@ (80028dc <HAL_DMA_Init+0x43c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d00e      	beq.n	800282a <HAL_DMA_Init+0x38a>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a33      	ldr	r2, [pc, #204]	@ (80028e0 <HAL_DMA_Init+0x440>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d009      	beq.n	800282a <HAL_DMA_Init+0x38a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a32      	ldr	r2, [pc, #200]	@ (80028e4 <HAL_DMA_Init+0x444>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d004      	beq.n	800282a <HAL_DMA_Init+0x38a>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a30      	ldr	r2, [pc, #192]	@ (80028e8 <HAL_DMA_Init+0x448>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d101      	bne.n	800282e <HAL_DMA_Init+0x38e>
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <HAL_DMA_Init+0x390>
 800282e:	2300      	movs	r3, #0
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8097 	beq.w	8002964 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a24      	ldr	r2, [pc, #144]	@ (80028cc <HAL_DMA_Init+0x42c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d021      	beq.n	8002884 <HAL_DMA_Init+0x3e4>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a22      	ldr	r2, [pc, #136]	@ (80028d0 <HAL_DMA_Init+0x430>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d01c      	beq.n	8002884 <HAL_DMA_Init+0x3e4>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a21      	ldr	r2, [pc, #132]	@ (80028d4 <HAL_DMA_Init+0x434>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d017      	beq.n	8002884 <HAL_DMA_Init+0x3e4>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a1f      	ldr	r2, [pc, #124]	@ (80028d8 <HAL_DMA_Init+0x438>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d012      	beq.n	8002884 <HAL_DMA_Init+0x3e4>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a1e      	ldr	r2, [pc, #120]	@ (80028dc <HAL_DMA_Init+0x43c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d00d      	beq.n	8002884 <HAL_DMA_Init+0x3e4>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1c      	ldr	r2, [pc, #112]	@ (80028e0 <HAL_DMA_Init+0x440>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d008      	beq.n	8002884 <HAL_DMA_Init+0x3e4>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a1b      	ldr	r2, [pc, #108]	@ (80028e4 <HAL_DMA_Init+0x444>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d003      	beq.n	8002884 <HAL_DMA_Init+0x3e4>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a19      	ldr	r2, [pc, #100]	@ (80028e8 <HAL_DMA_Init+0x448>)
 8002882:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4b13      	ldr	r3, [pc, #76]	@ (80028ec <HAL_DMA_Init+0x44c>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b40      	cmp	r3, #64	@ 0x40
 80028aa:	d021      	beq.n	80028f0 <HAL_DMA_Init+0x450>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b80      	cmp	r3, #128	@ 0x80
 80028b2:	d102      	bne.n	80028ba <HAL_DMA_Init+0x41a>
 80028b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80028b8:	e01b      	b.n	80028f2 <HAL_DMA_Init+0x452>
 80028ba:	2300      	movs	r3, #0
 80028bc:	e019      	b.n	80028f2 <HAL_DMA_Init+0x452>
 80028be:	bf00      	nop
 80028c0:	fe10803f 	.word	0xfe10803f
 80028c4:	5c001000 	.word	0x5c001000
 80028c8:	ffff0000 	.word	0xffff0000
 80028cc:	58025408 	.word	0x58025408
 80028d0:	5802541c 	.word	0x5802541c
 80028d4:	58025430 	.word	0x58025430
 80028d8:	58025444 	.word	0x58025444
 80028dc:	58025458 	.word	0x58025458
 80028e0:	5802546c 	.word	0x5802546c
 80028e4:	58025480 	.word	0x58025480
 80028e8:	58025494 	.word	0x58025494
 80028ec:	fffe000f 	.word	0xfffe000f
 80028f0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68d2      	ldr	r2, [r2, #12]
 80028f6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002900:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002908:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002910:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002918:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002920:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4313      	orrs	r3, r2
 8002926:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	4b6e      	ldr	r3, [pc, #440]	@ (8002af0 <HAL_DMA_Init+0x650>)
 8002938:	4413      	add	r3, r2
 800293a:	4a6e      	ldr	r2, [pc, #440]	@ (8002af4 <HAL_DMA_Init+0x654>)
 800293c:	fba2 2303 	umull	r2, r3, r2, r3
 8002940:	091b      	lsrs	r3, r3, #4
 8002942:	009a      	lsls	r2, r3, #2
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f001 fc45 	bl	80041d8 <DMA_CalcBaseAndBitshift>
 800294e:	4603      	mov	r3, r0
 8002950:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002956:	f003 031f 	and.w	r3, r3, #31
 800295a:	2201      	movs	r2, #1
 800295c:	409a      	lsls	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	e008      	b.n	8002976 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2240      	movs	r2, #64	@ 0x40
 8002968:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2203      	movs	r2, #3
 800296e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e0b7      	b.n	8002ae6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a5f      	ldr	r2, [pc, #380]	@ (8002af8 <HAL_DMA_Init+0x658>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d072      	beq.n	8002a66 <HAL_DMA_Init+0x5c6>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a5d      	ldr	r2, [pc, #372]	@ (8002afc <HAL_DMA_Init+0x65c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d06d      	beq.n	8002a66 <HAL_DMA_Init+0x5c6>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a5c      	ldr	r2, [pc, #368]	@ (8002b00 <HAL_DMA_Init+0x660>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d068      	beq.n	8002a66 <HAL_DMA_Init+0x5c6>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a5a      	ldr	r2, [pc, #360]	@ (8002b04 <HAL_DMA_Init+0x664>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d063      	beq.n	8002a66 <HAL_DMA_Init+0x5c6>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a59      	ldr	r2, [pc, #356]	@ (8002b08 <HAL_DMA_Init+0x668>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d05e      	beq.n	8002a66 <HAL_DMA_Init+0x5c6>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a57      	ldr	r2, [pc, #348]	@ (8002b0c <HAL_DMA_Init+0x66c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d059      	beq.n	8002a66 <HAL_DMA_Init+0x5c6>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a56      	ldr	r2, [pc, #344]	@ (8002b10 <HAL_DMA_Init+0x670>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d054      	beq.n	8002a66 <HAL_DMA_Init+0x5c6>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a54      	ldr	r2, [pc, #336]	@ (8002b14 <HAL_DMA_Init+0x674>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d04f      	beq.n	8002a66 <HAL_DMA_Init+0x5c6>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a53      	ldr	r2, [pc, #332]	@ (8002b18 <HAL_DMA_Init+0x678>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d04a      	beq.n	8002a66 <HAL_DMA_Init+0x5c6>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a51      	ldr	r2, [pc, #324]	@ (8002b1c <HAL_DMA_Init+0x67c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d045      	beq.n	8002a66 <HAL_DMA_Init+0x5c6>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a50      	ldr	r2, [pc, #320]	@ (8002b20 <HAL_DMA_Init+0x680>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d040      	beq.n	8002a66 <HAL_DMA_Init+0x5c6>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002b24 <HAL_DMA_Init+0x684>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d03b      	beq.n	8002a66 <HAL_DMA_Init+0x5c6>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a4d      	ldr	r2, [pc, #308]	@ (8002b28 <HAL_DMA_Init+0x688>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d036      	beq.n	8002a66 <HAL_DMA_Init+0x5c6>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a4b      	ldr	r2, [pc, #300]	@ (8002b2c <HAL_DMA_Init+0x68c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d031      	beq.n	8002a66 <HAL_DMA_Init+0x5c6>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a4a      	ldr	r2, [pc, #296]	@ (8002b30 <HAL_DMA_Init+0x690>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d02c      	beq.n	8002a66 <HAL_DMA_Init+0x5c6>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a48      	ldr	r2, [pc, #288]	@ (8002b34 <HAL_DMA_Init+0x694>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d027      	beq.n	8002a66 <HAL_DMA_Init+0x5c6>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a47      	ldr	r2, [pc, #284]	@ (8002b38 <HAL_DMA_Init+0x698>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d022      	beq.n	8002a66 <HAL_DMA_Init+0x5c6>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a45      	ldr	r2, [pc, #276]	@ (8002b3c <HAL_DMA_Init+0x69c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d01d      	beq.n	8002a66 <HAL_DMA_Init+0x5c6>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a44      	ldr	r2, [pc, #272]	@ (8002b40 <HAL_DMA_Init+0x6a0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d018      	beq.n	8002a66 <HAL_DMA_Init+0x5c6>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a42      	ldr	r2, [pc, #264]	@ (8002b44 <HAL_DMA_Init+0x6a4>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d013      	beq.n	8002a66 <HAL_DMA_Init+0x5c6>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a41      	ldr	r2, [pc, #260]	@ (8002b48 <HAL_DMA_Init+0x6a8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d00e      	beq.n	8002a66 <HAL_DMA_Init+0x5c6>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a3f      	ldr	r2, [pc, #252]	@ (8002b4c <HAL_DMA_Init+0x6ac>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d009      	beq.n	8002a66 <HAL_DMA_Init+0x5c6>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a3e      	ldr	r2, [pc, #248]	@ (8002b50 <HAL_DMA_Init+0x6b0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d004      	beq.n	8002a66 <HAL_DMA_Init+0x5c6>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a3c      	ldr	r2, [pc, #240]	@ (8002b54 <HAL_DMA_Init+0x6b4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d101      	bne.n	8002a6a <HAL_DMA_Init+0x5ca>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <HAL_DMA_Init+0x5cc>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d032      	beq.n	8002ad6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f001 fcdf 	bl	8004434 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b80      	cmp	r3, #128	@ 0x80
 8002a7c:	d102      	bne.n	8002a84 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a98:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d010      	beq.n	8002ac4 <HAL_DMA_Init+0x624>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d80c      	bhi.n	8002ac4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f001 fd5c 	bl	8004568 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	e008      	b.n	8002ad6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	a7fdabf8 	.word	0xa7fdabf8
 8002af4:	cccccccd 	.word	0xcccccccd
 8002af8:	40020010 	.word	0x40020010
 8002afc:	40020028 	.word	0x40020028
 8002b00:	40020040 	.word	0x40020040
 8002b04:	40020058 	.word	0x40020058
 8002b08:	40020070 	.word	0x40020070
 8002b0c:	40020088 	.word	0x40020088
 8002b10:	400200a0 	.word	0x400200a0
 8002b14:	400200b8 	.word	0x400200b8
 8002b18:	40020410 	.word	0x40020410
 8002b1c:	40020428 	.word	0x40020428
 8002b20:	40020440 	.word	0x40020440
 8002b24:	40020458 	.word	0x40020458
 8002b28:	40020470 	.word	0x40020470
 8002b2c:	40020488 	.word	0x40020488
 8002b30:	400204a0 	.word	0x400204a0
 8002b34:	400204b8 	.word	0x400204b8
 8002b38:	58025408 	.word	0x58025408
 8002b3c:	5802541c 	.word	0x5802541c
 8002b40:	58025430 	.word	0x58025430
 8002b44:	58025444 	.word	0x58025444
 8002b48:	58025458 	.word	0x58025458
 8002b4c:	5802546c 	.word	0x5802546c
 8002b50:	58025480 	.word	0x58025480
 8002b54:	58025494 	.word	0x58025494

08002b58 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e226      	b.n	8002fc2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_DMA_Start_IT+0x2a>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e21f      	b.n	8002fc2 <HAL_DMA_Start_IT+0x46a>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	f040 820a 	bne.w	8002fac <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a68      	ldr	r2, [pc, #416]	@ (8002d4c <HAL_DMA_Start_IT+0x1f4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d04a      	beq.n	8002c46 <HAL_DMA_Start_IT+0xee>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a66      	ldr	r2, [pc, #408]	@ (8002d50 <HAL_DMA_Start_IT+0x1f8>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d045      	beq.n	8002c46 <HAL_DMA_Start_IT+0xee>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a65      	ldr	r2, [pc, #404]	@ (8002d54 <HAL_DMA_Start_IT+0x1fc>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d040      	beq.n	8002c46 <HAL_DMA_Start_IT+0xee>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a63      	ldr	r2, [pc, #396]	@ (8002d58 <HAL_DMA_Start_IT+0x200>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d03b      	beq.n	8002c46 <HAL_DMA_Start_IT+0xee>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a62      	ldr	r2, [pc, #392]	@ (8002d5c <HAL_DMA_Start_IT+0x204>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d036      	beq.n	8002c46 <HAL_DMA_Start_IT+0xee>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a60      	ldr	r2, [pc, #384]	@ (8002d60 <HAL_DMA_Start_IT+0x208>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d031      	beq.n	8002c46 <HAL_DMA_Start_IT+0xee>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a5f      	ldr	r2, [pc, #380]	@ (8002d64 <HAL_DMA_Start_IT+0x20c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d02c      	beq.n	8002c46 <HAL_DMA_Start_IT+0xee>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a5d      	ldr	r2, [pc, #372]	@ (8002d68 <HAL_DMA_Start_IT+0x210>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d027      	beq.n	8002c46 <HAL_DMA_Start_IT+0xee>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a5c      	ldr	r2, [pc, #368]	@ (8002d6c <HAL_DMA_Start_IT+0x214>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d022      	beq.n	8002c46 <HAL_DMA_Start_IT+0xee>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a5a      	ldr	r2, [pc, #360]	@ (8002d70 <HAL_DMA_Start_IT+0x218>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01d      	beq.n	8002c46 <HAL_DMA_Start_IT+0xee>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a59      	ldr	r2, [pc, #356]	@ (8002d74 <HAL_DMA_Start_IT+0x21c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d018      	beq.n	8002c46 <HAL_DMA_Start_IT+0xee>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a57      	ldr	r2, [pc, #348]	@ (8002d78 <HAL_DMA_Start_IT+0x220>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d013      	beq.n	8002c46 <HAL_DMA_Start_IT+0xee>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a56      	ldr	r2, [pc, #344]	@ (8002d7c <HAL_DMA_Start_IT+0x224>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00e      	beq.n	8002c46 <HAL_DMA_Start_IT+0xee>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a54      	ldr	r2, [pc, #336]	@ (8002d80 <HAL_DMA_Start_IT+0x228>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d009      	beq.n	8002c46 <HAL_DMA_Start_IT+0xee>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a53      	ldr	r2, [pc, #332]	@ (8002d84 <HAL_DMA_Start_IT+0x22c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d004      	beq.n	8002c46 <HAL_DMA_Start_IT+0xee>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a51      	ldr	r2, [pc, #324]	@ (8002d88 <HAL_DMA_Start_IT+0x230>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d108      	bne.n	8002c58 <HAL_DMA_Start_IT+0x100>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0201 	bic.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	e007      	b.n	8002c68 <HAL_DMA_Start_IT+0x110>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0201 	bic.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f001 f906 	bl	8003e80 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a34      	ldr	r2, [pc, #208]	@ (8002d4c <HAL_DMA_Start_IT+0x1f4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d04a      	beq.n	8002d14 <HAL_DMA_Start_IT+0x1bc>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a33      	ldr	r2, [pc, #204]	@ (8002d50 <HAL_DMA_Start_IT+0x1f8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d045      	beq.n	8002d14 <HAL_DMA_Start_IT+0x1bc>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a31      	ldr	r2, [pc, #196]	@ (8002d54 <HAL_DMA_Start_IT+0x1fc>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d040      	beq.n	8002d14 <HAL_DMA_Start_IT+0x1bc>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a30      	ldr	r2, [pc, #192]	@ (8002d58 <HAL_DMA_Start_IT+0x200>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d03b      	beq.n	8002d14 <HAL_DMA_Start_IT+0x1bc>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a2e      	ldr	r2, [pc, #184]	@ (8002d5c <HAL_DMA_Start_IT+0x204>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d036      	beq.n	8002d14 <HAL_DMA_Start_IT+0x1bc>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a2d      	ldr	r2, [pc, #180]	@ (8002d60 <HAL_DMA_Start_IT+0x208>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d031      	beq.n	8002d14 <HAL_DMA_Start_IT+0x1bc>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a2b      	ldr	r2, [pc, #172]	@ (8002d64 <HAL_DMA_Start_IT+0x20c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d02c      	beq.n	8002d14 <HAL_DMA_Start_IT+0x1bc>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8002d68 <HAL_DMA_Start_IT+0x210>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d027      	beq.n	8002d14 <HAL_DMA_Start_IT+0x1bc>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a28      	ldr	r2, [pc, #160]	@ (8002d6c <HAL_DMA_Start_IT+0x214>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d022      	beq.n	8002d14 <HAL_DMA_Start_IT+0x1bc>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a27      	ldr	r2, [pc, #156]	@ (8002d70 <HAL_DMA_Start_IT+0x218>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d01d      	beq.n	8002d14 <HAL_DMA_Start_IT+0x1bc>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a25      	ldr	r2, [pc, #148]	@ (8002d74 <HAL_DMA_Start_IT+0x21c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d018      	beq.n	8002d14 <HAL_DMA_Start_IT+0x1bc>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a24      	ldr	r2, [pc, #144]	@ (8002d78 <HAL_DMA_Start_IT+0x220>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d013      	beq.n	8002d14 <HAL_DMA_Start_IT+0x1bc>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a22      	ldr	r2, [pc, #136]	@ (8002d7c <HAL_DMA_Start_IT+0x224>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d00e      	beq.n	8002d14 <HAL_DMA_Start_IT+0x1bc>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a21      	ldr	r2, [pc, #132]	@ (8002d80 <HAL_DMA_Start_IT+0x228>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d009      	beq.n	8002d14 <HAL_DMA_Start_IT+0x1bc>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a1f      	ldr	r2, [pc, #124]	@ (8002d84 <HAL_DMA_Start_IT+0x22c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d004      	beq.n	8002d14 <HAL_DMA_Start_IT+0x1bc>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8002d88 <HAL_DMA_Start_IT+0x230>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d101      	bne.n	8002d18 <HAL_DMA_Start_IT+0x1c0>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <HAL_DMA_Start_IT+0x1c2>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d036      	beq.n	8002d8c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f023 021e 	bic.w	r2, r3, #30
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0216 	orr.w	r2, r2, #22
 8002d30:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d03e      	beq.n	8002db8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0208 	orr.w	r2, r2, #8
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	e035      	b.n	8002db8 <HAL_DMA_Start_IT+0x260>
 8002d4c:	40020010 	.word	0x40020010
 8002d50:	40020028 	.word	0x40020028
 8002d54:	40020040 	.word	0x40020040
 8002d58:	40020058 	.word	0x40020058
 8002d5c:	40020070 	.word	0x40020070
 8002d60:	40020088 	.word	0x40020088
 8002d64:	400200a0 	.word	0x400200a0
 8002d68:	400200b8 	.word	0x400200b8
 8002d6c:	40020410 	.word	0x40020410
 8002d70:	40020428 	.word	0x40020428
 8002d74:	40020440 	.word	0x40020440
 8002d78:	40020458 	.word	0x40020458
 8002d7c:	40020470 	.word	0x40020470
 8002d80:	40020488 	.word	0x40020488
 8002d84:	400204a0 	.word	0x400204a0
 8002d88:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 020e 	bic.w	r2, r3, #14
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 020a 	orr.w	r2, r2, #10
 8002d9e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d007      	beq.n	8002db8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0204 	orr.w	r2, r2, #4
 8002db6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a83      	ldr	r2, [pc, #524]	@ (8002fcc <HAL_DMA_Start_IT+0x474>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d072      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x350>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a82      	ldr	r2, [pc, #520]	@ (8002fd0 <HAL_DMA_Start_IT+0x478>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d06d      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x350>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a80      	ldr	r2, [pc, #512]	@ (8002fd4 <HAL_DMA_Start_IT+0x47c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d068      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x350>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a7f      	ldr	r2, [pc, #508]	@ (8002fd8 <HAL_DMA_Start_IT+0x480>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d063      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x350>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a7d      	ldr	r2, [pc, #500]	@ (8002fdc <HAL_DMA_Start_IT+0x484>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d05e      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x350>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a7c      	ldr	r2, [pc, #496]	@ (8002fe0 <HAL_DMA_Start_IT+0x488>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d059      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x350>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a7a      	ldr	r2, [pc, #488]	@ (8002fe4 <HAL_DMA_Start_IT+0x48c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d054      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x350>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a79      	ldr	r2, [pc, #484]	@ (8002fe8 <HAL_DMA_Start_IT+0x490>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d04f      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x350>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a77      	ldr	r2, [pc, #476]	@ (8002fec <HAL_DMA_Start_IT+0x494>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d04a      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x350>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a76      	ldr	r2, [pc, #472]	@ (8002ff0 <HAL_DMA_Start_IT+0x498>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d045      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x350>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a74      	ldr	r2, [pc, #464]	@ (8002ff4 <HAL_DMA_Start_IT+0x49c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d040      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x350>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a73      	ldr	r2, [pc, #460]	@ (8002ff8 <HAL_DMA_Start_IT+0x4a0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d03b      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x350>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a71      	ldr	r2, [pc, #452]	@ (8002ffc <HAL_DMA_Start_IT+0x4a4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d036      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x350>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a70      	ldr	r2, [pc, #448]	@ (8003000 <HAL_DMA_Start_IT+0x4a8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d031      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x350>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a6e      	ldr	r2, [pc, #440]	@ (8003004 <HAL_DMA_Start_IT+0x4ac>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d02c      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x350>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a6d      	ldr	r2, [pc, #436]	@ (8003008 <HAL_DMA_Start_IT+0x4b0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d027      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x350>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a6b      	ldr	r2, [pc, #428]	@ (800300c <HAL_DMA_Start_IT+0x4b4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d022      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x350>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a6a      	ldr	r2, [pc, #424]	@ (8003010 <HAL_DMA_Start_IT+0x4b8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d01d      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x350>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a68      	ldr	r2, [pc, #416]	@ (8003014 <HAL_DMA_Start_IT+0x4bc>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d018      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x350>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a67      	ldr	r2, [pc, #412]	@ (8003018 <HAL_DMA_Start_IT+0x4c0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d013      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x350>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a65      	ldr	r2, [pc, #404]	@ (800301c <HAL_DMA_Start_IT+0x4c4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d00e      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x350>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a64      	ldr	r2, [pc, #400]	@ (8003020 <HAL_DMA_Start_IT+0x4c8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d009      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x350>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a62      	ldr	r2, [pc, #392]	@ (8003024 <HAL_DMA_Start_IT+0x4cc>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d004      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x350>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a61      	ldr	r2, [pc, #388]	@ (8003028 <HAL_DMA_Start_IT+0x4d0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d101      	bne.n	8002eac <HAL_DMA_Start_IT+0x354>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e000      	b.n	8002eae <HAL_DMA_Start_IT+0x356>
 8002eac:	2300      	movs	r3, #0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01a      	beq.n	8002ee8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d007      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ece:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d007      	beq.n	8002ee8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ee2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ee6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a37      	ldr	r2, [pc, #220]	@ (8002fcc <HAL_DMA_Start_IT+0x474>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d04a      	beq.n	8002f88 <HAL_DMA_Start_IT+0x430>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a36      	ldr	r2, [pc, #216]	@ (8002fd0 <HAL_DMA_Start_IT+0x478>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d045      	beq.n	8002f88 <HAL_DMA_Start_IT+0x430>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a34      	ldr	r2, [pc, #208]	@ (8002fd4 <HAL_DMA_Start_IT+0x47c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d040      	beq.n	8002f88 <HAL_DMA_Start_IT+0x430>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a33      	ldr	r2, [pc, #204]	@ (8002fd8 <HAL_DMA_Start_IT+0x480>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d03b      	beq.n	8002f88 <HAL_DMA_Start_IT+0x430>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a31      	ldr	r2, [pc, #196]	@ (8002fdc <HAL_DMA_Start_IT+0x484>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d036      	beq.n	8002f88 <HAL_DMA_Start_IT+0x430>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a30      	ldr	r2, [pc, #192]	@ (8002fe0 <HAL_DMA_Start_IT+0x488>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d031      	beq.n	8002f88 <HAL_DMA_Start_IT+0x430>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2e      	ldr	r2, [pc, #184]	@ (8002fe4 <HAL_DMA_Start_IT+0x48c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d02c      	beq.n	8002f88 <HAL_DMA_Start_IT+0x430>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2d      	ldr	r2, [pc, #180]	@ (8002fe8 <HAL_DMA_Start_IT+0x490>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d027      	beq.n	8002f88 <HAL_DMA_Start_IT+0x430>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8002fec <HAL_DMA_Start_IT+0x494>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d022      	beq.n	8002f88 <HAL_DMA_Start_IT+0x430>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a2a      	ldr	r2, [pc, #168]	@ (8002ff0 <HAL_DMA_Start_IT+0x498>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d01d      	beq.n	8002f88 <HAL_DMA_Start_IT+0x430>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a28      	ldr	r2, [pc, #160]	@ (8002ff4 <HAL_DMA_Start_IT+0x49c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d018      	beq.n	8002f88 <HAL_DMA_Start_IT+0x430>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a27      	ldr	r2, [pc, #156]	@ (8002ff8 <HAL_DMA_Start_IT+0x4a0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d013      	beq.n	8002f88 <HAL_DMA_Start_IT+0x430>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a25      	ldr	r2, [pc, #148]	@ (8002ffc <HAL_DMA_Start_IT+0x4a4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00e      	beq.n	8002f88 <HAL_DMA_Start_IT+0x430>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a24      	ldr	r2, [pc, #144]	@ (8003000 <HAL_DMA_Start_IT+0x4a8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d009      	beq.n	8002f88 <HAL_DMA_Start_IT+0x430>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a22      	ldr	r2, [pc, #136]	@ (8003004 <HAL_DMA_Start_IT+0x4ac>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d004      	beq.n	8002f88 <HAL_DMA_Start_IT+0x430>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a21      	ldr	r2, [pc, #132]	@ (8003008 <HAL_DMA_Start_IT+0x4b0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d108      	bne.n	8002f9a <HAL_DMA_Start_IT+0x442>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	e012      	b.n	8002fc0 <HAL_DMA_Start_IT+0x468>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 0201 	orr.w	r2, r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	e009      	b.n	8002fc0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002fb2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40020010 	.word	0x40020010
 8002fd0:	40020028 	.word	0x40020028
 8002fd4:	40020040 	.word	0x40020040
 8002fd8:	40020058 	.word	0x40020058
 8002fdc:	40020070 	.word	0x40020070
 8002fe0:	40020088 	.word	0x40020088
 8002fe4:	400200a0 	.word	0x400200a0
 8002fe8:	400200b8 	.word	0x400200b8
 8002fec:	40020410 	.word	0x40020410
 8002ff0:	40020428 	.word	0x40020428
 8002ff4:	40020440 	.word	0x40020440
 8002ff8:	40020458 	.word	0x40020458
 8002ffc:	40020470 	.word	0x40020470
 8003000:	40020488 	.word	0x40020488
 8003004:	400204a0 	.word	0x400204a0
 8003008:	400204b8 	.word	0x400204b8
 800300c:	58025408 	.word	0x58025408
 8003010:	5802541c 	.word	0x5802541c
 8003014:	58025430 	.word	0x58025430
 8003018:	58025444 	.word	0x58025444
 800301c:	58025458 	.word	0x58025458
 8003020:	5802546c 	.word	0x5802546c
 8003024:	58025480 	.word	0x58025480
 8003028:	58025494 	.word	0x58025494

0800302c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08a      	sub	sp, #40	@ 0x28
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003038:	4b67      	ldr	r3, [pc, #412]	@ (80031d8 <HAL_DMA_IRQHandler+0x1ac>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a67      	ldr	r2, [pc, #412]	@ (80031dc <HAL_DMA_IRQHandler+0x1b0>)
 800303e:	fba2 2303 	umull	r2, r3, r2, r3
 8003042:	0a9b      	lsrs	r3, r3, #10
 8003044:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800304a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003050:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a5f      	ldr	r2, [pc, #380]	@ (80031e0 <HAL_DMA_IRQHandler+0x1b4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d04a      	beq.n	80030fe <HAL_DMA_IRQHandler+0xd2>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a5d      	ldr	r2, [pc, #372]	@ (80031e4 <HAL_DMA_IRQHandler+0x1b8>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d045      	beq.n	80030fe <HAL_DMA_IRQHandler+0xd2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a5c      	ldr	r2, [pc, #368]	@ (80031e8 <HAL_DMA_IRQHandler+0x1bc>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d040      	beq.n	80030fe <HAL_DMA_IRQHandler+0xd2>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a5a      	ldr	r2, [pc, #360]	@ (80031ec <HAL_DMA_IRQHandler+0x1c0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d03b      	beq.n	80030fe <HAL_DMA_IRQHandler+0xd2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a59      	ldr	r2, [pc, #356]	@ (80031f0 <HAL_DMA_IRQHandler+0x1c4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d036      	beq.n	80030fe <HAL_DMA_IRQHandler+0xd2>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a57      	ldr	r2, [pc, #348]	@ (80031f4 <HAL_DMA_IRQHandler+0x1c8>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d031      	beq.n	80030fe <HAL_DMA_IRQHandler+0xd2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a56      	ldr	r2, [pc, #344]	@ (80031f8 <HAL_DMA_IRQHandler+0x1cc>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d02c      	beq.n	80030fe <HAL_DMA_IRQHandler+0xd2>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a54      	ldr	r2, [pc, #336]	@ (80031fc <HAL_DMA_IRQHandler+0x1d0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d027      	beq.n	80030fe <HAL_DMA_IRQHandler+0xd2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a53      	ldr	r2, [pc, #332]	@ (8003200 <HAL_DMA_IRQHandler+0x1d4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d022      	beq.n	80030fe <HAL_DMA_IRQHandler+0xd2>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a51      	ldr	r2, [pc, #324]	@ (8003204 <HAL_DMA_IRQHandler+0x1d8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d01d      	beq.n	80030fe <HAL_DMA_IRQHandler+0xd2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a50      	ldr	r2, [pc, #320]	@ (8003208 <HAL_DMA_IRQHandler+0x1dc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d018      	beq.n	80030fe <HAL_DMA_IRQHandler+0xd2>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a4e      	ldr	r2, [pc, #312]	@ (800320c <HAL_DMA_IRQHandler+0x1e0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d013      	beq.n	80030fe <HAL_DMA_IRQHandler+0xd2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a4d      	ldr	r2, [pc, #308]	@ (8003210 <HAL_DMA_IRQHandler+0x1e4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d00e      	beq.n	80030fe <HAL_DMA_IRQHandler+0xd2>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a4b      	ldr	r2, [pc, #300]	@ (8003214 <HAL_DMA_IRQHandler+0x1e8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d009      	beq.n	80030fe <HAL_DMA_IRQHandler+0xd2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a4a      	ldr	r2, [pc, #296]	@ (8003218 <HAL_DMA_IRQHandler+0x1ec>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d004      	beq.n	80030fe <HAL_DMA_IRQHandler+0xd2>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a48      	ldr	r2, [pc, #288]	@ (800321c <HAL_DMA_IRQHandler+0x1f0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d101      	bne.n	8003102 <HAL_DMA_IRQHandler+0xd6>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <HAL_DMA_IRQHandler+0xd8>
 8003102:	2300      	movs	r3, #0
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 842b 	beq.w	8003960 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310e:	f003 031f 	and.w	r3, r3, #31
 8003112:	2208      	movs	r2, #8
 8003114:	409a      	lsls	r2, r3
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 80a2 	beq.w	8003264 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a2e      	ldr	r2, [pc, #184]	@ (80031e0 <HAL_DMA_IRQHandler+0x1b4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d04a      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x194>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a2d      	ldr	r2, [pc, #180]	@ (80031e4 <HAL_DMA_IRQHandler+0x1b8>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d045      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x194>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a2b      	ldr	r2, [pc, #172]	@ (80031e8 <HAL_DMA_IRQHandler+0x1bc>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d040      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x194>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a2a      	ldr	r2, [pc, #168]	@ (80031ec <HAL_DMA_IRQHandler+0x1c0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d03b      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x194>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a28      	ldr	r2, [pc, #160]	@ (80031f0 <HAL_DMA_IRQHandler+0x1c4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d036      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x194>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a27      	ldr	r2, [pc, #156]	@ (80031f4 <HAL_DMA_IRQHandler+0x1c8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d031      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x194>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a25      	ldr	r2, [pc, #148]	@ (80031f8 <HAL_DMA_IRQHandler+0x1cc>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d02c      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x194>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a24      	ldr	r2, [pc, #144]	@ (80031fc <HAL_DMA_IRQHandler+0x1d0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d027      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x194>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a22      	ldr	r2, [pc, #136]	@ (8003200 <HAL_DMA_IRQHandler+0x1d4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d022      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x194>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a21      	ldr	r2, [pc, #132]	@ (8003204 <HAL_DMA_IRQHandler+0x1d8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d01d      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x194>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a1f      	ldr	r2, [pc, #124]	@ (8003208 <HAL_DMA_IRQHandler+0x1dc>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d018      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x194>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a1e      	ldr	r2, [pc, #120]	@ (800320c <HAL_DMA_IRQHandler+0x1e0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d013      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x194>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a1c      	ldr	r2, [pc, #112]	@ (8003210 <HAL_DMA_IRQHandler+0x1e4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00e      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x194>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a1b      	ldr	r2, [pc, #108]	@ (8003214 <HAL_DMA_IRQHandler+0x1e8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d009      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x194>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a19      	ldr	r2, [pc, #100]	@ (8003218 <HAL_DMA_IRQHandler+0x1ec>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d004      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x194>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a18      	ldr	r2, [pc, #96]	@ (800321c <HAL_DMA_IRQHandler+0x1f0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d12f      	bne.n	8003220 <HAL_DMA_IRQHandler+0x1f4>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	bf14      	ite	ne
 80031ce:	2301      	movne	r3, #1
 80031d0:	2300      	moveq	r3, #0
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	e02e      	b.n	8003234 <HAL_DMA_IRQHandler+0x208>
 80031d6:	bf00      	nop
 80031d8:	24000000 	.word	0x24000000
 80031dc:	1b4e81b5 	.word	0x1b4e81b5
 80031e0:	40020010 	.word	0x40020010
 80031e4:	40020028 	.word	0x40020028
 80031e8:	40020040 	.word	0x40020040
 80031ec:	40020058 	.word	0x40020058
 80031f0:	40020070 	.word	0x40020070
 80031f4:	40020088 	.word	0x40020088
 80031f8:	400200a0 	.word	0x400200a0
 80031fc:	400200b8 	.word	0x400200b8
 8003200:	40020410 	.word	0x40020410
 8003204:	40020428 	.word	0x40020428
 8003208:	40020440 	.word	0x40020440
 800320c:	40020458 	.word	0x40020458
 8003210:	40020470 	.word	0x40020470
 8003214:	40020488 	.word	0x40020488
 8003218:	400204a0 	.word	0x400204a0
 800321c:	400204b8 	.word	0x400204b8
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b00      	cmp	r3, #0
 800322c:	bf14      	ite	ne
 800322e:	2301      	movne	r3, #1
 8003230:	2300      	moveq	r3, #0
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d015      	beq.n	8003264 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0204 	bic.w	r2, r2, #4
 8003246:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324c:	f003 031f 	and.w	r3, r3, #31
 8003250:	2208      	movs	r2, #8
 8003252:	409a      	lsls	r2, r3
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325c:	f043 0201 	orr.w	r2, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	fa22 f303 	lsr.w	r3, r2, r3
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d06e      	beq.n	8003358 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a69      	ldr	r2, [pc, #420]	@ (8003424 <HAL_DMA_IRQHandler+0x3f8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d04a      	beq.n	800331a <HAL_DMA_IRQHandler+0x2ee>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a67      	ldr	r2, [pc, #412]	@ (8003428 <HAL_DMA_IRQHandler+0x3fc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d045      	beq.n	800331a <HAL_DMA_IRQHandler+0x2ee>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a66      	ldr	r2, [pc, #408]	@ (800342c <HAL_DMA_IRQHandler+0x400>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d040      	beq.n	800331a <HAL_DMA_IRQHandler+0x2ee>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a64      	ldr	r2, [pc, #400]	@ (8003430 <HAL_DMA_IRQHandler+0x404>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d03b      	beq.n	800331a <HAL_DMA_IRQHandler+0x2ee>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a63      	ldr	r2, [pc, #396]	@ (8003434 <HAL_DMA_IRQHandler+0x408>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d036      	beq.n	800331a <HAL_DMA_IRQHandler+0x2ee>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a61      	ldr	r2, [pc, #388]	@ (8003438 <HAL_DMA_IRQHandler+0x40c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d031      	beq.n	800331a <HAL_DMA_IRQHandler+0x2ee>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a60      	ldr	r2, [pc, #384]	@ (800343c <HAL_DMA_IRQHandler+0x410>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d02c      	beq.n	800331a <HAL_DMA_IRQHandler+0x2ee>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a5e      	ldr	r2, [pc, #376]	@ (8003440 <HAL_DMA_IRQHandler+0x414>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d027      	beq.n	800331a <HAL_DMA_IRQHandler+0x2ee>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a5d      	ldr	r2, [pc, #372]	@ (8003444 <HAL_DMA_IRQHandler+0x418>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d022      	beq.n	800331a <HAL_DMA_IRQHandler+0x2ee>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a5b      	ldr	r2, [pc, #364]	@ (8003448 <HAL_DMA_IRQHandler+0x41c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01d      	beq.n	800331a <HAL_DMA_IRQHandler+0x2ee>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a5a      	ldr	r2, [pc, #360]	@ (800344c <HAL_DMA_IRQHandler+0x420>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d018      	beq.n	800331a <HAL_DMA_IRQHandler+0x2ee>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a58      	ldr	r2, [pc, #352]	@ (8003450 <HAL_DMA_IRQHandler+0x424>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d013      	beq.n	800331a <HAL_DMA_IRQHandler+0x2ee>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a57      	ldr	r2, [pc, #348]	@ (8003454 <HAL_DMA_IRQHandler+0x428>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00e      	beq.n	800331a <HAL_DMA_IRQHandler+0x2ee>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a55      	ldr	r2, [pc, #340]	@ (8003458 <HAL_DMA_IRQHandler+0x42c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d009      	beq.n	800331a <HAL_DMA_IRQHandler+0x2ee>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a54      	ldr	r2, [pc, #336]	@ (800345c <HAL_DMA_IRQHandler+0x430>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d004      	beq.n	800331a <HAL_DMA_IRQHandler+0x2ee>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a52      	ldr	r2, [pc, #328]	@ (8003460 <HAL_DMA_IRQHandler+0x434>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d10a      	bne.n	8003330 <HAL_DMA_IRQHandler+0x304>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf14      	ite	ne
 8003328:	2301      	movne	r3, #1
 800332a:	2300      	moveq	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	e003      	b.n	8003338 <HAL_DMA_IRQHandler+0x30c>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2300      	movs	r3, #0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00d      	beq.n	8003358 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003340:	f003 031f 	and.w	r3, r3, #31
 8003344:	2201      	movs	r2, #1
 8003346:	409a      	lsls	r2, r3
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003350:	f043 0202 	orr.w	r2, r3, #2
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	2204      	movs	r2, #4
 8003362:	409a      	lsls	r2, r3
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	4013      	ands	r3, r2
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 808f 	beq.w	800348c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a2c      	ldr	r2, [pc, #176]	@ (8003424 <HAL_DMA_IRQHandler+0x3f8>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d04a      	beq.n	800340e <HAL_DMA_IRQHandler+0x3e2>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a2a      	ldr	r2, [pc, #168]	@ (8003428 <HAL_DMA_IRQHandler+0x3fc>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d045      	beq.n	800340e <HAL_DMA_IRQHandler+0x3e2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a29      	ldr	r2, [pc, #164]	@ (800342c <HAL_DMA_IRQHandler+0x400>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d040      	beq.n	800340e <HAL_DMA_IRQHandler+0x3e2>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a27      	ldr	r2, [pc, #156]	@ (8003430 <HAL_DMA_IRQHandler+0x404>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d03b      	beq.n	800340e <HAL_DMA_IRQHandler+0x3e2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a26      	ldr	r2, [pc, #152]	@ (8003434 <HAL_DMA_IRQHandler+0x408>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d036      	beq.n	800340e <HAL_DMA_IRQHandler+0x3e2>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a24      	ldr	r2, [pc, #144]	@ (8003438 <HAL_DMA_IRQHandler+0x40c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d031      	beq.n	800340e <HAL_DMA_IRQHandler+0x3e2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a23      	ldr	r2, [pc, #140]	@ (800343c <HAL_DMA_IRQHandler+0x410>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d02c      	beq.n	800340e <HAL_DMA_IRQHandler+0x3e2>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a21      	ldr	r2, [pc, #132]	@ (8003440 <HAL_DMA_IRQHandler+0x414>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d027      	beq.n	800340e <HAL_DMA_IRQHandler+0x3e2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a20      	ldr	r2, [pc, #128]	@ (8003444 <HAL_DMA_IRQHandler+0x418>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d022      	beq.n	800340e <HAL_DMA_IRQHandler+0x3e2>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003448 <HAL_DMA_IRQHandler+0x41c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d01d      	beq.n	800340e <HAL_DMA_IRQHandler+0x3e2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a1d      	ldr	r2, [pc, #116]	@ (800344c <HAL_DMA_IRQHandler+0x420>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d018      	beq.n	800340e <HAL_DMA_IRQHandler+0x3e2>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003450 <HAL_DMA_IRQHandler+0x424>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d013      	beq.n	800340e <HAL_DMA_IRQHandler+0x3e2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003454 <HAL_DMA_IRQHandler+0x428>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00e      	beq.n	800340e <HAL_DMA_IRQHandler+0x3e2>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a18      	ldr	r2, [pc, #96]	@ (8003458 <HAL_DMA_IRQHandler+0x42c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d009      	beq.n	800340e <HAL_DMA_IRQHandler+0x3e2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a17      	ldr	r2, [pc, #92]	@ (800345c <HAL_DMA_IRQHandler+0x430>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d004      	beq.n	800340e <HAL_DMA_IRQHandler+0x3e2>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a15      	ldr	r2, [pc, #84]	@ (8003460 <HAL_DMA_IRQHandler+0x434>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d12a      	bne.n	8003464 <HAL_DMA_IRQHandler+0x438>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf14      	ite	ne
 800341c:	2301      	movne	r3, #1
 800341e:	2300      	moveq	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	e023      	b.n	800346c <HAL_DMA_IRQHandler+0x440>
 8003424:	40020010 	.word	0x40020010
 8003428:	40020028 	.word	0x40020028
 800342c:	40020040 	.word	0x40020040
 8003430:	40020058 	.word	0x40020058
 8003434:	40020070 	.word	0x40020070
 8003438:	40020088 	.word	0x40020088
 800343c:	400200a0 	.word	0x400200a0
 8003440:	400200b8 	.word	0x400200b8
 8003444:	40020410 	.word	0x40020410
 8003448:	40020428 	.word	0x40020428
 800344c:	40020440 	.word	0x40020440
 8003450:	40020458 	.word	0x40020458
 8003454:	40020470 	.word	0x40020470
 8003458:	40020488 	.word	0x40020488
 800345c:	400204a0 	.word	0x400204a0
 8003460:	400204b8 	.word	0x400204b8
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2300      	movs	r3, #0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00d      	beq.n	800348c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003474:	f003 031f 	and.w	r3, r3, #31
 8003478:	2204      	movs	r2, #4
 800347a:	409a      	lsls	r2, r3
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003484:	f043 0204 	orr.w	r2, r3, #4
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003490:	f003 031f 	and.w	r3, r3, #31
 8003494:	2210      	movs	r2, #16
 8003496:	409a      	lsls	r2, r3
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	4013      	ands	r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80a6 	beq.w	80035ee <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a85      	ldr	r2, [pc, #532]	@ (80036bc <HAL_DMA_IRQHandler+0x690>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d04a      	beq.n	8003542 <HAL_DMA_IRQHandler+0x516>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a83      	ldr	r2, [pc, #524]	@ (80036c0 <HAL_DMA_IRQHandler+0x694>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d045      	beq.n	8003542 <HAL_DMA_IRQHandler+0x516>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a82      	ldr	r2, [pc, #520]	@ (80036c4 <HAL_DMA_IRQHandler+0x698>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d040      	beq.n	8003542 <HAL_DMA_IRQHandler+0x516>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a80      	ldr	r2, [pc, #512]	@ (80036c8 <HAL_DMA_IRQHandler+0x69c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d03b      	beq.n	8003542 <HAL_DMA_IRQHandler+0x516>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a7f      	ldr	r2, [pc, #508]	@ (80036cc <HAL_DMA_IRQHandler+0x6a0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d036      	beq.n	8003542 <HAL_DMA_IRQHandler+0x516>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a7d      	ldr	r2, [pc, #500]	@ (80036d0 <HAL_DMA_IRQHandler+0x6a4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d031      	beq.n	8003542 <HAL_DMA_IRQHandler+0x516>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a7c      	ldr	r2, [pc, #496]	@ (80036d4 <HAL_DMA_IRQHandler+0x6a8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d02c      	beq.n	8003542 <HAL_DMA_IRQHandler+0x516>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a7a      	ldr	r2, [pc, #488]	@ (80036d8 <HAL_DMA_IRQHandler+0x6ac>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d027      	beq.n	8003542 <HAL_DMA_IRQHandler+0x516>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a79      	ldr	r2, [pc, #484]	@ (80036dc <HAL_DMA_IRQHandler+0x6b0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d022      	beq.n	8003542 <HAL_DMA_IRQHandler+0x516>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a77      	ldr	r2, [pc, #476]	@ (80036e0 <HAL_DMA_IRQHandler+0x6b4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d01d      	beq.n	8003542 <HAL_DMA_IRQHandler+0x516>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a76      	ldr	r2, [pc, #472]	@ (80036e4 <HAL_DMA_IRQHandler+0x6b8>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d018      	beq.n	8003542 <HAL_DMA_IRQHandler+0x516>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a74      	ldr	r2, [pc, #464]	@ (80036e8 <HAL_DMA_IRQHandler+0x6bc>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d013      	beq.n	8003542 <HAL_DMA_IRQHandler+0x516>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a73      	ldr	r2, [pc, #460]	@ (80036ec <HAL_DMA_IRQHandler+0x6c0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00e      	beq.n	8003542 <HAL_DMA_IRQHandler+0x516>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a71      	ldr	r2, [pc, #452]	@ (80036f0 <HAL_DMA_IRQHandler+0x6c4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d009      	beq.n	8003542 <HAL_DMA_IRQHandler+0x516>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a70      	ldr	r2, [pc, #448]	@ (80036f4 <HAL_DMA_IRQHandler+0x6c8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d004      	beq.n	8003542 <HAL_DMA_IRQHandler+0x516>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a6e      	ldr	r2, [pc, #440]	@ (80036f8 <HAL_DMA_IRQHandler+0x6cc>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d10a      	bne.n	8003558 <HAL_DMA_IRQHandler+0x52c>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	bf14      	ite	ne
 8003550:	2301      	movne	r3, #1
 8003552:	2300      	moveq	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	e009      	b.n	800356c <HAL_DMA_IRQHandler+0x540>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b00      	cmp	r3, #0
 8003564:	bf14      	ite	ne
 8003566:	2301      	movne	r3, #1
 8003568:	2300      	moveq	r3, #0
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d03e      	beq.n	80035ee <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003574:	f003 031f 	and.w	r3, r3, #31
 8003578:	2210      	movs	r2, #16
 800357a:	409a      	lsls	r2, r3
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d018      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d108      	bne.n	80035ae <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d024      	beq.n	80035ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	4798      	blx	r3
 80035ac:	e01f      	b.n	80035ee <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d01b      	beq.n	80035ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	4798      	blx	r3
 80035be:	e016      	b.n	80035ee <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d107      	bne.n	80035de <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0208 	bic.w	r2, r2, #8
 80035dc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f2:	f003 031f 	and.w	r3, r3, #31
 80035f6:	2220      	movs	r2, #32
 80035f8:	409a      	lsls	r2, r3
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 8110 	beq.w	8003824 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a2c      	ldr	r2, [pc, #176]	@ (80036bc <HAL_DMA_IRQHandler+0x690>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d04a      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x678>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a2b      	ldr	r2, [pc, #172]	@ (80036c0 <HAL_DMA_IRQHandler+0x694>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d045      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x678>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a29      	ldr	r2, [pc, #164]	@ (80036c4 <HAL_DMA_IRQHandler+0x698>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d040      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x678>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a28      	ldr	r2, [pc, #160]	@ (80036c8 <HAL_DMA_IRQHandler+0x69c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d03b      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x678>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a26      	ldr	r2, [pc, #152]	@ (80036cc <HAL_DMA_IRQHandler+0x6a0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d036      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x678>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a25      	ldr	r2, [pc, #148]	@ (80036d0 <HAL_DMA_IRQHandler+0x6a4>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d031      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x678>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a23      	ldr	r2, [pc, #140]	@ (80036d4 <HAL_DMA_IRQHandler+0x6a8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d02c      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x678>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a22      	ldr	r2, [pc, #136]	@ (80036d8 <HAL_DMA_IRQHandler+0x6ac>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d027      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x678>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a20      	ldr	r2, [pc, #128]	@ (80036dc <HAL_DMA_IRQHandler+0x6b0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d022      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x678>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a1f      	ldr	r2, [pc, #124]	@ (80036e0 <HAL_DMA_IRQHandler+0x6b4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d01d      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x678>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a1d      	ldr	r2, [pc, #116]	@ (80036e4 <HAL_DMA_IRQHandler+0x6b8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d018      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x678>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1c      	ldr	r2, [pc, #112]	@ (80036e8 <HAL_DMA_IRQHandler+0x6bc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d013      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x678>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1a      	ldr	r2, [pc, #104]	@ (80036ec <HAL_DMA_IRQHandler+0x6c0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00e      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x678>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a19      	ldr	r2, [pc, #100]	@ (80036f0 <HAL_DMA_IRQHandler+0x6c4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d009      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x678>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a17      	ldr	r2, [pc, #92]	@ (80036f4 <HAL_DMA_IRQHandler+0x6c8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d004      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x678>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a16      	ldr	r2, [pc, #88]	@ (80036f8 <HAL_DMA_IRQHandler+0x6cc>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d12b      	bne.n	80036fc <HAL_DMA_IRQHandler+0x6d0>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0310 	and.w	r3, r3, #16
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	bf14      	ite	ne
 80036b2:	2301      	movne	r3, #1
 80036b4:	2300      	moveq	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	e02a      	b.n	8003710 <HAL_DMA_IRQHandler+0x6e4>
 80036ba:	bf00      	nop
 80036bc:	40020010 	.word	0x40020010
 80036c0:	40020028 	.word	0x40020028
 80036c4:	40020040 	.word	0x40020040
 80036c8:	40020058 	.word	0x40020058
 80036cc:	40020070 	.word	0x40020070
 80036d0:	40020088 	.word	0x40020088
 80036d4:	400200a0 	.word	0x400200a0
 80036d8:	400200b8 	.word	0x400200b8
 80036dc:	40020410 	.word	0x40020410
 80036e0:	40020428 	.word	0x40020428
 80036e4:	40020440 	.word	0x40020440
 80036e8:	40020458 	.word	0x40020458
 80036ec:	40020470 	.word	0x40020470
 80036f0:	40020488 	.word	0x40020488
 80036f4:	400204a0 	.word	0x400204a0
 80036f8:	400204b8 	.word	0x400204b8
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	bf14      	ite	ne
 800370a:	2301      	movne	r3, #1
 800370c:	2300      	moveq	r3, #0
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 8087 	beq.w	8003824 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371a:	f003 031f 	and.w	r3, r3, #31
 800371e:	2220      	movs	r2, #32
 8003720:	409a      	lsls	r2, r3
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b04      	cmp	r3, #4
 8003730:	d139      	bne.n	80037a6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0216 	bic.w	r2, r2, #22
 8003740:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695a      	ldr	r2, [r3, #20]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003750:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	d103      	bne.n	8003762 <HAL_DMA_IRQHandler+0x736>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800375e:	2b00      	cmp	r3, #0
 8003760:	d007      	beq.n	8003772 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0208 	bic.w	r2, r2, #8
 8003770:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003776:	f003 031f 	and.w	r3, r3, #31
 800377a:	223f      	movs	r2, #63	@ 0x3f
 800377c:	409a      	lsls	r2, r3
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 834a 	beq.w	8003e30 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	4798      	blx	r3
          }
          return;
 80037a4:	e344      	b.n	8003e30 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d018      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d108      	bne.n	80037d4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d02c      	beq.n	8003824 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	4798      	blx	r3
 80037d2:	e027      	b.n	8003824 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d023      	beq.n	8003824 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	4798      	blx	r3
 80037e4:	e01e      	b.n	8003824 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10f      	bne.n	8003814 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0210 	bic.w	r2, r2, #16
 8003802:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 8306 	beq.w	8003e3a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 8088 	beq.w	800394c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2204      	movs	r2, #4
 8003840:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a7a      	ldr	r2, [pc, #488]	@ (8003a34 <HAL_DMA_IRQHandler+0xa08>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d04a      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x8b8>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a79      	ldr	r2, [pc, #484]	@ (8003a38 <HAL_DMA_IRQHandler+0xa0c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d045      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x8b8>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a77      	ldr	r2, [pc, #476]	@ (8003a3c <HAL_DMA_IRQHandler+0xa10>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d040      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x8b8>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a76      	ldr	r2, [pc, #472]	@ (8003a40 <HAL_DMA_IRQHandler+0xa14>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d03b      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x8b8>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a74      	ldr	r2, [pc, #464]	@ (8003a44 <HAL_DMA_IRQHandler+0xa18>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d036      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x8b8>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a73      	ldr	r2, [pc, #460]	@ (8003a48 <HAL_DMA_IRQHandler+0xa1c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d031      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x8b8>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a71      	ldr	r2, [pc, #452]	@ (8003a4c <HAL_DMA_IRQHandler+0xa20>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d02c      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x8b8>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a70      	ldr	r2, [pc, #448]	@ (8003a50 <HAL_DMA_IRQHandler+0xa24>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d027      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x8b8>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a6e      	ldr	r2, [pc, #440]	@ (8003a54 <HAL_DMA_IRQHandler+0xa28>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d022      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x8b8>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a6d      	ldr	r2, [pc, #436]	@ (8003a58 <HAL_DMA_IRQHandler+0xa2c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d01d      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x8b8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a6b      	ldr	r2, [pc, #428]	@ (8003a5c <HAL_DMA_IRQHandler+0xa30>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d018      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x8b8>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a6a      	ldr	r2, [pc, #424]	@ (8003a60 <HAL_DMA_IRQHandler+0xa34>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d013      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x8b8>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a68      	ldr	r2, [pc, #416]	@ (8003a64 <HAL_DMA_IRQHandler+0xa38>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00e      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x8b8>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a67      	ldr	r2, [pc, #412]	@ (8003a68 <HAL_DMA_IRQHandler+0xa3c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d009      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x8b8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a65      	ldr	r2, [pc, #404]	@ (8003a6c <HAL_DMA_IRQHandler+0xa40>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d004      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x8b8>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a64      	ldr	r2, [pc, #400]	@ (8003a70 <HAL_DMA_IRQHandler+0xa44>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d108      	bne.n	80038f6 <HAL_DMA_IRQHandler+0x8ca>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0201 	bic.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	e007      	b.n	8003906 <HAL_DMA_IRQHandler+0x8da>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0201 	bic.w	r2, r2, #1
 8003904:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	3301      	adds	r3, #1
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800390e:	429a      	cmp	r2, r3
 8003910:	d307      	bcc.n	8003922 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1f2      	bne.n	8003906 <HAL_DMA_IRQHandler+0x8da>
 8003920:	e000      	b.n	8003924 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003922:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d004      	beq.n	800393c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2203      	movs	r2, #3
 8003936:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800393a:	e003      	b.n	8003944 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 8272 	beq.w	8003e3a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	4798      	blx	r3
 800395e:	e26c      	b.n	8003e3a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a43      	ldr	r2, [pc, #268]	@ (8003a74 <HAL_DMA_IRQHandler+0xa48>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d022      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x984>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a42      	ldr	r2, [pc, #264]	@ (8003a78 <HAL_DMA_IRQHandler+0xa4c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d01d      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x984>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a40      	ldr	r2, [pc, #256]	@ (8003a7c <HAL_DMA_IRQHandler+0xa50>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d018      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x984>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a3f      	ldr	r2, [pc, #252]	@ (8003a80 <HAL_DMA_IRQHandler+0xa54>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d013      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x984>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a3d      	ldr	r2, [pc, #244]	@ (8003a84 <HAL_DMA_IRQHandler+0xa58>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d00e      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x984>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a3c      	ldr	r2, [pc, #240]	@ (8003a88 <HAL_DMA_IRQHandler+0xa5c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d009      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x984>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a3a      	ldr	r2, [pc, #232]	@ (8003a8c <HAL_DMA_IRQHandler+0xa60>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d004      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x984>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a39      	ldr	r2, [pc, #228]	@ (8003a90 <HAL_DMA_IRQHandler+0xa64>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d101      	bne.n	80039b4 <HAL_DMA_IRQHandler+0x988>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <HAL_DMA_IRQHandler+0x98a>
 80039b4:	2300      	movs	r3, #0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 823f 	beq.w	8003e3a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c8:	f003 031f 	and.w	r3, r3, #31
 80039cc:	2204      	movs	r2, #4
 80039ce:	409a      	lsls	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 80cd 	beq.w	8003b74 <HAL_DMA_IRQHandler+0xb48>
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 80c7 	beq.w	8003b74 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ea:	f003 031f 	and.w	r3, r3, #31
 80039ee:	2204      	movs	r2, #4
 80039f0:	409a      	lsls	r2, r3
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d049      	beq.n	8003a94 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d109      	bne.n	8003a1e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 8210 	beq.w	8003e34 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a1c:	e20a      	b.n	8003e34 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 8206 	beq.w	8003e34 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a30:	e200      	b.n	8003e34 <HAL_DMA_IRQHandler+0xe08>
 8003a32:	bf00      	nop
 8003a34:	40020010 	.word	0x40020010
 8003a38:	40020028 	.word	0x40020028
 8003a3c:	40020040 	.word	0x40020040
 8003a40:	40020058 	.word	0x40020058
 8003a44:	40020070 	.word	0x40020070
 8003a48:	40020088 	.word	0x40020088
 8003a4c:	400200a0 	.word	0x400200a0
 8003a50:	400200b8 	.word	0x400200b8
 8003a54:	40020410 	.word	0x40020410
 8003a58:	40020428 	.word	0x40020428
 8003a5c:	40020440 	.word	0x40020440
 8003a60:	40020458 	.word	0x40020458
 8003a64:	40020470 	.word	0x40020470
 8003a68:	40020488 	.word	0x40020488
 8003a6c:	400204a0 	.word	0x400204a0
 8003a70:	400204b8 	.word	0x400204b8
 8003a74:	58025408 	.word	0x58025408
 8003a78:	5802541c 	.word	0x5802541c
 8003a7c:	58025430 	.word	0x58025430
 8003a80:	58025444 	.word	0x58025444
 8003a84:	58025458 	.word	0x58025458
 8003a88:	5802546c 	.word	0x5802546c
 8003a8c:	58025480 	.word	0x58025480
 8003a90:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f003 0320 	and.w	r3, r3, #32
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d160      	bne.n	8003b60 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a7f      	ldr	r2, [pc, #508]	@ (8003ca0 <HAL_DMA_IRQHandler+0xc74>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d04a      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xb12>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a7d      	ldr	r2, [pc, #500]	@ (8003ca4 <HAL_DMA_IRQHandler+0xc78>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d045      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xb12>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a7c      	ldr	r2, [pc, #496]	@ (8003ca8 <HAL_DMA_IRQHandler+0xc7c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d040      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xb12>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a7a      	ldr	r2, [pc, #488]	@ (8003cac <HAL_DMA_IRQHandler+0xc80>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d03b      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xb12>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a79      	ldr	r2, [pc, #484]	@ (8003cb0 <HAL_DMA_IRQHandler+0xc84>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d036      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xb12>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a77      	ldr	r2, [pc, #476]	@ (8003cb4 <HAL_DMA_IRQHandler+0xc88>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d031      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xb12>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a76      	ldr	r2, [pc, #472]	@ (8003cb8 <HAL_DMA_IRQHandler+0xc8c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d02c      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xb12>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a74      	ldr	r2, [pc, #464]	@ (8003cbc <HAL_DMA_IRQHandler+0xc90>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d027      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xb12>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a73      	ldr	r2, [pc, #460]	@ (8003cc0 <HAL_DMA_IRQHandler+0xc94>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d022      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xb12>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a71      	ldr	r2, [pc, #452]	@ (8003cc4 <HAL_DMA_IRQHandler+0xc98>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d01d      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xb12>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a70      	ldr	r2, [pc, #448]	@ (8003cc8 <HAL_DMA_IRQHandler+0xc9c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d018      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xb12>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a6e      	ldr	r2, [pc, #440]	@ (8003ccc <HAL_DMA_IRQHandler+0xca0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d013      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xb12>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a6d      	ldr	r2, [pc, #436]	@ (8003cd0 <HAL_DMA_IRQHandler+0xca4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d00e      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xb12>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a6b      	ldr	r2, [pc, #428]	@ (8003cd4 <HAL_DMA_IRQHandler+0xca8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d009      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xb12>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a6a      	ldr	r2, [pc, #424]	@ (8003cd8 <HAL_DMA_IRQHandler+0xcac>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d004      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xb12>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a68      	ldr	r2, [pc, #416]	@ (8003cdc <HAL_DMA_IRQHandler+0xcb0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d108      	bne.n	8003b50 <HAL_DMA_IRQHandler+0xb24>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0208 	bic.w	r2, r2, #8
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	e007      	b.n	8003b60 <HAL_DMA_IRQHandler+0xb34>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0204 	bic.w	r2, r2, #4
 8003b5e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 8165 	beq.w	8003e34 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b72:	e15f      	b.n	8003e34 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b78:	f003 031f 	and.w	r3, r3, #31
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	409a      	lsls	r2, r3
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	4013      	ands	r3, r2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80c5 	beq.w	8003d14 <HAL_DMA_IRQHandler+0xce8>
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 80bf 	beq.w	8003d14 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9a:	f003 031f 	and.w	r3, r3, #31
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	409a      	lsls	r2, r3
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d018      	beq.n	8003be2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d109      	bne.n	8003bce <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 813a 	beq.w	8003e38 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bcc:	e134      	b.n	8003e38 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 8130 	beq.w	8003e38 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003be0:	e12a      	b.n	8003e38 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f003 0320 	and.w	r3, r3, #32
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f040 8089 	bne.w	8003d00 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a2b      	ldr	r2, [pc, #172]	@ (8003ca0 <HAL_DMA_IRQHandler+0xc74>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d04a      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xc62>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a29      	ldr	r2, [pc, #164]	@ (8003ca4 <HAL_DMA_IRQHandler+0xc78>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d045      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xc62>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a28      	ldr	r2, [pc, #160]	@ (8003ca8 <HAL_DMA_IRQHandler+0xc7c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d040      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xc62>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a26      	ldr	r2, [pc, #152]	@ (8003cac <HAL_DMA_IRQHandler+0xc80>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d03b      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xc62>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a25      	ldr	r2, [pc, #148]	@ (8003cb0 <HAL_DMA_IRQHandler+0xc84>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d036      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xc62>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a23      	ldr	r2, [pc, #140]	@ (8003cb4 <HAL_DMA_IRQHandler+0xc88>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d031      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xc62>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a22      	ldr	r2, [pc, #136]	@ (8003cb8 <HAL_DMA_IRQHandler+0xc8c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d02c      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xc62>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a20      	ldr	r2, [pc, #128]	@ (8003cbc <HAL_DMA_IRQHandler+0xc90>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d027      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xc62>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a1f      	ldr	r2, [pc, #124]	@ (8003cc0 <HAL_DMA_IRQHandler+0xc94>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d022      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xc62>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8003cc4 <HAL_DMA_IRQHandler+0xc98>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d01d      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xc62>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a1c      	ldr	r2, [pc, #112]	@ (8003cc8 <HAL_DMA_IRQHandler+0xc9c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d018      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xc62>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a1a      	ldr	r2, [pc, #104]	@ (8003ccc <HAL_DMA_IRQHandler+0xca0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d013      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xc62>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a19      	ldr	r2, [pc, #100]	@ (8003cd0 <HAL_DMA_IRQHandler+0xca4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00e      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xc62>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a17      	ldr	r2, [pc, #92]	@ (8003cd4 <HAL_DMA_IRQHandler+0xca8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d009      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xc62>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a16      	ldr	r2, [pc, #88]	@ (8003cd8 <HAL_DMA_IRQHandler+0xcac>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d004      	beq.n	8003c8e <HAL_DMA_IRQHandler+0xc62>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a14      	ldr	r2, [pc, #80]	@ (8003cdc <HAL_DMA_IRQHandler+0xcb0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d128      	bne.n	8003ce0 <HAL_DMA_IRQHandler+0xcb4>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0214 	bic.w	r2, r2, #20
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	e027      	b.n	8003cf0 <HAL_DMA_IRQHandler+0xcc4>
 8003ca0:	40020010 	.word	0x40020010
 8003ca4:	40020028 	.word	0x40020028
 8003ca8:	40020040 	.word	0x40020040
 8003cac:	40020058 	.word	0x40020058
 8003cb0:	40020070 	.word	0x40020070
 8003cb4:	40020088 	.word	0x40020088
 8003cb8:	400200a0 	.word	0x400200a0
 8003cbc:	400200b8 	.word	0x400200b8
 8003cc0:	40020410 	.word	0x40020410
 8003cc4:	40020428 	.word	0x40020428
 8003cc8:	40020440 	.word	0x40020440
 8003ccc:	40020458 	.word	0x40020458
 8003cd0:	40020470 	.word	0x40020470
 8003cd4:	40020488 	.word	0x40020488
 8003cd8:	400204a0 	.word	0x400204a0
 8003cdc:	400204b8 	.word	0x400204b8
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 020a 	bic.w	r2, r2, #10
 8003cee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8097 	beq.w	8003e38 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d12:	e091      	b.n	8003e38 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 8088 	beq.w	8003e3a <HAL_DMA_IRQHandler+0xe0e>
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8082 	beq.w	8003e3a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a41      	ldr	r2, [pc, #260]	@ (8003e40 <HAL_DMA_IRQHandler+0xe14>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d04a      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xdaa>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a3f      	ldr	r2, [pc, #252]	@ (8003e44 <HAL_DMA_IRQHandler+0xe18>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d045      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xdaa>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a3e      	ldr	r2, [pc, #248]	@ (8003e48 <HAL_DMA_IRQHandler+0xe1c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d040      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xdaa>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a3c      	ldr	r2, [pc, #240]	@ (8003e4c <HAL_DMA_IRQHandler+0xe20>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d03b      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xdaa>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a3b      	ldr	r2, [pc, #236]	@ (8003e50 <HAL_DMA_IRQHandler+0xe24>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d036      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xdaa>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a39      	ldr	r2, [pc, #228]	@ (8003e54 <HAL_DMA_IRQHandler+0xe28>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d031      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xdaa>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a38      	ldr	r2, [pc, #224]	@ (8003e58 <HAL_DMA_IRQHandler+0xe2c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d02c      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xdaa>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a36      	ldr	r2, [pc, #216]	@ (8003e5c <HAL_DMA_IRQHandler+0xe30>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d027      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xdaa>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a35      	ldr	r2, [pc, #212]	@ (8003e60 <HAL_DMA_IRQHandler+0xe34>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d022      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xdaa>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a33      	ldr	r2, [pc, #204]	@ (8003e64 <HAL_DMA_IRQHandler+0xe38>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d01d      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xdaa>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a32      	ldr	r2, [pc, #200]	@ (8003e68 <HAL_DMA_IRQHandler+0xe3c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d018      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xdaa>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a30      	ldr	r2, [pc, #192]	@ (8003e6c <HAL_DMA_IRQHandler+0xe40>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d013      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xdaa>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a2f      	ldr	r2, [pc, #188]	@ (8003e70 <HAL_DMA_IRQHandler+0xe44>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d00e      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xdaa>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a2d      	ldr	r2, [pc, #180]	@ (8003e74 <HAL_DMA_IRQHandler+0xe48>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d009      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xdaa>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a2c      	ldr	r2, [pc, #176]	@ (8003e78 <HAL_DMA_IRQHandler+0xe4c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d004      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0xdaa>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a2a      	ldr	r2, [pc, #168]	@ (8003e7c <HAL_DMA_IRQHandler+0xe50>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d108      	bne.n	8003de8 <HAL_DMA_IRQHandler+0xdbc>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 021c 	bic.w	r2, r2, #28
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	e007      	b.n	8003df8 <HAL_DMA_IRQHandler+0xdcc>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 020e 	bic.w	r2, r2, #14
 8003df6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dfc:	f003 031f 	and.w	r3, r3, #31
 8003e00:	2201      	movs	r2, #1
 8003e02:	409a      	lsls	r2, r3
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d009      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	4798      	blx	r3
 8003e2e:	e004      	b.n	8003e3a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003e30:	bf00      	nop
 8003e32:	e002      	b.n	8003e3a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e34:	bf00      	nop
 8003e36:	e000      	b.n	8003e3a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e38:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e3a:	3728      	adds	r7, #40	@ 0x28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40020010 	.word	0x40020010
 8003e44:	40020028 	.word	0x40020028
 8003e48:	40020040 	.word	0x40020040
 8003e4c:	40020058 	.word	0x40020058
 8003e50:	40020070 	.word	0x40020070
 8003e54:	40020088 	.word	0x40020088
 8003e58:	400200a0 	.word	0x400200a0
 8003e5c:	400200b8 	.word	0x400200b8
 8003e60:	40020410 	.word	0x40020410
 8003e64:	40020428 	.word	0x40020428
 8003e68:	40020440 	.word	0x40020440
 8003e6c:	40020458 	.word	0x40020458
 8003e70:	40020470 	.word	0x40020470
 8003e74:	40020488 	.word	0x40020488
 8003e78:	400204a0 	.word	0x400204a0
 8003e7c:	400204b8 	.word	0x400204b8

08003e80 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
 8003e8c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e92:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e98:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a7f      	ldr	r2, [pc, #508]	@ (800409c <DMA_SetConfig+0x21c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d072      	beq.n	8003f8a <DMA_SetConfig+0x10a>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a7d      	ldr	r2, [pc, #500]	@ (80040a0 <DMA_SetConfig+0x220>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d06d      	beq.n	8003f8a <DMA_SetConfig+0x10a>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a7c      	ldr	r2, [pc, #496]	@ (80040a4 <DMA_SetConfig+0x224>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d068      	beq.n	8003f8a <DMA_SetConfig+0x10a>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a7a      	ldr	r2, [pc, #488]	@ (80040a8 <DMA_SetConfig+0x228>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d063      	beq.n	8003f8a <DMA_SetConfig+0x10a>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a79      	ldr	r2, [pc, #484]	@ (80040ac <DMA_SetConfig+0x22c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d05e      	beq.n	8003f8a <DMA_SetConfig+0x10a>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a77      	ldr	r2, [pc, #476]	@ (80040b0 <DMA_SetConfig+0x230>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d059      	beq.n	8003f8a <DMA_SetConfig+0x10a>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a76      	ldr	r2, [pc, #472]	@ (80040b4 <DMA_SetConfig+0x234>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d054      	beq.n	8003f8a <DMA_SetConfig+0x10a>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a74      	ldr	r2, [pc, #464]	@ (80040b8 <DMA_SetConfig+0x238>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d04f      	beq.n	8003f8a <DMA_SetConfig+0x10a>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a73      	ldr	r2, [pc, #460]	@ (80040bc <DMA_SetConfig+0x23c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d04a      	beq.n	8003f8a <DMA_SetConfig+0x10a>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a71      	ldr	r2, [pc, #452]	@ (80040c0 <DMA_SetConfig+0x240>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d045      	beq.n	8003f8a <DMA_SetConfig+0x10a>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a70      	ldr	r2, [pc, #448]	@ (80040c4 <DMA_SetConfig+0x244>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d040      	beq.n	8003f8a <DMA_SetConfig+0x10a>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a6e      	ldr	r2, [pc, #440]	@ (80040c8 <DMA_SetConfig+0x248>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d03b      	beq.n	8003f8a <DMA_SetConfig+0x10a>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a6d      	ldr	r2, [pc, #436]	@ (80040cc <DMA_SetConfig+0x24c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d036      	beq.n	8003f8a <DMA_SetConfig+0x10a>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a6b      	ldr	r2, [pc, #428]	@ (80040d0 <DMA_SetConfig+0x250>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d031      	beq.n	8003f8a <DMA_SetConfig+0x10a>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a6a      	ldr	r2, [pc, #424]	@ (80040d4 <DMA_SetConfig+0x254>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d02c      	beq.n	8003f8a <DMA_SetConfig+0x10a>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a68      	ldr	r2, [pc, #416]	@ (80040d8 <DMA_SetConfig+0x258>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d027      	beq.n	8003f8a <DMA_SetConfig+0x10a>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a67      	ldr	r2, [pc, #412]	@ (80040dc <DMA_SetConfig+0x25c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d022      	beq.n	8003f8a <DMA_SetConfig+0x10a>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a65      	ldr	r2, [pc, #404]	@ (80040e0 <DMA_SetConfig+0x260>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d01d      	beq.n	8003f8a <DMA_SetConfig+0x10a>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a64      	ldr	r2, [pc, #400]	@ (80040e4 <DMA_SetConfig+0x264>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d018      	beq.n	8003f8a <DMA_SetConfig+0x10a>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a62      	ldr	r2, [pc, #392]	@ (80040e8 <DMA_SetConfig+0x268>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d013      	beq.n	8003f8a <DMA_SetConfig+0x10a>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a61      	ldr	r2, [pc, #388]	@ (80040ec <DMA_SetConfig+0x26c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00e      	beq.n	8003f8a <DMA_SetConfig+0x10a>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a5f      	ldr	r2, [pc, #380]	@ (80040f0 <DMA_SetConfig+0x270>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d009      	beq.n	8003f8a <DMA_SetConfig+0x10a>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a5e      	ldr	r2, [pc, #376]	@ (80040f4 <DMA_SetConfig+0x274>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d004      	beq.n	8003f8a <DMA_SetConfig+0x10a>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a5c      	ldr	r2, [pc, #368]	@ (80040f8 <DMA_SetConfig+0x278>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d101      	bne.n	8003f8e <DMA_SetConfig+0x10e>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <DMA_SetConfig+0x110>
 8003f8e:	2300      	movs	r3, #0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00d      	beq.n	8003fb0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003f9c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d004      	beq.n	8003fb0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003fae:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a39      	ldr	r2, [pc, #228]	@ (800409c <DMA_SetConfig+0x21c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d04a      	beq.n	8004050 <DMA_SetConfig+0x1d0>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a38      	ldr	r2, [pc, #224]	@ (80040a0 <DMA_SetConfig+0x220>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d045      	beq.n	8004050 <DMA_SetConfig+0x1d0>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a36      	ldr	r2, [pc, #216]	@ (80040a4 <DMA_SetConfig+0x224>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d040      	beq.n	8004050 <DMA_SetConfig+0x1d0>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a35      	ldr	r2, [pc, #212]	@ (80040a8 <DMA_SetConfig+0x228>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d03b      	beq.n	8004050 <DMA_SetConfig+0x1d0>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a33      	ldr	r2, [pc, #204]	@ (80040ac <DMA_SetConfig+0x22c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d036      	beq.n	8004050 <DMA_SetConfig+0x1d0>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a32      	ldr	r2, [pc, #200]	@ (80040b0 <DMA_SetConfig+0x230>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d031      	beq.n	8004050 <DMA_SetConfig+0x1d0>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a30      	ldr	r2, [pc, #192]	@ (80040b4 <DMA_SetConfig+0x234>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d02c      	beq.n	8004050 <DMA_SetConfig+0x1d0>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a2f      	ldr	r2, [pc, #188]	@ (80040b8 <DMA_SetConfig+0x238>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d027      	beq.n	8004050 <DMA_SetConfig+0x1d0>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a2d      	ldr	r2, [pc, #180]	@ (80040bc <DMA_SetConfig+0x23c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d022      	beq.n	8004050 <DMA_SetConfig+0x1d0>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a2c      	ldr	r2, [pc, #176]	@ (80040c0 <DMA_SetConfig+0x240>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d01d      	beq.n	8004050 <DMA_SetConfig+0x1d0>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a2a      	ldr	r2, [pc, #168]	@ (80040c4 <DMA_SetConfig+0x244>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d018      	beq.n	8004050 <DMA_SetConfig+0x1d0>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a29      	ldr	r2, [pc, #164]	@ (80040c8 <DMA_SetConfig+0x248>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d013      	beq.n	8004050 <DMA_SetConfig+0x1d0>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a27      	ldr	r2, [pc, #156]	@ (80040cc <DMA_SetConfig+0x24c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00e      	beq.n	8004050 <DMA_SetConfig+0x1d0>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a26      	ldr	r2, [pc, #152]	@ (80040d0 <DMA_SetConfig+0x250>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d009      	beq.n	8004050 <DMA_SetConfig+0x1d0>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a24      	ldr	r2, [pc, #144]	@ (80040d4 <DMA_SetConfig+0x254>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d004      	beq.n	8004050 <DMA_SetConfig+0x1d0>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a23      	ldr	r2, [pc, #140]	@ (80040d8 <DMA_SetConfig+0x258>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d101      	bne.n	8004054 <DMA_SetConfig+0x1d4>
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <DMA_SetConfig+0x1d6>
 8004054:	2300      	movs	r3, #0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d059      	beq.n	800410e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800405e:	f003 031f 	and.w	r3, r3, #31
 8004062:	223f      	movs	r2, #63	@ 0x3f
 8004064:	409a      	lsls	r2, r3
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004078:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2b40      	cmp	r3, #64	@ 0x40
 8004088:	d138      	bne.n	80040fc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800409a:	e086      	b.n	80041aa <DMA_SetConfig+0x32a>
 800409c:	40020010 	.word	0x40020010
 80040a0:	40020028 	.word	0x40020028
 80040a4:	40020040 	.word	0x40020040
 80040a8:	40020058 	.word	0x40020058
 80040ac:	40020070 	.word	0x40020070
 80040b0:	40020088 	.word	0x40020088
 80040b4:	400200a0 	.word	0x400200a0
 80040b8:	400200b8 	.word	0x400200b8
 80040bc:	40020410 	.word	0x40020410
 80040c0:	40020428 	.word	0x40020428
 80040c4:	40020440 	.word	0x40020440
 80040c8:	40020458 	.word	0x40020458
 80040cc:	40020470 	.word	0x40020470
 80040d0:	40020488 	.word	0x40020488
 80040d4:	400204a0 	.word	0x400204a0
 80040d8:	400204b8 	.word	0x400204b8
 80040dc:	58025408 	.word	0x58025408
 80040e0:	5802541c 	.word	0x5802541c
 80040e4:	58025430 	.word	0x58025430
 80040e8:	58025444 	.word	0x58025444
 80040ec:	58025458 	.word	0x58025458
 80040f0:	5802546c 	.word	0x5802546c
 80040f4:	58025480 	.word	0x58025480
 80040f8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	60da      	str	r2, [r3, #12]
}
 800410c:	e04d      	b.n	80041aa <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a29      	ldr	r2, [pc, #164]	@ (80041b8 <DMA_SetConfig+0x338>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d022      	beq.n	800415e <DMA_SetConfig+0x2de>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a27      	ldr	r2, [pc, #156]	@ (80041bc <DMA_SetConfig+0x33c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d01d      	beq.n	800415e <DMA_SetConfig+0x2de>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a26      	ldr	r2, [pc, #152]	@ (80041c0 <DMA_SetConfig+0x340>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d018      	beq.n	800415e <DMA_SetConfig+0x2de>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a24      	ldr	r2, [pc, #144]	@ (80041c4 <DMA_SetConfig+0x344>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d013      	beq.n	800415e <DMA_SetConfig+0x2de>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a23      	ldr	r2, [pc, #140]	@ (80041c8 <DMA_SetConfig+0x348>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d00e      	beq.n	800415e <DMA_SetConfig+0x2de>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a21      	ldr	r2, [pc, #132]	@ (80041cc <DMA_SetConfig+0x34c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d009      	beq.n	800415e <DMA_SetConfig+0x2de>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a20      	ldr	r2, [pc, #128]	@ (80041d0 <DMA_SetConfig+0x350>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d004      	beq.n	800415e <DMA_SetConfig+0x2de>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a1e      	ldr	r2, [pc, #120]	@ (80041d4 <DMA_SetConfig+0x354>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d101      	bne.n	8004162 <DMA_SetConfig+0x2e2>
 800415e:	2301      	movs	r3, #1
 8004160:	e000      	b.n	8004164 <DMA_SetConfig+0x2e4>
 8004162:	2300      	movs	r3, #0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d020      	beq.n	80041aa <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416c:	f003 031f 	and.w	r3, r3, #31
 8004170:	2201      	movs	r2, #1
 8004172:	409a      	lsls	r2, r3
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2b40      	cmp	r3, #64	@ 0x40
 8004186:	d108      	bne.n	800419a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	60da      	str	r2, [r3, #12]
}
 8004198:	e007      	b.n	80041aa <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	60da      	str	r2, [r3, #12]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	58025408 	.word	0x58025408
 80041bc:	5802541c 	.word	0x5802541c
 80041c0:	58025430 	.word	0x58025430
 80041c4:	58025444 	.word	0x58025444
 80041c8:	58025458 	.word	0x58025458
 80041cc:	5802546c 	.word	0x5802546c
 80041d0:	58025480 	.word	0x58025480
 80041d4:	58025494 	.word	0x58025494

080041d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a42      	ldr	r2, [pc, #264]	@ (80042f0 <DMA_CalcBaseAndBitshift+0x118>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d04a      	beq.n	8004280 <DMA_CalcBaseAndBitshift+0xa8>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a41      	ldr	r2, [pc, #260]	@ (80042f4 <DMA_CalcBaseAndBitshift+0x11c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d045      	beq.n	8004280 <DMA_CalcBaseAndBitshift+0xa8>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a3f      	ldr	r2, [pc, #252]	@ (80042f8 <DMA_CalcBaseAndBitshift+0x120>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d040      	beq.n	8004280 <DMA_CalcBaseAndBitshift+0xa8>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a3e      	ldr	r2, [pc, #248]	@ (80042fc <DMA_CalcBaseAndBitshift+0x124>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d03b      	beq.n	8004280 <DMA_CalcBaseAndBitshift+0xa8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a3c      	ldr	r2, [pc, #240]	@ (8004300 <DMA_CalcBaseAndBitshift+0x128>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d036      	beq.n	8004280 <DMA_CalcBaseAndBitshift+0xa8>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a3b      	ldr	r2, [pc, #236]	@ (8004304 <DMA_CalcBaseAndBitshift+0x12c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d031      	beq.n	8004280 <DMA_CalcBaseAndBitshift+0xa8>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a39      	ldr	r2, [pc, #228]	@ (8004308 <DMA_CalcBaseAndBitshift+0x130>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d02c      	beq.n	8004280 <DMA_CalcBaseAndBitshift+0xa8>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a38      	ldr	r2, [pc, #224]	@ (800430c <DMA_CalcBaseAndBitshift+0x134>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d027      	beq.n	8004280 <DMA_CalcBaseAndBitshift+0xa8>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a36      	ldr	r2, [pc, #216]	@ (8004310 <DMA_CalcBaseAndBitshift+0x138>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d022      	beq.n	8004280 <DMA_CalcBaseAndBitshift+0xa8>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a35      	ldr	r2, [pc, #212]	@ (8004314 <DMA_CalcBaseAndBitshift+0x13c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d01d      	beq.n	8004280 <DMA_CalcBaseAndBitshift+0xa8>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a33      	ldr	r2, [pc, #204]	@ (8004318 <DMA_CalcBaseAndBitshift+0x140>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d018      	beq.n	8004280 <DMA_CalcBaseAndBitshift+0xa8>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a32      	ldr	r2, [pc, #200]	@ (800431c <DMA_CalcBaseAndBitshift+0x144>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d013      	beq.n	8004280 <DMA_CalcBaseAndBitshift+0xa8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a30      	ldr	r2, [pc, #192]	@ (8004320 <DMA_CalcBaseAndBitshift+0x148>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d00e      	beq.n	8004280 <DMA_CalcBaseAndBitshift+0xa8>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a2f      	ldr	r2, [pc, #188]	@ (8004324 <DMA_CalcBaseAndBitshift+0x14c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d009      	beq.n	8004280 <DMA_CalcBaseAndBitshift+0xa8>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a2d      	ldr	r2, [pc, #180]	@ (8004328 <DMA_CalcBaseAndBitshift+0x150>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d004      	beq.n	8004280 <DMA_CalcBaseAndBitshift+0xa8>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a2c      	ldr	r2, [pc, #176]	@ (800432c <DMA_CalcBaseAndBitshift+0x154>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d101      	bne.n	8004284 <DMA_CalcBaseAndBitshift+0xac>
 8004280:	2301      	movs	r3, #1
 8004282:	e000      	b.n	8004286 <DMA_CalcBaseAndBitshift+0xae>
 8004284:	2300      	movs	r3, #0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d024      	beq.n	80042d4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	3b10      	subs	r3, #16
 8004292:	4a27      	ldr	r2, [pc, #156]	@ (8004330 <DMA_CalcBaseAndBitshift+0x158>)
 8004294:	fba2 2303 	umull	r2, r3, r2, r3
 8004298:	091b      	lsrs	r3, r3, #4
 800429a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	4a24      	ldr	r2, [pc, #144]	@ (8004334 <DMA_CalcBaseAndBitshift+0x15c>)
 80042a4:	5cd3      	ldrb	r3, [r2, r3]
 80042a6:	461a      	mov	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	d908      	bls.n	80042c4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	461a      	mov	r2, r3
 80042b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004338 <DMA_CalcBaseAndBitshift+0x160>)
 80042ba:	4013      	ands	r3, r2
 80042bc:	1d1a      	adds	r2, r3, #4
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	659a      	str	r2, [r3, #88]	@ 0x58
 80042c2:	e00d      	b.n	80042e0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004338 <DMA_CalcBaseAndBitshift+0x160>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80042d2:	e005      	b.n	80042e0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	40020010 	.word	0x40020010
 80042f4:	40020028 	.word	0x40020028
 80042f8:	40020040 	.word	0x40020040
 80042fc:	40020058 	.word	0x40020058
 8004300:	40020070 	.word	0x40020070
 8004304:	40020088 	.word	0x40020088
 8004308:	400200a0 	.word	0x400200a0
 800430c:	400200b8 	.word	0x400200b8
 8004310:	40020410 	.word	0x40020410
 8004314:	40020428 	.word	0x40020428
 8004318:	40020440 	.word	0x40020440
 800431c:	40020458 	.word	0x40020458
 8004320:	40020470 	.word	0x40020470
 8004324:	40020488 	.word	0x40020488
 8004328:	400204a0 	.word	0x400204a0
 800432c:	400204b8 	.word	0x400204b8
 8004330:	aaaaaaab 	.word	0xaaaaaaab
 8004334:	0800e25c 	.word	0x0800e25c
 8004338:	fffffc00 	.word	0xfffffc00

0800433c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d120      	bne.n	8004392 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004354:	2b03      	cmp	r3, #3
 8004356:	d858      	bhi.n	800440a <DMA_CheckFifoParam+0xce>
 8004358:	a201      	add	r2, pc, #4	@ (adr r2, 8004360 <DMA_CheckFifoParam+0x24>)
 800435a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435e:	bf00      	nop
 8004360:	08004371 	.word	0x08004371
 8004364:	08004383 	.word	0x08004383
 8004368:	08004371 	.word	0x08004371
 800436c:	0800440b 	.word	0x0800440b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004374:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d048      	beq.n	800440e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004380:	e045      	b.n	800440e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004386:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800438a:	d142      	bne.n	8004412 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004390:	e03f      	b.n	8004412 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800439a:	d123      	bne.n	80043e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d838      	bhi.n	8004416 <DMA_CheckFifoParam+0xda>
 80043a4:	a201      	add	r2, pc, #4	@ (adr r2, 80043ac <DMA_CheckFifoParam+0x70>)
 80043a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043aa:	bf00      	nop
 80043ac:	080043bd 	.word	0x080043bd
 80043b0:	080043c3 	.word	0x080043c3
 80043b4:	080043bd 	.word	0x080043bd
 80043b8:	080043d5 	.word	0x080043d5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	73fb      	strb	r3, [r7, #15]
        break;
 80043c0:	e030      	b.n	8004424 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d025      	beq.n	800441a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043d2:	e022      	b.n	800441a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043dc:	d11f      	bne.n	800441e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043e2:	e01c      	b.n	800441e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d902      	bls.n	80043f2 <DMA_CheckFifoParam+0xb6>
 80043ec:	2b03      	cmp	r3, #3
 80043ee:	d003      	beq.n	80043f8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80043f0:	e018      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	73fb      	strb	r3, [r7, #15]
        break;
 80043f6:	e015      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00e      	beq.n	8004422 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
    break;
 8004408:	e00b      	b.n	8004422 <DMA_CheckFifoParam+0xe6>
        break;
 800440a:	bf00      	nop
 800440c:	e00a      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
        break;
 800440e:	bf00      	nop
 8004410:	e008      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
        break;
 8004412:	bf00      	nop
 8004414:	e006      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
        break;
 8004416:	bf00      	nop
 8004418:	e004      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
        break;
 800441a:	bf00      	nop
 800441c:	e002      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
        break;
 800441e:	bf00      	nop
 8004420:	e000      	b.n	8004424 <DMA_CheckFifoParam+0xe8>
    break;
 8004422:	bf00      	nop
    }
  }

  return status;
 8004424:	7bfb      	ldrb	r3, [r7, #15]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop

08004434 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a38      	ldr	r2, [pc, #224]	@ (8004528 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d022      	beq.n	8004492 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a36      	ldr	r2, [pc, #216]	@ (800452c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d01d      	beq.n	8004492 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a35      	ldr	r2, [pc, #212]	@ (8004530 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d018      	beq.n	8004492 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a33      	ldr	r2, [pc, #204]	@ (8004534 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d013      	beq.n	8004492 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a32      	ldr	r2, [pc, #200]	@ (8004538 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00e      	beq.n	8004492 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a30      	ldr	r2, [pc, #192]	@ (800453c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d009      	beq.n	8004492 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a2f      	ldr	r2, [pc, #188]	@ (8004540 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d004      	beq.n	8004492 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a2d      	ldr	r2, [pc, #180]	@ (8004544 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d101      	bne.n	8004496 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004496:	2300      	movs	r3, #0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01a      	beq.n	80044d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	3b08      	subs	r3, #8
 80044a4:	4a28      	ldr	r2, [pc, #160]	@ (8004548 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80044a6:	fba2 2303 	umull	r2, r3, r2, r3
 80044aa:	091b      	lsrs	r3, r3, #4
 80044ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	4b26      	ldr	r3, [pc, #152]	@ (800454c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80044b2:	4413      	add	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	461a      	mov	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a24      	ldr	r2, [pc, #144]	@ (8004550 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80044c0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f003 031f 	and.w	r3, r3, #31
 80044c8:	2201      	movs	r2, #1
 80044ca:	409a      	lsls	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80044d0:	e024      	b.n	800451c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	3b10      	subs	r3, #16
 80044da:	4a1e      	ldr	r2, [pc, #120]	@ (8004554 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	091b      	lsrs	r3, r3, #4
 80044e2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4a1c      	ldr	r2, [pc, #112]	@ (8004558 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d806      	bhi.n	80044fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4a1b      	ldr	r2, [pc, #108]	@ (800455c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d902      	bls.n	80044fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3308      	adds	r3, #8
 80044f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4b18      	ldr	r3, [pc, #96]	@ (8004560 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	461a      	mov	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a16      	ldr	r2, [pc, #88]	@ (8004564 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800450c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f003 031f 	and.w	r3, r3, #31
 8004514:	2201      	movs	r2, #1
 8004516:	409a      	lsls	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800451c:	bf00      	nop
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	58025408 	.word	0x58025408
 800452c:	5802541c 	.word	0x5802541c
 8004530:	58025430 	.word	0x58025430
 8004534:	58025444 	.word	0x58025444
 8004538:	58025458 	.word	0x58025458
 800453c:	5802546c 	.word	0x5802546c
 8004540:	58025480 	.word	0x58025480
 8004544:	58025494 	.word	0x58025494
 8004548:	cccccccd 	.word	0xcccccccd
 800454c:	16009600 	.word	0x16009600
 8004550:	58025880 	.word	0x58025880
 8004554:	aaaaaaab 	.word	0xaaaaaaab
 8004558:	400204b8 	.word	0x400204b8
 800455c:	4002040f 	.word	0x4002040f
 8004560:	10008200 	.word	0x10008200
 8004564:	40020880 	.word	0x40020880

08004568 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	b2db      	uxtb	r3, r3
 8004576:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d04a      	beq.n	8004614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2b08      	cmp	r3, #8
 8004582:	d847      	bhi.n	8004614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a25      	ldr	r2, [pc, #148]	@ (8004620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d022      	beq.n	80045d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a24      	ldr	r2, [pc, #144]	@ (8004624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d01d      	beq.n	80045d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a22      	ldr	r2, [pc, #136]	@ (8004628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d018      	beq.n	80045d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a21      	ldr	r2, [pc, #132]	@ (800462c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d013      	beq.n	80045d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00e      	beq.n	80045d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d009      	beq.n	80045d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d004      	beq.n	80045d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a1b      	ldr	r2, [pc, #108]	@ (800463c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d101      	bne.n	80045d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80045d8:	2300      	movs	r3, #0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4b17      	ldr	r3, [pc, #92]	@ (8004640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	461a      	mov	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a15      	ldr	r2, [pc, #84]	@ (8004644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80045f0:	671a      	str	r2, [r3, #112]	@ 0x70
 80045f2:	e009      	b.n	8004608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4b14      	ldr	r3, [pc, #80]	@ (8004648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80045f8:	4413      	add	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	461a      	mov	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a11      	ldr	r2, [pc, #68]	@ (800464c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004606:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	3b01      	subs	r3, #1
 800460c:	2201      	movs	r2, #1
 800460e:	409a      	lsls	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004614:	bf00      	nop
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	58025408 	.word	0x58025408
 8004624:	5802541c 	.word	0x5802541c
 8004628:	58025430 	.word	0x58025430
 800462c:	58025444 	.word	0x58025444
 8004630:	58025458 	.word	0x58025458
 8004634:	5802546c 	.word	0x5802546c
 8004638:	58025480 	.word	0x58025480
 800463c:	58025494 	.word	0x58025494
 8004640:	1600963f 	.word	0x1600963f
 8004644:	58025940 	.word	0x58025940
 8004648:	1000823f 	.word	0x1000823f
 800464c:	40020940 	.word	0x40020940

08004650 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004650:	b480      	push	{r7}
 8004652:	b089      	sub	sp, #36	@ 0x24
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800465e:	4b89      	ldr	r3, [pc, #548]	@ (8004884 <HAL_GPIO_Init+0x234>)
 8004660:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004662:	e194      	b.n	800498e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	2101      	movs	r1, #1
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	fa01 f303 	lsl.w	r3, r1, r3
 8004670:	4013      	ands	r3, r2
 8004672:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 8186 	beq.w	8004988 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f003 0303 	and.w	r3, r3, #3
 8004684:	2b01      	cmp	r3, #1
 8004686:	d005      	beq.n	8004694 <HAL_GPIO_Init+0x44>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f003 0303 	and.w	r3, r3, #3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d130      	bne.n	80046f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	2203      	movs	r2, #3
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	43db      	mvns	r3, r3
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4013      	ands	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046ca:	2201      	movs	r2, #1
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	fa02 f303 	lsl.w	r3, r2, r3
 80046d2:	43db      	mvns	r3, r3
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	4013      	ands	r3, r2
 80046d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	091b      	lsrs	r3, r3, #4
 80046e0:	f003 0201 	and.w	r2, r3, #1
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	2b03      	cmp	r3, #3
 8004700:	d017      	beq.n	8004732 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	2203      	movs	r2, #3
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	43db      	mvns	r3, r3
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	4013      	ands	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	689a      	ldr	r2, [r3, #8]
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4313      	orrs	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d123      	bne.n	8004786 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	08da      	lsrs	r2, r3, #3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	3208      	adds	r2, #8
 8004746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800474a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	220f      	movs	r2, #15
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	43db      	mvns	r3, r3
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	4013      	ands	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	fa02 f303 	lsl.w	r3, r2, r3
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	4313      	orrs	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	08da      	lsrs	r2, r3, #3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3208      	adds	r2, #8
 8004780:	69b9      	ldr	r1, [r7, #24]
 8004782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	2203      	movs	r2, #3
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	43db      	mvns	r3, r3
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	4013      	ands	r3, r2
 800479c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f003 0203 	and.w	r2, r3, #3
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 80e0 	beq.w	8004988 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004888 <HAL_GPIO_Init+0x238>)
 80047ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80047ce:	4a2e      	ldr	r2, [pc, #184]	@ (8004888 <HAL_GPIO_Init+0x238>)
 80047d0:	f043 0302 	orr.w	r3, r3, #2
 80047d4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80047d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004888 <HAL_GPIO_Init+0x238>)
 80047da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047e6:	4a29      	ldr	r2, [pc, #164]	@ (800488c <HAL_GPIO_Init+0x23c>)
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	089b      	lsrs	r3, r3, #2
 80047ec:	3302      	adds	r3, #2
 80047ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	220f      	movs	r2, #15
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	43db      	mvns	r3, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4013      	ands	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a20      	ldr	r2, [pc, #128]	@ (8004890 <HAL_GPIO_Init+0x240>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d052      	beq.n	80048b8 <HAL_GPIO_Init+0x268>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a1f      	ldr	r2, [pc, #124]	@ (8004894 <HAL_GPIO_Init+0x244>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d031      	beq.n	800487e <HAL_GPIO_Init+0x22e>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a1e      	ldr	r2, [pc, #120]	@ (8004898 <HAL_GPIO_Init+0x248>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d02b      	beq.n	800487a <HAL_GPIO_Init+0x22a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a1d      	ldr	r2, [pc, #116]	@ (800489c <HAL_GPIO_Init+0x24c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d025      	beq.n	8004876 <HAL_GPIO_Init+0x226>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a1c      	ldr	r2, [pc, #112]	@ (80048a0 <HAL_GPIO_Init+0x250>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01f      	beq.n	8004872 <HAL_GPIO_Init+0x222>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a1b      	ldr	r2, [pc, #108]	@ (80048a4 <HAL_GPIO_Init+0x254>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d019      	beq.n	800486e <HAL_GPIO_Init+0x21e>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a1a      	ldr	r2, [pc, #104]	@ (80048a8 <HAL_GPIO_Init+0x258>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d013      	beq.n	800486a <HAL_GPIO_Init+0x21a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a19      	ldr	r2, [pc, #100]	@ (80048ac <HAL_GPIO_Init+0x25c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00d      	beq.n	8004866 <HAL_GPIO_Init+0x216>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a18      	ldr	r2, [pc, #96]	@ (80048b0 <HAL_GPIO_Init+0x260>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d007      	beq.n	8004862 <HAL_GPIO_Init+0x212>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a17      	ldr	r2, [pc, #92]	@ (80048b4 <HAL_GPIO_Init+0x264>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d101      	bne.n	800485e <HAL_GPIO_Init+0x20e>
 800485a:	2309      	movs	r3, #9
 800485c:	e02d      	b.n	80048ba <HAL_GPIO_Init+0x26a>
 800485e:	230a      	movs	r3, #10
 8004860:	e02b      	b.n	80048ba <HAL_GPIO_Init+0x26a>
 8004862:	2308      	movs	r3, #8
 8004864:	e029      	b.n	80048ba <HAL_GPIO_Init+0x26a>
 8004866:	2307      	movs	r3, #7
 8004868:	e027      	b.n	80048ba <HAL_GPIO_Init+0x26a>
 800486a:	2306      	movs	r3, #6
 800486c:	e025      	b.n	80048ba <HAL_GPIO_Init+0x26a>
 800486e:	2305      	movs	r3, #5
 8004870:	e023      	b.n	80048ba <HAL_GPIO_Init+0x26a>
 8004872:	2304      	movs	r3, #4
 8004874:	e021      	b.n	80048ba <HAL_GPIO_Init+0x26a>
 8004876:	2303      	movs	r3, #3
 8004878:	e01f      	b.n	80048ba <HAL_GPIO_Init+0x26a>
 800487a:	2302      	movs	r3, #2
 800487c:	e01d      	b.n	80048ba <HAL_GPIO_Init+0x26a>
 800487e:	2301      	movs	r3, #1
 8004880:	e01b      	b.n	80048ba <HAL_GPIO_Init+0x26a>
 8004882:	bf00      	nop
 8004884:	58000080 	.word	0x58000080
 8004888:	58024400 	.word	0x58024400
 800488c:	58000400 	.word	0x58000400
 8004890:	58020000 	.word	0x58020000
 8004894:	58020400 	.word	0x58020400
 8004898:	58020800 	.word	0x58020800
 800489c:	58020c00 	.word	0x58020c00
 80048a0:	58021000 	.word	0x58021000
 80048a4:	58021400 	.word	0x58021400
 80048a8:	58021800 	.word	0x58021800
 80048ac:	58021c00 	.word	0x58021c00
 80048b0:	58022000 	.word	0x58022000
 80048b4:	58022400 	.word	0x58022400
 80048b8:	2300      	movs	r3, #0
 80048ba:	69fa      	ldr	r2, [r7, #28]
 80048bc:	f002 0203 	and.w	r2, r2, #3
 80048c0:	0092      	lsls	r2, r2, #2
 80048c2:	4093      	lsls	r3, r2
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048ca:	4938      	ldr	r1, [pc, #224]	@ (80049ac <HAL_GPIO_Init+0x35c>)
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	089b      	lsrs	r3, r3, #2
 80048d0:	3302      	adds	r3, #2
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	43db      	mvns	r3, r3
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	4013      	ands	r3, r2
 80048e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80048fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	43db      	mvns	r3, r3
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4013      	ands	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800492c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	43db      	mvns	r3, r3
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	4013      	ands	r3, r2
 8004942:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	4313      	orrs	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	43db      	mvns	r3, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4013      	ands	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	4313      	orrs	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	3301      	adds	r3, #1
 800498c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	fa22 f303 	lsr.w	r3, r2, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	f47f ae63 	bne.w	8004664 <HAL_GPIO_Init+0x14>
  }
}
 800499e:	bf00      	nop
 80049a0:	bf00      	nop
 80049a2:	3724      	adds	r7, #36	@ 0x24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	58000400 	.word	0x58000400

080049b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	807b      	strh	r3, [r7, #2]
 80049bc:	4613      	mov	r3, r2
 80049be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049c0:	787b      	ldrb	r3, [r7, #1]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049c6:	887a      	ldrh	r2, [r7, #2]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80049cc:	e003      	b.n	80049d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80049ce:	887b      	ldrh	r3, [r7, #2]
 80049d0:	041a      	lsls	r2, r3, #16
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	619a      	str	r2, [r3, #24]
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b086      	sub	sp, #24
 80049e6:	af02      	add	r7, sp, #8
 80049e8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e0fe      	b.n	8004bf2 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d106      	bne.n	8004a0e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f009 f88b 	bl	800db24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2203      	movs	r2, #3
 8004a12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f005 fc4f 	bl	800a2be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6818      	ldr	r0, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	7c1a      	ldrb	r2, [r3, #16]
 8004a28:	f88d 2000 	strb.w	r2, [sp]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a30:	f005 fb20 	bl	800a074 <USB_CoreInit>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d005      	beq.n	8004a46 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e0d5      	b.n	8004bf2 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f005 fc47 	bl	800a2e0 <USB_SetCurrentMode>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0c6      	b.n	8004bf2 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a64:	2300      	movs	r3, #0
 8004a66:	73fb      	strb	r3, [r7, #15]
 8004a68:	e04a      	b.n	8004b00 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a6a:	7bfa      	ldrb	r2, [r7, #15]
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	4413      	add	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	440b      	add	r3, r1
 8004a78:	3315      	adds	r3, #21
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a7e:	7bfa      	ldrb	r2, [r7, #15]
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	4413      	add	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	3314      	adds	r3, #20
 8004a8e:	7bfa      	ldrb	r2, [r7, #15]
 8004a90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a92:	7bfa      	ldrb	r2, [r7, #15]
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	b298      	uxth	r0, r3
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	332e      	adds	r3, #46	@ 0x2e
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004aaa:	7bfa      	ldrb	r2, [r7, #15]
 8004aac:	6879      	ldr	r1, [r7, #4]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	4413      	add	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	440b      	add	r3, r1
 8004ab8:	3318      	adds	r3, #24
 8004aba:	2200      	movs	r2, #0
 8004abc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004abe:	7bfa      	ldrb	r2, [r7, #15]
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	440b      	add	r3, r1
 8004acc:	331c      	adds	r3, #28
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ad2:	7bfa      	ldrb	r2, [r7, #15]
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	440b      	add	r3, r1
 8004ae0:	3320      	adds	r3, #32
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ae6:	7bfa      	ldrb	r2, [r7, #15]
 8004ae8:	6879      	ldr	r1, [r7, #4]
 8004aea:	4613      	mov	r3, r2
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	4413      	add	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	440b      	add	r3, r1
 8004af4:	3324      	adds	r3, #36	@ 0x24
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
 8004afc:	3301      	adds	r3, #1
 8004afe:	73fb      	strb	r3, [r7, #15]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	791b      	ldrb	r3, [r3, #4]
 8004b04:	7bfa      	ldrb	r2, [r7, #15]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d3af      	bcc.n	8004a6a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	73fb      	strb	r3, [r7, #15]
 8004b0e:	e044      	b.n	8004b9a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b10:	7bfa      	ldrb	r2, [r7, #15]
 8004b12:	6879      	ldr	r1, [r7, #4]
 8004b14:	4613      	mov	r3, r2
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	4413      	add	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	440b      	add	r3, r1
 8004b1e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004b22:	2200      	movs	r2, #0
 8004b24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b26:	7bfa      	ldrb	r2, [r7, #15]
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	4413      	add	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	440b      	add	r3, r1
 8004b34:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004b38:	7bfa      	ldrb	r2, [r7, #15]
 8004b3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b3c:	7bfa      	ldrb	r2, [r7, #15]
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	4613      	mov	r3, r2
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004b4e:	2200      	movs	r2, #0
 8004b50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b52:	7bfa      	ldrb	r2, [r7, #15]
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	4613      	mov	r3, r2
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	4413      	add	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	440b      	add	r3, r1
 8004b60:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b68:	7bfa      	ldrb	r2, [r7, #15]
 8004b6a:	6879      	ldr	r1, [r7, #4]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b7e:	7bfa      	ldrb	r2, [r7, #15]
 8004b80:	6879      	ldr	r1, [r7, #4]
 8004b82:	4613      	mov	r3, r2
 8004b84:	00db      	lsls	r3, r3, #3
 8004b86:	4413      	add	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	440b      	add	r3, r1
 8004b8c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
 8004b96:	3301      	adds	r3, #1
 8004b98:	73fb      	strb	r3, [r7, #15]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	791b      	ldrb	r3, [r3, #4]
 8004b9e:	7bfa      	ldrb	r2, [r7, #15]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d3b5      	bcc.n	8004b10 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6818      	ldr	r0, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	7c1a      	ldrb	r2, [r3, #16]
 8004bac:	f88d 2000 	strb.w	r2, [sp]
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bb4:	f005 fbe0 	bl	800a378 <USB_DevInit>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d005      	beq.n	8004bca <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e013      	b.n	8004bf2 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	7b1b      	ldrb	r3, [r3, #12]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d102      	bne.n	8004be6 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f001 f96d 	bl	8005ec0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f006 fc1f 	bl	800b42e <USB_DevDisconnect>

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b084      	sub	sp, #16
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_PCD_Start+0x1c>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e022      	b.n	8004c5c <HAL_PCD_Start+0x62>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d009      	beq.n	8004c3e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d105      	bne.n	8004c3e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c36:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f005 fb2a 	bl	800a29c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f006 fbcd 	bl	800b3ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004c64:	b590      	push	{r4, r7, lr}
 8004c66:	b08d      	sub	sp, #52	@ 0x34
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f006 fc8b 	bl	800b596 <USB_GetMode>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f040 84b9 	bne.w	80055fa <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f006 fbef 	bl	800b470 <USB_ReadInterrupts>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 84af 	beq.w	80055f8 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	0a1b      	lsrs	r3, r3, #8
 8004ca4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f006 fbdc 	bl	800b470 <USB_ReadInterrupts>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d107      	bne.n	8004cd2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	695a      	ldr	r2, [r3, #20]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f002 0202 	and.w	r2, r2, #2
 8004cd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f006 fbca 	bl	800b470 <USB_ReadInterrupts>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	f003 0310 	and.w	r3, r3, #16
 8004ce2:	2b10      	cmp	r3, #16
 8004ce4:	d161      	bne.n	8004daa <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	699a      	ldr	r2, [r3, #24]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 0210 	bic.w	r2, r2, #16
 8004cf4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	f003 020f 	and.w	r2, r3, #15
 8004d02:	4613      	mov	r3, r2
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	4413      	add	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	4413      	add	r3, r2
 8004d12:	3304      	adds	r3, #4
 8004d14:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	0c5b      	lsrs	r3, r3, #17
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d124      	bne.n	8004d6c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004d28:	4013      	ands	r3, r2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d035      	beq.n	8004d9a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	091b      	lsrs	r3, r3, #4
 8004d36:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004d38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	461a      	mov	r2, r3
 8004d40:	6a38      	ldr	r0, [r7, #32]
 8004d42:	f006 fa01 	bl	800b148 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	091b      	lsrs	r3, r3, #4
 8004d4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d52:	441a      	add	r2, r3
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	695a      	ldr	r2, [r3, #20]
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	091b      	lsrs	r3, r3, #4
 8004d60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d64:	441a      	add	r2, r3
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	615a      	str	r2, [r3, #20]
 8004d6a:	e016      	b.n	8004d9a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	0c5b      	lsrs	r3, r3, #17
 8004d70:	f003 030f 	and.w	r3, r3, #15
 8004d74:	2b06      	cmp	r3, #6
 8004d76:	d110      	bne.n	8004d9a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d7e:	2208      	movs	r2, #8
 8004d80:	4619      	mov	r1, r3
 8004d82:	6a38      	ldr	r0, [r7, #32]
 8004d84:	f006 f9e0 	bl	800b148 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	695a      	ldr	r2, [r3, #20]
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	091b      	lsrs	r3, r3, #4
 8004d90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d94:	441a      	add	r2, r3
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	699a      	ldr	r2, [r3, #24]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0210 	orr.w	r2, r2, #16
 8004da8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f006 fb5e 	bl	800b470 <USB_ReadInterrupts>
 8004db4:	4603      	mov	r3, r0
 8004db6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004dba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004dbe:	f040 80a7 	bne.w	8004f10 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f006 fb63 	bl	800b496 <USB_ReadDevAllOutEpInterrupt>
 8004dd0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004dd2:	e099      	b.n	8004f08 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 808e 	beq.w	8004efc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	4611      	mov	r1, r2
 8004dea:	4618      	mov	r0, r3
 8004dec:	f006 fb87 	bl	800b4fe <USB_ReadDevOutEPInterrupt>
 8004df0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00c      	beq.n	8004e16 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e08:	461a      	mov	r2, r3
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004e0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 fecf 	bl	8005bb4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f003 0308 	and.w	r3, r3, #8
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00c      	beq.n	8004e3a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	2308      	movs	r3, #8
 8004e30:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004e32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 ffa5 	bl	8005d84 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f003 0310 	and.w	r3, r3, #16
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d008      	beq.n	8004e56 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e50:	461a      	mov	r2, r3
 8004e52:	2310      	movs	r3, #16
 8004e54:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d030      	beq.n	8004ec2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e68:	2b80      	cmp	r3, #128	@ 0x80
 8004e6a:	d109      	bne.n	8004e80 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	69fa      	ldr	r2, [r7, #28]
 8004e76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e7e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e82:	4613      	mov	r3, r2
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	4413      	add	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	4413      	add	r3, r2
 8004e92:	3304      	adds	r3, #4
 8004e94:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	78db      	ldrb	r3, [r3, #3]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d108      	bne.n	8004eb0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f008 ff60 	bl	800dd70 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d008      	beq.n	8004ede <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ed8:	461a      	mov	r2, r3
 8004eda:	2320      	movs	r3, #32
 8004edc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d009      	beq.n	8004efc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004efa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efe:	3301      	adds	r3, #1
 8004f00:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f04:	085b      	lsrs	r3, r3, #1
 8004f06:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f47f af62 	bne.w	8004dd4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f006 faab 	bl	800b470 <USB_ReadInterrupts>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f24:	f040 80db 	bne.w	80050de <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f006 facc 	bl	800b4ca <USB_ReadDevAllInEpInterrupt>
 8004f32:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004f38:	e0cd      	b.n	80050d6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 80c2 	beq.w	80050ca <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	4611      	mov	r1, r2
 8004f50:	4618      	mov	r0, r3
 8004f52:	f006 faf2 	bl	800b53a <USB_ReadDevInEPInterrupt>
 8004f56:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d057      	beq.n	8005012 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f64:	f003 030f 	and.w	r3, r3, #15
 8004f68:	2201      	movs	r2, #1
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	69f9      	ldr	r1, [r7, #28]
 8004f7e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f82:	4013      	ands	r3, r2
 8004f84:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f92:	461a      	mov	r2, r3
 8004f94:	2301      	movs	r3, #1
 8004f96:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	799b      	ldrb	r3, [r3, #6]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d132      	bne.n	8005006 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	4413      	add	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	440b      	add	r3, r1
 8004fae:	3320      	adds	r3, #32
 8004fb0:	6819      	ldr	r1, [r3, #0]
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	4413      	add	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4403      	add	r3, r0
 8004fc0:	331c      	adds	r3, #28
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4419      	add	r1, r3
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fca:	4613      	mov	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4403      	add	r3, r0
 8004fd4:	3320      	adds	r3, #32
 8004fd6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d113      	bne.n	8005006 <HAL_PCD_IRQHandler+0x3a2>
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	440b      	add	r3, r1
 8004fec:	3324      	adds	r3, #36	@ 0x24
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d108      	bne.n	8005006 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6818      	ldr	r0, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ffe:	461a      	mov	r2, r3
 8005000:	2101      	movs	r1, #1
 8005002:	f006 fafb 	bl	800b5fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005008:	b2db      	uxtb	r3, r3
 800500a:	4619      	mov	r1, r3
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f008 fe2a 	bl	800dc66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f003 0308 	and.w	r3, r3, #8
 8005018:	2b00      	cmp	r3, #0
 800501a:	d008      	beq.n	800502e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800501c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005028:	461a      	mov	r2, r3
 800502a:	2308      	movs	r3, #8
 800502c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f003 0310 	and.w	r3, r3, #16
 8005034:	2b00      	cmp	r3, #0
 8005036:	d008      	beq.n	800504a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005044:	461a      	mov	r2, r3
 8005046:	2310      	movs	r3, #16
 8005048:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005050:	2b00      	cmp	r3, #0
 8005052:	d008      	beq.n	8005066 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005060:	461a      	mov	r2, r3
 8005062:	2340      	movs	r3, #64	@ 0x40
 8005064:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d023      	beq.n	80050b8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005070:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005072:	6a38      	ldr	r0, [r7, #32]
 8005074:	f005 fade 	bl	800a634 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800507a:	4613      	mov	r3, r2
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	4413      	add	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	3310      	adds	r3, #16
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	4413      	add	r3, r2
 8005088:	3304      	adds	r3, #4
 800508a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	78db      	ldrb	r3, [r3, #3]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d108      	bne.n	80050a6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	2200      	movs	r2, #0
 8005098:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800509a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509c:	b2db      	uxtb	r3, r3
 800509e:	4619      	mov	r1, r3
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f008 fe77 	bl	800dd94 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80050a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050b2:	461a      	mov	r2, r3
 80050b4:	2302      	movs	r3, #2
 80050b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80050c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fce8 	bl	8005a9a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80050ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050cc:	3301      	adds	r3, #1
 80050ce:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80050d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d2:	085b      	lsrs	r3, r3, #1
 80050d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80050d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f47f af2e 	bne.w	8004f3a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f006 f9c4 	bl	800b470 <USB_ReadInterrupts>
 80050e8:	4603      	mov	r3, r0
 80050ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050f2:	d122      	bne.n	800513a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	69fa      	ldr	r2, [r7, #28]
 80050fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005102:	f023 0301 	bic.w	r3, r3, #1
 8005106:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800510e:	2b01      	cmp	r3, #1
 8005110:	d108      	bne.n	8005124 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800511a:	2100      	movs	r1, #0
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fef3 	bl	8005f08 <HAL_PCDEx_LPM_Callback>
 8005122:	e002      	b.n	800512a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f008 fe15 	bl	800dd54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695a      	ldr	r2, [r3, #20]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005138:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f006 f996 	bl	800b470 <USB_ReadInterrupts>
 8005144:	4603      	mov	r3, r0
 8005146:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800514a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800514e:	d112      	bne.n	8005176 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b01      	cmp	r3, #1
 800515e:	d102      	bne.n	8005166 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f008 fdd1 	bl	800dd08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	695a      	ldr	r2, [r3, #20]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005174:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4618      	mov	r0, r3
 800517c:	f006 f978 	bl	800b470 <USB_ReadInterrupts>
 8005180:	4603      	mov	r3, r0
 8005182:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005186:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800518a:	d121      	bne.n	80051d0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695a      	ldr	r2, [r3, #20]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800519a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d111      	bne.n	80051ca <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051b4:	089b      	lsrs	r3, r3, #2
 80051b6:	f003 020f 	and.w	r2, r3, #15
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80051c0:	2101      	movs	r1, #1
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fea0 	bl	8005f08 <HAL_PCDEx_LPM_Callback>
 80051c8:	e002      	b.n	80051d0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f008 fd9c 	bl	800dd08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f006 f94b 	bl	800b470 <USB_ReadInterrupts>
 80051da:	4603      	mov	r3, r0
 80051dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051e4:	f040 80b7 	bne.w	8005356 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	69fa      	ldr	r2, [r7, #28]
 80051f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051f6:	f023 0301 	bic.w	r3, r3, #1
 80051fa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2110      	movs	r1, #16
 8005202:	4618      	mov	r0, r3
 8005204:	f005 fa16 	bl	800a634 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005208:	2300      	movs	r3, #0
 800520a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800520c:	e046      	b.n	800529c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800520e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800521a:	461a      	mov	r2, r3
 800521c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005220:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	4413      	add	r3, r2
 800522a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005232:	0151      	lsls	r1, r2, #5
 8005234:	69fa      	ldr	r2, [r7, #28]
 8005236:	440a      	add	r2, r1
 8005238:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800523c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005240:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800524e:	461a      	mov	r2, r3
 8005250:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005254:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005266:	0151      	lsls	r1, r2, #5
 8005268:	69fa      	ldr	r2, [r7, #28]
 800526a:	440a      	add	r2, r1
 800526c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005270:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005274:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005286:	0151      	lsls	r1, r2, #5
 8005288:	69fa      	ldr	r2, [r7, #28]
 800528a:	440a      	add	r2, r1
 800528c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005290:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005294:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005298:	3301      	adds	r3, #1
 800529a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	791b      	ldrb	r3, [r3, #4]
 80052a0:	461a      	mov	r2, r3
 80052a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d3b2      	bcc.n	800520e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	69fa      	ldr	r2, [r7, #28]
 80052b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052b6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80052ba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	7bdb      	ldrb	r3, [r3, #15]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d016      	beq.n	80052f2 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052ce:	69fa      	ldr	r2, [r7, #28]
 80052d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052d4:	f043 030b 	orr.w	r3, r3, #11
 80052d8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e4:	69fa      	ldr	r2, [r7, #28]
 80052e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052ea:	f043 030b 	orr.w	r3, r3, #11
 80052ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80052f0:	e015      	b.n	800531e <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052f8:	695a      	ldr	r2, [r3, #20]
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005300:	4619      	mov	r1, r3
 8005302:	f242 032b 	movw	r3, #8235	@ 0x202b
 8005306:	4313      	orrs	r3, r2
 8005308:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005318:	f043 030b 	orr.w	r3, r3, #11
 800531c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800532c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005330:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6818      	ldr	r0, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005340:	461a      	mov	r2, r3
 8005342:	f006 f95b 	bl	800b5fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695a      	ldr	r2, [r3, #20]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005354:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f006 f888 	bl	800b470 <USB_ReadInterrupts>
 8005360:	4603      	mov	r3, r0
 8005362:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005366:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800536a:	d123      	bne.n	80053b4 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4618      	mov	r0, r3
 8005372:	f006 f91f 	bl	800b5b4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4618      	mov	r0, r3
 800537c:	f005 f9d3 	bl	800a726 <USB_GetDevSpeed>
 8005380:	4603      	mov	r3, r0
 8005382:	461a      	mov	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681c      	ldr	r4, [r3, #0]
 800538c:	f001 fd9c 	bl	8006ec8 <HAL_RCC_GetHCLKFreq>
 8005390:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005396:	461a      	mov	r2, r3
 8005398:	4620      	mov	r0, r4
 800539a:	f004 fedd 	bl	800a158 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f008 fc89 	bl	800dcb6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695a      	ldr	r2, [r3, #20]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80053b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f006 f859 	bl	800b470 <USB_ReadInterrupts>
 80053be:	4603      	mov	r3, r0
 80053c0:	f003 0308 	and.w	r3, r3, #8
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d10a      	bne.n	80053de <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f008 fc66 	bl	800dc9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695a      	ldr	r2, [r3, #20]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f002 0208 	and.w	r2, r2, #8
 80053dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f006 f844 	bl	800b470 <USB_ReadInterrupts>
 80053e8:	4603      	mov	r3, r0
 80053ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ee:	2b80      	cmp	r3, #128	@ 0x80
 80053f0:	d123      	bne.n	800543a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053fe:	2301      	movs	r3, #1
 8005400:	627b      	str	r3, [r7, #36]	@ 0x24
 8005402:	e014      	b.n	800542e <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005408:	4613      	mov	r3, r2
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	4413      	add	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	440b      	add	r3, r1
 8005412:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d105      	bne.n	8005428 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800541c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541e:	b2db      	uxtb	r3, r3
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 fb08 	bl	8005a38 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542a:	3301      	adds	r3, #1
 800542c:	627b      	str	r3, [r7, #36]	@ 0x24
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	791b      	ldrb	r3, [r3, #4]
 8005432:	461a      	mov	r2, r3
 8005434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005436:	4293      	cmp	r3, r2
 8005438:	d3e4      	bcc.n	8005404 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f006 f816 	bl	800b470 <USB_ReadInterrupts>
 8005444:	4603      	mov	r3, r0
 8005446:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800544a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800544e:	d13c      	bne.n	80054ca <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005450:	2301      	movs	r3, #1
 8005452:	627b      	str	r3, [r7, #36]	@ 0x24
 8005454:	e02b      	b.n	80054ae <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800546a:	4613      	mov	r3, r2
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	4413      	add	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	440b      	add	r3, r1
 8005474:	3318      	adds	r3, #24
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d115      	bne.n	80054a8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800547c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800547e:	2b00      	cmp	r3, #0
 8005480:	da12      	bge.n	80054a8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005486:	4613      	mov	r3, r2
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	4413      	add	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	440b      	add	r3, r1
 8005490:	3317      	adds	r3, #23
 8005492:	2201      	movs	r2, #1
 8005494:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005498:	b2db      	uxtb	r3, r3
 800549a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	4619      	mov	r1, r3
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fac8 	bl	8005a38 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054aa:	3301      	adds	r3, #1
 80054ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	791b      	ldrb	r3, [r3, #4]
 80054b2:	461a      	mov	r2, r3
 80054b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d3cd      	bcc.n	8005456 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	695a      	ldr	r2, [r3, #20]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80054c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f005 ffce 	bl	800b470 <USB_ReadInterrupts>
 80054d4:	4603      	mov	r3, r0
 80054d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054de:	d156      	bne.n	800558e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054e0:	2301      	movs	r3, #1
 80054e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054e4:	e045      	b.n	8005572 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80054e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054fa:	4613      	mov	r3, r2
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	4413      	add	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	440b      	add	r3, r1
 8005504:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d12e      	bne.n	800556c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800550e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005510:	2b00      	cmp	r3, #0
 8005512:	da2b      	bge.n	800556c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005520:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005524:	429a      	cmp	r2, r3
 8005526:	d121      	bne.n	800556c <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005528:	6879      	ldr	r1, [r7, #4]
 800552a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800552c:	4613      	mov	r3, r2
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	4413      	add	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	440b      	add	r3, r1
 8005536:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800553a:	2201      	movs	r2, #1
 800553c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10a      	bne.n	800556c <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	69fa      	ldr	r2, [r7, #28]
 8005560:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005564:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005568:	6053      	str	r3, [r2, #4]
            break;
 800556a:	e008      	b.n	800557e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800556c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556e:	3301      	adds	r3, #1
 8005570:	627b      	str	r3, [r7, #36]	@ 0x24
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	791b      	ldrb	r3, [r3, #4]
 8005576:	461a      	mov	r2, r3
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557a:	4293      	cmp	r3, r2
 800557c:	d3b3      	bcc.n	80054e6 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	695a      	ldr	r2, [r3, #20]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800558c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4618      	mov	r0, r3
 8005594:	f005 ff6c 	bl	800b470 <USB_ReadInterrupts>
 8005598:	4603      	mov	r3, r0
 800559a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800559e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055a2:	d10a      	bne.n	80055ba <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f008 fc07 	bl	800ddb8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695a      	ldr	r2, [r3, #20]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80055b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f005 ff56 	bl	800b470 <USB_ReadInterrupts>
 80055c4:	4603      	mov	r3, r0
 80055c6:	f003 0304 	and.w	r3, r3, #4
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d115      	bne.n	80055fa <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f008 fbf7 	bl	800ddd4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6859      	ldr	r1, [r3, #4]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	605a      	str	r2, [r3, #4]
 80055f6:	e000      	b.n	80055fa <HAL_PCD_IRQHandler+0x996>
      return;
 80055f8:	bf00      	nop
    }
  }
}
 80055fa:	3734      	adds	r7, #52	@ 0x34
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd90      	pop	{r4, r7, pc}

08005600 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	460b      	mov	r3, r1
 800560a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005612:	2b01      	cmp	r3, #1
 8005614:	d101      	bne.n	800561a <HAL_PCD_SetAddress+0x1a>
 8005616:	2302      	movs	r3, #2
 8005618:	e012      	b.n	8005640 <HAL_PCD_SetAddress+0x40>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	78fa      	ldrb	r2, [r7, #3]
 8005626:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	78fa      	ldrb	r2, [r7, #3]
 800562e:	4611      	mov	r1, r2
 8005630:	4618      	mov	r0, r3
 8005632:	f005 feb5 	bl	800b3a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	4608      	mov	r0, r1
 8005652:	4611      	mov	r1, r2
 8005654:	461a      	mov	r2, r3
 8005656:	4603      	mov	r3, r0
 8005658:	70fb      	strb	r3, [r7, #3]
 800565a:	460b      	mov	r3, r1
 800565c:	803b      	strh	r3, [r7, #0]
 800565e:	4613      	mov	r3, r2
 8005660:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005666:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800566a:	2b00      	cmp	r3, #0
 800566c:	da0f      	bge.n	800568e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800566e:	78fb      	ldrb	r3, [r7, #3]
 8005670:	f003 020f 	and.w	r2, r3, #15
 8005674:	4613      	mov	r3, r2
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	4413      	add	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	3310      	adds	r3, #16
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	4413      	add	r3, r2
 8005682:	3304      	adds	r3, #4
 8005684:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2201      	movs	r2, #1
 800568a:	705a      	strb	r2, [r3, #1]
 800568c:	e00f      	b.n	80056ae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800568e:	78fb      	ldrb	r3, [r7, #3]
 8005690:	f003 020f 	and.w	r2, r3, #15
 8005694:	4613      	mov	r3, r2
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	4413      	add	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	4413      	add	r3, r2
 80056a4:	3304      	adds	r3, #4
 80056a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80056ae:	78fb      	ldrb	r3, [r7, #3]
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80056ba:	883a      	ldrh	r2, [r7, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	78ba      	ldrb	r2, [r7, #2]
 80056c4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	785b      	ldrb	r3, [r3, #1]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d004      	beq.n	80056d8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80056d8:	78bb      	ldrb	r3, [r7, #2]
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d102      	bne.n	80056e4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d101      	bne.n	80056f2 <HAL_PCD_EP_Open+0xaa>
 80056ee:	2302      	movs	r3, #2
 80056f0:	e00e      	b.n	8005710 <HAL_PCD_EP_Open+0xc8>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68f9      	ldr	r1, [r7, #12]
 8005700:	4618      	mov	r0, r3
 8005702:	f005 f835 	bl	800a770 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800570e:	7afb      	ldrb	r3, [r7, #11]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005724:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005728:	2b00      	cmp	r3, #0
 800572a:	da0f      	bge.n	800574c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800572c:	78fb      	ldrb	r3, [r7, #3]
 800572e:	f003 020f 	and.w	r2, r3, #15
 8005732:	4613      	mov	r3, r2
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	3310      	adds	r3, #16
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	4413      	add	r3, r2
 8005740:	3304      	adds	r3, #4
 8005742:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2201      	movs	r2, #1
 8005748:	705a      	strb	r2, [r3, #1]
 800574a:	e00f      	b.n	800576c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800574c:	78fb      	ldrb	r3, [r7, #3]
 800574e:	f003 020f 	and.w	r2, r3, #15
 8005752:	4613      	mov	r3, r2
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	4413      	add	r3, r2
 8005762:	3304      	adds	r3, #4
 8005764:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800576c:	78fb      	ldrb	r3, [r7, #3]
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	b2da      	uxtb	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800577e:	2b01      	cmp	r3, #1
 8005780:	d101      	bne.n	8005786 <HAL_PCD_EP_Close+0x6e>
 8005782:	2302      	movs	r3, #2
 8005784:	e00e      	b.n	80057a4 <HAL_PCD_EP_Close+0x8c>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68f9      	ldr	r1, [r7, #12]
 8005794:	4618      	mov	r0, r3
 8005796:	f005 f873 	bl	800a880 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	607a      	str	r2, [r7, #4]
 80057b6:	603b      	str	r3, [r7, #0]
 80057b8:	460b      	mov	r3, r1
 80057ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057bc:	7afb      	ldrb	r3, [r7, #11]
 80057be:	f003 020f 	and.w	r2, r3, #15
 80057c2:	4613      	mov	r3, r2
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4413      	add	r3, r2
 80057d2:	3304      	adds	r3, #4
 80057d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2200      	movs	r2, #0
 80057e6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2200      	movs	r2, #0
 80057ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057ee:	7afb      	ldrb	r3, [r7, #11]
 80057f0:	f003 030f 	and.w	r3, r3, #15
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	799b      	ldrb	r3, [r3, #6]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d102      	bne.n	8005808 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6818      	ldr	r0, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	799b      	ldrb	r3, [r3, #6]
 8005810:	461a      	mov	r2, r3
 8005812:	6979      	ldr	r1, [r7, #20]
 8005814:	f005 f910 	bl	800aa38 <USB_EPStartXfer>

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	460b      	mov	r3, r1
 800582c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800582e:	78fb      	ldrb	r3, [r7, #3]
 8005830:	f003 020f 	and.w	r2, r3, #15
 8005834:	6879      	ldr	r1, [r7, #4]
 8005836:	4613      	mov	r3, r2
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	4413      	add	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	440b      	add	r3, r1
 8005840:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005844:	681b      	ldr	r3, [r3, #0]
}
 8005846:	4618      	mov	r0, r3
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b086      	sub	sp, #24
 8005856:	af00      	add	r7, sp, #0
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	603b      	str	r3, [r7, #0]
 800585e:	460b      	mov	r3, r1
 8005860:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005862:	7afb      	ldrb	r3, [r7, #11]
 8005864:	f003 020f 	and.w	r2, r3, #15
 8005868:	4613      	mov	r3, r2
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	4413      	add	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	3310      	adds	r3, #16
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4413      	add	r3, r2
 8005876:	3304      	adds	r3, #4
 8005878:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2200      	movs	r2, #0
 800588a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2201      	movs	r2, #1
 8005890:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005892:	7afb      	ldrb	r3, [r7, #11]
 8005894:	f003 030f 	and.w	r3, r3, #15
 8005898:	b2da      	uxtb	r2, r3
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	799b      	ldrb	r3, [r3, #6]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d102      	bne.n	80058ac <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	799b      	ldrb	r3, [r3, #6]
 80058b4:	461a      	mov	r2, r3
 80058b6:	6979      	ldr	r1, [r7, #20]
 80058b8:	f005 f8be 	bl	800aa38 <USB_EPStartXfer>

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	460b      	mov	r3, r1
 80058d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80058d2:	78fb      	ldrb	r3, [r7, #3]
 80058d4:	f003 030f 	and.w	r3, r3, #15
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	7912      	ldrb	r2, [r2, #4]
 80058dc:	4293      	cmp	r3, r2
 80058de:	d901      	bls.n	80058e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e04f      	b.n	8005984 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	da0f      	bge.n	800590c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058ec:	78fb      	ldrb	r3, [r7, #3]
 80058ee:	f003 020f 	and.w	r2, r3, #15
 80058f2:	4613      	mov	r3, r2
 80058f4:	00db      	lsls	r3, r3, #3
 80058f6:	4413      	add	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	3310      	adds	r3, #16
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	4413      	add	r3, r2
 8005900:	3304      	adds	r3, #4
 8005902:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2201      	movs	r2, #1
 8005908:	705a      	strb	r2, [r3, #1]
 800590a:	e00d      	b.n	8005928 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800590c:	78fa      	ldrb	r2, [r7, #3]
 800590e:	4613      	mov	r3, r2
 8005910:	00db      	lsls	r3, r3, #3
 8005912:	4413      	add	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	4413      	add	r3, r2
 800591e:	3304      	adds	r3, #4
 8005920:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2201      	movs	r2, #1
 800592c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800592e:	78fb      	ldrb	r3, [r7, #3]
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	b2da      	uxtb	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005940:	2b01      	cmp	r3, #1
 8005942:	d101      	bne.n	8005948 <HAL_PCD_EP_SetStall+0x82>
 8005944:	2302      	movs	r3, #2
 8005946:	e01d      	b.n	8005984 <HAL_PCD_EP_SetStall+0xbe>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68f9      	ldr	r1, [r7, #12]
 8005956:	4618      	mov	r0, r3
 8005958:	f005 fc4e 	bl	800b1f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800595c:	78fb      	ldrb	r3, [r7, #3]
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	2b00      	cmp	r3, #0
 8005964:	d109      	bne.n	800597a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6818      	ldr	r0, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	7999      	ldrb	r1, [r3, #6]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005974:	461a      	mov	r2, r3
 8005976:	f005 fe41 	bl	800b5fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	f003 030f 	and.w	r3, r3, #15
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	7912      	ldrb	r2, [r2, #4]
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d901      	bls.n	80059aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e042      	b.n	8005a30 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	da0f      	bge.n	80059d2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059b2:	78fb      	ldrb	r3, [r7, #3]
 80059b4:	f003 020f 	and.w	r2, r3, #15
 80059b8:	4613      	mov	r3, r2
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	4413      	add	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	3310      	adds	r3, #16
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	4413      	add	r3, r2
 80059c6:	3304      	adds	r3, #4
 80059c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2201      	movs	r2, #1
 80059ce:	705a      	strb	r2, [r3, #1]
 80059d0:	e00f      	b.n	80059f2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059d2:	78fb      	ldrb	r3, [r7, #3]
 80059d4:	f003 020f 	and.w	r2, r3, #15
 80059d8:	4613      	mov	r3, r2
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	4413      	add	r3, r2
 80059e8:	3304      	adds	r3, #4
 80059ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059f8:	78fb      	ldrb	r3, [r7, #3]
 80059fa:	f003 030f 	and.w	r3, r3, #15
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d101      	bne.n	8005a12 <HAL_PCD_EP_ClrStall+0x86>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	e00e      	b.n	8005a30 <HAL_PCD_EP_ClrStall+0xa4>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68f9      	ldr	r1, [r7, #12]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f005 fc57 	bl	800b2d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	460b      	mov	r3, r1
 8005a42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005a44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	da0c      	bge.n	8005a66 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a4c:	78fb      	ldrb	r3, [r7, #3]
 8005a4e:	f003 020f 	and.w	r2, r3, #15
 8005a52:	4613      	mov	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	4413      	add	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	3310      	adds	r3, #16
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	4413      	add	r3, r2
 8005a60:	3304      	adds	r3, #4
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	e00c      	b.n	8005a80 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a66:	78fb      	ldrb	r3, [r7, #3]
 8005a68:	f003 020f 	and.w	r2, r3, #15
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	4413      	add	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68f9      	ldr	r1, [r7, #12]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f005 fa76 	bl	800af78 <USB_EPStopXfer>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005a90:	7afb      	ldrb	r3, [r7, #11]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b08a      	sub	sp, #40	@ 0x28
 8005a9e:	af02      	add	r7, sp, #8
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	4413      	add	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	3310      	adds	r3, #16
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	4413      	add	r3, r2
 8005abe:	3304      	adds	r3, #4
 8005ac0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	695a      	ldr	r2, [r3, #20]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d901      	bls.n	8005ad2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e06b      	b.n	8005baa <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	691a      	ldr	r2, [r3, #16]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	69fa      	ldr	r2, [r7, #28]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d902      	bls.n	8005aee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	3303      	adds	r3, #3
 8005af2:	089b      	lsrs	r3, r3, #2
 8005af4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005af6:	e02a      	b.n	8005b4e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	691a      	ldr	r2, [r3, #16]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	69fa      	ldr	r2, [r7, #28]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d902      	bls.n	8005b14 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	3303      	adds	r3, #3
 8005b18:	089b      	lsrs	r3, r3, #2
 8005b1a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	68d9      	ldr	r1, [r3, #12]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	4603      	mov	r3, r0
 8005b30:	6978      	ldr	r0, [r7, #20]
 8005b32:	f005 facb 	bl	800b0cc <USB_WritePacket>

    ep->xfer_buff  += len;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	441a      	add	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	695a      	ldr	r2, [r3, #20]
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	441a      	add	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d809      	bhi.n	8005b78 <PCD_WriteEmptyTxFifo+0xde>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	695a      	ldr	r2, [r3, #20]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d203      	bcs.n	8005b78 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1bf      	bne.n	8005af8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d811      	bhi.n	8005ba8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b90:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	6939      	ldr	r1, [r7, #16]
 8005ba0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3720      	adds	r7, #32
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
	...

08005bb4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b088      	sub	sp, #32
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	333c      	adds	r3, #60	@ 0x3c
 8005bcc:	3304      	adds	r3, #4
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	799b      	ldrb	r3, [r3, #6]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d17b      	bne.n	8005ce2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f003 0308 	and.w	r3, r3, #8
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d015      	beq.n	8005c20 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	4a61      	ldr	r2, [pc, #388]	@ (8005d7c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	f240 80b9 	bls.w	8005d70 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 80b3 	beq.w	8005d70 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c16:	461a      	mov	r2, r3
 8005c18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c1c:	6093      	str	r3, [r2, #8]
 8005c1e:	e0a7      	b.n	8005d70 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d009      	beq.n	8005c3e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c36:	461a      	mov	r2, r3
 8005c38:	2320      	movs	r3, #32
 8005c3a:	6093      	str	r3, [r2, #8]
 8005c3c:	e098      	b.n	8005d70 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f040 8093 	bne.w	8005d70 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	4a4b      	ldr	r2, [pc, #300]	@ (8005d7c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d90f      	bls.n	8005c72 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00a      	beq.n	8005c72 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c68:	461a      	mov	r2, r3
 8005c6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c6e:	6093      	str	r3, [r2, #8]
 8005c70:	e07e      	b.n	8005d70 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	4613      	mov	r3, r2
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	4413      	add	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	4413      	add	r3, r2
 8005c84:	3304      	adds	r3, #4
 8005c86:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a1a      	ldr	r2, [r3, #32]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	0159      	lsls	r1, r3, #5
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	440b      	add	r3, r1
 8005c94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c9e:	1ad2      	subs	r2, r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d114      	bne.n	8005cd4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d109      	bne.n	8005cc6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6818      	ldr	r0, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	f005 fc9c 	bl	800b5fc <USB_EP0_OutStart>
 8005cc4:	e006      	b.n	8005cd4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	441a      	add	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f007 ffa8 	bl	800dc30 <HAL_PCD_DataOutStageCallback>
 8005ce0:	e046      	b.n	8005d70 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	4a26      	ldr	r2, [pc, #152]	@ (8005d80 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d124      	bne.n	8005d34 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00a      	beq.n	8005d0a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d00:	461a      	mov	r2, r3
 8005d02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d06:	6093      	str	r3, [r2, #8]
 8005d08:	e032      	b.n	8005d70 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f003 0320 	and.w	r3, r3, #32
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d20:	461a      	mov	r2, r3
 8005d22:	2320      	movs	r3, #32
 8005d24:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f007 ff7f 	bl	800dc30 <HAL_PCD_DataOutStageCallback>
 8005d32:	e01d      	b.n	8005d70 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d114      	bne.n	8005d64 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005d3a:	6879      	ldr	r1, [r7, #4]
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	00db      	lsls	r3, r3, #3
 8005d42:	4413      	add	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	440b      	add	r3, r1
 8005d48:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d108      	bne.n	8005d64 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6818      	ldr	r0, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	2100      	movs	r1, #0
 8005d60:	f005 fc4c 	bl	800b5fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f007 ff60 	bl	800dc30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3720      	adds	r7, #32
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	4f54300a 	.word	0x4f54300a
 8005d80:	4f54310a 	.word	0x4f54310a

08005d84 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	333c      	adds	r3, #60	@ 0x3c
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4a15      	ldr	r2, [pc, #84]	@ (8005e0c <PCD_EP_OutSetupPacket_int+0x88>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d90e      	bls.n	8005dd8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d009      	beq.n	8005dd8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dd6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f007 ff17 	bl	800dc0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4a0a      	ldr	r2, [pc, #40]	@ (8005e0c <PCD_EP_OutSetupPacket_int+0x88>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d90c      	bls.n	8005e00 <PCD_EP_OutSetupPacket_int+0x7c>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	799b      	ldrb	r3, [r3, #6]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d108      	bne.n	8005e00 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6818      	ldr	r0, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005df8:	461a      	mov	r2, r3
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	f005 fbfe 	bl	800b5fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	4f54300a 	.word	0x4f54300a

08005e10 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	70fb      	strb	r3, [r7, #3]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e26:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d107      	bne.n	8005e3e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005e2e:	883b      	ldrh	r3, [r7, #0]
 8005e30:	0419      	lsls	r1, r3, #16
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e3c:	e028      	b.n	8005e90 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e44:	0c1b      	lsrs	r3, r3, #16
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	4413      	add	r3, r2
 8005e4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	73fb      	strb	r3, [r7, #15]
 8005e50:	e00d      	b.n	8005e6e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	7bfb      	ldrb	r3, [r7, #15]
 8005e58:	3340      	adds	r3, #64	@ 0x40
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	0c1b      	lsrs	r3, r3, #16
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	4413      	add	r3, r2
 8005e66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	73fb      	strb	r3, [r7, #15]
 8005e6e:	7bfa      	ldrb	r2, [r7, #15]
 8005e70:	78fb      	ldrb	r3, [r7, #3]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d3ec      	bcc.n	8005e52 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005e78:	883b      	ldrh	r3, [r7, #0]
 8005e7a:	0418      	lsls	r0, r3, #16
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6819      	ldr	r1, [r3, #0]
 8005e80:	78fb      	ldrb	r3, [r7, #3]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	4302      	orrs	r2, r0
 8005e88:	3340      	adds	r3, #64	@ 0x40
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	440b      	add	r3, r1
 8005e8e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b083      	sub	sp, #12
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	887a      	ldrh	r2, [r7, #2]
 8005eb0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005eee:	4b05      	ldr	r3, [pc, #20]	@ (8005f04 <HAL_PCDEx_ActivateLPM+0x44>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	10000003 	.word	0x10000003

08005f08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005f28:	4b19      	ldr	r3, [pc, #100]	@ (8005f90 <HAL_PWREx_ConfigSupply+0x70>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f003 0304 	and.w	r3, r3, #4
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	d00a      	beq.n	8005f4a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005f34:	4b16      	ldr	r3, [pc, #88]	@ (8005f90 <HAL_PWREx_ConfigSupply+0x70>)
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d001      	beq.n	8005f46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e01f      	b.n	8005f86 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	e01d      	b.n	8005f86 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005f4a:	4b11      	ldr	r3, [pc, #68]	@ (8005f90 <HAL_PWREx_ConfigSupply+0x70>)
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f023 0207 	bic.w	r2, r3, #7
 8005f52:	490f      	ldr	r1, [pc, #60]	@ (8005f90 <HAL_PWREx_ConfigSupply+0x70>)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005f5a:	f7fa fe73 	bl	8000c44 <HAL_GetTick>
 8005f5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f60:	e009      	b.n	8005f76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005f62:	f7fa fe6f 	bl	8000c44 <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f70:	d901      	bls.n	8005f76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e007      	b.n	8005f86 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f76:	4b06      	ldr	r3, [pc, #24]	@ (8005f90 <HAL_PWREx_ConfigSupply+0x70>)
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f82:	d1ee      	bne.n	8005f62 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	58024800 	.word	0x58024800

08005f94 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005f94:	b480      	push	{r7}
 8005f96:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005f98:	4b05      	ldr	r3, [pc, #20]	@ (8005fb0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	4a04      	ldr	r2, [pc, #16]	@ (8005fb0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005f9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005fa2:	60d3      	str	r3, [r2, #12]
}
 8005fa4:	bf00      	nop
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	58024800 	.word	0x58024800

08005fb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08c      	sub	sp, #48	@ 0x30
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d102      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	f000 bc48 	b.w	8006858 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 8088 	beq.w	80060e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fd6:	4b99      	ldr	r3, [pc, #612]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fe0:	4b96      	ldr	r3, [pc, #600]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 8005fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe8:	2b10      	cmp	r3, #16
 8005fea:	d007      	beq.n	8005ffc <HAL_RCC_OscConfig+0x48>
 8005fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fee:	2b18      	cmp	r3, #24
 8005ff0:	d111      	bne.n	8006016 <HAL_RCC_OscConfig+0x62>
 8005ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff4:	f003 0303 	and.w	r3, r3, #3
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d10c      	bne.n	8006016 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ffc:	4b8f      	ldr	r3, [pc, #572]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d06d      	beq.n	80060e4 <HAL_RCC_OscConfig+0x130>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d169      	bne.n	80060e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	f000 bc21 	b.w	8006858 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800601e:	d106      	bne.n	800602e <HAL_RCC_OscConfig+0x7a>
 8006020:	4b86      	ldr	r3, [pc, #536]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a85      	ldr	r2, [pc, #532]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 8006026:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800602a:	6013      	str	r3, [r2, #0]
 800602c:	e02e      	b.n	800608c <HAL_RCC_OscConfig+0xd8>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10c      	bne.n	8006050 <HAL_RCC_OscConfig+0x9c>
 8006036:	4b81      	ldr	r3, [pc, #516]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a80      	ldr	r2, [pc, #512]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 800603c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006040:	6013      	str	r3, [r2, #0]
 8006042:	4b7e      	ldr	r3, [pc, #504]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a7d      	ldr	r2, [pc, #500]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 8006048:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800604c:	6013      	str	r3, [r2, #0]
 800604e:	e01d      	b.n	800608c <HAL_RCC_OscConfig+0xd8>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006058:	d10c      	bne.n	8006074 <HAL_RCC_OscConfig+0xc0>
 800605a:	4b78      	ldr	r3, [pc, #480]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a77      	ldr	r2, [pc, #476]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 8006060:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	4b75      	ldr	r3, [pc, #468]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a74      	ldr	r2, [pc, #464]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 800606c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006070:	6013      	str	r3, [r2, #0]
 8006072:	e00b      	b.n	800608c <HAL_RCC_OscConfig+0xd8>
 8006074:	4b71      	ldr	r3, [pc, #452]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a70      	ldr	r2, [pc, #448]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 800607a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800607e:	6013      	str	r3, [r2, #0]
 8006080:	4b6e      	ldr	r3, [pc, #440]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a6d      	ldr	r2, [pc, #436]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 8006086:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800608a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d013      	beq.n	80060bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006094:	f7fa fdd6 	bl	8000c44 <HAL_GetTick>
 8006098:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800609a:	e008      	b.n	80060ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800609c:	f7fa fdd2 	bl	8000c44 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	2b64      	cmp	r3, #100	@ 0x64
 80060a8:	d901      	bls.n	80060ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e3d4      	b.n	8006858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060ae:	4b63      	ldr	r3, [pc, #396]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d0f0      	beq.n	800609c <HAL_RCC_OscConfig+0xe8>
 80060ba:	e014      	b.n	80060e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060bc:	f7fa fdc2 	bl	8000c44 <HAL_GetTick>
 80060c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060c4:	f7fa fdbe 	bl	8000c44 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b64      	cmp	r3, #100	@ 0x64
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e3c0      	b.n	8006858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060d6:	4b59      	ldr	r3, [pc, #356]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1f0      	bne.n	80060c4 <HAL_RCC_OscConfig+0x110>
 80060e2:	e000      	b.n	80060e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f000 80ca 	beq.w	8006288 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060f4:	4b51      	ldr	r3, [pc, #324]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060fc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060fe:	4b4f      	ldr	r3, [pc, #316]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 8006100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006102:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d007      	beq.n	800611a <HAL_RCC_OscConfig+0x166>
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	2b18      	cmp	r3, #24
 800610e:	d156      	bne.n	80061be <HAL_RCC_OscConfig+0x20a>
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d151      	bne.n	80061be <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800611a:	4b48      	ldr	r3, [pc, #288]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0304 	and.w	r3, r3, #4
 8006122:	2b00      	cmp	r3, #0
 8006124:	d005      	beq.n	8006132 <HAL_RCC_OscConfig+0x17e>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e392      	b.n	8006858 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006132:	4b42      	ldr	r3, [pc, #264]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f023 0219 	bic.w	r2, r3, #25
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	493f      	ldr	r1, [pc, #252]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 8006140:	4313      	orrs	r3, r2
 8006142:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006144:	f7fa fd7e 	bl	8000c44 <HAL_GetTick>
 8006148:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800614a:	e008      	b.n	800615e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800614c:	f7fa fd7a 	bl	8000c44 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e37c      	b.n	8006858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800615e:	4b37      	ldr	r3, [pc, #220]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0304 	and.w	r3, r3, #4
 8006166:	2b00      	cmp	r3, #0
 8006168:	d0f0      	beq.n	800614c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800616a:	f7fa fd9b 	bl	8000ca4 <HAL_GetREVID>
 800616e:	4603      	mov	r3, r0
 8006170:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006174:	4293      	cmp	r3, r2
 8006176:	d817      	bhi.n	80061a8 <HAL_RCC_OscConfig+0x1f4>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	2b40      	cmp	r3, #64	@ 0x40
 800617e:	d108      	bne.n	8006192 <HAL_RCC_OscConfig+0x1de>
 8006180:	4b2e      	ldr	r3, [pc, #184]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006188:	4a2c      	ldr	r2, [pc, #176]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 800618a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800618e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006190:	e07a      	b.n	8006288 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006192:	4b2a      	ldr	r3, [pc, #168]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	031b      	lsls	r3, r3, #12
 80061a0:	4926      	ldr	r1, [pc, #152]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061a6:	e06f      	b.n	8006288 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061a8:	4b24      	ldr	r3, [pc, #144]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	061b      	lsls	r3, r3, #24
 80061b6:	4921      	ldr	r1, [pc, #132]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061bc:	e064      	b.n	8006288 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d047      	beq.n	8006256 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80061c6:	4b1d      	ldr	r3, [pc, #116]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f023 0219 	bic.w	r2, r3, #25
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	491a      	ldr	r1, [pc, #104]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d8:	f7fa fd34 	bl	8000c44 <HAL_GetTick>
 80061dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061de:	e008      	b.n	80061f2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061e0:	f7fa fd30 	bl	8000c44 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d901      	bls.n	80061f2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e332      	b.n	8006858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061f2:	4b12      	ldr	r3, [pc, #72]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d0f0      	beq.n	80061e0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061fe:	f7fa fd51 	bl	8000ca4 <HAL_GetREVID>
 8006202:	4603      	mov	r3, r0
 8006204:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006208:	4293      	cmp	r3, r2
 800620a:	d819      	bhi.n	8006240 <HAL_RCC_OscConfig+0x28c>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	2b40      	cmp	r3, #64	@ 0x40
 8006212:	d108      	bne.n	8006226 <HAL_RCC_OscConfig+0x272>
 8006214:	4b09      	ldr	r3, [pc, #36]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800621c:	4a07      	ldr	r2, [pc, #28]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 800621e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006222:	6053      	str	r3, [r2, #4]
 8006224:	e030      	b.n	8006288 <HAL_RCC_OscConfig+0x2d4>
 8006226:	4b05      	ldr	r3, [pc, #20]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	031b      	lsls	r3, r3, #12
 8006234:	4901      	ldr	r1, [pc, #4]	@ (800623c <HAL_RCC_OscConfig+0x288>)
 8006236:	4313      	orrs	r3, r2
 8006238:	604b      	str	r3, [r1, #4]
 800623a:	e025      	b.n	8006288 <HAL_RCC_OscConfig+0x2d4>
 800623c:	58024400 	.word	0x58024400
 8006240:	4b9a      	ldr	r3, [pc, #616]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	061b      	lsls	r3, r3, #24
 800624e:	4997      	ldr	r1, [pc, #604]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 8006250:	4313      	orrs	r3, r2
 8006252:	604b      	str	r3, [r1, #4]
 8006254:	e018      	b.n	8006288 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006256:	4b95      	ldr	r3, [pc, #596]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a94      	ldr	r2, [pc, #592]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 800625c:	f023 0301 	bic.w	r3, r3, #1
 8006260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006262:	f7fa fcef 	bl	8000c44 <HAL_GetTick>
 8006266:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006268:	e008      	b.n	800627c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800626a:	f7fa fceb 	bl	8000c44 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	2b02      	cmp	r3, #2
 8006276:	d901      	bls.n	800627c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e2ed      	b.n	8006858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800627c:	4b8b      	ldr	r3, [pc, #556]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0304 	and.w	r3, r3, #4
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1f0      	bne.n	800626a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0310 	and.w	r3, r3, #16
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 80a9 	beq.w	80063e8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006296:	4b85      	ldr	r3, [pc, #532]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800629e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062a0:	4b82      	ldr	r3, [pc, #520]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 80062a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	d007      	beq.n	80062bc <HAL_RCC_OscConfig+0x308>
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	2b18      	cmp	r3, #24
 80062b0:	d13a      	bne.n	8006328 <HAL_RCC_OscConfig+0x374>
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f003 0303 	and.w	r3, r3, #3
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d135      	bne.n	8006328 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062bc:	4b7b      	ldr	r3, [pc, #492]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d005      	beq.n	80062d4 <HAL_RCC_OscConfig+0x320>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	69db      	ldr	r3, [r3, #28]
 80062cc:	2b80      	cmp	r3, #128	@ 0x80
 80062ce:	d001      	beq.n	80062d4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e2c1      	b.n	8006858 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062d4:	f7fa fce6 	bl	8000ca4 <HAL_GetREVID>
 80062d8:	4603      	mov	r3, r0
 80062da:	f241 0203 	movw	r2, #4099	@ 0x1003
 80062de:	4293      	cmp	r3, r2
 80062e0:	d817      	bhi.n	8006312 <HAL_RCC_OscConfig+0x35e>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	2b20      	cmp	r3, #32
 80062e8:	d108      	bne.n	80062fc <HAL_RCC_OscConfig+0x348>
 80062ea:	4b70      	ldr	r3, [pc, #448]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80062f2:	4a6e      	ldr	r2, [pc, #440]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 80062f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062f8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062fa:	e075      	b.n	80063e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062fc:	4b6b      	ldr	r3, [pc, #428]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	069b      	lsls	r3, r3, #26
 800630a:	4968      	ldr	r1, [pc, #416]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 800630c:	4313      	orrs	r3, r2
 800630e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006310:	e06a      	b.n	80063e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006312:	4b66      	ldr	r3, [pc, #408]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	061b      	lsls	r3, r3, #24
 8006320:	4962      	ldr	r1, [pc, #392]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 8006322:	4313      	orrs	r3, r2
 8006324:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006326:	e05f      	b.n	80063e8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d042      	beq.n	80063b6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006330:	4b5e      	ldr	r3, [pc, #376]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a5d      	ldr	r2, [pc, #372]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 8006336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800633a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800633c:	f7fa fc82 	bl	8000c44 <HAL_GetTick>
 8006340:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006342:	e008      	b.n	8006356 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006344:	f7fa fc7e 	bl	8000c44 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d901      	bls.n	8006356 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e280      	b.n	8006858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006356:	4b55      	ldr	r3, [pc, #340]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800635e:	2b00      	cmp	r3, #0
 8006360:	d0f0      	beq.n	8006344 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006362:	f7fa fc9f 	bl	8000ca4 <HAL_GetREVID>
 8006366:	4603      	mov	r3, r0
 8006368:	f241 0203 	movw	r2, #4099	@ 0x1003
 800636c:	4293      	cmp	r3, r2
 800636e:	d817      	bhi.n	80063a0 <HAL_RCC_OscConfig+0x3ec>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	2b20      	cmp	r3, #32
 8006376:	d108      	bne.n	800638a <HAL_RCC_OscConfig+0x3d6>
 8006378:	4b4c      	ldr	r3, [pc, #304]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006380:	4a4a      	ldr	r2, [pc, #296]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 8006382:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006386:	6053      	str	r3, [r2, #4]
 8006388:	e02e      	b.n	80063e8 <HAL_RCC_OscConfig+0x434>
 800638a:	4b48      	ldr	r3, [pc, #288]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	069b      	lsls	r3, r3, #26
 8006398:	4944      	ldr	r1, [pc, #272]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 800639a:	4313      	orrs	r3, r2
 800639c:	604b      	str	r3, [r1, #4]
 800639e:	e023      	b.n	80063e8 <HAL_RCC_OscConfig+0x434>
 80063a0:	4b42      	ldr	r3, [pc, #264]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	061b      	lsls	r3, r3, #24
 80063ae:	493f      	ldr	r1, [pc, #252]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	60cb      	str	r3, [r1, #12]
 80063b4:	e018      	b.n	80063e8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80063b6:	4b3d      	ldr	r3, [pc, #244]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a3c      	ldr	r2, [pc, #240]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 80063bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c2:	f7fa fc3f 	bl	8000c44 <HAL_GetTick>
 80063c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80063c8:	e008      	b.n	80063dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80063ca:	f7fa fc3b 	bl	8000c44 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d901      	bls.n	80063dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e23d      	b.n	8006858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80063dc:	4b33      	ldr	r3, [pc, #204]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1f0      	bne.n	80063ca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0308 	and.w	r3, r3, #8
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d036      	beq.n	8006462 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d019      	beq.n	8006430 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063fc:	4b2b      	ldr	r3, [pc, #172]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 80063fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006400:	4a2a      	ldr	r2, [pc, #168]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 8006402:	f043 0301 	orr.w	r3, r3, #1
 8006406:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006408:	f7fa fc1c 	bl	8000c44 <HAL_GetTick>
 800640c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800640e:	e008      	b.n	8006422 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006410:	f7fa fc18 	bl	8000c44 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b02      	cmp	r3, #2
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e21a      	b.n	8006858 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006422:	4b22      	ldr	r3, [pc, #136]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 8006424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d0f0      	beq.n	8006410 <HAL_RCC_OscConfig+0x45c>
 800642e:	e018      	b.n	8006462 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006430:	4b1e      	ldr	r3, [pc, #120]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 8006432:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006434:	4a1d      	ldr	r2, [pc, #116]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 8006436:	f023 0301 	bic.w	r3, r3, #1
 800643a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800643c:	f7fa fc02 	bl	8000c44 <HAL_GetTick>
 8006440:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006442:	e008      	b.n	8006456 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006444:	f7fa fbfe 	bl	8000c44 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b02      	cmp	r3, #2
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e200      	b.n	8006858 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006456:	4b15      	ldr	r3, [pc, #84]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 8006458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1f0      	bne.n	8006444 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0320 	and.w	r3, r3, #32
 800646a:	2b00      	cmp	r3, #0
 800646c:	d039      	beq.n	80064e2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d01c      	beq.n	80064b0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006476:	4b0d      	ldr	r3, [pc, #52]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a0c      	ldr	r2, [pc, #48]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 800647c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006480:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006482:	f7fa fbdf 	bl	8000c44 <HAL_GetTick>
 8006486:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006488:	e008      	b.n	800649c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800648a:	f7fa fbdb 	bl	8000c44 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	2b02      	cmp	r3, #2
 8006496:	d901      	bls.n	800649c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e1dd      	b.n	8006858 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800649c:	4b03      	ldr	r3, [pc, #12]	@ (80064ac <HAL_RCC_OscConfig+0x4f8>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d0f0      	beq.n	800648a <HAL_RCC_OscConfig+0x4d6>
 80064a8:	e01b      	b.n	80064e2 <HAL_RCC_OscConfig+0x52e>
 80064aa:	bf00      	nop
 80064ac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80064b0:	4b9b      	ldr	r3, [pc, #620]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a9a      	ldr	r2, [pc, #616]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 80064b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80064bc:	f7fa fbc2 	bl	8000c44 <HAL_GetTick>
 80064c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80064c2:	e008      	b.n	80064d6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064c4:	f7fa fbbe 	bl	8000c44 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e1c0      	b.n	8006858 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80064d6:	4b92      	ldr	r3, [pc, #584]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1f0      	bne.n	80064c4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0304 	and.w	r3, r3, #4
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 8081 	beq.w	80065f2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80064f0:	4b8c      	ldr	r3, [pc, #560]	@ (8006724 <HAL_RCC_OscConfig+0x770>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a8b      	ldr	r2, [pc, #556]	@ (8006724 <HAL_RCC_OscConfig+0x770>)
 80064f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064fc:	f7fa fba2 	bl	8000c44 <HAL_GetTick>
 8006500:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006502:	e008      	b.n	8006516 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006504:	f7fa fb9e 	bl	8000c44 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b64      	cmp	r3, #100	@ 0x64
 8006510:	d901      	bls.n	8006516 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e1a0      	b.n	8006858 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006516:	4b83      	ldr	r3, [pc, #524]	@ (8006724 <HAL_RCC_OscConfig+0x770>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800651e:	2b00      	cmp	r3, #0
 8006520:	d0f0      	beq.n	8006504 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d106      	bne.n	8006538 <HAL_RCC_OscConfig+0x584>
 800652a:	4b7d      	ldr	r3, [pc, #500]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 800652c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800652e:	4a7c      	ldr	r2, [pc, #496]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 8006530:	f043 0301 	orr.w	r3, r3, #1
 8006534:	6713      	str	r3, [r2, #112]	@ 0x70
 8006536:	e02d      	b.n	8006594 <HAL_RCC_OscConfig+0x5e0>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10c      	bne.n	800655a <HAL_RCC_OscConfig+0x5a6>
 8006540:	4b77      	ldr	r3, [pc, #476]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 8006542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006544:	4a76      	ldr	r2, [pc, #472]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 8006546:	f023 0301 	bic.w	r3, r3, #1
 800654a:	6713      	str	r3, [r2, #112]	@ 0x70
 800654c:	4b74      	ldr	r3, [pc, #464]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 800654e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006550:	4a73      	ldr	r2, [pc, #460]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 8006552:	f023 0304 	bic.w	r3, r3, #4
 8006556:	6713      	str	r3, [r2, #112]	@ 0x70
 8006558:	e01c      	b.n	8006594 <HAL_RCC_OscConfig+0x5e0>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	2b05      	cmp	r3, #5
 8006560:	d10c      	bne.n	800657c <HAL_RCC_OscConfig+0x5c8>
 8006562:	4b6f      	ldr	r3, [pc, #444]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 8006564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006566:	4a6e      	ldr	r2, [pc, #440]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 8006568:	f043 0304 	orr.w	r3, r3, #4
 800656c:	6713      	str	r3, [r2, #112]	@ 0x70
 800656e:	4b6c      	ldr	r3, [pc, #432]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 8006570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006572:	4a6b      	ldr	r2, [pc, #428]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 8006574:	f043 0301 	orr.w	r3, r3, #1
 8006578:	6713      	str	r3, [r2, #112]	@ 0x70
 800657a:	e00b      	b.n	8006594 <HAL_RCC_OscConfig+0x5e0>
 800657c:	4b68      	ldr	r3, [pc, #416]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 800657e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006580:	4a67      	ldr	r2, [pc, #412]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 8006582:	f023 0301 	bic.w	r3, r3, #1
 8006586:	6713      	str	r3, [r2, #112]	@ 0x70
 8006588:	4b65      	ldr	r3, [pc, #404]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 800658a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800658c:	4a64      	ldr	r2, [pc, #400]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 800658e:	f023 0304 	bic.w	r3, r3, #4
 8006592:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d015      	beq.n	80065c8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800659c:	f7fa fb52 	bl	8000c44 <HAL_GetTick>
 80065a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065a2:	e00a      	b.n	80065ba <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065a4:	f7fa fb4e 	bl	8000c44 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d901      	bls.n	80065ba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e14e      	b.n	8006858 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065ba:	4b59      	ldr	r3, [pc, #356]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 80065bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0ee      	beq.n	80065a4 <HAL_RCC_OscConfig+0x5f0>
 80065c6:	e014      	b.n	80065f2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065c8:	f7fa fb3c 	bl	8000c44 <HAL_GetTick>
 80065cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80065ce:	e00a      	b.n	80065e6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065d0:	f7fa fb38 	bl	8000c44 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065de:	4293      	cmp	r3, r2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e138      	b.n	8006858 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80065e6:	4b4e      	ldr	r3, [pc, #312]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 80065e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1ee      	bne.n	80065d0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f000 812d 	beq.w	8006856 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80065fc:	4b48      	ldr	r3, [pc, #288]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006604:	2b18      	cmp	r3, #24
 8006606:	f000 80bd 	beq.w	8006784 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660e:	2b02      	cmp	r3, #2
 8006610:	f040 809e 	bne.w	8006750 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006614:	4b42      	ldr	r3, [pc, #264]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a41      	ldr	r2, [pc, #260]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 800661a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800661e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006620:	f7fa fb10 	bl	8000c44 <HAL_GetTick>
 8006624:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006626:	e008      	b.n	800663a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006628:	f7fa fb0c 	bl	8000c44 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b02      	cmp	r3, #2
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e10e      	b.n	8006858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800663a:	4b39      	ldr	r3, [pc, #228]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1f0      	bne.n	8006628 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006646:	4b36      	ldr	r3, [pc, #216]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 8006648:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800664a:	4b37      	ldr	r3, [pc, #220]	@ (8006728 <HAL_RCC_OscConfig+0x774>)
 800664c:	4013      	ands	r3, r2
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006656:	0112      	lsls	r2, r2, #4
 8006658:	430a      	orrs	r2, r1
 800665a:	4931      	ldr	r1, [pc, #196]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 800665c:	4313      	orrs	r3, r2
 800665e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006664:	3b01      	subs	r3, #1
 8006666:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800666e:	3b01      	subs	r3, #1
 8006670:	025b      	lsls	r3, r3, #9
 8006672:	b29b      	uxth	r3, r3
 8006674:	431a      	orrs	r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800667a:	3b01      	subs	r3, #1
 800667c:	041b      	lsls	r3, r3, #16
 800667e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006682:	431a      	orrs	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006688:	3b01      	subs	r3, #1
 800668a:	061b      	lsls	r3, r3, #24
 800668c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006690:	4923      	ldr	r1, [pc, #140]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 8006692:	4313      	orrs	r3, r2
 8006694:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006696:	4b22      	ldr	r3, [pc, #136]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 8006698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669a:	4a21      	ldr	r2, [pc, #132]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 800669c:	f023 0301 	bic.w	r3, r3, #1
 80066a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80066a2:	4b1f      	ldr	r3, [pc, #124]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 80066a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066a6:	4b21      	ldr	r3, [pc, #132]	@ (800672c <HAL_RCC_OscConfig+0x778>)
 80066a8:	4013      	ands	r3, r2
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80066ae:	00d2      	lsls	r2, r2, #3
 80066b0:	491b      	ldr	r1, [pc, #108]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80066b6:	4b1a      	ldr	r3, [pc, #104]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 80066b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ba:	f023 020c 	bic.w	r2, r3, #12
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c2:	4917      	ldr	r1, [pc, #92]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80066c8:	4b15      	ldr	r3, [pc, #84]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 80066ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066cc:	f023 0202 	bic.w	r2, r3, #2
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066d4:	4912      	ldr	r1, [pc, #72]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80066da:	4b11      	ldr	r3, [pc, #68]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 80066dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066de:	4a10      	ldr	r2, [pc, #64]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 80066e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066e6:	4b0e      	ldr	r3, [pc, #56]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 80066e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ea:	4a0d      	ldr	r2, [pc, #52]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 80066ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80066f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 80066f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f6:	4a0a      	ldr	r2, [pc, #40]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 80066f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80066fe:	4b08      	ldr	r3, [pc, #32]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 8006700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006702:	4a07      	ldr	r2, [pc, #28]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 8006704:	f043 0301 	orr.w	r3, r3, #1
 8006708:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800670a:	4b05      	ldr	r3, [pc, #20]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a04      	ldr	r2, [pc, #16]	@ (8006720 <HAL_RCC_OscConfig+0x76c>)
 8006710:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006716:	f7fa fa95 	bl	8000c44 <HAL_GetTick>
 800671a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800671c:	e011      	b.n	8006742 <HAL_RCC_OscConfig+0x78e>
 800671e:	bf00      	nop
 8006720:	58024400 	.word	0x58024400
 8006724:	58024800 	.word	0x58024800
 8006728:	fffffc0c 	.word	0xfffffc0c
 800672c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006730:	f7fa fa88 	bl	8000c44 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	2b02      	cmp	r3, #2
 800673c:	d901      	bls.n	8006742 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e08a      	b.n	8006858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006742:	4b47      	ldr	r3, [pc, #284]	@ (8006860 <HAL_RCC_OscConfig+0x8ac>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0f0      	beq.n	8006730 <HAL_RCC_OscConfig+0x77c>
 800674e:	e082      	b.n	8006856 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006750:	4b43      	ldr	r3, [pc, #268]	@ (8006860 <HAL_RCC_OscConfig+0x8ac>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a42      	ldr	r2, [pc, #264]	@ (8006860 <HAL_RCC_OscConfig+0x8ac>)
 8006756:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800675a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800675c:	f7fa fa72 	bl	8000c44 <HAL_GetTick>
 8006760:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006762:	e008      	b.n	8006776 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006764:	f7fa fa6e 	bl	8000c44 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	2b02      	cmp	r3, #2
 8006770:	d901      	bls.n	8006776 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e070      	b.n	8006858 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006776:	4b3a      	ldr	r3, [pc, #232]	@ (8006860 <HAL_RCC_OscConfig+0x8ac>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1f0      	bne.n	8006764 <HAL_RCC_OscConfig+0x7b0>
 8006782:	e068      	b.n	8006856 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006784:	4b36      	ldr	r3, [pc, #216]	@ (8006860 <HAL_RCC_OscConfig+0x8ac>)
 8006786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006788:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800678a:	4b35      	ldr	r3, [pc, #212]	@ (8006860 <HAL_RCC_OscConfig+0x8ac>)
 800678c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800678e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006794:	2b01      	cmp	r3, #1
 8006796:	d031      	beq.n	80067fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	f003 0203 	and.w	r2, r3, #3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d12a      	bne.n	80067fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	091b      	lsrs	r3, r3, #4
 80067aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d122      	bne.n	80067fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d11a      	bne.n	80067fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	0a5b      	lsrs	r3, r3, #9
 80067ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d111      	bne.n	80067fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	0c1b      	lsrs	r3, r3, #16
 80067dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d108      	bne.n	80067fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	0e1b      	lsrs	r3, r3, #24
 80067ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d001      	beq.n	8006800 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e02b      	b.n	8006858 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006800:	4b17      	ldr	r3, [pc, #92]	@ (8006860 <HAL_RCC_OscConfig+0x8ac>)
 8006802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006804:	08db      	lsrs	r3, r3, #3
 8006806:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800680a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	429a      	cmp	r2, r3
 8006814:	d01f      	beq.n	8006856 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006816:	4b12      	ldr	r3, [pc, #72]	@ (8006860 <HAL_RCC_OscConfig+0x8ac>)
 8006818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681a:	4a11      	ldr	r2, [pc, #68]	@ (8006860 <HAL_RCC_OscConfig+0x8ac>)
 800681c:	f023 0301 	bic.w	r3, r3, #1
 8006820:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006822:	f7fa fa0f 	bl	8000c44 <HAL_GetTick>
 8006826:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006828:	bf00      	nop
 800682a:	f7fa fa0b 	bl	8000c44 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006832:	4293      	cmp	r3, r2
 8006834:	d0f9      	beq.n	800682a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006836:	4b0a      	ldr	r3, [pc, #40]	@ (8006860 <HAL_RCC_OscConfig+0x8ac>)
 8006838:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800683a:	4b0a      	ldr	r3, [pc, #40]	@ (8006864 <HAL_RCC_OscConfig+0x8b0>)
 800683c:	4013      	ands	r3, r2
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006842:	00d2      	lsls	r2, r2, #3
 8006844:	4906      	ldr	r1, [pc, #24]	@ (8006860 <HAL_RCC_OscConfig+0x8ac>)
 8006846:	4313      	orrs	r3, r2
 8006848:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800684a:	4b05      	ldr	r3, [pc, #20]	@ (8006860 <HAL_RCC_OscConfig+0x8ac>)
 800684c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684e:	4a04      	ldr	r2, [pc, #16]	@ (8006860 <HAL_RCC_OscConfig+0x8ac>)
 8006850:	f043 0301 	orr.w	r3, r3, #1
 8006854:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3730      	adds	r7, #48	@ 0x30
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	58024400 	.word	0x58024400
 8006864:	ffff0007 	.word	0xffff0007

08006868 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e19c      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800687c:	4b8a      	ldr	r3, [pc, #552]	@ (8006aa8 <HAL_RCC_ClockConfig+0x240>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 030f 	and.w	r3, r3, #15
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	429a      	cmp	r2, r3
 8006888:	d910      	bls.n	80068ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800688a:	4b87      	ldr	r3, [pc, #540]	@ (8006aa8 <HAL_RCC_ClockConfig+0x240>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f023 020f 	bic.w	r2, r3, #15
 8006892:	4985      	ldr	r1, [pc, #532]	@ (8006aa8 <HAL_RCC_ClockConfig+0x240>)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	4313      	orrs	r3, r2
 8006898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800689a:	4b83      	ldr	r3, [pc, #524]	@ (8006aa8 <HAL_RCC_ClockConfig+0x240>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 030f 	and.w	r3, r3, #15
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d001      	beq.n	80068ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e184      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0304 	and.w	r3, r3, #4
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d010      	beq.n	80068da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	691a      	ldr	r2, [r3, #16]
 80068bc:	4b7b      	ldr	r3, [pc, #492]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d908      	bls.n	80068da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80068c8:	4b78      	ldr	r3, [pc, #480]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	4975      	ldr	r1, [pc, #468]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0308 	and.w	r3, r3, #8
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d010      	beq.n	8006908 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	695a      	ldr	r2, [r3, #20]
 80068ea:	4b70      	ldr	r3, [pc, #448]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d908      	bls.n	8006908 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80068f6:	4b6d      	ldr	r3, [pc, #436]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	496a      	ldr	r1, [pc, #424]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006904:	4313      	orrs	r3, r2
 8006906:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0310 	and.w	r3, r3, #16
 8006910:	2b00      	cmp	r3, #0
 8006912:	d010      	beq.n	8006936 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	699a      	ldr	r2, [r3, #24]
 8006918:	4b64      	ldr	r3, [pc, #400]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006920:	429a      	cmp	r2, r3
 8006922:	d908      	bls.n	8006936 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006924:	4b61      	ldr	r3, [pc, #388]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	495e      	ldr	r1, [pc, #376]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006932:	4313      	orrs	r3, r2
 8006934:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b00      	cmp	r3, #0
 8006940:	d010      	beq.n	8006964 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69da      	ldr	r2, [r3, #28]
 8006946:	4b59      	ldr	r3, [pc, #356]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800694e:	429a      	cmp	r2, r3
 8006950:	d908      	bls.n	8006964 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006952:	4b56      	ldr	r3, [pc, #344]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	4953      	ldr	r1, [pc, #332]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006960:	4313      	orrs	r3, r2
 8006962:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d010      	beq.n	8006992 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	4b4d      	ldr	r3, [pc, #308]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	f003 030f 	and.w	r3, r3, #15
 800697c:	429a      	cmp	r2, r3
 800697e:	d908      	bls.n	8006992 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006980:	4b4a      	ldr	r3, [pc, #296]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	f023 020f 	bic.w	r2, r3, #15
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	4947      	ldr	r1, [pc, #284]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 800698e:	4313      	orrs	r3, r2
 8006990:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	d055      	beq.n	8006a4a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800699e:	4b43      	ldr	r3, [pc, #268]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	4940      	ldr	r1, [pc, #256]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d107      	bne.n	80069c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069b8:	4b3c      	ldr	r3, [pc, #240]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d121      	bne.n	8006a08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e0f6      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	2b03      	cmp	r3, #3
 80069ce:	d107      	bne.n	80069e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069d0:	4b36      	ldr	r3, [pc, #216]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d115      	bne.n	8006a08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e0ea      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d107      	bne.n	80069f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80069e8:	4b30      	ldr	r3, [pc, #192]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d109      	bne.n	8006a08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e0de      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069f8:	4b2c      	ldr	r3, [pc, #176]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e0d6      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a08:	4b28      	ldr	r3, [pc, #160]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	f023 0207 	bic.w	r2, r3, #7
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	4925      	ldr	r1, [pc, #148]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a1a:	f7fa f913 	bl	8000c44 <HAL_GetTick>
 8006a1e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a20:	e00a      	b.n	8006a38 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a22:	f7fa f90f 	bl	8000c44 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d901      	bls.n	8006a38 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e0be      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a38:	4b1c      	ldr	r3, [pc, #112]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	00db      	lsls	r3, r3, #3
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d1eb      	bne.n	8006a22 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d010      	beq.n	8006a78 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68da      	ldr	r2, [r3, #12]
 8006a5a:	4b14      	ldr	r3, [pc, #80]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	f003 030f 	and.w	r3, r3, #15
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d208      	bcs.n	8006a78 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a66:	4b11      	ldr	r3, [pc, #68]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	f023 020f 	bic.w	r2, r3, #15
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	490e      	ldr	r1, [pc, #56]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a78:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa8 <HAL_RCC_ClockConfig+0x240>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 030f 	and.w	r3, r3, #15
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d214      	bcs.n	8006ab0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a86:	4b08      	ldr	r3, [pc, #32]	@ (8006aa8 <HAL_RCC_ClockConfig+0x240>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f023 020f 	bic.w	r2, r3, #15
 8006a8e:	4906      	ldr	r1, [pc, #24]	@ (8006aa8 <HAL_RCC_ClockConfig+0x240>)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a96:	4b04      	ldr	r3, [pc, #16]	@ (8006aa8 <HAL_RCC_ClockConfig+0x240>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 030f 	and.w	r3, r3, #15
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d005      	beq.n	8006ab0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e086      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x34e>
 8006aa8:	52002000 	.word	0x52002000
 8006aac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0304 	and.w	r3, r3, #4
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d010      	beq.n	8006ade <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	691a      	ldr	r2, [r3, #16]
 8006ac0:	4b3f      	ldr	r3, [pc, #252]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d208      	bcs.n	8006ade <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006acc:	4b3c      	ldr	r3, [pc, #240]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	4939      	ldr	r1, [pc, #228]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0308 	and.w	r3, r3, #8
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d010      	beq.n	8006b0c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	695a      	ldr	r2, [r3, #20]
 8006aee:	4b34      	ldr	r3, [pc, #208]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d208      	bcs.n	8006b0c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006afa:	4b31      	ldr	r3, [pc, #196]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	492e      	ldr	r1, [pc, #184]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0310 	and.w	r3, r3, #16
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d010      	beq.n	8006b3a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	699a      	ldr	r2, [r3, #24]
 8006b1c:	4b28      	ldr	r3, [pc, #160]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006b1e:	69db      	ldr	r3, [r3, #28]
 8006b20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d208      	bcs.n	8006b3a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b28:	4b25      	ldr	r3, [pc, #148]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	4922      	ldr	r1, [pc, #136]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0320 	and.w	r3, r3, #32
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d010      	beq.n	8006b68 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	69da      	ldr	r2, [r3, #28]
 8006b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d208      	bcs.n	8006b68 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006b56:	4b1a      	ldr	r3, [pc, #104]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	4917      	ldr	r1, [pc, #92]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006b64:	4313      	orrs	r3, r2
 8006b66:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b68:	f000 f834 	bl	8006bd4 <HAL_RCC_GetSysClockFreq>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	4b14      	ldr	r3, [pc, #80]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	0a1b      	lsrs	r3, r3, #8
 8006b74:	f003 030f 	and.w	r3, r3, #15
 8006b78:	4912      	ldr	r1, [pc, #72]	@ (8006bc4 <HAL_RCC_ClockConfig+0x35c>)
 8006b7a:	5ccb      	ldrb	r3, [r1, r3]
 8006b7c:	f003 031f 	and.w	r3, r3, #31
 8006b80:	fa22 f303 	lsr.w	r3, r2, r3
 8006b84:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b86:	4b0e      	ldr	r3, [pc, #56]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	f003 030f 	and.w	r3, r3, #15
 8006b8e:	4a0d      	ldr	r2, [pc, #52]	@ (8006bc4 <HAL_RCC_ClockConfig+0x35c>)
 8006b90:	5cd3      	ldrb	r3, [r2, r3]
 8006b92:	f003 031f 	and.w	r3, r3, #31
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	fa22 f303 	lsr.w	r3, r2, r3
 8006b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8006bc8 <HAL_RCC_ClockConfig+0x360>)
 8006b9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8006bcc <HAL_RCC_ClockConfig+0x364>)
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8006bd0 <HAL_RCC_ClockConfig+0x368>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7fa f800 	bl	8000bb0 <HAL_InitTick>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3718      	adds	r7, #24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	58024400 	.word	0x58024400
 8006bc4:	0800e24c 	.word	0x0800e24c
 8006bc8:	24000004 	.word	0x24000004
 8006bcc:	24000000 	.word	0x24000000
 8006bd0:	24000008 	.word	0x24000008

08006bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b089      	sub	sp, #36	@ 0x24
 8006bd8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bda:	4bb3      	ldr	r3, [pc, #716]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006be2:	2b18      	cmp	r3, #24
 8006be4:	f200 8155 	bhi.w	8006e92 <HAL_RCC_GetSysClockFreq+0x2be>
 8006be8:	a201      	add	r2, pc, #4	@ (adr r2, 8006bf0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bee:	bf00      	nop
 8006bf0:	08006c55 	.word	0x08006c55
 8006bf4:	08006e93 	.word	0x08006e93
 8006bf8:	08006e93 	.word	0x08006e93
 8006bfc:	08006e93 	.word	0x08006e93
 8006c00:	08006e93 	.word	0x08006e93
 8006c04:	08006e93 	.word	0x08006e93
 8006c08:	08006e93 	.word	0x08006e93
 8006c0c:	08006e93 	.word	0x08006e93
 8006c10:	08006c7b 	.word	0x08006c7b
 8006c14:	08006e93 	.word	0x08006e93
 8006c18:	08006e93 	.word	0x08006e93
 8006c1c:	08006e93 	.word	0x08006e93
 8006c20:	08006e93 	.word	0x08006e93
 8006c24:	08006e93 	.word	0x08006e93
 8006c28:	08006e93 	.word	0x08006e93
 8006c2c:	08006e93 	.word	0x08006e93
 8006c30:	08006c81 	.word	0x08006c81
 8006c34:	08006e93 	.word	0x08006e93
 8006c38:	08006e93 	.word	0x08006e93
 8006c3c:	08006e93 	.word	0x08006e93
 8006c40:	08006e93 	.word	0x08006e93
 8006c44:	08006e93 	.word	0x08006e93
 8006c48:	08006e93 	.word	0x08006e93
 8006c4c:	08006e93 	.word	0x08006e93
 8006c50:	08006c87 	.word	0x08006c87
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c54:	4b94      	ldr	r3, [pc, #592]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0320 	and.w	r3, r3, #32
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d009      	beq.n	8006c74 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c60:	4b91      	ldr	r3, [pc, #580]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	08db      	lsrs	r3, r3, #3
 8006c66:	f003 0303 	and.w	r3, r3, #3
 8006c6a:	4a90      	ldr	r2, [pc, #576]	@ (8006eac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c70:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006c72:	e111      	b.n	8006e98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006c74:	4b8d      	ldr	r3, [pc, #564]	@ (8006eac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c76:	61bb      	str	r3, [r7, #24]
      break;
 8006c78:	e10e      	b.n	8006e98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006c7a:	4b8d      	ldr	r3, [pc, #564]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c7c:	61bb      	str	r3, [r7, #24]
      break;
 8006c7e:	e10b      	b.n	8006e98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006c80:	4b8c      	ldr	r3, [pc, #560]	@ (8006eb4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006c82:	61bb      	str	r3, [r7, #24]
      break;
 8006c84:	e108      	b.n	8006e98 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c86:	4b88      	ldr	r3, [pc, #544]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c8a:	f003 0303 	and.w	r3, r3, #3
 8006c8e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006c90:	4b85      	ldr	r3, [pc, #532]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c94:	091b      	lsrs	r3, r3, #4
 8006c96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c9a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006c9c:	4b82      	ldr	r3, [pc, #520]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006ca6:	4b80      	ldr	r3, [pc, #512]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006caa:	08db      	lsrs	r3, r3, #3
 8006cac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	fb02 f303 	mul.w	r3, r2, r3
 8006cb6:	ee07 3a90 	vmov	s15, r3
 8006cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cbe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 80e1 	beq.w	8006e8c <HAL_RCC_GetSysClockFreq+0x2b8>
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	f000 8083 	beq.w	8006dd8 <HAL_RCC_GetSysClockFreq+0x204>
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	f200 80a1 	bhi.w	8006e1c <HAL_RCC_GetSysClockFreq+0x248>
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <HAL_RCC_GetSysClockFreq+0x114>
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d056      	beq.n	8006d94 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006ce6:	e099      	b.n	8006e1c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ce8:	4b6f      	ldr	r3, [pc, #444]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0320 	and.w	r3, r3, #32
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d02d      	beq.n	8006d50 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cf4:	4b6c      	ldr	r3, [pc, #432]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	08db      	lsrs	r3, r3, #3
 8006cfa:	f003 0303 	and.w	r3, r3, #3
 8006cfe:	4a6b      	ldr	r2, [pc, #428]	@ (8006eac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d00:	fa22 f303 	lsr.w	r3, r2, r3
 8006d04:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	ee07 3a90 	vmov	s15, r3
 8006d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	ee07 3a90 	vmov	s15, r3
 8006d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d1e:	4b62      	ldr	r3, [pc, #392]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d26:	ee07 3a90 	vmov	s15, r3
 8006d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d32:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006eb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d4a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006d4e:	e087      	b.n	8006e60 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	ee07 3a90 	vmov	s15, r3
 8006d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d5a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006ebc <HAL_RCC_GetSysClockFreq+0x2e8>
 8006d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d62:	4b51      	ldr	r3, [pc, #324]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d6a:	ee07 3a90 	vmov	s15, r3
 8006d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d72:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d76:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006eb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d92:	e065      	b.n	8006e60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	ee07 3a90 	vmov	s15, r3
 8006d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d9e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006ec0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006da6:	4b40      	ldr	r3, [pc, #256]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dae:	ee07 3a90 	vmov	s15, r3
 8006db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006eb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006dd6:	e043      	b.n	8006e60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	ee07 3a90 	vmov	s15, r3
 8006dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006ec4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dea:	4b2f      	ldr	r3, [pc, #188]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df2:	ee07 3a90 	vmov	s15, r3
 8006df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dfe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006eb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e1a:	e021      	b.n	8006e60 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	ee07 3a90 	vmov	s15, r3
 8006e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e26:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006ec0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e36:	ee07 3a90 	vmov	s15, r3
 8006e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e42:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006eb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e5e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006e60:	4b11      	ldr	r3, [pc, #68]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e64:	0a5b      	lsrs	r3, r3, #9
 8006e66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	ee07 3a90 	vmov	s15, r3
 8006e74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e78:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e84:	ee17 3a90 	vmov	r3, s15
 8006e88:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006e8a:	e005      	b.n	8006e98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	61bb      	str	r3, [r7, #24]
      break;
 8006e90:	e002      	b.n	8006e98 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006e92:	4b07      	ldr	r3, [pc, #28]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e94:	61bb      	str	r3, [r7, #24]
      break;
 8006e96:	bf00      	nop
  }

  return sysclockfreq;
 8006e98:	69bb      	ldr	r3, [r7, #24]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3724      	adds	r7, #36	@ 0x24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	58024400 	.word	0x58024400
 8006eac:	03d09000 	.word	0x03d09000
 8006eb0:	003d0900 	.word	0x003d0900
 8006eb4:	017d7840 	.word	0x017d7840
 8006eb8:	46000000 	.word	0x46000000
 8006ebc:	4c742400 	.word	0x4c742400
 8006ec0:	4a742400 	.word	0x4a742400
 8006ec4:	4bbebc20 	.word	0x4bbebc20

08006ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006ece:	f7ff fe81 	bl	8006bd4 <HAL_RCC_GetSysClockFreq>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	4b10      	ldr	r3, [pc, #64]	@ (8006f18 <HAL_RCC_GetHCLKFreq+0x50>)
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	0a1b      	lsrs	r3, r3, #8
 8006eda:	f003 030f 	and.w	r3, r3, #15
 8006ede:	490f      	ldr	r1, [pc, #60]	@ (8006f1c <HAL_RCC_GetHCLKFreq+0x54>)
 8006ee0:	5ccb      	ldrb	r3, [r1, r3]
 8006ee2:	f003 031f 	and.w	r3, r3, #31
 8006ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8006eea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006eec:	4b0a      	ldr	r3, [pc, #40]	@ (8006f18 <HAL_RCC_GetHCLKFreq+0x50>)
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	f003 030f 	and.w	r3, r3, #15
 8006ef4:	4a09      	ldr	r2, [pc, #36]	@ (8006f1c <HAL_RCC_GetHCLKFreq+0x54>)
 8006ef6:	5cd3      	ldrb	r3, [r2, r3]
 8006ef8:	f003 031f 	and.w	r3, r3, #31
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	fa22 f303 	lsr.w	r3, r2, r3
 8006f02:	4a07      	ldr	r2, [pc, #28]	@ (8006f20 <HAL_RCC_GetHCLKFreq+0x58>)
 8006f04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f06:	4a07      	ldr	r2, [pc, #28]	@ (8006f24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006f0c:	4b04      	ldr	r3, [pc, #16]	@ (8006f20 <HAL_RCC_GetHCLKFreq+0x58>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	58024400 	.word	0x58024400
 8006f1c:	0800e24c 	.word	0x0800e24c
 8006f20:	24000004 	.word	0x24000004
 8006f24:	24000000 	.word	0x24000000

08006f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006f2c:	f7ff ffcc 	bl	8006ec8 <HAL_RCC_GetHCLKFreq>
 8006f30:	4602      	mov	r2, r0
 8006f32:	4b06      	ldr	r3, [pc, #24]	@ (8006f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	091b      	lsrs	r3, r3, #4
 8006f38:	f003 0307 	and.w	r3, r3, #7
 8006f3c:	4904      	ldr	r1, [pc, #16]	@ (8006f50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f3e:	5ccb      	ldrb	r3, [r1, r3]
 8006f40:	f003 031f 	and.w	r3, r3, #31
 8006f44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	58024400 	.word	0x58024400
 8006f50:	0800e24c 	.word	0x0800e24c

08006f54 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f58:	b0ca      	sub	sp, #296	@ 0x128
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f60:	2300      	movs	r3, #0
 8006f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f66:	2300      	movs	r3, #0
 8006f68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f74:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006f78:	2500      	movs	r5, #0
 8006f7a:	ea54 0305 	orrs.w	r3, r4, r5
 8006f7e:	d049      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f8a:	d02f      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006f8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f90:	d828      	bhi.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006f92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f96:	d01a      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006f98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f9c:	d822      	bhi.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d003      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006fa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fa6:	d007      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006fa8:	e01c      	b.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006faa:	4bb8      	ldr	r3, [pc, #736]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fae:	4ab7      	ldr	r2, [pc, #732]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006fb6:	e01a      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fbc:	3308      	adds	r3, #8
 8006fbe:	2102      	movs	r1, #2
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f002 fb61 	bl	8009688 <RCCEx_PLL2_Config>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006fcc:	e00f      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd2:	3328      	adds	r3, #40	@ 0x28
 8006fd4:	2102      	movs	r1, #2
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f002 fc08 	bl	80097ec <RCCEx_PLL3_Config>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006fe2:	e004      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fea:	e000      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10a      	bne.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ff6:	4ba5      	ldr	r3, [pc, #660]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ff8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ffa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007002:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007004:	4aa1      	ldr	r2, [pc, #644]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007006:	430b      	orrs	r3, r1
 8007008:	6513      	str	r3, [r2, #80]	@ 0x50
 800700a:	e003      	b.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800700c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007010:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007020:	f04f 0900 	mov.w	r9, #0
 8007024:	ea58 0309 	orrs.w	r3, r8, r9
 8007028:	d047      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800702a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800702e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007030:	2b04      	cmp	r3, #4
 8007032:	d82a      	bhi.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007034:	a201      	add	r2, pc, #4	@ (adr r2, 800703c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703a:	bf00      	nop
 800703c:	08007051 	.word	0x08007051
 8007040:	0800705f 	.word	0x0800705f
 8007044:	08007075 	.word	0x08007075
 8007048:	08007093 	.word	0x08007093
 800704c:	08007093 	.word	0x08007093
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007050:	4b8e      	ldr	r3, [pc, #568]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007054:	4a8d      	ldr	r2, [pc, #564]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007056:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800705a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800705c:	e01a      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800705e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007062:	3308      	adds	r3, #8
 8007064:	2100      	movs	r1, #0
 8007066:	4618      	mov	r0, r3
 8007068:	f002 fb0e 	bl	8009688 <RCCEx_PLL2_Config>
 800706c:	4603      	mov	r3, r0
 800706e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007072:	e00f      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007078:	3328      	adds	r3, #40	@ 0x28
 800707a:	2100      	movs	r1, #0
 800707c:	4618      	mov	r0, r3
 800707e:	f002 fbb5 	bl	80097ec <RCCEx_PLL3_Config>
 8007082:	4603      	mov	r3, r0
 8007084:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007088:	e004      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007090:	e000      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007092:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007094:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10a      	bne.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800709c:	4b7b      	ldr	r3, [pc, #492]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800709e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070a0:	f023 0107 	bic.w	r1, r3, #7
 80070a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070aa:	4a78      	ldr	r2, [pc, #480]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070ac:	430b      	orrs	r3, r1
 80070ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80070b0:	e003      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80070ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80070c6:	f04f 0b00 	mov.w	fp, #0
 80070ca:	ea5a 030b 	orrs.w	r3, sl, fp
 80070ce:	d04c      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80070d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070da:	d030      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80070dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070e0:	d829      	bhi.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80070e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80070e4:	d02d      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80070e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80070e8:	d825      	bhi.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80070ea:	2b80      	cmp	r3, #128	@ 0x80
 80070ec:	d018      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80070ee:	2b80      	cmp	r3, #128	@ 0x80
 80070f0:	d821      	bhi.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d002      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80070f6:	2b40      	cmp	r3, #64	@ 0x40
 80070f8:	d007      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80070fa:	e01c      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070fc:	4b63      	ldr	r3, [pc, #396]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007100:	4a62      	ldr	r2, [pc, #392]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007102:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007106:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007108:	e01c      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800710a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800710e:	3308      	adds	r3, #8
 8007110:	2100      	movs	r1, #0
 8007112:	4618      	mov	r0, r3
 8007114:	f002 fab8 	bl	8009688 <RCCEx_PLL2_Config>
 8007118:	4603      	mov	r3, r0
 800711a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800711e:	e011      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007124:	3328      	adds	r3, #40	@ 0x28
 8007126:	2100      	movs	r1, #0
 8007128:	4618      	mov	r0, r3
 800712a:	f002 fb5f 	bl	80097ec <RCCEx_PLL3_Config>
 800712e:	4603      	mov	r3, r0
 8007130:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007134:	e006      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800713c:	e002      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800713e:	bf00      	nop
 8007140:	e000      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007144:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10a      	bne.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800714c:	4b4f      	ldr	r3, [pc, #316]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800714e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007150:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800715a:	4a4c      	ldr	r2, [pc, #304]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800715c:	430b      	orrs	r3, r1
 800715e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007160:	e003      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007166:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800716a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800716e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007172:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007176:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800717a:	2300      	movs	r3, #0
 800717c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007180:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007184:	460b      	mov	r3, r1
 8007186:	4313      	orrs	r3, r2
 8007188:	d053      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800718a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800718e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007192:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007196:	d035      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007198:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800719c:	d82e      	bhi.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800719e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80071a2:	d031      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80071a4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80071a8:	d828      	bhi.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80071aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071ae:	d01a      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80071b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071b4:	d822      	bhi.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80071ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071be:	d007      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80071c0:	e01c      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071c2:	4b32      	ldr	r3, [pc, #200]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c6:	4a31      	ldr	r2, [pc, #196]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071ce:	e01c      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d4:	3308      	adds	r3, #8
 80071d6:	2100      	movs	r1, #0
 80071d8:	4618      	mov	r0, r3
 80071da:	f002 fa55 	bl	8009688 <RCCEx_PLL2_Config>
 80071de:	4603      	mov	r3, r0
 80071e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80071e4:	e011      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ea:	3328      	adds	r3, #40	@ 0x28
 80071ec:	2100      	movs	r1, #0
 80071ee:	4618      	mov	r0, r3
 80071f0:	f002 fafc 	bl	80097ec <RCCEx_PLL3_Config>
 80071f4:	4603      	mov	r3, r0
 80071f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071fa:	e006      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007202:	e002      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007204:	bf00      	nop
 8007206:	e000      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800720a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10b      	bne.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007212:	4b1e      	ldr	r3, [pc, #120]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007216:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800721a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800721e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007222:	4a1a      	ldr	r2, [pc, #104]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007224:	430b      	orrs	r3, r1
 8007226:	6593      	str	r3, [r2, #88]	@ 0x58
 8007228:	e003      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800722e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800723e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007242:	2300      	movs	r3, #0
 8007244:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007248:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800724c:	460b      	mov	r3, r1
 800724e:	4313      	orrs	r3, r2
 8007250:	d056      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007256:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800725a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800725e:	d038      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007260:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007264:	d831      	bhi.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007266:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800726a:	d034      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800726c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007270:	d82b      	bhi.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007272:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007276:	d01d      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007278:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800727c:	d825      	bhi.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800727e:	2b00      	cmp	r3, #0
 8007280:	d006      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007282:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007286:	d00a      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007288:	e01f      	b.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800728a:	bf00      	nop
 800728c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007290:	4ba2      	ldr	r3, [pc, #648]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007294:	4aa1      	ldr	r2, [pc, #644]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007296:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800729a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800729c:	e01c      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800729e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a2:	3308      	adds	r3, #8
 80072a4:	2100      	movs	r1, #0
 80072a6:	4618      	mov	r0, r3
 80072a8:	f002 f9ee 	bl	8009688 <RCCEx_PLL2_Config>
 80072ac:	4603      	mov	r3, r0
 80072ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80072b2:	e011      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b8:	3328      	adds	r3, #40	@ 0x28
 80072ba:	2100      	movs	r1, #0
 80072bc:	4618      	mov	r0, r3
 80072be:	f002 fa95 	bl	80097ec <RCCEx_PLL3_Config>
 80072c2:	4603      	mov	r3, r0
 80072c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072c8:	e006      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072d0:	e002      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80072d2:	bf00      	nop
 80072d4:	e000      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80072d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10b      	bne.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80072e0:	4b8e      	ldr	r3, [pc, #568]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072e4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80072e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80072f0:	4a8a      	ldr	r2, [pc, #552]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072f2:	430b      	orrs	r3, r1
 80072f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80072f6:	e003      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007308:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800730c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007310:	2300      	movs	r3, #0
 8007312:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007316:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800731a:	460b      	mov	r3, r1
 800731c:	4313      	orrs	r3, r2
 800731e:	d03a      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007326:	2b30      	cmp	r3, #48	@ 0x30
 8007328:	d01f      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800732a:	2b30      	cmp	r3, #48	@ 0x30
 800732c:	d819      	bhi.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800732e:	2b20      	cmp	r3, #32
 8007330:	d00c      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007332:	2b20      	cmp	r3, #32
 8007334:	d815      	bhi.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007336:	2b00      	cmp	r3, #0
 8007338:	d019      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800733a:	2b10      	cmp	r3, #16
 800733c:	d111      	bne.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800733e:	4b77      	ldr	r3, [pc, #476]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007342:	4a76      	ldr	r2, [pc, #472]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007344:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007348:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800734a:	e011      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800734c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007350:	3308      	adds	r3, #8
 8007352:	2102      	movs	r1, #2
 8007354:	4618      	mov	r0, r3
 8007356:	f002 f997 	bl	8009688 <RCCEx_PLL2_Config>
 800735a:	4603      	mov	r3, r0
 800735c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007360:	e006      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007368:	e002      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800736a:	bf00      	nop
 800736c:	e000      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800736e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007370:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10a      	bne.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007378:	4b68      	ldr	r3, [pc, #416]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800737a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800737c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007386:	4a65      	ldr	r2, [pc, #404]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007388:	430b      	orrs	r3, r1
 800738a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800738c:	e003      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800738e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007392:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800739a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80073a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80073a6:	2300      	movs	r3, #0
 80073a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80073ac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80073b0:	460b      	mov	r3, r1
 80073b2:	4313      	orrs	r3, r2
 80073b4:	d051      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80073b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073c0:	d035      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80073c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073c6:	d82e      	bhi.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80073c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073cc:	d031      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80073ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073d2:	d828      	bhi.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80073d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073d8:	d01a      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80073da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073de:	d822      	bhi.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x498>
 80073e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073e8:	d007      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80073ea:	e01c      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073ec:	4b4b      	ldr	r3, [pc, #300]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f0:	4a4a      	ldr	r2, [pc, #296]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80073f8:	e01c      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073fe:	3308      	adds	r3, #8
 8007400:	2100      	movs	r1, #0
 8007402:	4618      	mov	r0, r3
 8007404:	f002 f940 	bl	8009688 <RCCEx_PLL2_Config>
 8007408:	4603      	mov	r3, r0
 800740a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800740e:	e011      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007414:	3328      	adds	r3, #40	@ 0x28
 8007416:	2100      	movs	r1, #0
 8007418:	4618      	mov	r0, r3
 800741a:	f002 f9e7 	bl	80097ec <RCCEx_PLL3_Config>
 800741e:	4603      	mov	r3, r0
 8007420:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007424:	e006      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800742c:	e002      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800742e:	bf00      	nop
 8007430:	e000      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007432:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007434:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10a      	bne.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800743c:	4b37      	ldr	r3, [pc, #220]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800743e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007440:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800744a:	4a34      	ldr	r2, [pc, #208]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800744c:	430b      	orrs	r3, r1
 800744e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007450:	e003      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007456:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800745a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800745e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007462:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007466:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800746a:	2300      	movs	r3, #0
 800746c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007470:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007474:	460b      	mov	r3, r1
 8007476:	4313      	orrs	r3, r2
 8007478:	d056      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800747a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800747e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007480:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007484:	d033      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007486:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800748a:	d82c      	bhi.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800748c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007490:	d02f      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007492:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007496:	d826      	bhi.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007498:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800749c:	d02b      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800749e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074a2:	d820      	bhi.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80074a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074a8:	d012      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80074aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074ae:	d81a      	bhi.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d022      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80074b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074b8:	d115      	bne.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074be:	3308      	adds	r3, #8
 80074c0:	2101      	movs	r1, #1
 80074c2:	4618      	mov	r0, r3
 80074c4:	f002 f8e0 	bl	8009688 <RCCEx_PLL2_Config>
 80074c8:	4603      	mov	r3, r0
 80074ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80074ce:	e015      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074d4:	3328      	adds	r3, #40	@ 0x28
 80074d6:	2101      	movs	r1, #1
 80074d8:	4618      	mov	r0, r3
 80074da:	f002 f987 	bl	80097ec <RCCEx_PLL3_Config>
 80074de:	4603      	mov	r3, r0
 80074e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80074e4:	e00a      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074ec:	e006      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80074ee:	bf00      	nop
 80074f0:	e004      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80074f2:	bf00      	nop
 80074f4:	e002      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80074f6:	bf00      	nop
 80074f8:	e000      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80074fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10d      	bne.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007504:	4b05      	ldr	r3, [pc, #20]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007508:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800750c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007512:	4a02      	ldr	r2, [pc, #8]	@ (800751c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007514:	430b      	orrs	r3, r1
 8007516:	6513      	str	r3, [r2, #80]	@ 0x50
 8007518:	e006      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800751a:	bf00      	nop
 800751c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007520:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007524:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800752c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007530:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007534:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007538:	2300      	movs	r3, #0
 800753a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800753e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007542:	460b      	mov	r3, r1
 8007544:	4313      	orrs	r3, r2
 8007546:	d055      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800754c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007550:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007554:	d033      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007556:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800755a:	d82c      	bhi.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800755c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007560:	d02f      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007566:	d826      	bhi.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007568:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800756c:	d02b      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800756e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007572:	d820      	bhi.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007574:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007578:	d012      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800757a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800757e:	d81a      	bhi.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007580:	2b00      	cmp	r3, #0
 8007582:	d022      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007584:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007588:	d115      	bne.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800758a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800758e:	3308      	adds	r3, #8
 8007590:	2101      	movs	r1, #1
 8007592:	4618      	mov	r0, r3
 8007594:	f002 f878 	bl	8009688 <RCCEx_PLL2_Config>
 8007598:	4603      	mov	r3, r0
 800759a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800759e:	e015      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a4:	3328      	adds	r3, #40	@ 0x28
 80075a6:	2101      	movs	r1, #1
 80075a8:	4618      	mov	r0, r3
 80075aa:	f002 f91f 	bl	80097ec <RCCEx_PLL3_Config>
 80075ae:	4603      	mov	r3, r0
 80075b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80075b4:	e00a      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075bc:	e006      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80075be:	bf00      	nop
 80075c0:	e004      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80075c2:	bf00      	nop
 80075c4:	e002      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80075c6:	bf00      	nop
 80075c8:	e000      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80075ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10b      	bne.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80075d4:	4ba3      	ldr	r3, [pc, #652]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075d8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80075dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80075e4:	4a9f      	ldr	r2, [pc, #636]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075e6:	430b      	orrs	r3, r1
 80075e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80075ea:	e003      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80075f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007600:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007604:	2300      	movs	r3, #0
 8007606:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800760a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800760e:	460b      	mov	r3, r1
 8007610:	4313      	orrs	r3, r2
 8007612:	d037      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800761a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800761e:	d00e      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007620:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007624:	d816      	bhi.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007626:	2b00      	cmp	r3, #0
 8007628:	d018      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800762a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800762e:	d111      	bne.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007630:	4b8c      	ldr	r3, [pc, #560]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007634:	4a8b      	ldr	r2, [pc, #556]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007636:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800763a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800763c:	e00f      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800763e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007642:	3308      	adds	r3, #8
 8007644:	2101      	movs	r1, #1
 8007646:	4618      	mov	r0, r3
 8007648:	f002 f81e 	bl	8009688 <RCCEx_PLL2_Config>
 800764c:	4603      	mov	r3, r0
 800764e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007652:	e004      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800765a:	e000      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800765c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800765e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10a      	bne.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007666:	4b7f      	ldr	r3, [pc, #508]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800766a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800766e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007674:	4a7b      	ldr	r2, [pc, #492]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007676:	430b      	orrs	r3, r1
 8007678:	6513      	str	r3, [r2, #80]	@ 0x50
 800767a:	e003      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800767c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007680:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007690:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007694:	2300      	movs	r3, #0
 8007696:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800769a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800769e:	460b      	mov	r3, r1
 80076a0:	4313      	orrs	r3, r2
 80076a2:	d039      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80076a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076aa:	2b03      	cmp	r3, #3
 80076ac:	d81c      	bhi.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80076ae:	a201      	add	r2, pc, #4	@ (adr r2, 80076b4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80076b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b4:	080076f1 	.word	0x080076f1
 80076b8:	080076c5 	.word	0x080076c5
 80076bc:	080076d3 	.word	0x080076d3
 80076c0:	080076f1 	.word	0x080076f1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076c4:	4b67      	ldr	r3, [pc, #412]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c8:	4a66      	ldr	r2, [pc, #408]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80076d0:	e00f      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d6:	3308      	adds	r3, #8
 80076d8:	2102      	movs	r1, #2
 80076da:	4618      	mov	r0, r3
 80076dc:	f001 ffd4 	bl	8009688 <RCCEx_PLL2_Config>
 80076e0:	4603      	mov	r3, r0
 80076e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80076e6:	e004      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076ee:	e000      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80076f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10a      	bne.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80076fa:	4b5a      	ldr	r3, [pc, #360]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076fe:	f023 0103 	bic.w	r1, r3, #3
 8007702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007706:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007708:	4a56      	ldr	r2, [pc, #344]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800770a:	430b      	orrs	r3, r1
 800770c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800770e:	e003      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007710:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007714:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800771c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007720:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007724:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007728:	2300      	movs	r3, #0
 800772a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800772e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007732:	460b      	mov	r3, r1
 8007734:	4313      	orrs	r3, r2
 8007736:	f000 809f 	beq.w	8007878 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800773a:	4b4b      	ldr	r3, [pc, #300]	@ (8007868 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a4a      	ldr	r2, [pc, #296]	@ (8007868 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007744:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007746:	f7f9 fa7d 	bl	8000c44 <HAL_GetTick>
 800774a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800774e:	e00b      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007750:	f7f9 fa78 	bl	8000c44 <HAL_GetTick>
 8007754:	4602      	mov	r2, r0
 8007756:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	2b64      	cmp	r3, #100	@ 0x64
 800775e:	d903      	bls.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007766:	e005      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007768:	4b3f      	ldr	r3, [pc, #252]	@ (8007868 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007770:	2b00      	cmp	r3, #0
 8007772:	d0ed      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007774:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007778:	2b00      	cmp	r3, #0
 800777a:	d179      	bne.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800777c:	4b39      	ldr	r3, [pc, #228]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800777e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007784:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007788:	4053      	eors	r3, r2
 800778a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800778e:	2b00      	cmp	r3, #0
 8007790:	d015      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007792:	4b34      	ldr	r3, [pc, #208]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007796:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800779a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800779e:	4b31      	ldr	r3, [pc, #196]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077a2:	4a30      	ldr	r2, [pc, #192]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077a8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80077aa:	4b2e      	ldr	r3, [pc, #184]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ae:	4a2d      	ldr	r2, [pc, #180]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077b4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80077b6:	4a2b      	ldr	r2, [pc, #172]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80077bc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80077be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ca:	d118      	bne.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077cc:	f7f9 fa3a 	bl	8000c44 <HAL_GetTick>
 80077d0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077d4:	e00d      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077d6:	f7f9 fa35 	bl	8000c44 <HAL_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80077e0:	1ad2      	subs	r2, r2, r3
 80077e2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d903      	bls.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80077f0:	e005      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077f2:	4b1c      	ldr	r3, [pc, #112]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d0eb      	beq.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80077fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007802:	2b00      	cmp	r3, #0
 8007804:	d129      	bne.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800780a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800780e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007812:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007816:	d10e      	bne.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007818:	4b12      	ldr	r3, [pc, #72]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007824:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007828:	091a      	lsrs	r2, r3, #4
 800782a:	4b10      	ldr	r3, [pc, #64]	@ (800786c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800782c:	4013      	ands	r3, r2
 800782e:	4a0d      	ldr	r2, [pc, #52]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007830:	430b      	orrs	r3, r1
 8007832:	6113      	str	r3, [r2, #16]
 8007834:	e005      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007836:	4b0b      	ldr	r3, [pc, #44]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	4a0a      	ldr	r2, [pc, #40]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800783c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007840:	6113      	str	r3, [r2, #16]
 8007842:	4b08      	ldr	r3, [pc, #32]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007844:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800784a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800784e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007852:	4a04      	ldr	r2, [pc, #16]	@ (8007864 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007854:	430b      	orrs	r3, r1
 8007856:	6713      	str	r3, [r2, #112]	@ 0x70
 8007858:	e00e      	b.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800785a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800785e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007862:	e009      	b.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007864:	58024400 	.word	0x58024400
 8007868:	58024800 	.word	0x58024800
 800786c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007870:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007874:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800787c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007880:	f002 0301 	and.w	r3, r2, #1
 8007884:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007888:	2300      	movs	r3, #0
 800788a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800788e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007892:	460b      	mov	r3, r1
 8007894:	4313      	orrs	r3, r2
 8007896:	f000 8089 	beq.w	80079ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800789a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800789e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078a0:	2b28      	cmp	r3, #40	@ 0x28
 80078a2:	d86b      	bhi.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80078a4:	a201      	add	r2, pc, #4	@ (adr r2, 80078ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80078a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078aa:	bf00      	nop
 80078ac:	08007985 	.word	0x08007985
 80078b0:	0800797d 	.word	0x0800797d
 80078b4:	0800797d 	.word	0x0800797d
 80078b8:	0800797d 	.word	0x0800797d
 80078bc:	0800797d 	.word	0x0800797d
 80078c0:	0800797d 	.word	0x0800797d
 80078c4:	0800797d 	.word	0x0800797d
 80078c8:	0800797d 	.word	0x0800797d
 80078cc:	08007951 	.word	0x08007951
 80078d0:	0800797d 	.word	0x0800797d
 80078d4:	0800797d 	.word	0x0800797d
 80078d8:	0800797d 	.word	0x0800797d
 80078dc:	0800797d 	.word	0x0800797d
 80078e0:	0800797d 	.word	0x0800797d
 80078e4:	0800797d 	.word	0x0800797d
 80078e8:	0800797d 	.word	0x0800797d
 80078ec:	08007967 	.word	0x08007967
 80078f0:	0800797d 	.word	0x0800797d
 80078f4:	0800797d 	.word	0x0800797d
 80078f8:	0800797d 	.word	0x0800797d
 80078fc:	0800797d 	.word	0x0800797d
 8007900:	0800797d 	.word	0x0800797d
 8007904:	0800797d 	.word	0x0800797d
 8007908:	0800797d 	.word	0x0800797d
 800790c:	08007985 	.word	0x08007985
 8007910:	0800797d 	.word	0x0800797d
 8007914:	0800797d 	.word	0x0800797d
 8007918:	0800797d 	.word	0x0800797d
 800791c:	0800797d 	.word	0x0800797d
 8007920:	0800797d 	.word	0x0800797d
 8007924:	0800797d 	.word	0x0800797d
 8007928:	0800797d 	.word	0x0800797d
 800792c:	08007985 	.word	0x08007985
 8007930:	0800797d 	.word	0x0800797d
 8007934:	0800797d 	.word	0x0800797d
 8007938:	0800797d 	.word	0x0800797d
 800793c:	0800797d 	.word	0x0800797d
 8007940:	0800797d 	.word	0x0800797d
 8007944:	0800797d 	.word	0x0800797d
 8007948:	0800797d 	.word	0x0800797d
 800794c:	08007985 	.word	0x08007985
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007954:	3308      	adds	r3, #8
 8007956:	2101      	movs	r1, #1
 8007958:	4618      	mov	r0, r3
 800795a:	f001 fe95 	bl	8009688 <RCCEx_PLL2_Config>
 800795e:	4603      	mov	r3, r0
 8007960:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007964:	e00f      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800796a:	3328      	adds	r3, #40	@ 0x28
 800796c:	2101      	movs	r1, #1
 800796e:	4618      	mov	r0, r3
 8007970:	f001 ff3c 	bl	80097ec <RCCEx_PLL3_Config>
 8007974:	4603      	mov	r3, r0
 8007976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800797a:	e004      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007982:	e000      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007984:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10a      	bne.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800798e:	4bbf      	ldr	r3, [pc, #764]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007992:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800799a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800799c:	4abb      	ldr	r2, [pc, #748]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800799e:	430b      	orrs	r3, r1
 80079a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80079a2:	e003      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80079ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	f002 0302 	and.w	r3, r2, #2
 80079b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079bc:	2300      	movs	r3, #0
 80079be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80079c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80079c6:	460b      	mov	r3, r1
 80079c8:	4313      	orrs	r3, r2
 80079ca:	d041      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80079cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079d2:	2b05      	cmp	r3, #5
 80079d4:	d824      	bhi.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80079d6:	a201      	add	r2, pc, #4	@ (adr r2, 80079dc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80079d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079dc:	08007a29 	.word	0x08007a29
 80079e0:	080079f5 	.word	0x080079f5
 80079e4:	08007a0b 	.word	0x08007a0b
 80079e8:	08007a29 	.word	0x08007a29
 80079ec:	08007a29 	.word	0x08007a29
 80079f0:	08007a29 	.word	0x08007a29
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f8:	3308      	adds	r3, #8
 80079fa:	2101      	movs	r1, #1
 80079fc:	4618      	mov	r0, r3
 80079fe:	f001 fe43 	bl	8009688 <RCCEx_PLL2_Config>
 8007a02:	4603      	mov	r3, r0
 8007a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007a08:	e00f      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a0e:	3328      	adds	r3, #40	@ 0x28
 8007a10:	2101      	movs	r1, #1
 8007a12:	4618      	mov	r0, r3
 8007a14:	f001 feea 	bl	80097ec <RCCEx_PLL3_Config>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007a1e:	e004      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a26:	e000      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007a28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10a      	bne.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007a32:	4b96      	ldr	r3, [pc, #600]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a36:	f023 0107 	bic.w	r1, r3, #7
 8007a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a40:	4a92      	ldr	r2, [pc, #584]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a42:	430b      	orrs	r3, r1
 8007a44:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a46:	e003      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a58:	f002 0304 	and.w	r3, r2, #4
 8007a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a60:	2300      	movs	r3, #0
 8007a62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a66:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	d044      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a78:	2b05      	cmp	r3, #5
 8007a7a:	d825      	bhi.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a84 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a82:	bf00      	nop
 8007a84:	08007ad1 	.word	0x08007ad1
 8007a88:	08007a9d 	.word	0x08007a9d
 8007a8c:	08007ab3 	.word	0x08007ab3
 8007a90:	08007ad1 	.word	0x08007ad1
 8007a94:	08007ad1 	.word	0x08007ad1
 8007a98:	08007ad1 	.word	0x08007ad1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa0:	3308      	adds	r3, #8
 8007aa2:	2101      	movs	r1, #1
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f001 fdef 	bl	8009688 <RCCEx_PLL2_Config>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007ab0:	e00f      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab6:	3328      	adds	r3, #40	@ 0x28
 8007ab8:	2101      	movs	r1, #1
 8007aba:	4618      	mov	r0, r3
 8007abc:	f001 fe96 	bl	80097ec <RCCEx_PLL3_Config>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007ac6:	e004      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ace:	e000      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10b      	bne.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ada:	4b6c      	ldr	r3, [pc, #432]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ade:	f023 0107 	bic.w	r1, r3, #7
 8007ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007aea:	4a68      	ldr	r2, [pc, #416]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007aec:	430b      	orrs	r3, r1
 8007aee:	6593      	str	r3, [r2, #88]	@ 0x58
 8007af0:	e003      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007af6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b02:	f002 0320 	and.w	r3, r2, #32
 8007b06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b14:	460b      	mov	r3, r1
 8007b16:	4313      	orrs	r3, r2
 8007b18:	d055      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b26:	d033      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007b28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b2c:	d82c      	bhi.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b32:	d02f      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007b34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b38:	d826      	bhi.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007b3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b3e:	d02b      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007b40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b44:	d820      	bhi.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b4a:	d012      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007b4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b50:	d81a      	bhi.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d022      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007b56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b5a:	d115      	bne.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b60:	3308      	adds	r3, #8
 8007b62:	2100      	movs	r1, #0
 8007b64:	4618      	mov	r0, r3
 8007b66:	f001 fd8f 	bl	8009688 <RCCEx_PLL2_Config>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007b70:	e015      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b76:	3328      	adds	r3, #40	@ 0x28
 8007b78:	2102      	movs	r1, #2
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f001 fe36 	bl	80097ec <RCCEx_PLL3_Config>
 8007b80:	4603      	mov	r3, r0
 8007b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007b86:	e00a      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b8e:	e006      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007b90:	bf00      	nop
 8007b92:	e004      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007b94:	bf00      	nop
 8007b96:	e002      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007b98:	bf00      	nop
 8007b9a:	e000      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10b      	bne.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ba6:	4b39      	ldr	r3, [pc, #228]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007baa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bb6:	4a35      	ldr	r2, [pc, #212]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007bb8:	430b      	orrs	r3, r1
 8007bba:	6553      	str	r3, [r2, #84]	@ 0x54
 8007bbc:	e003      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bce:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007bdc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007be0:	460b      	mov	r3, r1
 8007be2:	4313      	orrs	r3, r2
 8007be4:	d058      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007bf2:	d033      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007bf4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007bf8:	d82c      	bhi.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007bfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bfe:	d02f      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007c00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c04:	d826      	bhi.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007c06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c0a:	d02b      	beq.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007c0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c10:	d820      	bhi.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007c12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c16:	d012      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007c18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c1c:	d81a      	bhi.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d022      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c26:	d115      	bne.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c2c:	3308      	adds	r3, #8
 8007c2e:	2100      	movs	r1, #0
 8007c30:	4618      	mov	r0, r3
 8007c32:	f001 fd29 	bl	8009688 <RCCEx_PLL2_Config>
 8007c36:	4603      	mov	r3, r0
 8007c38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007c3c:	e015      	b.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c42:	3328      	adds	r3, #40	@ 0x28
 8007c44:	2102      	movs	r1, #2
 8007c46:	4618      	mov	r0, r3
 8007c48:	f001 fdd0 	bl	80097ec <RCCEx_PLL3_Config>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007c52:	e00a      	b.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c5a:	e006      	b.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c5c:	bf00      	nop
 8007c5e:	e004      	b.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c60:	bf00      	nop
 8007c62:	e002      	b.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c64:	bf00      	nop
 8007c66:	e000      	b.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007c68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10e      	bne.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c72:	4b06      	ldr	r3, [pc, #24]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c76:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c82:	4a02      	ldr	r2, [pc, #8]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c84:	430b      	orrs	r3, r1
 8007c86:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c88:	e006      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007c8a:	bf00      	nop
 8007c8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007ca4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ca8:	2300      	movs	r3, #0
 8007caa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007cae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	d055      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007cc0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007cc4:	d033      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007cc6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007cca:	d82c      	bhi.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ccc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cd0:	d02f      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007cd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cd6:	d826      	bhi.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007cd8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007cdc:	d02b      	beq.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007cde:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007ce2:	d820      	bhi.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ce4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ce8:	d012      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007cea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cee:	d81a      	bhi.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d022      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007cf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cf8:	d115      	bne.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cfe:	3308      	adds	r3, #8
 8007d00:	2100      	movs	r1, #0
 8007d02:	4618      	mov	r0, r3
 8007d04:	f001 fcc0 	bl	8009688 <RCCEx_PLL2_Config>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007d0e:	e015      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d14:	3328      	adds	r3, #40	@ 0x28
 8007d16:	2102      	movs	r1, #2
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f001 fd67 	bl	80097ec <RCCEx_PLL3_Config>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007d24:	e00a      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d2c:	e006      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007d2e:	bf00      	nop
 8007d30:	e004      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007d32:	bf00      	nop
 8007d34:	e002      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007d36:	bf00      	nop
 8007d38:	e000      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10b      	bne.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007d44:	4ba1      	ldr	r3, [pc, #644]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d48:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d54:	4a9d      	ldr	r2, [pc, #628]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d56:	430b      	orrs	r3, r1
 8007d58:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d5a:	e003      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6c:	f002 0308 	and.w	r3, r2, #8
 8007d70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d74:	2300      	movs	r3, #0
 8007d76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d7a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4313      	orrs	r3, r2
 8007d82:	d01e      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d90:	d10c      	bne.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d96:	3328      	adds	r3, #40	@ 0x28
 8007d98:	2102      	movs	r1, #2
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f001 fd26 	bl	80097ec <RCCEx_PLL3_Config>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d002      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007dac:	4b87      	ldr	r3, [pc, #540]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007db0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dbc:	4a83      	ldr	r2, [pc, #524]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dbe:	430b      	orrs	r3, r1
 8007dc0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dca:	f002 0310 	and.w	r3, r2, #16
 8007dce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007dd8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4313      	orrs	r3, r2
 8007de0:	d01e      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007dea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dee:	d10c      	bne.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df4:	3328      	adds	r3, #40	@ 0x28
 8007df6:	2102      	movs	r1, #2
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f001 fcf7 	bl	80097ec <RCCEx_PLL3_Config>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d002      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e0a:	4b70      	ldr	r3, [pc, #448]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e0e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e1a:	4a6c      	ldr	r2, [pc, #432]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e1c:	430b      	orrs	r3, r1
 8007e1e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e28:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007e2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e30:	2300      	movs	r3, #0
 8007e32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e36:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	d03e      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e4c:	d022      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007e4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e52:	d81b      	bhi.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d003      	beq.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e5c:	d00b      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007e5e:	e015      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e64:	3308      	adds	r3, #8
 8007e66:	2100      	movs	r1, #0
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f001 fc0d 	bl	8009688 <RCCEx_PLL2_Config>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007e74:	e00f      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e7a:	3328      	adds	r3, #40	@ 0x28
 8007e7c:	2102      	movs	r1, #2
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f001 fcb4 	bl	80097ec <RCCEx_PLL3_Config>
 8007e84:	4603      	mov	r3, r0
 8007e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007e8a:	e004      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e92:	e000      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d10b      	bne.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e9e:	4b4b      	ldr	r3, [pc, #300]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ea2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eaa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007eae:	4a47      	ldr	r2, [pc, #284]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007eb0:	430b      	orrs	r3, r1
 8007eb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007eb4:	e003      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007eca:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ecc:	2300      	movs	r3, #0
 8007ece:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ed0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	d03b      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ee2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ee6:	d01f      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007ee8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007eec:	d818      	bhi.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007eee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ef2:	d003      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007ef4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ef8:	d007      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007efa:	e011      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007efc:	4b33      	ldr	r3, [pc, #204]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f00:	4a32      	ldr	r2, [pc, #200]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007f08:	e00f      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f0e:	3328      	adds	r3, #40	@ 0x28
 8007f10:	2101      	movs	r1, #1
 8007f12:	4618      	mov	r0, r3
 8007f14:	f001 fc6a 	bl	80097ec <RCCEx_PLL3_Config>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007f1e:	e004      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f26:	e000      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10b      	bne.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f32:	4b26      	ldr	r3, [pc, #152]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f36:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f42:	4a22      	ldr	r2, [pc, #136]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f44:	430b      	orrs	r3, r1
 8007f46:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f48:	e003      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007f5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f60:	2300      	movs	r3, #0
 8007f62:	677b      	str	r3, [r7, #116]	@ 0x74
 8007f64:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007f68:	460b      	mov	r3, r1
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	d034      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d003      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f7c:	d007      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007f7e:	e011      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f80:	4b12      	ldr	r3, [pc, #72]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f84:	4a11      	ldr	r2, [pc, #68]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007f8c:	e00e      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f92:	3308      	adds	r3, #8
 8007f94:	2102      	movs	r1, #2
 8007f96:	4618      	mov	r0, r3
 8007f98:	f001 fb76 	bl	8009688 <RCCEx_PLL2_Config>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007fa2:	e003      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007faa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10d      	bne.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007fb4:	4b05      	ldr	r3, [pc, #20]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fb8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fc2:	4a02      	ldr	r2, [pc, #8]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fc4:	430b      	orrs	r3, r1
 8007fc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007fc8:	e006      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007fca:	bf00      	nop
 8007fcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007fe4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007fea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007fee:	460b      	mov	r3, r1
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	d00c      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ff8:	3328      	adds	r3, #40	@ 0x28
 8007ffa:	2102      	movs	r1, #2
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f001 fbf5 	bl	80097ec <RCCEx_PLL3_Config>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d002      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800800e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008016:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800801a:	663b      	str	r3, [r7, #96]	@ 0x60
 800801c:	2300      	movs	r3, #0
 800801e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008020:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008024:	460b      	mov	r3, r1
 8008026:	4313      	orrs	r3, r2
 8008028:	d038      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800802a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800802e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008032:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008036:	d018      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008038:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800803c:	d811      	bhi.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800803e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008042:	d014      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008048:	d80b      	bhi.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800804a:	2b00      	cmp	r3, #0
 800804c:	d011      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800804e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008052:	d106      	bne.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008054:	4bc3      	ldr	r3, [pc, #780]	@ (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008058:	4ac2      	ldr	r2, [pc, #776]	@ (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800805a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800805e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008060:	e008      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008068:	e004      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800806a:	bf00      	nop
 800806c:	e002      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800806e:	bf00      	nop
 8008070:	e000      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008072:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008074:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10b      	bne.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800807c:	4bb9      	ldr	r3, [pc, #740]	@ (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800807e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008080:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008088:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800808c:	4ab5      	ldr	r2, [pc, #724]	@ (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800808e:	430b      	orrs	r3, r1
 8008090:	6553      	str	r3, [r2, #84]	@ 0x54
 8008092:	e003      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008094:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008098:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800809c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80080a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80080aa:	2300      	movs	r3, #0
 80080ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80080b2:	460b      	mov	r3, r1
 80080b4:	4313      	orrs	r3, r2
 80080b6:	d009      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80080b8:	4baa      	ldr	r3, [pc, #680]	@ (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80080c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080c6:	4aa7      	ldr	r2, [pc, #668]	@ (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080c8:	430b      	orrs	r3, r1
 80080ca:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80080cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80080d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80080da:	2300      	movs	r3, #0
 80080dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80080de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80080e2:	460b      	mov	r3, r1
 80080e4:	4313      	orrs	r3, r2
 80080e6:	d00a      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80080e8:	4b9e      	ldr	r3, [pc, #632]	@ (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80080f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80080f8:	4a9a      	ldr	r2, [pc, #616]	@ (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080fa:	430b      	orrs	r3, r1
 80080fc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80080fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008106:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800810a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800810c:	2300      	movs	r3, #0
 800810e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008110:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008114:	460b      	mov	r3, r1
 8008116:	4313      	orrs	r3, r2
 8008118:	d009      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800811a:	4b92      	ldr	r3, [pc, #584]	@ (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800811c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800811e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008126:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008128:	4a8e      	ldr	r2, [pc, #568]	@ (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800812a:	430b      	orrs	r3, r1
 800812c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800812e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008136:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800813a:	643b      	str	r3, [r7, #64]	@ 0x40
 800813c:	2300      	movs	r3, #0
 800813e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008140:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008144:	460b      	mov	r3, r1
 8008146:	4313      	orrs	r3, r2
 8008148:	d00e      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800814a:	4b86      	ldr	r3, [pc, #536]	@ (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	4a85      	ldr	r2, [pc, #532]	@ (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008150:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008154:	6113      	str	r3, [r2, #16]
 8008156:	4b83      	ldr	r3, [pc, #524]	@ (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008158:	6919      	ldr	r1, [r3, #16]
 800815a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800815e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008162:	4a80      	ldr	r2, [pc, #512]	@ (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008164:	430b      	orrs	r3, r1
 8008166:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800816c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008170:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008174:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008176:	2300      	movs	r3, #0
 8008178:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800817a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800817e:	460b      	mov	r3, r1
 8008180:	4313      	orrs	r3, r2
 8008182:	d009      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008184:	4b77      	ldr	r3, [pc, #476]	@ (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008186:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008188:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800818c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008192:	4a74      	ldr	r2, [pc, #464]	@ (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008194:	430b      	orrs	r3, r1
 8008196:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80081a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80081a6:	2300      	movs	r3, #0
 80081a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80081aa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80081ae:	460b      	mov	r3, r1
 80081b0:	4313      	orrs	r3, r2
 80081b2:	d00a      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80081b4:	4b6b      	ldr	r3, [pc, #428]	@ (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081b8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80081bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081c4:	4a67      	ldr	r2, [pc, #412]	@ (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081c6:	430b      	orrs	r3, r1
 80081c8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80081ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d2:	2100      	movs	r1, #0
 80081d4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80081d6:	f003 0301 	and.w	r3, r3, #1
 80081da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081dc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80081e0:	460b      	mov	r3, r1
 80081e2:	4313      	orrs	r3, r2
 80081e4:	d011      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ea:	3308      	adds	r3, #8
 80081ec:	2100      	movs	r1, #0
 80081ee:	4618      	mov	r0, r3
 80081f0:	f001 fa4a 	bl	8009688 <RCCEx_PLL2_Config>
 80081f4:	4603      	mov	r3, r0
 80081f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80081fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d003      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008206:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800820a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800820e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008212:	2100      	movs	r1, #0
 8008214:	6239      	str	r1, [r7, #32]
 8008216:	f003 0302 	and.w	r3, r3, #2
 800821a:	627b      	str	r3, [r7, #36]	@ 0x24
 800821c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008220:	460b      	mov	r3, r1
 8008222:	4313      	orrs	r3, r2
 8008224:	d011      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800822a:	3308      	adds	r3, #8
 800822c:	2101      	movs	r1, #1
 800822e:	4618      	mov	r0, r3
 8008230:	f001 fa2a 	bl	8009688 <RCCEx_PLL2_Config>
 8008234:	4603      	mov	r3, r0
 8008236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800823a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008246:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800824a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800824e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008252:	2100      	movs	r1, #0
 8008254:	61b9      	str	r1, [r7, #24]
 8008256:	f003 0304 	and.w	r3, r3, #4
 800825a:	61fb      	str	r3, [r7, #28]
 800825c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008260:	460b      	mov	r3, r1
 8008262:	4313      	orrs	r3, r2
 8008264:	d011      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800826a:	3308      	adds	r3, #8
 800826c:	2102      	movs	r1, #2
 800826e:	4618      	mov	r0, r3
 8008270:	f001 fa0a 	bl	8009688 <RCCEx_PLL2_Config>
 8008274:	4603      	mov	r3, r0
 8008276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800827a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800827e:	2b00      	cmp	r3, #0
 8008280:	d003      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008286:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800828a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800828e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008292:	2100      	movs	r1, #0
 8008294:	6139      	str	r1, [r7, #16]
 8008296:	f003 0308 	and.w	r3, r3, #8
 800829a:	617b      	str	r3, [r7, #20]
 800829c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80082a0:	460b      	mov	r3, r1
 80082a2:	4313      	orrs	r3, r2
 80082a4:	d011      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80082a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082aa:	3328      	adds	r3, #40	@ 0x28
 80082ac:	2100      	movs	r1, #0
 80082ae:	4618      	mov	r0, r3
 80082b0:	f001 fa9c 	bl	80097ec <RCCEx_PLL3_Config>
 80082b4:	4603      	mov	r3, r0
 80082b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80082ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80082ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d2:	2100      	movs	r1, #0
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	f003 0310 	and.w	r3, r3, #16
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80082e0:	460b      	mov	r3, r1
 80082e2:	4313      	orrs	r3, r2
 80082e4:	d011      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ea:	3328      	adds	r3, #40	@ 0x28
 80082ec:	2101      	movs	r1, #1
 80082ee:	4618      	mov	r0, r3
 80082f0:	f001 fa7c 	bl	80097ec <RCCEx_PLL3_Config>
 80082f4:	4603      	mov	r3, r0
 80082f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80082fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d003      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008306:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800830a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800830e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008312:	2100      	movs	r1, #0
 8008314:	6039      	str	r1, [r7, #0]
 8008316:	f003 0320 	and.w	r3, r3, #32
 800831a:	607b      	str	r3, [r7, #4]
 800831c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008320:	460b      	mov	r3, r1
 8008322:	4313      	orrs	r3, r2
 8008324:	d011      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800832a:	3328      	adds	r3, #40	@ 0x28
 800832c:	2102      	movs	r1, #2
 800832e:	4618      	mov	r0, r3
 8008330:	f001 fa5c 	bl	80097ec <RCCEx_PLL3_Config>
 8008334:	4603      	mov	r3, r0
 8008336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800833a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008346:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800834a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	e000      	b.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
}
 8008358:	4618      	mov	r0, r3
 800835a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800835e:	46bd      	mov	sp, r7
 8008360:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008364:	58024400 	.word	0x58024400

08008368 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b090      	sub	sp, #64	@ 0x40
 800836c:	af00      	add	r7, sp, #0
 800836e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008372:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008376:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800837a:	430b      	orrs	r3, r1
 800837c:	f040 8094 	bne.w	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008380:	4b9e      	ldr	r3, [pc, #632]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008384:	f003 0307 	and.w	r3, r3, #7
 8008388:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800838a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838c:	2b04      	cmp	r3, #4
 800838e:	f200 8087 	bhi.w	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008392:	a201      	add	r2, pc, #4	@ (adr r2, 8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008398:	080083ad 	.word	0x080083ad
 800839c:	080083d5 	.word	0x080083d5
 80083a0:	080083fd 	.word	0x080083fd
 80083a4:	08008499 	.word	0x08008499
 80083a8:	08008425 	.word	0x08008425
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083ac:	4b93      	ldr	r3, [pc, #588]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083b8:	d108      	bne.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083be:	4618      	mov	r0, r3
 80083c0:	f001 f810 	bl	80093e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083c8:	f000 bd45 	b.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083cc:	2300      	movs	r3, #0
 80083ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083d0:	f000 bd41 	b.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083d4:	4b89      	ldr	r3, [pc, #548]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083e0:	d108      	bne.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083e2:	f107 0318 	add.w	r3, r7, #24
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 fd54 	bl	8008e94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083f0:	f000 bd31 	b.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083f8:	f000 bd2d 	b.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083fc:	4b7f      	ldr	r3, [pc, #508]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008404:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008408:	d108      	bne.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800840a:	f107 030c 	add.w	r3, r7, #12
 800840e:	4618      	mov	r0, r3
 8008410:	f000 fe94 	bl	800913c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008418:	f000 bd1d 	b.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800841c:	2300      	movs	r3, #0
 800841e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008420:	f000 bd19 	b.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008424:	4b75      	ldr	r3, [pc, #468]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008428:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800842c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800842e:	4b73      	ldr	r3, [pc, #460]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0304 	and.w	r3, r3, #4
 8008436:	2b04      	cmp	r3, #4
 8008438:	d10c      	bne.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800843a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800843c:	2b00      	cmp	r3, #0
 800843e:	d109      	bne.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008440:	4b6e      	ldr	r3, [pc, #440]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	08db      	lsrs	r3, r3, #3
 8008446:	f003 0303 	and.w	r3, r3, #3
 800844a:	4a6d      	ldr	r2, [pc, #436]	@ (8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800844c:	fa22 f303 	lsr.w	r3, r2, r3
 8008450:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008452:	e01f      	b.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008454:	4b69      	ldr	r3, [pc, #420]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800845c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008460:	d106      	bne.n	8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008464:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008468:	d102      	bne.n	8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800846a:	4b66      	ldr	r3, [pc, #408]	@ (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800846c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800846e:	e011      	b.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008470:	4b62      	ldr	r3, [pc, #392]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008478:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800847c:	d106      	bne.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800847e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008480:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008484:	d102      	bne.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008486:	4b60      	ldr	r3, [pc, #384]	@ (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008488:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800848a:	e003      	b.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800848c:	2300      	movs	r3, #0
 800848e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008490:	f000 bce1 	b.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008494:	f000 bcdf 	b.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008498:	4b5c      	ldr	r3, [pc, #368]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800849a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800849c:	f000 bcdb 	b.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80084a0:	2300      	movs	r3, #0
 80084a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084a4:	f000 bcd7 	b.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80084a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084ac:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80084b0:	430b      	orrs	r3, r1
 80084b2:	f040 80ad 	bne.w	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80084b6:	4b51      	ldr	r3, [pc, #324]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084ba:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80084be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80084c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084c6:	d056      	beq.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80084c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084ce:	f200 8090 	bhi.w	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80084d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d4:	2bc0      	cmp	r3, #192	@ 0xc0
 80084d6:	f000 8088 	beq.w	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80084da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084dc:	2bc0      	cmp	r3, #192	@ 0xc0
 80084de:	f200 8088 	bhi.w	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80084e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e4:	2b80      	cmp	r3, #128	@ 0x80
 80084e6:	d032      	beq.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80084e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ea:	2b80      	cmp	r3, #128	@ 0x80
 80084ec:	f200 8081 	bhi.w	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80084f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d003      	beq.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80084f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f8:	2b40      	cmp	r3, #64	@ 0x40
 80084fa:	d014      	beq.n	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80084fc:	e079      	b.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084fe:	4b3f      	ldr	r3, [pc, #252]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008506:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800850a:	d108      	bne.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800850c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008510:	4618      	mov	r0, r3
 8008512:	f000 ff67 	bl	80093e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800851a:	f000 bc9c 	b.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800851e:	2300      	movs	r3, #0
 8008520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008522:	f000 bc98 	b.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008526:	4b35      	ldr	r3, [pc, #212]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800852e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008532:	d108      	bne.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008534:	f107 0318 	add.w	r3, r7, #24
 8008538:	4618      	mov	r0, r3
 800853a:	f000 fcab 	bl	8008e94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008542:	f000 bc88 	b.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008546:	2300      	movs	r3, #0
 8008548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800854a:	f000 bc84 	b.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800854e:	4b2b      	ldr	r3, [pc, #172]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008556:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800855a:	d108      	bne.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800855c:	f107 030c 	add.w	r3, r7, #12
 8008560:	4618      	mov	r0, r3
 8008562:	f000 fdeb 	bl	800913c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800856a:	f000 bc74 	b.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800856e:	2300      	movs	r3, #0
 8008570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008572:	f000 bc70 	b.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008576:	4b21      	ldr	r3, [pc, #132]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800857a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800857e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008580:	4b1e      	ldr	r3, [pc, #120]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0304 	and.w	r3, r3, #4
 8008588:	2b04      	cmp	r3, #4
 800858a:	d10c      	bne.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800858c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800858e:	2b00      	cmp	r3, #0
 8008590:	d109      	bne.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008592:	4b1a      	ldr	r3, [pc, #104]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	08db      	lsrs	r3, r3, #3
 8008598:	f003 0303 	and.w	r3, r3, #3
 800859c:	4a18      	ldr	r2, [pc, #96]	@ (8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800859e:	fa22 f303 	lsr.w	r3, r2, r3
 80085a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085a4:	e01f      	b.n	80085e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085a6:	4b15      	ldr	r3, [pc, #84]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085b2:	d106      	bne.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80085b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085ba:	d102      	bne.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085bc:	4b11      	ldr	r3, [pc, #68]	@ (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80085be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085c0:	e011      	b.n	80085e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085c2:	4b0e      	ldr	r3, [pc, #56]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085ce:	d106      	bne.n	80085de <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80085d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085d6:	d102      	bne.n	80085de <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085d8:	4b0b      	ldr	r3, [pc, #44]	@ (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80085da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085dc:	e003      	b.n	80085e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085de:	2300      	movs	r3, #0
 80085e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80085e2:	f000 bc38 	b.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085e6:	f000 bc36 	b.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085ea:	4b08      	ldr	r3, [pc, #32]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80085ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ee:	f000 bc32 	b.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80085f2:	2300      	movs	r3, #0
 80085f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f6:	f000 bc2e 	b.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085fa:	bf00      	nop
 80085fc:	58024400 	.word	0x58024400
 8008600:	03d09000 	.word	0x03d09000
 8008604:	003d0900 	.word	0x003d0900
 8008608:	017d7840 	.word	0x017d7840
 800860c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008614:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008618:	430b      	orrs	r3, r1
 800861a:	f040 809c 	bne.w	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800861e:	4b9e      	ldr	r3, [pc, #632]	@ (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008622:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008626:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800862e:	d054      	beq.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008632:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008636:	f200 808b 	bhi.w	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800863a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008640:	f000 8083 	beq.w	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008646:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800864a:	f200 8081 	bhi.w	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800864e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008650:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008654:	d02f      	beq.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008658:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800865c:	d878      	bhi.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800865e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008660:	2b00      	cmp	r3, #0
 8008662:	d004      	beq.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008666:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800866a:	d012      	beq.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800866c:	e070      	b.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800866e:	4b8a      	ldr	r3, [pc, #552]	@ (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008676:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800867a:	d107      	bne.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800867c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008680:	4618      	mov	r0, r3
 8008682:	f000 feaf 	bl	80093e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800868a:	e3e4      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800868c:	2300      	movs	r3, #0
 800868e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008690:	e3e1      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008692:	4b81      	ldr	r3, [pc, #516]	@ (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800869a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800869e:	d107      	bne.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086a0:	f107 0318 	add.w	r3, r7, #24
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 fbf5 	bl	8008e94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ae:	e3d2      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086b0:	2300      	movs	r3, #0
 80086b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086b4:	e3cf      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086b6:	4b78      	ldr	r3, [pc, #480]	@ (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086c2:	d107      	bne.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086c4:	f107 030c 	add.w	r3, r7, #12
 80086c8:	4618      	mov	r0, r3
 80086ca:	f000 fd37 	bl	800913c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086d2:	e3c0      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086d4:	2300      	movs	r3, #0
 80086d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086d8:	e3bd      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086da:	4b6f      	ldr	r3, [pc, #444]	@ (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80086e2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086e4:	4b6c      	ldr	r3, [pc, #432]	@ (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 0304 	and.w	r3, r3, #4
 80086ec:	2b04      	cmp	r3, #4
 80086ee:	d10c      	bne.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80086f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d109      	bne.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086f6:	4b68      	ldr	r3, [pc, #416]	@ (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	08db      	lsrs	r3, r3, #3
 80086fc:	f003 0303 	and.w	r3, r3, #3
 8008700:	4a66      	ldr	r2, [pc, #408]	@ (800889c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008702:	fa22 f303 	lsr.w	r3, r2, r3
 8008706:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008708:	e01e      	b.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800870a:	4b63      	ldr	r3, [pc, #396]	@ (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008712:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008716:	d106      	bne.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800871a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800871e:	d102      	bne.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008720:	4b5f      	ldr	r3, [pc, #380]	@ (80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008722:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008724:	e010      	b.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008726:	4b5c      	ldr	r3, [pc, #368]	@ (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800872e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008732:	d106      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008736:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800873a:	d102      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800873c:	4b59      	ldr	r3, [pc, #356]	@ (80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800873e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008740:	e002      	b.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008742:	2300      	movs	r3, #0
 8008744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008746:	e386      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008748:	e385      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800874a:	4b57      	ldr	r3, [pc, #348]	@ (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800874c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800874e:	e382      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008750:	2300      	movs	r3, #0
 8008752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008754:	e37f      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008756:	e9d7 2300 	ldrd	r2, r3, [r7]
 800875a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800875e:	430b      	orrs	r3, r1
 8008760:	f040 80a7 	bne.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008764:	4b4c      	ldr	r3, [pc, #304]	@ (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008768:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800876c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800876e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008770:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008774:	d055      	beq.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008778:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800877c:	f200 8096 	bhi.w	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008782:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008786:	f000 8084 	beq.w	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800878a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008790:	f200 808c 	bhi.w	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008796:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800879a:	d030      	beq.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800879c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087a2:	f200 8083 	bhi.w	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80087a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d004      	beq.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80087ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80087b2:	d012      	beq.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80087b4:	e07a      	b.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087b6:	4b38      	ldr	r3, [pc, #224]	@ (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087c2:	d107      	bne.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087c8:	4618      	mov	r0, r3
 80087ca:	f000 fe0b 	bl	80093e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087d2:	e340      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087d4:	2300      	movs	r3, #0
 80087d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087d8:	e33d      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087da:	4b2f      	ldr	r3, [pc, #188]	@ (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087e6:	d107      	bne.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087e8:	f107 0318 	add.w	r3, r7, #24
 80087ec:	4618      	mov	r0, r3
 80087ee:	f000 fb51 	bl	8008e94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087f6:	e32e      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087f8:	2300      	movs	r3, #0
 80087fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087fc:	e32b      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087fe:	4b26      	ldr	r3, [pc, #152]	@ (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008806:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800880a:	d107      	bne.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800880c:	f107 030c 	add.w	r3, r7, #12
 8008810:	4618      	mov	r0, r3
 8008812:	f000 fc93 	bl	800913c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800881a:	e31c      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800881c:	2300      	movs	r3, #0
 800881e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008820:	e319      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008822:	4b1d      	ldr	r3, [pc, #116]	@ (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008826:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800882a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800882c:	4b1a      	ldr	r3, [pc, #104]	@ (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0304 	and.w	r3, r3, #4
 8008834:	2b04      	cmp	r3, #4
 8008836:	d10c      	bne.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800883a:	2b00      	cmp	r3, #0
 800883c:	d109      	bne.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800883e:	4b16      	ldr	r3, [pc, #88]	@ (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	08db      	lsrs	r3, r3, #3
 8008844:	f003 0303 	and.w	r3, r3, #3
 8008848:	4a14      	ldr	r2, [pc, #80]	@ (800889c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800884a:	fa22 f303 	lsr.w	r3, r2, r3
 800884e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008850:	e01e      	b.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008852:	4b11      	ldr	r3, [pc, #68]	@ (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800885a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800885e:	d106      	bne.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008862:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008866:	d102      	bne.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008868:	4b0d      	ldr	r3, [pc, #52]	@ (80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800886a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800886c:	e010      	b.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800886e:	4b0a      	ldr	r3, [pc, #40]	@ (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008876:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800887a:	d106      	bne.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800887c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800887e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008882:	d102      	bne.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008884:	4b07      	ldr	r3, [pc, #28]	@ (80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008886:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008888:	e002      	b.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800888a:	2300      	movs	r3, #0
 800888c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800888e:	e2e2      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008890:	e2e1      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008892:	4b05      	ldr	r3, [pc, #20]	@ (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008896:	e2de      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008898:	58024400 	.word	0x58024400
 800889c:	03d09000 	.word	0x03d09000
 80088a0:	003d0900 	.word	0x003d0900
 80088a4:	017d7840 	.word	0x017d7840
 80088a8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80088ac:	2300      	movs	r3, #0
 80088ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088b0:	e2d1      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80088b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088b6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80088ba:	430b      	orrs	r3, r1
 80088bc:	f040 809c 	bne.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80088c0:	4b93      	ldr	r3, [pc, #588]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088c4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80088c8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80088ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088d0:	d054      	beq.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80088d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088d8:	f200 808b 	bhi.w	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80088dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80088e2:	f000 8083 	beq.w	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80088e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80088ec:	f200 8081 	bhi.w	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80088f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088f6:	d02f      	beq.n	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80088f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088fe:	d878      	bhi.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008902:	2b00      	cmp	r3, #0
 8008904:	d004      	beq.n	8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800890c:	d012      	beq.n	8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800890e:	e070      	b.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008910:	4b7f      	ldr	r3, [pc, #508]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008918:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800891c:	d107      	bne.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800891e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008922:	4618      	mov	r0, r3
 8008924:	f000 fd5e 	bl	80093e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800892c:	e293      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800892e:	2300      	movs	r3, #0
 8008930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008932:	e290      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008934:	4b76      	ldr	r3, [pc, #472]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800893c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008940:	d107      	bne.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008942:	f107 0318 	add.w	r3, r7, #24
 8008946:	4618      	mov	r0, r3
 8008948:	f000 faa4 	bl	8008e94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008950:	e281      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008952:	2300      	movs	r3, #0
 8008954:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008956:	e27e      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008958:	4b6d      	ldr	r3, [pc, #436]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008960:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008964:	d107      	bne.n	8008976 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008966:	f107 030c 	add.w	r3, r7, #12
 800896a:	4618      	mov	r0, r3
 800896c:	f000 fbe6 	bl	800913c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008974:	e26f      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008976:	2300      	movs	r3, #0
 8008978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800897a:	e26c      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800897c:	4b64      	ldr	r3, [pc, #400]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800897e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008980:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008984:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008986:	4b62      	ldr	r3, [pc, #392]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 0304 	and.w	r3, r3, #4
 800898e:	2b04      	cmp	r3, #4
 8008990:	d10c      	bne.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008994:	2b00      	cmp	r3, #0
 8008996:	d109      	bne.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008998:	4b5d      	ldr	r3, [pc, #372]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	08db      	lsrs	r3, r3, #3
 800899e:	f003 0303 	and.w	r3, r3, #3
 80089a2:	4a5c      	ldr	r2, [pc, #368]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80089a4:	fa22 f303 	lsr.w	r3, r2, r3
 80089a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089aa:	e01e      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089ac:	4b58      	ldr	r3, [pc, #352]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089b8:	d106      	bne.n	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80089ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089c0:	d102      	bne.n	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80089c2:	4b55      	ldr	r3, [pc, #340]	@ (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80089c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089c6:	e010      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089c8:	4b51      	ldr	r3, [pc, #324]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089d4:	d106      	bne.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80089d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089dc:	d102      	bne.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089de:	4b4f      	ldr	r3, [pc, #316]	@ (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80089e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089e2:	e002      	b.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089e4:	2300      	movs	r3, #0
 80089e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80089e8:	e235      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089ea:	e234      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80089ec:	4b4c      	ldr	r3, [pc, #304]	@ (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80089ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089f0:	e231      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80089f2:	2300      	movs	r3, #0
 80089f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089f6:	e22e      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80089f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089fc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008a00:	430b      	orrs	r3, r1
 8008a02:	f040 808f 	bne.w	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008a06:	4b42      	ldr	r3, [pc, #264]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a0a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a16:	d06b      	beq.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a1e:	d874      	bhi.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a26:	d056      	beq.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a2e:	d86c      	bhi.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008a36:	d03b      	beq.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008a3e:	d864      	bhi.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a46:	d021      	beq.n	8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a4e:	d85c      	bhi.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d004      	beq.n	8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a5c:	d004      	beq.n	8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008a5e:	e054      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008a60:	f7fe fa62 	bl	8006f28 <HAL_RCC_GetPCLK1Freq>
 8008a64:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a66:	e1f6      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a68:	4b29      	ldr	r3, [pc, #164]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a74:	d107      	bne.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a76:	f107 0318 	add.w	r3, r7, #24
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 fa0a 	bl	8008e94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a84:	e1e7      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a86:	2300      	movs	r3, #0
 8008a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a8a:	e1e4      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a8c:	4b20      	ldr	r3, [pc, #128]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a98:	d107      	bne.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a9a:	f107 030c 	add.w	r3, r7, #12
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 fb4c 	bl	800913c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aa8:	e1d5      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aae:	e1d2      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ab0:	4b17      	ldr	r3, [pc, #92]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0304 	and.w	r3, r3, #4
 8008ab8:	2b04      	cmp	r3, #4
 8008aba:	d109      	bne.n	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008abc:	4b14      	ldr	r3, [pc, #80]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	08db      	lsrs	r3, r3, #3
 8008ac2:	f003 0303 	and.w	r3, r3, #3
 8008ac6:	4a13      	ldr	r2, [pc, #76]	@ (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8008acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ace:	e1c2      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ad4:	e1bf      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ae2:	d102      	bne.n	8008aea <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ae8:	e1b5      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008aea:	2300      	movs	r3, #0
 8008aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aee:	e1b2      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008af0:	4b07      	ldr	r3, [pc, #28]	@ (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008af8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008afc:	d102      	bne.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008afe:	4b07      	ldr	r3, [pc, #28]	@ (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b02:	e1a8      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b04:	2300      	movs	r3, #0
 8008b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b08:	e1a5      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b0e:	e1a2      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b10:	58024400 	.word	0x58024400
 8008b14:	03d09000 	.word	0x03d09000
 8008b18:	003d0900 	.word	0x003d0900
 8008b1c:	017d7840 	.word	0x017d7840
 8008b20:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008b24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b28:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008b2c:	430b      	orrs	r3, r1
 8008b2e:	d173      	bne.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008b30:	4b9c      	ldr	r3, [pc, #624]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008b38:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b40:	d02f      	beq.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b48:	d863      	bhi.n	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d004      	beq.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b56:	d012      	beq.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008b58:	e05b      	b.n	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b5a:	4b92      	ldr	r3, [pc, #584]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b66:	d107      	bne.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b68:	f107 0318 	add.w	r3, r7, #24
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f000 f991 	bl	8008e94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b76:	e16e      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b7c:	e16b      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b7e:	4b89      	ldr	r3, [pc, #548]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b8a:	d107      	bne.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b8c:	f107 030c 	add.w	r3, r7, #12
 8008b90:	4618      	mov	r0, r3
 8008b92:	f000 fad3 	bl	800913c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b9a:	e15c      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ba0:	e159      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ba2:	4b80      	ldr	r3, [pc, #512]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ba6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008baa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bac:	4b7d      	ldr	r3, [pc, #500]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0304 	and.w	r3, r3, #4
 8008bb4:	2b04      	cmp	r3, #4
 8008bb6:	d10c      	bne.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d109      	bne.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bbe:	4b79      	ldr	r3, [pc, #484]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	08db      	lsrs	r3, r3, #3
 8008bc4:	f003 0303 	and.w	r3, r3, #3
 8008bc8:	4a77      	ldr	r2, [pc, #476]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008bca:	fa22 f303 	lsr.w	r3, r2, r3
 8008bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bd0:	e01e      	b.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bd2:	4b74      	ldr	r3, [pc, #464]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bde:	d106      	bne.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008be2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008be6:	d102      	bne.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008be8:	4b70      	ldr	r3, [pc, #448]	@ (8008dac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bec:	e010      	b.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bee:	4b6d      	ldr	r3, [pc, #436]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bfa:	d106      	bne.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c02:	d102      	bne.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c04:	4b6a      	ldr	r3, [pc, #424]	@ (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c08:	e002      	b.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008c0e:	e122      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c10:	e121      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008c12:	2300      	movs	r3, #0
 8008c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c16:	e11e      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008c18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c1c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008c20:	430b      	orrs	r3, r1
 8008c22:	d133      	bne.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008c24:	4b5f      	ldr	r3, [pc, #380]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c2c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d004      	beq.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c3a:	d012      	beq.n	8008c62 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008c3c:	e023      	b.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c3e:	4b59      	ldr	r3, [pc, #356]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c4a:	d107      	bne.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c50:	4618      	mov	r0, r3
 8008c52:	f000 fbc7 	bl	80093e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c5a:	e0fc      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c60:	e0f9      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c62:	4b50      	ldr	r3, [pc, #320]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c6e:	d107      	bne.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c70:	f107 0318 	add.w	r3, r7, #24
 8008c74:	4618      	mov	r0, r3
 8008c76:	f000 f90d 	bl	8008e94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008c7a:	6a3b      	ldr	r3, [r7, #32]
 8008c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c7e:	e0ea      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c80:	2300      	movs	r3, #0
 8008c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c84:	e0e7      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008c86:	2300      	movs	r3, #0
 8008c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c8a:	e0e4      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008c8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c90:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008c94:	430b      	orrs	r3, r1
 8008c96:	f040 808d 	bne.w	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008c9a:	4b42      	ldr	r3, [pc, #264]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c9e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008ca2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008caa:	d06b      	beq.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008cb2:	d874      	bhi.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cba:	d056      	beq.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cc2:	d86c      	bhi.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008cca:	d03b      	beq.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008cd2:	d864      	bhi.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cda:	d021      	beq.n	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ce2:	d85c      	bhi.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d004      	beq.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cf0:	d004      	beq.n	8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008cf2:	e054      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008cf4:	f000 f8b8 	bl	8008e68 <HAL_RCCEx_GetD3PCLK1Freq>
 8008cf8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008cfa:	e0ac      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cfc:	4b29      	ldr	r3, [pc, #164]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d08:	d107      	bne.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d0a:	f107 0318 	add.w	r3, r7, #24
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 f8c0 	bl	8008e94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d18:	e09d      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d1e:	e09a      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d20:	4b20      	ldr	r3, [pc, #128]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d2c:	d107      	bne.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d2e:	f107 030c 	add.w	r3, r7, #12
 8008d32:	4618      	mov	r0, r3
 8008d34:	f000 fa02 	bl	800913c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d3c:	e08b      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d42:	e088      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d44:	4b17      	ldr	r3, [pc, #92]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 0304 	and.w	r3, r3, #4
 8008d4c:	2b04      	cmp	r3, #4
 8008d4e:	d109      	bne.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d50:	4b14      	ldr	r3, [pc, #80]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	08db      	lsrs	r3, r3, #3
 8008d56:	f003 0303 	and.w	r3, r3, #3
 8008d5a:	4a13      	ldr	r2, [pc, #76]	@ (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d62:	e078      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d64:	2300      	movs	r3, #0
 8008d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d68:	e075      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d76:	d102      	bne.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008d78:	4b0c      	ldr	r3, [pc, #48]	@ (8008dac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d7c:	e06b      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d82:	e068      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008d84:	4b07      	ldr	r3, [pc, #28]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d90:	d102      	bne.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008d92:	4b07      	ldr	r3, [pc, #28]	@ (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d96:	e05e      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d9c:	e05b      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008da2:	e058      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008da4:	58024400 	.word	0x58024400
 8008da8:	03d09000 	.word	0x03d09000
 8008dac:	003d0900 	.word	0x003d0900
 8008db0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008db4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008db8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008dbc:	430b      	orrs	r3, r1
 8008dbe:	d148      	bne.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008dc0:	4b27      	ldr	r3, [pc, #156]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dc4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008dc8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dd0:	d02a      	beq.n	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dd8:	d838      	bhi.n	8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d004      	beq.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008de6:	d00d      	beq.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008de8:	e030      	b.n	8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008dea:	4b1d      	ldr	r3, [pc, #116]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008df2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008df6:	d102      	bne.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008df8:	4b1a      	ldr	r3, [pc, #104]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dfc:	e02b      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e02:	e028      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e04:	4b16      	ldr	r3, [pc, #88]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e10:	d107      	bne.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 fae4 	bl	80093e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e20:	e019      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e22:	2300      	movs	r3, #0
 8008e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e26:	e016      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e28:	4b0d      	ldr	r3, [pc, #52]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e34:	d107      	bne.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e36:	f107 0318 	add.w	r3, r7, #24
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f000 f82a 	bl	8008e94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e44:	e007      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e46:	2300      	movs	r3, #0
 8008e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e4a:	e004      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e50:	e001      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008e52:	2300      	movs	r3, #0
 8008e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3740      	adds	r7, #64	@ 0x40
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	58024400 	.word	0x58024400
 8008e64:	017d7840 	.word	0x017d7840

08008e68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008e6c:	f7fe f82c 	bl	8006ec8 <HAL_RCC_GetHCLKFreq>
 8008e70:	4602      	mov	r2, r0
 8008e72:	4b06      	ldr	r3, [pc, #24]	@ (8008e8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008e74:	6a1b      	ldr	r3, [r3, #32]
 8008e76:	091b      	lsrs	r3, r3, #4
 8008e78:	f003 0307 	and.w	r3, r3, #7
 8008e7c:	4904      	ldr	r1, [pc, #16]	@ (8008e90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008e7e:	5ccb      	ldrb	r3, [r1, r3]
 8008e80:	f003 031f 	and.w	r3, r3, #31
 8008e84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	58024400 	.word	0x58024400
 8008e90:	0800e24c 	.word	0x0800e24c

08008e94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b089      	sub	sp, #36	@ 0x24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e9c:	4ba1      	ldr	r3, [pc, #644]	@ (8009124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea0:	f003 0303 	and.w	r3, r3, #3
 8008ea4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008ea6:	4b9f      	ldr	r3, [pc, #636]	@ (8009124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eaa:	0b1b      	lsrs	r3, r3, #12
 8008eac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008eb0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008eb2:	4b9c      	ldr	r3, [pc, #624]	@ (8009124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb6:	091b      	lsrs	r3, r3, #4
 8008eb8:	f003 0301 	and.w	r3, r3, #1
 8008ebc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008ebe:	4b99      	ldr	r3, [pc, #612]	@ (8009124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ec2:	08db      	lsrs	r3, r3, #3
 8008ec4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ec8:	693a      	ldr	r2, [r7, #16]
 8008eca:	fb02 f303 	mul.w	r3, r2, r3
 8008ece:	ee07 3a90 	vmov	s15, r3
 8008ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ed6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f000 8111 	beq.w	8009104 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	f000 8083 	beq.w	8008ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	f200 80a1 	bhi.w	8009034 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d003      	beq.n	8008f00 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d056      	beq.n	8008fac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008efe:	e099      	b.n	8009034 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f00:	4b88      	ldr	r3, [pc, #544]	@ (8009124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 0320 	and.w	r3, r3, #32
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d02d      	beq.n	8008f68 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f0c:	4b85      	ldr	r3, [pc, #532]	@ (8009124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	08db      	lsrs	r3, r3, #3
 8008f12:	f003 0303 	and.w	r3, r3, #3
 8008f16:	4a84      	ldr	r2, [pc, #528]	@ (8009128 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008f18:	fa22 f303 	lsr.w	r3, r2, r3
 8008f1c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	ee07 3a90 	vmov	s15, r3
 8008f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	ee07 3a90 	vmov	s15, r3
 8008f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f36:	4b7b      	ldr	r3, [pc, #492]	@ (8009124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f3e:	ee07 3a90 	vmov	s15, r3
 8008f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800912c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008f66:	e087      	b.n	8009078 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	ee07 3a90 	vmov	s15, r3
 8008f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009130 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f7a:	4b6a      	ldr	r3, [pc, #424]	@ (8009124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f82:	ee07 3a90 	vmov	s15, r3
 8008f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800912c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008faa:	e065      	b.n	8009078 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	ee07 3a90 	vmov	s15, r3
 8008fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fb6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009134 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fbe:	4b59      	ldr	r3, [pc, #356]	@ (8009124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fc6:	ee07 3a90 	vmov	s15, r3
 8008fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fd2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800912c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fee:	e043      	b.n	8009078 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	ee07 3a90 	vmov	s15, r3
 8008ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ffa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009138 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009002:	4b48      	ldr	r3, [pc, #288]	@ (8009124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800900a:	ee07 3a90 	vmov	s15, r3
 800900e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009012:	ed97 6a03 	vldr	s12, [r7, #12]
 8009016:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800912c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800901a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800901e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800902a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800902e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009032:	e021      	b.n	8009078 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	ee07 3a90 	vmov	s15, r3
 800903a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800903e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009134 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009046:	4b37      	ldr	r3, [pc, #220]	@ (8009124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800904a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800904e:	ee07 3a90 	vmov	s15, r3
 8009052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009056:	ed97 6a03 	vldr	s12, [r7, #12]
 800905a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800912c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800905e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009066:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800906a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800906e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009072:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009076:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009078:	4b2a      	ldr	r3, [pc, #168]	@ (8009124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800907a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800907c:	0a5b      	lsrs	r3, r3, #9
 800907e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009082:	ee07 3a90 	vmov	s15, r3
 8009086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800908a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800908e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009092:	edd7 6a07 	vldr	s13, [r7, #28]
 8009096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800909a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800909e:	ee17 2a90 	vmov	r2, s15
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80090a6:	4b1f      	ldr	r3, [pc, #124]	@ (8009124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090aa:	0c1b      	lsrs	r3, r3, #16
 80090ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090b0:	ee07 3a90 	vmov	s15, r3
 80090b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80090c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090cc:	ee17 2a90 	vmov	r2, s15
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80090d4:	4b13      	ldr	r3, [pc, #76]	@ (8009124 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090d8:	0e1b      	lsrs	r3, r3, #24
 80090da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090de:	ee07 3a90 	vmov	s15, r3
 80090e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80090f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090fa:	ee17 2a90 	vmov	r2, s15
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009102:	e008      	b.n	8009116 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	609a      	str	r2, [r3, #8]
}
 8009116:	bf00      	nop
 8009118:	3724      	adds	r7, #36	@ 0x24
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	58024400 	.word	0x58024400
 8009128:	03d09000 	.word	0x03d09000
 800912c:	46000000 	.word	0x46000000
 8009130:	4c742400 	.word	0x4c742400
 8009134:	4a742400 	.word	0x4a742400
 8009138:	4bbebc20 	.word	0x4bbebc20

0800913c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800913c:	b480      	push	{r7}
 800913e:	b089      	sub	sp, #36	@ 0x24
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009144:	4ba1      	ldr	r3, [pc, #644]	@ (80093cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009148:	f003 0303 	and.w	r3, r3, #3
 800914c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800914e:	4b9f      	ldr	r3, [pc, #636]	@ (80093cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009152:	0d1b      	lsrs	r3, r3, #20
 8009154:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009158:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800915a:	4b9c      	ldr	r3, [pc, #624]	@ (80093cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800915c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800915e:	0a1b      	lsrs	r3, r3, #8
 8009160:	f003 0301 	and.w	r3, r3, #1
 8009164:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009166:	4b99      	ldr	r3, [pc, #612]	@ (80093cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800916a:	08db      	lsrs	r3, r3, #3
 800916c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009170:	693a      	ldr	r2, [r7, #16]
 8009172:	fb02 f303 	mul.w	r3, r2, r3
 8009176:	ee07 3a90 	vmov	s15, r3
 800917a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800917e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	2b00      	cmp	r3, #0
 8009186:	f000 8111 	beq.w	80093ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	2b02      	cmp	r3, #2
 800918e:	f000 8083 	beq.w	8009298 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	2b02      	cmp	r3, #2
 8009196:	f200 80a1 	bhi.w	80092dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d003      	beq.n	80091a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d056      	beq.n	8009254 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80091a6:	e099      	b.n	80092dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091a8:	4b88      	ldr	r3, [pc, #544]	@ (80093cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 0320 	and.w	r3, r3, #32
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d02d      	beq.n	8009210 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091b4:	4b85      	ldr	r3, [pc, #532]	@ (80093cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	08db      	lsrs	r3, r3, #3
 80091ba:	f003 0303 	and.w	r3, r3, #3
 80091be:	4a84      	ldr	r2, [pc, #528]	@ (80093d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80091c0:	fa22 f303 	lsr.w	r3, r2, r3
 80091c4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	ee07 3a90 	vmov	s15, r3
 80091cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	ee07 3a90 	vmov	s15, r3
 80091d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091de:	4b7b      	ldr	r3, [pc, #492]	@ (80093cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091e6:	ee07 3a90 	vmov	s15, r3
 80091ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80091f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80093d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800920a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800920e:	e087      	b.n	8009320 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	ee07 3a90 	vmov	s15, r3
 8009216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800921a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80093d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800921e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009222:	4b6a      	ldr	r3, [pc, #424]	@ (80093cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800922a:	ee07 3a90 	vmov	s15, r3
 800922e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009232:	ed97 6a03 	vldr	s12, [r7, #12]
 8009236:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80093d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800923a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800923e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800924a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800924e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009252:	e065      	b.n	8009320 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	ee07 3a90 	vmov	s15, r3
 800925a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800925e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80093dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009266:	4b59      	ldr	r3, [pc, #356]	@ (80093cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800926a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800926e:	ee07 3a90 	vmov	s15, r3
 8009272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009276:	ed97 6a03 	vldr	s12, [r7, #12]
 800927a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80093d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800927e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800928a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800928e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009296:	e043      	b.n	8009320 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	ee07 3a90 	vmov	s15, r3
 800929e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80093e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80092a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092aa:	4b48      	ldr	r3, [pc, #288]	@ (80093cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092b2:	ee07 3a90 	vmov	s15, r3
 80092b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80092be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80093d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80092c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092da:	e021      	b.n	8009320 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	ee07 3a90 	vmov	s15, r3
 80092e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80093dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80092ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092ee:	4b37      	ldr	r3, [pc, #220]	@ (80093cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092f6:	ee07 3a90 	vmov	s15, r3
 80092fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009302:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80093d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800930a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800930e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800931a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800931e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009320:	4b2a      	ldr	r3, [pc, #168]	@ (80093cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009324:	0a5b      	lsrs	r3, r3, #9
 8009326:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800932a:	ee07 3a90 	vmov	s15, r3
 800932e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009332:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009336:	ee37 7a87 	vadd.f32	s14, s15, s14
 800933a:	edd7 6a07 	vldr	s13, [r7, #28]
 800933e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009346:	ee17 2a90 	vmov	r2, s15
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800934e:	4b1f      	ldr	r3, [pc, #124]	@ (80093cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009352:	0c1b      	lsrs	r3, r3, #16
 8009354:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009358:	ee07 3a90 	vmov	s15, r3
 800935c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009360:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009364:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009368:	edd7 6a07 	vldr	s13, [r7, #28]
 800936c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009374:	ee17 2a90 	vmov	r2, s15
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800937c:	4b13      	ldr	r3, [pc, #76]	@ (80093cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800937e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009380:	0e1b      	lsrs	r3, r3, #24
 8009382:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009386:	ee07 3a90 	vmov	s15, r3
 800938a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800938e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009392:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009396:	edd7 6a07 	vldr	s13, [r7, #28]
 800939a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800939e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093a2:	ee17 2a90 	vmov	r2, s15
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80093aa:	e008      	b.n	80093be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	609a      	str	r2, [r3, #8]
}
 80093be:	bf00      	nop
 80093c0:	3724      	adds	r7, #36	@ 0x24
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	58024400 	.word	0x58024400
 80093d0:	03d09000 	.word	0x03d09000
 80093d4:	46000000 	.word	0x46000000
 80093d8:	4c742400 	.word	0x4c742400
 80093dc:	4a742400 	.word	0x4a742400
 80093e0:	4bbebc20 	.word	0x4bbebc20

080093e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b089      	sub	sp, #36	@ 0x24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093ec:	4ba0      	ldr	r3, [pc, #640]	@ (8009670 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093f0:	f003 0303 	and.w	r3, r3, #3
 80093f4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80093f6:	4b9e      	ldr	r3, [pc, #632]	@ (8009670 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093fa:	091b      	lsrs	r3, r3, #4
 80093fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009400:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009402:	4b9b      	ldr	r3, [pc, #620]	@ (8009670 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009406:	f003 0301 	and.w	r3, r3, #1
 800940a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800940c:	4b98      	ldr	r3, [pc, #608]	@ (8009670 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800940e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009410:	08db      	lsrs	r3, r3, #3
 8009412:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009416:	693a      	ldr	r2, [r7, #16]
 8009418:	fb02 f303 	mul.w	r3, r2, r3
 800941c:	ee07 3a90 	vmov	s15, r3
 8009420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009424:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	2b00      	cmp	r3, #0
 800942c:	f000 8111 	beq.w	8009652 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	2b02      	cmp	r3, #2
 8009434:	f000 8083 	beq.w	800953e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	2b02      	cmp	r3, #2
 800943c:	f200 80a1 	bhi.w	8009582 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d003      	beq.n	800944e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d056      	beq.n	80094fa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800944c:	e099      	b.n	8009582 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800944e:	4b88      	ldr	r3, [pc, #544]	@ (8009670 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f003 0320 	and.w	r3, r3, #32
 8009456:	2b00      	cmp	r3, #0
 8009458:	d02d      	beq.n	80094b6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800945a:	4b85      	ldr	r3, [pc, #532]	@ (8009670 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	08db      	lsrs	r3, r3, #3
 8009460:	f003 0303 	and.w	r3, r3, #3
 8009464:	4a83      	ldr	r2, [pc, #524]	@ (8009674 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009466:	fa22 f303 	lsr.w	r3, r2, r3
 800946a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	ee07 3a90 	vmov	s15, r3
 8009472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	ee07 3a90 	vmov	s15, r3
 800947c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009480:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009484:	4b7a      	ldr	r3, [pc, #488]	@ (8009670 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800948c:	ee07 3a90 	vmov	s15, r3
 8009490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009494:	ed97 6a03 	vldr	s12, [r7, #12]
 8009498:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009678 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800949c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094b0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80094b4:	e087      	b.n	80095c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	ee07 3a90 	vmov	s15, r3
 80094bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094c0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800967c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80094c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094c8:	4b69      	ldr	r3, [pc, #420]	@ (8009670 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094d0:	ee07 3a90 	vmov	s15, r3
 80094d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80094dc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009678 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80094e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094f8:	e065      	b.n	80095c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	ee07 3a90 	vmov	s15, r3
 8009500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009504:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009680 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009508:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800950c:	4b58      	ldr	r3, [pc, #352]	@ (8009670 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800950e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009514:	ee07 3a90 	vmov	s15, r3
 8009518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800951c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009520:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009678 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009524:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009528:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800952c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009530:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009538:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800953c:	e043      	b.n	80095c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	ee07 3a90 	vmov	s15, r3
 8009544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009548:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009684 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800954c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009550:	4b47      	ldr	r3, [pc, #284]	@ (8009670 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009558:	ee07 3a90 	vmov	s15, r3
 800955c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009560:	ed97 6a03 	vldr	s12, [r7, #12]
 8009564:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009678 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009568:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800956c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009570:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009574:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800957c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009580:	e021      	b.n	80095c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	ee07 3a90 	vmov	s15, r3
 8009588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800958c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800967c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009590:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009594:	4b36      	ldr	r3, [pc, #216]	@ (8009670 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800959c:	ee07 3a90 	vmov	s15, r3
 80095a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80095a8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009678 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80095ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095c4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80095c6:	4b2a      	ldr	r3, [pc, #168]	@ (8009670 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095ca:	0a5b      	lsrs	r3, r3, #9
 80095cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095d0:	ee07 3a90 	vmov	s15, r3
 80095d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80095e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095ec:	ee17 2a90 	vmov	r2, s15
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80095f4:	4b1e      	ldr	r3, [pc, #120]	@ (8009670 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095f8:	0c1b      	lsrs	r3, r3, #16
 80095fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095fe:	ee07 3a90 	vmov	s15, r3
 8009602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009606:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800960a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800960e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009612:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800961a:	ee17 2a90 	vmov	r2, s15
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009622:	4b13      	ldr	r3, [pc, #76]	@ (8009670 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009626:	0e1b      	lsrs	r3, r3, #24
 8009628:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800962c:	ee07 3a90 	vmov	s15, r3
 8009630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009634:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009638:	ee37 7a87 	vadd.f32	s14, s15, s14
 800963c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009648:	ee17 2a90 	vmov	r2, s15
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009650:	e008      	b.n	8009664 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	609a      	str	r2, [r3, #8]
}
 8009664:	bf00      	nop
 8009666:	3724      	adds	r7, #36	@ 0x24
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr
 8009670:	58024400 	.word	0x58024400
 8009674:	03d09000 	.word	0x03d09000
 8009678:	46000000 	.word	0x46000000
 800967c:	4c742400 	.word	0x4c742400
 8009680:	4a742400 	.word	0x4a742400
 8009684:	4bbebc20 	.word	0x4bbebc20

08009688 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009692:	2300      	movs	r3, #0
 8009694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009696:	4b53      	ldr	r3, [pc, #332]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 8009698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800969a:	f003 0303 	and.w	r3, r3, #3
 800969e:	2b03      	cmp	r3, #3
 80096a0:	d101      	bne.n	80096a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e099      	b.n	80097da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80096a6:	4b4f      	ldr	r3, [pc, #316]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a4e      	ldr	r2, [pc, #312]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 80096ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80096b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096b2:	f7f7 fac7 	bl	8000c44 <HAL_GetTick>
 80096b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80096b8:	e008      	b.n	80096cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80096ba:	f7f7 fac3 	bl	8000c44 <HAL_GetTick>
 80096be:	4602      	mov	r2, r0
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	1ad3      	subs	r3, r2, r3
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	d901      	bls.n	80096cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80096c8:	2303      	movs	r3, #3
 80096ca:	e086      	b.n	80097da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80096cc:	4b45      	ldr	r3, [pc, #276]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1f0      	bne.n	80096ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80096d8:	4b42      	ldr	r3, [pc, #264]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 80096da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096dc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	031b      	lsls	r3, r3, #12
 80096e6:	493f      	ldr	r1, [pc, #252]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 80096e8:	4313      	orrs	r3, r2
 80096ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	3b01      	subs	r3, #1
 80096f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	3b01      	subs	r3, #1
 80096fc:	025b      	lsls	r3, r3, #9
 80096fe:	b29b      	uxth	r3, r3
 8009700:	431a      	orrs	r2, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	3b01      	subs	r3, #1
 8009708:	041b      	lsls	r3, r3, #16
 800970a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800970e:	431a      	orrs	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	3b01      	subs	r3, #1
 8009716:	061b      	lsls	r3, r3, #24
 8009718:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800971c:	4931      	ldr	r1, [pc, #196]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 800971e:	4313      	orrs	r3, r2
 8009720:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009722:	4b30      	ldr	r3, [pc, #192]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 8009724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009726:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	695b      	ldr	r3, [r3, #20]
 800972e:	492d      	ldr	r1, [pc, #180]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 8009730:	4313      	orrs	r3, r2
 8009732:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009734:	4b2b      	ldr	r3, [pc, #172]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 8009736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009738:	f023 0220 	bic.w	r2, r3, #32
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	4928      	ldr	r1, [pc, #160]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 8009742:	4313      	orrs	r3, r2
 8009744:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009746:	4b27      	ldr	r3, [pc, #156]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 8009748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800974a:	4a26      	ldr	r2, [pc, #152]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 800974c:	f023 0310 	bic.w	r3, r3, #16
 8009750:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009752:	4b24      	ldr	r3, [pc, #144]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 8009754:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009756:	4b24      	ldr	r3, [pc, #144]	@ (80097e8 <RCCEx_PLL2_Config+0x160>)
 8009758:	4013      	ands	r3, r2
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	69d2      	ldr	r2, [r2, #28]
 800975e:	00d2      	lsls	r2, r2, #3
 8009760:	4920      	ldr	r1, [pc, #128]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 8009762:	4313      	orrs	r3, r2
 8009764:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009766:	4b1f      	ldr	r3, [pc, #124]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 8009768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800976a:	4a1e      	ldr	r2, [pc, #120]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 800976c:	f043 0310 	orr.w	r3, r3, #16
 8009770:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d106      	bne.n	8009786 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009778:	4b1a      	ldr	r3, [pc, #104]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 800977a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800977c:	4a19      	ldr	r2, [pc, #100]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 800977e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009782:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009784:	e00f      	b.n	80097a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	2b01      	cmp	r3, #1
 800978a:	d106      	bne.n	800979a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800978c:	4b15      	ldr	r3, [pc, #84]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 800978e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009790:	4a14      	ldr	r2, [pc, #80]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 8009792:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009796:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009798:	e005      	b.n	80097a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800979a:	4b12      	ldr	r3, [pc, #72]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 800979c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800979e:	4a11      	ldr	r2, [pc, #68]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 80097a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80097a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80097a6:	4b0f      	ldr	r3, [pc, #60]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a0e      	ldr	r2, [pc, #56]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 80097ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80097b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097b2:	f7f7 fa47 	bl	8000c44 <HAL_GetTick>
 80097b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80097b8:	e008      	b.n	80097cc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80097ba:	f7f7 fa43 	bl	8000c44 <HAL_GetTick>
 80097be:	4602      	mov	r2, r0
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	1ad3      	subs	r3, r2, r3
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d901      	bls.n	80097cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80097c8:	2303      	movs	r3, #3
 80097ca:	e006      	b.n	80097da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80097cc:	4b05      	ldr	r3, [pc, #20]	@ (80097e4 <RCCEx_PLL2_Config+0x15c>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d0f0      	beq.n	80097ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	58024400 	.word	0x58024400
 80097e8:	ffff0007 	.word	0xffff0007

080097ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097f6:	2300      	movs	r3, #0
 80097f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80097fa:	4b53      	ldr	r3, [pc, #332]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 80097fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097fe:	f003 0303 	and.w	r3, r3, #3
 8009802:	2b03      	cmp	r3, #3
 8009804:	d101      	bne.n	800980a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	e099      	b.n	800993e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800980a:	4b4f      	ldr	r3, [pc, #316]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a4e      	ldr	r2, [pc, #312]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 8009810:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009814:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009816:	f7f7 fa15 	bl	8000c44 <HAL_GetTick>
 800981a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800981c:	e008      	b.n	8009830 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800981e:	f7f7 fa11 	bl	8000c44 <HAL_GetTick>
 8009822:	4602      	mov	r2, r0
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	2b02      	cmp	r3, #2
 800982a:	d901      	bls.n	8009830 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800982c:	2303      	movs	r3, #3
 800982e:	e086      	b.n	800993e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009830:	4b45      	ldr	r3, [pc, #276]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1f0      	bne.n	800981e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800983c:	4b42      	ldr	r3, [pc, #264]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 800983e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009840:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	051b      	lsls	r3, r3, #20
 800984a:	493f      	ldr	r1, [pc, #252]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 800984c:	4313      	orrs	r3, r2
 800984e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	3b01      	subs	r3, #1
 8009856:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	3b01      	subs	r3, #1
 8009860:	025b      	lsls	r3, r3, #9
 8009862:	b29b      	uxth	r3, r3
 8009864:	431a      	orrs	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	3b01      	subs	r3, #1
 800986c:	041b      	lsls	r3, r3, #16
 800986e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009872:	431a      	orrs	r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	3b01      	subs	r3, #1
 800987a:	061b      	lsls	r3, r3, #24
 800987c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009880:	4931      	ldr	r1, [pc, #196]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 8009882:	4313      	orrs	r3, r2
 8009884:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009886:	4b30      	ldr	r3, [pc, #192]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 8009888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800988a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	695b      	ldr	r3, [r3, #20]
 8009892:	492d      	ldr	r1, [pc, #180]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 8009894:	4313      	orrs	r3, r2
 8009896:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009898:	4b2b      	ldr	r3, [pc, #172]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 800989a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800989c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	699b      	ldr	r3, [r3, #24]
 80098a4:	4928      	ldr	r1, [pc, #160]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 80098a6:	4313      	orrs	r3, r2
 80098a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80098aa:	4b27      	ldr	r3, [pc, #156]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 80098ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ae:	4a26      	ldr	r2, [pc, #152]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 80098b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80098b6:	4b24      	ldr	r3, [pc, #144]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 80098b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098ba:	4b24      	ldr	r3, [pc, #144]	@ (800994c <RCCEx_PLL3_Config+0x160>)
 80098bc:	4013      	ands	r3, r2
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	69d2      	ldr	r2, [r2, #28]
 80098c2:	00d2      	lsls	r2, r2, #3
 80098c4:	4920      	ldr	r1, [pc, #128]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 80098c6:	4313      	orrs	r3, r2
 80098c8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80098ca:	4b1f      	ldr	r3, [pc, #124]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 80098cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ce:	4a1e      	ldr	r2, [pc, #120]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 80098d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80098d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d106      	bne.n	80098ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80098dc:	4b1a      	ldr	r3, [pc, #104]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 80098de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e0:	4a19      	ldr	r2, [pc, #100]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 80098e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80098e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098e8:	e00f      	b.n	800990a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d106      	bne.n	80098fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80098f0:	4b15      	ldr	r3, [pc, #84]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 80098f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098f4:	4a14      	ldr	r2, [pc, #80]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 80098f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80098fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098fc:	e005      	b.n	800990a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80098fe:	4b12      	ldr	r3, [pc, #72]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 8009900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009902:	4a11      	ldr	r2, [pc, #68]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 8009904:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009908:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800990a:	4b0f      	ldr	r3, [pc, #60]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a0e      	ldr	r2, [pc, #56]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 8009910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009914:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009916:	f7f7 f995 	bl	8000c44 <HAL_GetTick>
 800991a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800991c:	e008      	b.n	8009930 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800991e:	f7f7 f991 	bl	8000c44 <HAL_GetTick>
 8009922:	4602      	mov	r2, r0
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	1ad3      	subs	r3, r2, r3
 8009928:	2b02      	cmp	r3, #2
 800992a:	d901      	bls.n	8009930 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800992c:	2303      	movs	r3, #3
 800992e:	e006      	b.n	800993e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009930:	4b05      	ldr	r3, [pc, #20]	@ (8009948 <RCCEx_PLL3_Config+0x15c>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009938:	2b00      	cmp	r3, #0
 800993a:	d0f0      	beq.n	800991e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800993c:	7bfb      	ldrb	r3, [r7, #15]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	58024400 	.word	0x58024400
 800994c:	ffff0007 	.word	0xffff0007

08009950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d101      	bne.n	8009962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e049      	b.n	80099f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009968:	b2db      	uxtb	r3, r3
 800996a:	2b00      	cmp	r3, #0
 800996c:	d106      	bne.n	800997c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f7f6 ffc6 	bl	8000908 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2202      	movs	r2, #2
 8009980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	3304      	adds	r3, #4
 800998c:	4619      	mov	r1, r3
 800998e:	4610      	mov	r0, r2
 8009990:	f000 f99e 	bl	8009cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
	...

08009a00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d001      	beq.n	8009a18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	e04c      	b.n	8009ab2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2202      	movs	r2, #2
 8009a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a26      	ldr	r2, [pc, #152]	@ (8009ac0 <HAL_TIM_Base_Start+0xc0>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d022      	beq.n	8009a70 <HAL_TIM_Base_Start+0x70>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a32:	d01d      	beq.n	8009a70 <HAL_TIM_Base_Start+0x70>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a22      	ldr	r2, [pc, #136]	@ (8009ac4 <HAL_TIM_Base_Start+0xc4>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d018      	beq.n	8009a70 <HAL_TIM_Base_Start+0x70>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a21      	ldr	r2, [pc, #132]	@ (8009ac8 <HAL_TIM_Base_Start+0xc8>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d013      	beq.n	8009a70 <HAL_TIM_Base_Start+0x70>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a1f      	ldr	r2, [pc, #124]	@ (8009acc <HAL_TIM_Base_Start+0xcc>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d00e      	beq.n	8009a70 <HAL_TIM_Base_Start+0x70>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a1e      	ldr	r2, [pc, #120]	@ (8009ad0 <HAL_TIM_Base_Start+0xd0>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d009      	beq.n	8009a70 <HAL_TIM_Base_Start+0x70>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a1c      	ldr	r2, [pc, #112]	@ (8009ad4 <HAL_TIM_Base_Start+0xd4>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d004      	beq.n	8009a70 <HAL_TIM_Base_Start+0x70>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ad8 <HAL_TIM_Base_Start+0xd8>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d115      	bne.n	8009a9c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	689a      	ldr	r2, [r3, #8]
 8009a76:	4b19      	ldr	r3, [pc, #100]	@ (8009adc <HAL_TIM_Base_Start+0xdc>)
 8009a78:	4013      	ands	r3, r2
 8009a7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2b06      	cmp	r3, #6
 8009a80:	d015      	beq.n	8009aae <HAL_TIM_Base_Start+0xae>
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a88:	d011      	beq.n	8009aae <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f042 0201 	orr.w	r2, r2, #1
 8009a98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a9a:	e008      	b.n	8009aae <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f042 0201 	orr.w	r2, r2, #1
 8009aaa:	601a      	str	r2, [r3, #0]
 8009aac:	e000      	b.n	8009ab0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3714      	adds	r7, #20
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop
 8009ac0:	40010000 	.word	0x40010000
 8009ac4:	40000400 	.word	0x40000400
 8009ac8:	40000800 	.word	0x40000800
 8009acc:	40000c00 	.word	0x40000c00
 8009ad0:	40010400 	.word	0x40010400
 8009ad4:	40001800 	.word	0x40001800
 8009ad8:	40014000 	.word	0x40014000
 8009adc:	00010007 	.word	0x00010007

08009ae0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d101      	bne.n	8009afc <HAL_TIM_ConfigClockSource+0x1c>
 8009af8:	2302      	movs	r3, #2
 8009afa:	e0dc      	b.n	8009cb6 <HAL_TIM_ConfigClockSource+0x1d6>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2202      	movs	r2, #2
 8009b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	4b6a      	ldr	r3, [pc, #424]	@ (8009cc0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009b18:	4013      	ands	r3, r2
 8009b1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a64      	ldr	r2, [pc, #400]	@ (8009cc4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	f000 80a9 	beq.w	8009c8a <HAL_TIM_ConfigClockSource+0x1aa>
 8009b38:	4a62      	ldr	r2, [pc, #392]	@ (8009cc4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	f200 80ae 	bhi.w	8009c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8009b40:	4a61      	ldr	r2, [pc, #388]	@ (8009cc8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	f000 80a1 	beq.w	8009c8a <HAL_TIM_ConfigClockSource+0x1aa>
 8009b48:	4a5f      	ldr	r2, [pc, #380]	@ (8009cc8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	f200 80a6 	bhi.w	8009c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8009b50:	4a5e      	ldr	r2, [pc, #376]	@ (8009ccc <HAL_TIM_ConfigClockSource+0x1ec>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	f000 8099 	beq.w	8009c8a <HAL_TIM_ConfigClockSource+0x1aa>
 8009b58:	4a5c      	ldr	r2, [pc, #368]	@ (8009ccc <HAL_TIM_ConfigClockSource+0x1ec>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	f200 809e 	bhi.w	8009c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8009b60:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009b64:	f000 8091 	beq.w	8009c8a <HAL_TIM_ConfigClockSource+0x1aa>
 8009b68:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009b6c:	f200 8096 	bhi.w	8009c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8009b70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b74:	f000 8089 	beq.w	8009c8a <HAL_TIM_ConfigClockSource+0x1aa>
 8009b78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b7c:	f200 808e 	bhi.w	8009c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8009b80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b84:	d03e      	beq.n	8009c04 <HAL_TIM_ConfigClockSource+0x124>
 8009b86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b8a:	f200 8087 	bhi.w	8009c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8009b8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b92:	f000 8086 	beq.w	8009ca2 <HAL_TIM_ConfigClockSource+0x1c2>
 8009b96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b9a:	d87f      	bhi.n	8009c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8009b9c:	2b70      	cmp	r3, #112	@ 0x70
 8009b9e:	d01a      	beq.n	8009bd6 <HAL_TIM_ConfigClockSource+0xf6>
 8009ba0:	2b70      	cmp	r3, #112	@ 0x70
 8009ba2:	d87b      	bhi.n	8009c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8009ba4:	2b60      	cmp	r3, #96	@ 0x60
 8009ba6:	d050      	beq.n	8009c4a <HAL_TIM_ConfigClockSource+0x16a>
 8009ba8:	2b60      	cmp	r3, #96	@ 0x60
 8009baa:	d877      	bhi.n	8009c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8009bac:	2b50      	cmp	r3, #80	@ 0x50
 8009bae:	d03c      	beq.n	8009c2a <HAL_TIM_ConfigClockSource+0x14a>
 8009bb0:	2b50      	cmp	r3, #80	@ 0x50
 8009bb2:	d873      	bhi.n	8009c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8009bb4:	2b40      	cmp	r3, #64	@ 0x40
 8009bb6:	d058      	beq.n	8009c6a <HAL_TIM_ConfigClockSource+0x18a>
 8009bb8:	2b40      	cmp	r3, #64	@ 0x40
 8009bba:	d86f      	bhi.n	8009c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8009bbc:	2b30      	cmp	r3, #48	@ 0x30
 8009bbe:	d064      	beq.n	8009c8a <HAL_TIM_ConfigClockSource+0x1aa>
 8009bc0:	2b30      	cmp	r3, #48	@ 0x30
 8009bc2:	d86b      	bhi.n	8009c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8009bc4:	2b20      	cmp	r3, #32
 8009bc6:	d060      	beq.n	8009c8a <HAL_TIM_ConfigClockSource+0x1aa>
 8009bc8:	2b20      	cmp	r3, #32
 8009bca:	d867      	bhi.n	8009c9c <HAL_TIM_ConfigClockSource+0x1bc>
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d05c      	beq.n	8009c8a <HAL_TIM_ConfigClockSource+0x1aa>
 8009bd0:	2b10      	cmp	r3, #16
 8009bd2:	d05a      	beq.n	8009c8a <HAL_TIM_ConfigClockSource+0x1aa>
 8009bd4:	e062      	b.n	8009c9c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009be6:	f000 f997 	bl	8009f18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009bf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68ba      	ldr	r2, [r7, #8]
 8009c00:	609a      	str	r2, [r3, #8]
      break;
 8009c02:	e04f      	b.n	8009ca4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c14:	f000 f980 	bl	8009f18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	689a      	ldr	r2, [r3, #8]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009c26:	609a      	str	r2, [r3, #8]
      break;
 8009c28:	e03c      	b.n	8009ca4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c36:	461a      	mov	r2, r3
 8009c38:	f000 f8f0 	bl	8009e1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2150      	movs	r1, #80	@ 0x50
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 f94a 	bl	8009edc <TIM_ITRx_SetConfig>
      break;
 8009c48:	e02c      	b.n	8009ca4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c56:	461a      	mov	r2, r3
 8009c58:	f000 f90f 	bl	8009e7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2160      	movs	r1, #96	@ 0x60
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 f93a 	bl	8009edc <TIM_ITRx_SetConfig>
      break;
 8009c68:	e01c      	b.n	8009ca4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c76:	461a      	mov	r2, r3
 8009c78:	f000 f8d0 	bl	8009e1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2140      	movs	r1, #64	@ 0x40
 8009c82:	4618      	mov	r0, r3
 8009c84:	f000 f92a 	bl	8009edc <TIM_ITRx_SetConfig>
      break;
 8009c88:	e00c      	b.n	8009ca4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4619      	mov	r1, r3
 8009c94:	4610      	mov	r0, r2
 8009c96:	f000 f921 	bl	8009edc <TIM_ITRx_SetConfig>
      break;
 8009c9a:	e003      	b.n	8009ca4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8009ca0:	e000      	b.n	8009ca4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009ca2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	ffceff88 	.word	0xffceff88
 8009cc4:	00100040 	.word	0x00100040
 8009cc8:	00100030 	.word	0x00100030
 8009ccc:	00100020 	.word	0x00100020

08009cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b085      	sub	sp, #20
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a46      	ldr	r2, [pc, #280]	@ (8009dfc <TIM_Base_SetConfig+0x12c>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d013      	beq.n	8009d10 <TIM_Base_SetConfig+0x40>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cee:	d00f      	beq.n	8009d10 <TIM_Base_SetConfig+0x40>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4a43      	ldr	r2, [pc, #268]	@ (8009e00 <TIM_Base_SetConfig+0x130>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d00b      	beq.n	8009d10 <TIM_Base_SetConfig+0x40>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a42      	ldr	r2, [pc, #264]	@ (8009e04 <TIM_Base_SetConfig+0x134>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d007      	beq.n	8009d10 <TIM_Base_SetConfig+0x40>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a41      	ldr	r2, [pc, #260]	@ (8009e08 <TIM_Base_SetConfig+0x138>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d003      	beq.n	8009d10 <TIM_Base_SetConfig+0x40>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a40      	ldr	r2, [pc, #256]	@ (8009e0c <TIM_Base_SetConfig+0x13c>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d108      	bne.n	8009d22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4a35      	ldr	r2, [pc, #212]	@ (8009dfc <TIM_Base_SetConfig+0x12c>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d01f      	beq.n	8009d6a <TIM_Base_SetConfig+0x9a>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d30:	d01b      	beq.n	8009d6a <TIM_Base_SetConfig+0x9a>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4a32      	ldr	r2, [pc, #200]	@ (8009e00 <TIM_Base_SetConfig+0x130>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d017      	beq.n	8009d6a <TIM_Base_SetConfig+0x9a>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a31      	ldr	r2, [pc, #196]	@ (8009e04 <TIM_Base_SetConfig+0x134>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d013      	beq.n	8009d6a <TIM_Base_SetConfig+0x9a>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a30      	ldr	r2, [pc, #192]	@ (8009e08 <TIM_Base_SetConfig+0x138>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d00f      	beq.n	8009d6a <TIM_Base_SetConfig+0x9a>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a2f      	ldr	r2, [pc, #188]	@ (8009e0c <TIM_Base_SetConfig+0x13c>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d00b      	beq.n	8009d6a <TIM_Base_SetConfig+0x9a>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a2e      	ldr	r2, [pc, #184]	@ (8009e10 <TIM_Base_SetConfig+0x140>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d007      	beq.n	8009d6a <TIM_Base_SetConfig+0x9a>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4a2d      	ldr	r2, [pc, #180]	@ (8009e14 <TIM_Base_SetConfig+0x144>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d003      	beq.n	8009d6a <TIM_Base_SetConfig+0x9a>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4a2c      	ldr	r2, [pc, #176]	@ (8009e18 <TIM_Base_SetConfig+0x148>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d108      	bne.n	8009d7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	695b      	ldr	r3, [r3, #20]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	689a      	ldr	r2, [r3, #8]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a16      	ldr	r2, [pc, #88]	@ (8009dfc <TIM_Base_SetConfig+0x12c>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d00f      	beq.n	8009dc8 <TIM_Base_SetConfig+0xf8>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a18      	ldr	r2, [pc, #96]	@ (8009e0c <TIM_Base_SetConfig+0x13c>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d00b      	beq.n	8009dc8 <TIM_Base_SetConfig+0xf8>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a17      	ldr	r2, [pc, #92]	@ (8009e10 <TIM_Base_SetConfig+0x140>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d007      	beq.n	8009dc8 <TIM_Base_SetConfig+0xf8>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a16      	ldr	r2, [pc, #88]	@ (8009e14 <TIM_Base_SetConfig+0x144>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d003      	beq.n	8009dc8 <TIM_Base_SetConfig+0xf8>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a15      	ldr	r2, [pc, #84]	@ (8009e18 <TIM_Base_SetConfig+0x148>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d103      	bne.n	8009dd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	691a      	ldr	r2, [r3, #16]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	f003 0301 	and.w	r3, r3, #1
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d105      	bne.n	8009dee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	691b      	ldr	r3, [r3, #16]
 8009de6:	f023 0201 	bic.w	r2, r3, #1
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	611a      	str	r2, [r3, #16]
  }
}
 8009dee:	bf00      	nop
 8009df0:	3714      	adds	r7, #20
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	40010000 	.word	0x40010000
 8009e00:	40000400 	.word	0x40000400
 8009e04:	40000800 	.word	0x40000800
 8009e08:	40000c00 	.word	0x40000c00
 8009e0c:	40010400 	.word	0x40010400
 8009e10:	40014000 	.word	0x40014000
 8009e14:	40014400 	.word	0x40014400
 8009e18:	40014800 	.word	0x40014800

08009e1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b087      	sub	sp, #28
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6a1b      	ldr	r3, [r3, #32]
 8009e2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6a1b      	ldr	r3, [r3, #32]
 8009e32:	f023 0201 	bic.w	r2, r3, #1
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	699b      	ldr	r3, [r3, #24]
 8009e3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009e46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	011b      	lsls	r3, r3, #4
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	f023 030a 	bic.w	r3, r3, #10
 8009e58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e5a:	697a      	ldr	r2, [r7, #20]
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	693a      	ldr	r2, [r7, #16]
 8009e66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	697a      	ldr	r2, [r7, #20]
 8009e6c:	621a      	str	r2, [r3, #32]
}
 8009e6e:	bf00      	nop
 8009e70:	371c      	adds	r7, #28
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr

08009e7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e7a:	b480      	push	{r7}
 8009e7c:	b087      	sub	sp, #28
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	60f8      	str	r0, [r7, #12]
 8009e82:	60b9      	str	r1, [r7, #8]
 8009e84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6a1b      	ldr	r3, [r3, #32]
 8009e8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6a1b      	ldr	r3, [r3, #32]
 8009e90:	f023 0210 	bic.w	r2, r3, #16
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	699b      	ldr	r3, [r3, #24]
 8009e9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009ea4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	031b      	lsls	r3, r3, #12
 8009eaa:	693a      	ldr	r2, [r7, #16]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009eb6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	011b      	lsls	r3, r3, #4
 8009ebc:	697a      	ldr	r2, [r7, #20]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	621a      	str	r2, [r3, #32]
}
 8009ece:	bf00      	nop
 8009ed0:	371c      	adds	r7, #28
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
	...

08009edc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	4b09      	ldr	r3, [pc, #36]	@ (8009f14 <TIM_ITRx_SetConfig+0x38>)
 8009ef0:	4013      	ands	r3, r2
 8009ef2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ef4:	683a      	ldr	r2, [r7, #0]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	f043 0307 	orr.w	r3, r3, #7
 8009efe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	609a      	str	r2, [r3, #8]
}
 8009f06:	bf00      	nop
 8009f08:	3714      	adds	r7, #20
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	ffcfff8f 	.word	0xffcfff8f

08009f18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b087      	sub	sp, #28
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	607a      	str	r2, [r7, #4]
 8009f24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	021a      	lsls	r2, r3, #8
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	431a      	orrs	r2, r3
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	697a      	ldr	r2, [r7, #20]
 8009f42:	4313      	orrs	r3, r2
 8009f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	697a      	ldr	r2, [r7, #20]
 8009f4a:	609a      	str	r2, [r3, #8]
}
 8009f4c:	bf00      	nop
 8009f4e:	371c      	adds	r7, #28
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d101      	bne.n	8009f70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f6c:	2302      	movs	r3, #2
 8009f6e:	e06d      	b.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2201      	movs	r2, #1
 8009f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2202      	movs	r2, #2
 8009f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a30      	ldr	r2, [pc, #192]	@ (800a058 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d004      	beq.n	8009fa4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a2f      	ldr	r2, [pc, #188]	@ (800a05c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d108      	bne.n	8009fb6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009faa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68fa      	ldr	r2, [r7, #12]
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a20      	ldr	r2, [pc, #128]	@ (800a058 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d022      	beq.n	800a020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fe2:	d01d      	beq.n	800a020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a1d      	ldr	r2, [pc, #116]	@ (800a060 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d018      	beq.n	800a020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a1c      	ldr	r2, [pc, #112]	@ (800a064 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d013      	beq.n	800a020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a1a      	ldr	r2, [pc, #104]	@ (800a068 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d00e      	beq.n	800a020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a15      	ldr	r2, [pc, #84]	@ (800a05c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d009      	beq.n	800a020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a16      	ldr	r2, [pc, #88]	@ (800a06c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d004      	beq.n	800a020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a15      	ldr	r2, [pc, #84]	@ (800a070 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d10c      	bne.n	800a03a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a026:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	68ba      	ldr	r2, [r7, #8]
 800a02e:	4313      	orrs	r3, r2
 800a030:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	68ba      	ldr	r2, [r7, #8]
 800a038:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3714      	adds	r7, #20
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	40010000 	.word	0x40010000
 800a05c:	40010400 	.word	0x40010400
 800a060:	40000400 	.word	0x40000400
 800a064:	40000800 	.word	0x40000800
 800a068:	40000c00 	.word	0x40000c00
 800a06c:	40001800 	.word	0x40001800
 800a070:	40014000 	.word	0x40014000

0800a074 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a074:	b084      	sub	sp, #16
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	f107 001c 	add.w	r0, r7, #28
 800a082:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a086:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d121      	bne.n	800a0d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a092:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	68da      	ldr	r2, [r3, #12]
 800a09e:	4b2c      	ldr	r3, [pc, #176]	@ (800a150 <USB_CoreInit+0xdc>)
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a0b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d105      	bne.n	800a0c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f001 faf6 	bl	800b6b8 <USB_CoreReset>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	73fb      	strb	r3, [r7, #15]
 800a0d0:	e01b      	b.n	800a10a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f001 faea 	bl	800b6b8 <USB_CoreReset>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a0e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d106      	bne.n	800a0fe <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	639a      	str	r2, [r3, #56]	@ 0x38
 800a0fc:	e005      	b.n	800a10a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a102:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a10a:	7fbb      	ldrb	r3, [r7, #30]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d116      	bne.n	800a13e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a114:	b29a      	uxth	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a11e:	4b0d      	ldr	r3, [pc, #52]	@ (800a154 <USB_CoreInit+0xe0>)
 800a120:	4313      	orrs	r3, r2
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	f043 0206 	orr.w	r2, r3, #6
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	f043 0220 	orr.w	r2, r3, #32
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a14a:	b004      	add	sp, #16
 800a14c:	4770      	bx	lr
 800a14e:	bf00      	nop
 800a150:	ffbdffbf 	.word	0xffbdffbf
 800a154:	03ee0000 	.word	0x03ee0000

0800a158 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a158:	b480      	push	{r7}
 800a15a:	b087      	sub	sp, #28
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	4613      	mov	r3, r2
 800a164:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a166:	79fb      	ldrb	r3, [r7, #7]
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d165      	bne.n	800a238 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	4a41      	ldr	r2, [pc, #260]	@ (800a274 <USB_SetTurnaroundTime+0x11c>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d906      	bls.n	800a182 <USB_SetTurnaroundTime+0x2a>
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	4a40      	ldr	r2, [pc, #256]	@ (800a278 <USB_SetTurnaroundTime+0x120>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d202      	bcs.n	800a182 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a17c:	230f      	movs	r3, #15
 800a17e:	617b      	str	r3, [r7, #20]
 800a180:	e062      	b.n	800a248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	4a3c      	ldr	r2, [pc, #240]	@ (800a278 <USB_SetTurnaroundTime+0x120>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d306      	bcc.n	800a198 <USB_SetTurnaroundTime+0x40>
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	4a3b      	ldr	r2, [pc, #236]	@ (800a27c <USB_SetTurnaroundTime+0x124>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d202      	bcs.n	800a198 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a192:	230e      	movs	r3, #14
 800a194:	617b      	str	r3, [r7, #20]
 800a196:	e057      	b.n	800a248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	4a38      	ldr	r2, [pc, #224]	@ (800a27c <USB_SetTurnaroundTime+0x124>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d306      	bcc.n	800a1ae <USB_SetTurnaroundTime+0x56>
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	4a37      	ldr	r2, [pc, #220]	@ (800a280 <USB_SetTurnaroundTime+0x128>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d202      	bcs.n	800a1ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a1a8:	230d      	movs	r3, #13
 800a1aa:	617b      	str	r3, [r7, #20]
 800a1ac:	e04c      	b.n	800a248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	4a33      	ldr	r2, [pc, #204]	@ (800a280 <USB_SetTurnaroundTime+0x128>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d306      	bcc.n	800a1c4 <USB_SetTurnaroundTime+0x6c>
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	4a32      	ldr	r2, [pc, #200]	@ (800a284 <USB_SetTurnaroundTime+0x12c>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d802      	bhi.n	800a1c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a1be:	230c      	movs	r3, #12
 800a1c0:	617b      	str	r3, [r7, #20]
 800a1c2:	e041      	b.n	800a248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	4a2f      	ldr	r2, [pc, #188]	@ (800a284 <USB_SetTurnaroundTime+0x12c>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d906      	bls.n	800a1da <USB_SetTurnaroundTime+0x82>
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	4a2e      	ldr	r2, [pc, #184]	@ (800a288 <USB_SetTurnaroundTime+0x130>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d802      	bhi.n	800a1da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a1d4:	230b      	movs	r3, #11
 800a1d6:	617b      	str	r3, [r7, #20]
 800a1d8:	e036      	b.n	800a248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	4a2a      	ldr	r2, [pc, #168]	@ (800a288 <USB_SetTurnaroundTime+0x130>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d906      	bls.n	800a1f0 <USB_SetTurnaroundTime+0x98>
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	4a29      	ldr	r2, [pc, #164]	@ (800a28c <USB_SetTurnaroundTime+0x134>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d802      	bhi.n	800a1f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a1ea:	230a      	movs	r3, #10
 800a1ec:	617b      	str	r3, [r7, #20]
 800a1ee:	e02b      	b.n	800a248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	4a26      	ldr	r2, [pc, #152]	@ (800a28c <USB_SetTurnaroundTime+0x134>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d906      	bls.n	800a206 <USB_SetTurnaroundTime+0xae>
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	4a25      	ldr	r2, [pc, #148]	@ (800a290 <USB_SetTurnaroundTime+0x138>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d202      	bcs.n	800a206 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a200:	2309      	movs	r3, #9
 800a202:	617b      	str	r3, [r7, #20]
 800a204:	e020      	b.n	800a248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	4a21      	ldr	r2, [pc, #132]	@ (800a290 <USB_SetTurnaroundTime+0x138>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d306      	bcc.n	800a21c <USB_SetTurnaroundTime+0xc4>
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	4a20      	ldr	r2, [pc, #128]	@ (800a294 <USB_SetTurnaroundTime+0x13c>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d802      	bhi.n	800a21c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a216:	2308      	movs	r3, #8
 800a218:	617b      	str	r3, [r7, #20]
 800a21a:	e015      	b.n	800a248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	4a1d      	ldr	r2, [pc, #116]	@ (800a294 <USB_SetTurnaroundTime+0x13c>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d906      	bls.n	800a232 <USB_SetTurnaroundTime+0xda>
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	4a1c      	ldr	r2, [pc, #112]	@ (800a298 <USB_SetTurnaroundTime+0x140>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d202      	bcs.n	800a232 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a22c:	2307      	movs	r3, #7
 800a22e:	617b      	str	r3, [r7, #20]
 800a230:	e00a      	b.n	800a248 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a232:	2306      	movs	r3, #6
 800a234:	617b      	str	r3, [r7, #20]
 800a236:	e007      	b.n	800a248 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a238:	79fb      	ldrb	r3, [r7, #7]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d102      	bne.n	800a244 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a23e:	2309      	movs	r3, #9
 800a240:	617b      	str	r3, [r7, #20]
 800a242:	e001      	b.n	800a248 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a244:	2309      	movs	r3, #9
 800a246:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	68da      	ldr	r2, [r3, #12]
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	029b      	lsls	r3, r3, #10
 800a25c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a260:	431a      	orrs	r2, r3
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	371c      	adds	r7, #28
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr
 800a274:	00d8acbf 	.word	0x00d8acbf
 800a278:	00e4e1c0 	.word	0x00e4e1c0
 800a27c:	00f42400 	.word	0x00f42400
 800a280:	01067380 	.word	0x01067380
 800a284:	011a499f 	.word	0x011a499f
 800a288:	01312cff 	.word	0x01312cff
 800a28c:	014ca43f 	.word	0x014ca43f
 800a290:	016e3600 	.word	0x016e3600
 800a294:	01a6ab1f 	.word	0x01a6ab1f
 800a298:	01e84800 	.word	0x01e84800

0800a29c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	689b      	ldr	r3, [r3, #8]
 800a2a8:	f043 0201 	orr.w	r2, r3, #1
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	370c      	adds	r7, #12
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr

0800a2be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a2be:	b480      	push	{r7}
 800a2c0:	b083      	sub	sp, #12
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	f023 0201 	bic.w	r2, r3, #1
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a2fc:	78fb      	ldrb	r3, [r7, #3]
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d115      	bne.n	800a32e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a30e:	200a      	movs	r0, #10
 800a310:	f7f6 fca4 	bl	8000c5c <HAL_Delay>
      ms += 10U;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	330a      	adds	r3, #10
 800a318:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f001 f93b 	bl	800b596 <USB_GetMode>
 800a320:	4603      	mov	r3, r0
 800a322:	2b01      	cmp	r3, #1
 800a324:	d01e      	beq.n	800a364 <USB_SetCurrentMode+0x84>
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2bc7      	cmp	r3, #199	@ 0xc7
 800a32a:	d9f0      	bls.n	800a30e <USB_SetCurrentMode+0x2e>
 800a32c:	e01a      	b.n	800a364 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a32e:	78fb      	ldrb	r3, [r7, #3]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d115      	bne.n	800a360 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a340:	200a      	movs	r0, #10
 800a342:	f7f6 fc8b 	bl	8000c5c <HAL_Delay>
      ms += 10U;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	330a      	adds	r3, #10
 800a34a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f001 f922 	bl	800b596 <USB_GetMode>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d005      	beq.n	800a364 <USB_SetCurrentMode+0x84>
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2bc7      	cmp	r3, #199	@ 0xc7
 800a35c:	d9f0      	bls.n	800a340 <USB_SetCurrentMode+0x60>
 800a35e:	e001      	b.n	800a364 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	e005      	b.n	800a370 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2bc8      	cmp	r3, #200	@ 0xc8
 800a368:	d101      	bne.n	800a36e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	e000      	b.n	800a370 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a36e:	2300      	movs	r3, #0
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a378:	b084      	sub	sp, #16
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b086      	sub	sp, #24
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a38a:	2300      	movs	r3, #0
 800a38c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a392:	2300      	movs	r3, #0
 800a394:	613b      	str	r3, [r7, #16]
 800a396:	e009      	b.n	800a3ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	3340      	adds	r3, #64	@ 0x40
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	4413      	add	r3, r2
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	613b      	str	r3, [r7, #16]
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	2b0e      	cmp	r3, #14
 800a3b0:	d9f2      	bls.n	800a398 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a3b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d11c      	bne.n	800a3f4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	68fa      	ldr	r2, [r7, #12]
 800a3c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a3c8:	f043 0302 	orr.w	r3, r3, #2
 800a3cc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3d2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	601a      	str	r2, [r3, #0]
 800a3f2:	e005      	b.n	800a400 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3f8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a406:	461a      	mov	r2, r3
 800a408:	2300      	movs	r3, #0
 800a40a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a40c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a410:	2b01      	cmp	r3, #1
 800a412:	d10d      	bne.n	800a430 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a414:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d104      	bne.n	800a426 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a41c:	2100      	movs	r1, #0
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 f968 	bl	800a6f4 <USB_SetDevSpeed>
 800a424:	e008      	b.n	800a438 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a426:	2101      	movs	r1, #1
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 f963 	bl	800a6f4 <USB_SetDevSpeed>
 800a42e:	e003      	b.n	800a438 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a430:	2103      	movs	r1, #3
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 f95e 	bl	800a6f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a438:	2110      	movs	r1, #16
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 f8fa 	bl	800a634 <USB_FlushTxFifo>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 f924 	bl	800a698 <USB_FlushRxFifo>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d001      	beq.n	800a45a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a456:	2301      	movs	r3, #1
 800a458:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a460:	461a      	mov	r2, r3
 800a462:	2300      	movs	r3, #0
 800a464:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a46c:	461a      	mov	r2, r3
 800a46e:	2300      	movs	r3, #0
 800a470:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a478:	461a      	mov	r2, r3
 800a47a:	2300      	movs	r3, #0
 800a47c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a47e:	2300      	movs	r3, #0
 800a480:	613b      	str	r3, [r7, #16]
 800a482:	e043      	b.n	800a50c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	015a      	lsls	r2, r3, #5
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	4413      	add	r3, r2
 800a48c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a496:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a49a:	d118      	bne.n	800a4ce <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d10a      	bne.n	800a4b8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	015a      	lsls	r2, r3, #5
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a4b4:	6013      	str	r3, [r2, #0]
 800a4b6:	e013      	b.n	800a4e0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	015a      	lsls	r2, r3, #5
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	4413      	add	r3, r2
 800a4c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a4ca:	6013      	str	r3, [r2, #0]
 800a4cc:	e008      	b.n	800a4e0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	015a      	lsls	r2, r3, #5
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4da:	461a      	mov	r2, r3
 800a4dc:	2300      	movs	r3, #0
 800a4de:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	015a      	lsls	r2, r3, #5
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	015a      	lsls	r2, r3, #5
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4fe:	461a      	mov	r2, r3
 800a500:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a504:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	3301      	adds	r3, #1
 800a50a:	613b      	str	r3, [r7, #16]
 800a50c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a510:	461a      	mov	r2, r3
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	4293      	cmp	r3, r2
 800a516:	d3b5      	bcc.n	800a484 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a518:	2300      	movs	r3, #0
 800a51a:	613b      	str	r3, [r7, #16]
 800a51c:	e043      	b.n	800a5a6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	015a      	lsls	r2, r3, #5
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	4413      	add	r3, r2
 800a526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a530:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a534:	d118      	bne.n	800a568 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d10a      	bne.n	800a552 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	015a      	lsls	r2, r3, #5
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	4413      	add	r3, r2
 800a544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a548:	461a      	mov	r2, r3
 800a54a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a54e:	6013      	str	r3, [r2, #0]
 800a550:	e013      	b.n	800a57a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	015a      	lsls	r2, r3, #5
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	4413      	add	r3, r2
 800a55a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a55e:	461a      	mov	r2, r3
 800a560:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a564:	6013      	str	r3, [r2, #0]
 800a566:	e008      	b.n	800a57a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	015a      	lsls	r2, r3, #5
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	4413      	add	r3, r2
 800a570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a574:	461a      	mov	r2, r3
 800a576:	2300      	movs	r3, #0
 800a578:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	015a      	lsls	r2, r3, #5
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	4413      	add	r3, r2
 800a582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a586:	461a      	mov	r2, r3
 800a588:	2300      	movs	r3, #0
 800a58a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	015a      	lsls	r2, r3, #5
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	4413      	add	r3, r2
 800a594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a598:	461a      	mov	r2, r3
 800a59a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a59e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	613b      	str	r3, [r7, #16]
 800a5a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d3b5      	bcc.n	800a51e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5b8:	691b      	ldr	r3, [r3, #16]
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a5c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5c4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a5d2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a5d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d105      	bne.n	800a5e8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	699b      	ldr	r3, [r3, #24]
 800a5e0:	f043 0210 	orr.w	r2, r3, #16
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	699a      	ldr	r2, [r3, #24]
 800a5ec:	4b0f      	ldr	r3, [pc, #60]	@ (800a62c <USB_DevInit+0x2b4>)
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a5f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d005      	beq.n	800a608 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	699b      	ldr	r3, [r3, #24]
 800a600:	f043 0208 	orr.w	r2, r3, #8
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a608:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d105      	bne.n	800a61c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	699a      	ldr	r2, [r3, #24]
 800a614:	4b06      	ldr	r3, [pc, #24]	@ (800a630 <USB_DevInit+0x2b8>)
 800a616:	4313      	orrs	r3, r2
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a61c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3718      	adds	r7, #24
 800a622:	46bd      	mov	sp, r7
 800a624:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a628:	b004      	add	sp, #16
 800a62a:	4770      	bx	lr
 800a62c:	803c3800 	.word	0x803c3800
 800a630:	40000004 	.word	0x40000004

0800a634 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a634:	b480      	push	{r7}
 800a636:	b085      	sub	sp, #20
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a63e:	2300      	movs	r3, #0
 800a640:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	3301      	adds	r3, #1
 800a646:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a64e:	d901      	bls.n	800a654 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a650:	2303      	movs	r3, #3
 800a652:	e01b      	b.n	800a68c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	691b      	ldr	r3, [r3, #16]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	daf2      	bge.n	800a642 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a65c:	2300      	movs	r3, #0
 800a65e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	019b      	lsls	r3, r3, #6
 800a664:	f043 0220 	orr.w	r2, r3, #32
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	3301      	adds	r3, #1
 800a670:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a678:	d901      	bls.n	800a67e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a67a:	2303      	movs	r3, #3
 800a67c:	e006      	b.n	800a68c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	f003 0320 	and.w	r3, r3, #32
 800a686:	2b20      	cmp	r3, #32
 800a688:	d0f0      	beq.n	800a66c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3714      	adds	r7, #20
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a698:	b480      	push	{r7}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a6b0:	d901      	bls.n	800a6b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	e018      	b.n	800a6e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	daf2      	bge.n	800a6a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2210      	movs	r2, #16
 800a6c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a6d4:	d901      	bls.n	800a6da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a6d6:	2303      	movs	r3, #3
 800a6d8:	e006      	b.n	800a6e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	691b      	ldr	r3, [r3, #16]
 800a6de:	f003 0310 	and.w	r3, r3, #16
 800a6e2:	2b10      	cmp	r3, #16
 800a6e4:	d0f0      	beq.n	800a6c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3714      	adds	r7, #20
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	78fb      	ldrb	r3, [r7, #3]
 800a70e:	68f9      	ldr	r1, [r7, #12]
 800a710:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a714:	4313      	orrs	r3, r2
 800a716:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3714      	adds	r7, #20
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr

0800a726 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a726:	b480      	push	{r7}
 800a728:	b087      	sub	sp, #28
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	f003 0306 	and.w	r3, r3, #6
 800a73e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d102      	bne.n	800a74c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a746:	2300      	movs	r3, #0
 800a748:	75fb      	strb	r3, [r7, #23]
 800a74a:	e00a      	b.n	800a762 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d002      	beq.n	800a758 <USB_GetDevSpeed+0x32>
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2b06      	cmp	r3, #6
 800a756:	d102      	bne.n	800a75e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a758:	2302      	movs	r3, #2
 800a75a:	75fb      	strb	r3, [r7, #23]
 800a75c:	e001      	b.n	800a762 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a75e:	230f      	movs	r3, #15
 800a760:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a762:	7dfb      	ldrb	r3, [r7, #23]
}
 800a764:	4618      	mov	r0, r3
 800a766:	371c      	adds	r7, #28
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a770:	b480      	push	{r7}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	785b      	ldrb	r3, [r3, #1]
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d139      	bne.n	800a800 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a792:	69da      	ldr	r2, [r3, #28]
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	f003 030f 	and.w	r3, r3, #15
 800a79c:	2101      	movs	r1, #1
 800a79e:	fa01 f303 	lsl.w	r3, r1, r3
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	68f9      	ldr	r1, [r7, #12]
 800a7a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	015a      	lsls	r2, r3, #5
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d153      	bne.n	800a86c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	015a      	lsls	r2, r3, #5
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	791b      	ldrb	r3, [r3, #4]
 800a7de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a7e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	059b      	lsls	r3, r3, #22
 800a7e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a7e8:	431a      	orrs	r2, r3
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	0159      	lsls	r1, r3, #5
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	440b      	add	r3, r1
 800a7f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	4b20      	ldr	r3, [pc, #128]	@ (800a87c <USB_ActivateEndpoint+0x10c>)
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	600b      	str	r3, [r1, #0]
 800a7fe:	e035      	b.n	800a86c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a806:	69da      	ldr	r2, [r3, #28]
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	f003 030f 	and.w	r3, r3, #15
 800a810:	2101      	movs	r1, #1
 800a812:	fa01 f303 	lsl.w	r3, r1, r3
 800a816:	041b      	lsls	r3, r3, #16
 800a818:	68f9      	ldr	r1, [r7, #12]
 800a81a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a81e:	4313      	orrs	r3, r2
 800a820:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	015a      	lsls	r2, r3, #5
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	4413      	add	r3, r2
 800a82a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a834:	2b00      	cmp	r3, #0
 800a836:	d119      	bne.n	800a86c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	015a      	lsls	r2, r3, #5
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	4413      	add	r3, r2
 800a840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	689b      	ldr	r3, [r3, #8]
 800a84a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	791b      	ldrb	r3, [r3, #4]
 800a852:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a854:	430b      	orrs	r3, r1
 800a856:	431a      	orrs	r2, r3
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	0159      	lsls	r1, r3, #5
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	440b      	add	r3, r1
 800a860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a864:	4619      	mov	r1, r3
 800a866:	4b05      	ldr	r3, [pc, #20]	@ (800a87c <USB_ActivateEndpoint+0x10c>)
 800a868:	4313      	orrs	r3, r2
 800a86a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a86c:	2300      	movs	r3, #0
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3714      	adds	r7, #20
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop
 800a87c:	10008000 	.word	0x10008000

0800a880 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	785b      	ldrb	r3, [r3, #1]
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d161      	bne.n	800a960 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	015a      	lsls	r2, r3, #5
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8b2:	d11f      	bne.n	800a8f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	015a      	lsls	r2, r3, #5
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	68ba      	ldr	r2, [r7, #8]
 800a8c4:	0151      	lsls	r1, r2, #5
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	440a      	add	r2, r1
 800a8ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a8d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	015a      	lsls	r2, r3, #5
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	4413      	add	r3, r2
 800a8dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	68ba      	ldr	r2, [r7, #8]
 800a8e4:	0151      	lsls	r1, r2, #5
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	440a      	add	r2, r1
 800a8ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a8f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	f003 030f 	and.w	r3, r3, #15
 800a904:	2101      	movs	r1, #1
 800a906:	fa01 f303 	lsl.w	r3, r1, r3
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	43db      	mvns	r3, r3
 800a90e:	68f9      	ldr	r1, [r7, #12]
 800a910:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a914:	4013      	ands	r3, r2
 800a916:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a91e:	69da      	ldr	r2, [r3, #28]
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	f003 030f 	and.w	r3, r3, #15
 800a928:	2101      	movs	r1, #1
 800a92a:	fa01 f303 	lsl.w	r3, r1, r3
 800a92e:	b29b      	uxth	r3, r3
 800a930:	43db      	mvns	r3, r3
 800a932:	68f9      	ldr	r1, [r7, #12]
 800a934:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a938:	4013      	ands	r3, r2
 800a93a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	015a      	lsls	r2, r3, #5
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	4413      	add	r3, r2
 800a944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	0159      	lsls	r1, r3, #5
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	440b      	add	r3, r1
 800a952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a956:	4619      	mov	r1, r3
 800a958:	4b35      	ldr	r3, [pc, #212]	@ (800aa30 <USB_DeactivateEndpoint+0x1b0>)
 800a95a:	4013      	ands	r3, r2
 800a95c:	600b      	str	r3, [r1, #0]
 800a95e:	e060      	b.n	800aa22 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	015a      	lsls	r2, r3, #5
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	4413      	add	r3, r2
 800a968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a972:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a976:	d11f      	bne.n	800a9b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	015a      	lsls	r2, r3, #5
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	4413      	add	r3, r2
 800a980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	68ba      	ldr	r2, [r7, #8]
 800a988:	0151      	lsls	r1, r2, #5
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	440a      	add	r2, r1
 800a98e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a992:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a996:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	015a      	lsls	r2, r3, #5
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	4413      	add	r3, r2
 800a9a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	68ba      	ldr	r2, [r7, #8]
 800a9a8:	0151      	lsls	r1, r2, #5
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	440a      	add	r2, r1
 800a9ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a9b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	f003 030f 	and.w	r3, r3, #15
 800a9c8:	2101      	movs	r1, #1
 800a9ca:	fa01 f303 	lsl.w	r3, r1, r3
 800a9ce:	041b      	lsls	r3, r3, #16
 800a9d0:	43db      	mvns	r3, r3
 800a9d2:	68f9      	ldr	r1, [r7, #12]
 800a9d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a9d8:	4013      	ands	r3, r2
 800a9da:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9e2:	69da      	ldr	r2, [r3, #28]
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	f003 030f 	and.w	r3, r3, #15
 800a9ec:	2101      	movs	r1, #1
 800a9ee:	fa01 f303 	lsl.w	r3, r1, r3
 800a9f2:	041b      	lsls	r3, r3, #16
 800a9f4:	43db      	mvns	r3, r3
 800a9f6:	68f9      	ldr	r1, [r7, #12]
 800a9f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a9fc:	4013      	ands	r3, r2
 800a9fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	015a      	lsls	r2, r3, #5
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	4413      	add	r3, r2
 800aa08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	0159      	lsls	r1, r3, #5
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	440b      	add	r3, r1
 800aa16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	4b05      	ldr	r3, [pc, #20]	@ (800aa34 <USB_DeactivateEndpoint+0x1b4>)
 800aa1e:	4013      	ands	r3, r2
 800aa20:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3714      	adds	r7, #20
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr
 800aa30:	ec337800 	.word	0xec337800
 800aa34:	eff37800 	.word	0xeff37800

0800aa38 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b08a      	sub	sp, #40	@ 0x28
 800aa3c:	af02      	add	r7, sp, #8
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	4613      	mov	r3, r2
 800aa44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	785b      	ldrb	r3, [r3, #1]
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	f040 8181 	bne.w	800ad5c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	691b      	ldr	r3, [r3, #16]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d132      	bne.n	800aac8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	015a      	lsls	r2, r3, #5
 800aa66:	69fb      	ldr	r3, [r7, #28]
 800aa68:	4413      	add	r3, r2
 800aa6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa6e:	691a      	ldr	r2, [r3, #16]
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	0159      	lsls	r1, r3, #5
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	440b      	add	r3, r1
 800aa78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	4ba5      	ldr	r3, [pc, #660]	@ (800ad14 <USB_EPStartXfer+0x2dc>)
 800aa80:	4013      	ands	r3, r2
 800aa82:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	015a      	lsls	r2, r3, #5
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	69ba      	ldr	r2, [r7, #24]
 800aa94:	0151      	lsls	r1, r2, #5
 800aa96:	69fa      	ldr	r2, [r7, #28]
 800aa98:	440a      	add	r2, r1
 800aa9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa9e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aaa2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aaa4:	69bb      	ldr	r3, [r7, #24]
 800aaa6:	015a      	lsls	r2, r3, #5
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	4413      	add	r3, r2
 800aaac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aab0:	691a      	ldr	r2, [r3, #16]
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	0159      	lsls	r1, r3, #5
 800aab6:	69fb      	ldr	r3, [r7, #28]
 800aab8:	440b      	add	r3, r1
 800aaba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aabe:	4619      	mov	r1, r3
 800aac0:	4b95      	ldr	r3, [pc, #596]	@ (800ad18 <USB_EPStartXfer+0x2e0>)
 800aac2:	4013      	ands	r3, r2
 800aac4:	610b      	str	r3, [r1, #16]
 800aac6:	e092      	b.n	800abee <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	015a      	lsls	r2, r3, #5
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	4413      	add	r3, r2
 800aad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aad4:	691a      	ldr	r2, [r3, #16]
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	0159      	lsls	r1, r3, #5
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	440b      	add	r3, r1
 800aade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aae2:	4619      	mov	r1, r3
 800aae4:	4b8c      	ldr	r3, [pc, #560]	@ (800ad18 <USB_EPStartXfer+0x2e0>)
 800aae6:	4013      	ands	r3, r2
 800aae8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	015a      	lsls	r2, r3, #5
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaf6:	691a      	ldr	r2, [r3, #16]
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	0159      	lsls	r1, r3, #5
 800aafc:	69fb      	ldr	r3, [r7, #28]
 800aafe:	440b      	add	r3, r1
 800ab00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab04:	4619      	mov	r1, r3
 800ab06:	4b83      	ldr	r3, [pc, #524]	@ (800ad14 <USB_EPStartXfer+0x2dc>)
 800ab08:	4013      	ands	r3, r2
 800ab0a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800ab0c:	69bb      	ldr	r3, [r7, #24]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d11a      	bne.n	800ab48 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	691a      	ldr	r2, [r3, #16]
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d903      	bls.n	800ab26 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	689a      	ldr	r2, [r3, #8]
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	015a      	lsls	r2, r3, #5
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab32:	691b      	ldr	r3, [r3, #16]
 800ab34:	69ba      	ldr	r2, [r7, #24]
 800ab36:	0151      	lsls	r1, r2, #5
 800ab38:	69fa      	ldr	r2, [r7, #28]
 800ab3a:	440a      	add	r2, r1
 800ab3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ab44:	6113      	str	r3, [r2, #16]
 800ab46:	e01b      	b.n	800ab80 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ab48:	69bb      	ldr	r3, [r7, #24]
 800ab4a:	015a      	lsls	r2, r3, #5
 800ab4c:	69fb      	ldr	r3, [r7, #28]
 800ab4e:	4413      	add	r3, r2
 800ab50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab54:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	6919      	ldr	r1, [r3, #16]
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	440b      	add	r3, r1
 800ab60:	1e59      	subs	r1, r3, #1
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	fbb1 f3f3 	udiv	r3, r1, r3
 800ab6a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ab6c:	4b6b      	ldr	r3, [pc, #428]	@ (800ad1c <USB_EPStartXfer+0x2e4>)
 800ab6e:	400b      	ands	r3, r1
 800ab70:	69b9      	ldr	r1, [r7, #24]
 800ab72:	0148      	lsls	r0, r1, #5
 800ab74:	69f9      	ldr	r1, [r7, #28]
 800ab76:	4401      	add	r1, r0
 800ab78:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	015a      	lsls	r2, r3, #5
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	4413      	add	r3, r2
 800ab88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab8c:	691a      	ldr	r2, [r3, #16]
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	691b      	ldr	r3, [r3, #16]
 800ab92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab96:	69b9      	ldr	r1, [r7, #24]
 800ab98:	0148      	lsls	r0, r1, #5
 800ab9a:	69f9      	ldr	r1, [r7, #28]
 800ab9c:	4401      	add	r1, r0
 800ab9e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800aba2:	4313      	orrs	r3, r2
 800aba4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	791b      	ldrb	r3, [r3, #4]
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d11f      	bne.n	800abee <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800abae:	69bb      	ldr	r3, [r7, #24]
 800abb0:	015a      	lsls	r2, r3, #5
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	4413      	add	r3, r2
 800abb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	69ba      	ldr	r2, [r7, #24]
 800abbe:	0151      	lsls	r1, r2, #5
 800abc0:	69fa      	ldr	r2, [r7, #28]
 800abc2:	440a      	add	r2, r1
 800abc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abc8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800abcc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	015a      	lsls	r2, r3, #5
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	4413      	add	r3, r2
 800abd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abda:	691b      	ldr	r3, [r3, #16]
 800abdc:	69ba      	ldr	r2, [r7, #24]
 800abde:	0151      	lsls	r1, r2, #5
 800abe0:	69fa      	ldr	r2, [r7, #28]
 800abe2:	440a      	add	r2, r1
 800abe4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abe8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800abec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800abee:	79fb      	ldrb	r3, [r7, #7]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d14b      	bne.n	800ac8c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	69db      	ldr	r3, [r3, #28]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d009      	beq.n	800ac10 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	015a      	lsls	r2, r3, #5
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	4413      	add	r3, r2
 800ac04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac08:	461a      	mov	r2, r3
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	69db      	ldr	r3, [r3, #28]
 800ac0e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	791b      	ldrb	r3, [r3, #4]
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d128      	bne.n	800ac6a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d110      	bne.n	800ac4a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	015a      	lsls	r2, r3, #5
 800ac2c:	69fb      	ldr	r3, [r7, #28]
 800ac2e:	4413      	add	r3, r2
 800ac30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	69ba      	ldr	r2, [r7, #24]
 800ac38:	0151      	lsls	r1, r2, #5
 800ac3a:	69fa      	ldr	r2, [r7, #28]
 800ac3c:	440a      	add	r2, r1
 800ac3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac42:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ac46:	6013      	str	r3, [r2, #0]
 800ac48:	e00f      	b.n	800ac6a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	015a      	lsls	r2, r3, #5
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	4413      	add	r3, r2
 800ac52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	69ba      	ldr	r2, [r7, #24]
 800ac5a:	0151      	lsls	r1, r2, #5
 800ac5c:	69fa      	ldr	r2, [r7, #28]
 800ac5e:	440a      	add	r2, r1
 800ac60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac68:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	015a      	lsls	r2, r3, #5
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	4413      	add	r3, r2
 800ac72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	69ba      	ldr	r2, [r7, #24]
 800ac7a:	0151      	lsls	r1, r2, #5
 800ac7c:	69fa      	ldr	r2, [r7, #28]
 800ac7e:	440a      	add	r2, r1
 800ac80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac84:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ac88:	6013      	str	r3, [r2, #0]
 800ac8a:	e16a      	b.n	800af62 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	015a      	lsls	r2, r3, #5
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	4413      	add	r3, r2
 800ac94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	69ba      	ldr	r2, [r7, #24]
 800ac9c:	0151      	lsls	r1, r2, #5
 800ac9e:	69fa      	ldr	r2, [r7, #28]
 800aca0:	440a      	add	r2, r1
 800aca2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aca6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800acaa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	791b      	ldrb	r3, [r3, #4]
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d015      	beq.n	800ace0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	691b      	ldr	r3, [r3, #16]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	f000 8152 	beq.w	800af62 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	f003 030f 	and.w	r3, r3, #15
 800acce:	2101      	movs	r1, #1
 800acd0:	fa01 f303 	lsl.w	r3, r1, r3
 800acd4:	69f9      	ldr	r1, [r7, #28]
 800acd6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800acda:	4313      	orrs	r3, r2
 800acdc:	634b      	str	r3, [r1, #52]	@ 0x34
 800acde:	e140      	b.n	800af62 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ace0:	69fb      	ldr	r3, [r7, #28]
 800ace2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acec:	2b00      	cmp	r3, #0
 800acee:	d117      	bne.n	800ad20 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	015a      	lsls	r2, r3, #5
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	4413      	add	r3, r2
 800acf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	69ba      	ldr	r2, [r7, #24]
 800ad00:	0151      	lsls	r1, r2, #5
 800ad02:	69fa      	ldr	r2, [r7, #28]
 800ad04:	440a      	add	r2, r1
 800ad06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad0a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ad0e:	6013      	str	r3, [r2, #0]
 800ad10:	e016      	b.n	800ad40 <USB_EPStartXfer+0x308>
 800ad12:	bf00      	nop
 800ad14:	e007ffff 	.word	0xe007ffff
 800ad18:	fff80000 	.word	0xfff80000
 800ad1c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	015a      	lsls	r2, r3, #5
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	4413      	add	r3, r2
 800ad28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	69ba      	ldr	r2, [r7, #24]
 800ad30:	0151      	lsls	r1, r2, #5
 800ad32:	69fa      	ldr	r2, [r7, #28]
 800ad34:	440a      	add	r2, r1
 800ad36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad3e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	68d9      	ldr	r1, [r3, #12]
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	781a      	ldrb	r2, [r3, #0]
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	691b      	ldr	r3, [r3, #16]
 800ad4c:	b298      	uxth	r0, r3
 800ad4e:	79fb      	ldrb	r3, [r7, #7]
 800ad50:	9300      	str	r3, [sp, #0]
 800ad52:	4603      	mov	r3, r0
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f000 f9b9 	bl	800b0cc <USB_WritePacket>
 800ad5a:	e102      	b.n	800af62 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ad5c:	69bb      	ldr	r3, [r7, #24]
 800ad5e:	015a      	lsls	r2, r3, #5
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	4413      	add	r3, r2
 800ad64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad68:	691a      	ldr	r2, [r3, #16]
 800ad6a:	69bb      	ldr	r3, [r7, #24]
 800ad6c:	0159      	lsls	r1, r3, #5
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	440b      	add	r3, r1
 800ad72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad76:	4619      	mov	r1, r3
 800ad78:	4b7c      	ldr	r3, [pc, #496]	@ (800af6c <USB_EPStartXfer+0x534>)
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	015a      	lsls	r2, r3, #5
 800ad82:	69fb      	ldr	r3, [r7, #28]
 800ad84:	4413      	add	r3, r2
 800ad86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad8a:	691a      	ldr	r2, [r3, #16]
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	0159      	lsls	r1, r3, #5
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	440b      	add	r3, r1
 800ad94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad98:	4619      	mov	r1, r3
 800ad9a:	4b75      	ldr	r3, [pc, #468]	@ (800af70 <USB_EPStartXfer+0x538>)
 800ad9c:	4013      	ands	r3, r2
 800ad9e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d12f      	bne.n	800ae06 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	691b      	ldr	r3, [r3, #16]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d003      	beq.n	800adb6 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	689a      	ldr	r2, [r3, #8]
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	689a      	ldr	r2, [r3, #8]
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	015a      	lsls	r2, r3, #5
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	4413      	add	r3, r2
 800adc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adca:	691a      	ldr	r2, [r3, #16]
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	6a1b      	ldr	r3, [r3, #32]
 800add0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800add4:	69b9      	ldr	r1, [r7, #24]
 800add6:	0148      	lsls	r0, r1, #5
 800add8:	69f9      	ldr	r1, [r7, #28]
 800adda:	4401      	add	r1, r0
 800addc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ade0:	4313      	orrs	r3, r2
 800ade2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	015a      	lsls	r2, r3, #5
 800ade8:	69fb      	ldr	r3, [r7, #28]
 800adea:	4413      	add	r3, r2
 800adec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adf0:	691b      	ldr	r3, [r3, #16]
 800adf2:	69ba      	ldr	r2, [r7, #24]
 800adf4:	0151      	lsls	r1, r2, #5
 800adf6:	69fa      	ldr	r2, [r7, #28]
 800adf8:	440a      	add	r2, r1
 800adfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adfe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ae02:	6113      	str	r3, [r2, #16]
 800ae04:	e05f      	b.n	800aec6 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	691b      	ldr	r3, [r3, #16]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d123      	bne.n	800ae56 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	015a      	lsls	r2, r3, #5
 800ae12:	69fb      	ldr	r3, [r7, #28]
 800ae14:	4413      	add	r3, r2
 800ae16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae1a:	691a      	ldr	r2, [r3, #16]
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae24:	69b9      	ldr	r1, [r7, #24]
 800ae26:	0148      	lsls	r0, r1, #5
 800ae28:	69f9      	ldr	r1, [r7, #28]
 800ae2a:	4401      	add	r1, r0
 800ae2c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ae30:	4313      	orrs	r3, r2
 800ae32:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	015a      	lsls	r2, r3, #5
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	69ba      	ldr	r2, [r7, #24]
 800ae44:	0151      	lsls	r1, r2, #5
 800ae46:	69fa      	ldr	r2, [r7, #28]
 800ae48:	440a      	add	r2, r1
 800ae4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae4e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ae52:	6113      	str	r3, [r2, #16]
 800ae54:	e037      	b.n	800aec6 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	691a      	ldr	r2, [r3, #16]
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	4413      	add	r3, r2
 800ae60:	1e5a      	subs	r2, r3, #1
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae6a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	8afa      	ldrh	r2, [r7, #22]
 800ae72:	fb03 f202 	mul.w	r2, r3, r2
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	015a      	lsls	r2, r3, #5
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	4413      	add	r3, r2
 800ae82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae86:	691a      	ldr	r2, [r3, #16]
 800ae88:	8afb      	ldrh	r3, [r7, #22]
 800ae8a:	04d9      	lsls	r1, r3, #19
 800ae8c:	4b39      	ldr	r3, [pc, #228]	@ (800af74 <USB_EPStartXfer+0x53c>)
 800ae8e:	400b      	ands	r3, r1
 800ae90:	69b9      	ldr	r1, [r7, #24]
 800ae92:	0148      	lsls	r0, r1, #5
 800ae94:	69f9      	ldr	r1, [r7, #28]
 800ae96:	4401      	add	r1, r0
 800ae98:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	015a      	lsls	r2, r3, #5
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	4413      	add	r3, r2
 800aea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeac:	691a      	ldr	r2, [r3, #16]
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	6a1b      	ldr	r3, [r3, #32]
 800aeb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aeb6:	69b9      	ldr	r1, [r7, #24]
 800aeb8:	0148      	lsls	r0, r1, #5
 800aeba:	69f9      	ldr	r1, [r7, #28]
 800aebc:	4401      	add	r1, r0
 800aebe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800aec2:	4313      	orrs	r3, r2
 800aec4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800aec6:	79fb      	ldrb	r3, [r7, #7]
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d10d      	bne.n	800aee8 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	68db      	ldr	r3, [r3, #12]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d009      	beq.n	800aee8 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	68d9      	ldr	r1, [r3, #12]
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	015a      	lsls	r2, r3, #5
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	4413      	add	r3, r2
 800aee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aee4:	460a      	mov	r2, r1
 800aee6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	791b      	ldrb	r3, [r3, #4]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d128      	bne.n	800af42 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aef0:	69fb      	ldr	r3, [r7, #28]
 800aef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d110      	bne.n	800af22 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	015a      	lsls	r2, r3, #5
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	4413      	add	r3, r2
 800af08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	69ba      	ldr	r2, [r7, #24]
 800af10:	0151      	lsls	r1, r2, #5
 800af12:	69fa      	ldr	r2, [r7, #28]
 800af14:	440a      	add	r2, r1
 800af16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af1a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800af1e:	6013      	str	r3, [r2, #0]
 800af20:	e00f      	b.n	800af42 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800af22:	69bb      	ldr	r3, [r7, #24]
 800af24:	015a      	lsls	r2, r3, #5
 800af26:	69fb      	ldr	r3, [r7, #28]
 800af28:	4413      	add	r3, r2
 800af2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	69ba      	ldr	r2, [r7, #24]
 800af32:	0151      	lsls	r1, r2, #5
 800af34:	69fa      	ldr	r2, [r7, #28]
 800af36:	440a      	add	r2, r1
 800af38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af40:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800af42:	69bb      	ldr	r3, [r7, #24]
 800af44:	015a      	lsls	r2, r3, #5
 800af46:	69fb      	ldr	r3, [r7, #28]
 800af48:	4413      	add	r3, r2
 800af4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	69ba      	ldr	r2, [r7, #24]
 800af52:	0151      	lsls	r1, r2, #5
 800af54:	69fa      	ldr	r2, [r7, #28]
 800af56:	440a      	add	r2, r1
 800af58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af5c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800af60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af62:	2300      	movs	r3, #0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3720      	adds	r7, #32
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	fff80000 	.word	0xfff80000
 800af70:	e007ffff 	.word	0xe007ffff
 800af74:	1ff80000 	.word	0x1ff80000

0800af78 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800af78:	b480      	push	{r7}
 800af7a:	b087      	sub	sp, #28
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800af82:	2300      	movs	r3, #0
 800af84:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800af86:	2300      	movs	r3, #0
 800af88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	785b      	ldrb	r3, [r3, #1]
 800af92:	2b01      	cmp	r3, #1
 800af94:	d14a      	bne.n	800b02c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	015a      	lsls	r2, r3, #5
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	4413      	add	r3, r2
 800afa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800afaa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800afae:	f040 8086 	bne.w	800b0be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	015a      	lsls	r2, r3, #5
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	4413      	add	r3, r2
 800afbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	683a      	ldr	r2, [r7, #0]
 800afc4:	7812      	ldrb	r2, [r2, #0]
 800afc6:	0151      	lsls	r1, r2, #5
 800afc8:	693a      	ldr	r2, [r7, #16]
 800afca:	440a      	add	r2, r1
 800afcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afd0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800afd4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	015a      	lsls	r2, r3, #5
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	4413      	add	r3, r2
 800afe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	683a      	ldr	r2, [r7, #0]
 800afe8:	7812      	ldrb	r2, [r2, #0]
 800afea:	0151      	lsls	r1, r2, #5
 800afec:	693a      	ldr	r2, [r7, #16]
 800afee:	440a      	add	r2, r1
 800aff0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aff4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aff8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	3301      	adds	r3, #1
 800affe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b006:	4293      	cmp	r3, r2
 800b008:	d902      	bls.n	800b010 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b00a:	2301      	movs	r3, #1
 800b00c:	75fb      	strb	r3, [r7, #23]
          break;
 800b00e:	e056      	b.n	800b0be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	015a      	lsls	r2, r3, #5
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	4413      	add	r3, r2
 800b01a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b024:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b028:	d0e7      	beq.n	800affa <USB_EPStopXfer+0x82>
 800b02a:	e048      	b.n	800b0be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	015a      	lsls	r2, r3, #5
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	4413      	add	r3, r2
 800b036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b040:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b044:	d13b      	bne.n	800b0be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	015a      	lsls	r2, r3, #5
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	4413      	add	r3, r2
 800b050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	683a      	ldr	r2, [r7, #0]
 800b058:	7812      	ldrb	r2, [r2, #0]
 800b05a:	0151      	lsls	r1, r2, #5
 800b05c:	693a      	ldr	r2, [r7, #16]
 800b05e:	440a      	add	r2, r1
 800b060:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b064:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b068:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	015a      	lsls	r2, r3, #5
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	4413      	add	r3, r2
 800b074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	683a      	ldr	r2, [r7, #0]
 800b07c:	7812      	ldrb	r2, [r2, #0]
 800b07e:	0151      	lsls	r1, r2, #5
 800b080:	693a      	ldr	r2, [r7, #16]
 800b082:	440a      	add	r2, r1
 800b084:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b088:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b08c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	3301      	adds	r3, #1
 800b092:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d902      	bls.n	800b0a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	75fb      	strb	r3, [r7, #23]
          break;
 800b0a2:	e00c      	b.n	800b0be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	015a      	lsls	r2, r3, #5
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b0b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b0bc:	d0e7      	beq.n	800b08e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b0be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	371c      	adds	r7, #28
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b089      	sub	sp, #36	@ 0x24
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	4611      	mov	r1, r2
 800b0d8:	461a      	mov	r2, r3
 800b0da:	460b      	mov	r3, r1
 800b0dc:	71fb      	strb	r3, [r7, #7]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b0ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d123      	bne.n	800b13a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b0f2:	88bb      	ldrh	r3, [r7, #4]
 800b0f4:	3303      	adds	r3, #3
 800b0f6:	089b      	lsrs	r3, r3, #2
 800b0f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	61bb      	str	r3, [r7, #24]
 800b0fe:	e018      	b.n	800b132 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b100:	79fb      	ldrb	r3, [r7, #7]
 800b102:	031a      	lsls	r2, r3, #12
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	4413      	add	r3, r2
 800b108:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b10c:	461a      	mov	r2, r3
 800b10e:	69fb      	ldr	r3, [r7, #28]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	3301      	adds	r3, #1
 800b118:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	3301      	adds	r3, #1
 800b11e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b120:	69fb      	ldr	r3, [r7, #28]
 800b122:	3301      	adds	r3, #1
 800b124:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	3301      	adds	r3, #1
 800b12a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b12c:	69bb      	ldr	r3, [r7, #24]
 800b12e:	3301      	adds	r3, #1
 800b130:	61bb      	str	r3, [r7, #24]
 800b132:	69ba      	ldr	r2, [r7, #24]
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	429a      	cmp	r2, r3
 800b138:	d3e2      	bcc.n	800b100 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b13a:	2300      	movs	r3, #0
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3724      	adds	r7, #36	@ 0x24
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr

0800b148 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b148:	b480      	push	{r7}
 800b14a:	b08b      	sub	sp, #44	@ 0x2c
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	4613      	mov	r3, r2
 800b154:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b15e:	88fb      	ldrh	r3, [r7, #6]
 800b160:	089b      	lsrs	r3, r3, #2
 800b162:	b29b      	uxth	r3, r3
 800b164:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b166:	88fb      	ldrh	r3, [r7, #6]
 800b168:	f003 0303 	and.w	r3, r3, #3
 800b16c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b16e:	2300      	movs	r3, #0
 800b170:	623b      	str	r3, [r7, #32]
 800b172:	e014      	b.n	800b19e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17e:	601a      	str	r2, [r3, #0]
    pDest++;
 800b180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b182:	3301      	adds	r3, #1
 800b184:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b188:	3301      	adds	r3, #1
 800b18a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b18e:	3301      	adds	r3, #1
 800b190:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b194:	3301      	adds	r3, #1
 800b196:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b198:	6a3b      	ldr	r3, [r7, #32]
 800b19a:	3301      	adds	r3, #1
 800b19c:	623b      	str	r3, [r7, #32]
 800b19e:	6a3a      	ldr	r2, [r7, #32]
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d3e6      	bcc.n	800b174 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b1a6:	8bfb      	ldrh	r3, [r7, #30]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d01e      	beq.n	800b1ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b1b0:	69bb      	ldr	r3, [r7, #24]
 800b1b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	f107 0310 	add.w	r3, r7, #16
 800b1bc:	6812      	ldr	r2, [r2, #0]
 800b1be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b1c0:	693a      	ldr	r2, [r7, #16]
 800b1c2:	6a3b      	ldr	r3, [r7, #32]
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	00db      	lsls	r3, r3, #3
 800b1c8:	fa22 f303 	lsr.w	r3, r2, r3
 800b1cc:	b2da      	uxtb	r2, r3
 800b1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d0:	701a      	strb	r2, [r3, #0]
      i++;
 800b1d2:	6a3b      	ldr	r3, [r7, #32]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	623b      	str	r3, [r7, #32]
      pDest++;
 800b1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1da:	3301      	adds	r3, #1
 800b1dc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b1de:	8bfb      	ldrh	r3, [r7, #30]
 800b1e0:	3b01      	subs	r3, #1
 800b1e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b1e4:	8bfb      	ldrh	r3, [r7, #30]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d1ea      	bne.n	800b1c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	372c      	adds	r7, #44	@ 0x2c
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b085      	sub	sp, #20
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	785b      	ldrb	r3, [r3, #1]
 800b210:	2b01      	cmp	r3, #1
 800b212:	d12c      	bne.n	800b26e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	015a      	lsls	r2, r3, #5
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	4413      	add	r3, r2
 800b21c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	db12      	blt.n	800b24c <USB_EPSetStall+0x54>
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d00f      	beq.n	800b24c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	015a      	lsls	r2, r3, #5
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	4413      	add	r3, r2
 800b234:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	68ba      	ldr	r2, [r7, #8]
 800b23c:	0151      	lsls	r1, r2, #5
 800b23e:	68fa      	ldr	r2, [r7, #12]
 800b240:	440a      	add	r2, r1
 800b242:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b246:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b24a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	015a      	lsls	r2, r3, #5
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	4413      	add	r3, r2
 800b254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68ba      	ldr	r2, [r7, #8]
 800b25c:	0151      	lsls	r1, r2, #5
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	440a      	add	r2, r1
 800b262:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b266:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b26a:	6013      	str	r3, [r2, #0]
 800b26c:	e02b      	b.n	800b2c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	015a      	lsls	r2, r3, #5
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	4413      	add	r3, r2
 800b276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	db12      	blt.n	800b2a6 <USB_EPSetStall+0xae>
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d00f      	beq.n	800b2a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	015a      	lsls	r2, r3, #5
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	4413      	add	r3, r2
 800b28e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	68ba      	ldr	r2, [r7, #8]
 800b296:	0151      	lsls	r1, r2, #5
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	440a      	add	r2, r1
 800b29c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b2a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b2a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	015a      	lsls	r2, r3, #5
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	4413      	add	r3, r2
 800b2ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	68ba      	ldr	r2, [r7, #8]
 800b2b6:	0151      	lsls	r1, r2, #5
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	440a      	add	r2, r1
 800b2bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b2c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b2c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b2c6:	2300      	movs	r3, #0
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3714      	adds	r7, #20
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b085      	sub	sp, #20
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	785b      	ldrb	r3, [r3, #1]
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d128      	bne.n	800b342 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	015a      	lsls	r2, r3, #5
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	4413      	add	r3, r2
 800b2f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	68ba      	ldr	r2, [r7, #8]
 800b300:	0151      	lsls	r1, r2, #5
 800b302:	68fa      	ldr	r2, [r7, #12]
 800b304:	440a      	add	r2, r1
 800b306:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b30a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b30e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	791b      	ldrb	r3, [r3, #4]
 800b314:	2b03      	cmp	r3, #3
 800b316:	d003      	beq.n	800b320 <USB_EPClearStall+0x4c>
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	791b      	ldrb	r3, [r3, #4]
 800b31c:	2b02      	cmp	r3, #2
 800b31e:	d138      	bne.n	800b392 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	015a      	lsls	r2, r3, #5
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	4413      	add	r3, r2
 800b328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	68ba      	ldr	r2, [r7, #8]
 800b330:	0151      	lsls	r1, r2, #5
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	440a      	add	r2, r1
 800b336:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b33a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b33e:	6013      	str	r3, [r2, #0]
 800b340:	e027      	b.n	800b392 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	015a      	lsls	r2, r3, #5
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	4413      	add	r3, r2
 800b34a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	68ba      	ldr	r2, [r7, #8]
 800b352:	0151      	lsls	r1, r2, #5
 800b354:	68fa      	ldr	r2, [r7, #12]
 800b356:	440a      	add	r2, r1
 800b358:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b35c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b360:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	791b      	ldrb	r3, [r3, #4]
 800b366:	2b03      	cmp	r3, #3
 800b368:	d003      	beq.n	800b372 <USB_EPClearStall+0x9e>
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	791b      	ldrb	r3, [r3, #4]
 800b36e:	2b02      	cmp	r3, #2
 800b370:	d10f      	bne.n	800b392 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	015a      	lsls	r2, r3, #5
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	4413      	add	r3, r2
 800b37a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	68ba      	ldr	r2, [r7, #8]
 800b382:	0151      	lsls	r1, r2, #5
 800b384:	68fa      	ldr	r2, [r7, #12]
 800b386:	440a      	add	r2, r1
 800b388:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b38c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b390:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b392:	2300      	movs	r3, #0
}
 800b394:	4618      	mov	r0, r3
 800b396:	3714      	adds	r7, #20
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b085      	sub	sp, #20
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b3be:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b3c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	78fb      	ldrb	r3, [r7, #3]
 800b3ce:	011b      	lsls	r3, r3, #4
 800b3d0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b3d4:	68f9      	ldr	r1, [r7, #12]
 800b3d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b3de:	2300      	movs	r3, #0
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3714      	adds	r7, #20
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b406:	f023 0303 	bic.w	r3, r3, #3
 800b40a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b41a:	f023 0302 	bic.w	r3, r3, #2
 800b41e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	3714      	adds	r7, #20
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr

0800b42e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b42e:	b480      	push	{r7}
 800b430:	b085      	sub	sp, #20
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	68fa      	ldr	r2, [r7, #12]
 800b444:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b448:	f023 0303 	bic.w	r3, r3, #3
 800b44c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	68fa      	ldr	r2, [r7, #12]
 800b458:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b45c:	f043 0302 	orr.w	r3, r3, #2
 800b460:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b462:	2300      	movs	r3, #0
}
 800b464:	4618      	mov	r0, r3
 800b466:	3714      	adds	r7, #20
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	695b      	ldr	r3, [r3, #20]
 800b47c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	699b      	ldr	r3, [r3, #24]
 800b482:	68fa      	ldr	r2, [r7, #12]
 800b484:	4013      	ands	r3, r2
 800b486:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b488:	68fb      	ldr	r3, [r7, #12]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3714      	adds	r7, #20
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr

0800b496 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b496:	b480      	push	{r7}
 800b498:	b085      	sub	sp, #20
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4a8:	699b      	ldr	r3, [r3, #24]
 800b4aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4b2:	69db      	ldr	r3, [r3, #28]
 800b4b4:	68ba      	ldr	r2, [r7, #8]
 800b4b6:	4013      	ands	r3, r2
 800b4b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	0c1b      	lsrs	r3, r3, #16
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3714      	adds	r7, #20
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr

0800b4ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b4ca:	b480      	push	{r7}
 800b4cc:	b085      	sub	sp, #20
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4dc:	699b      	ldr	r3, [r3, #24]
 800b4de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4e6:	69db      	ldr	r3, [r3, #28]
 800b4e8:	68ba      	ldr	r2, [r7, #8]
 800b4ea:	4013      	ands	r3, r2
 800b4ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	b29b      	uxth	r3, r3
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3714      	adds	r7, #20
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr

0800b4fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b4fe:	b480      	push	{r7}
 800b500:	b085      	sub	sp, #20
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
 800b506:	460b      	mov	r3, r1
 800b508:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b50e:	78fb      	ldrb	r3, [r7, #3]
 800b510:	015a      	lsls	r2, r3, #5
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	4413      	add	r3, r2
 800b516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b524:	695b      	ldr	r3, [r3, #20]
 800b526:	68ba      	ldr	r2, [r7, #8]
 800b528:	4013      	ands	r3, r2
 800b52a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b52c:	68bb      	ldr	r3, [r7, #8]
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3714      	adds	r7, #20
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr

0800b53a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b53a:	b480      	push	{r7}
 800b53c:	b087      	sub	sp, #28
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
 800b542:	460b      	mov	r3, r1
 800b544:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b55a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b55c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b55e:	78fb      	ldrb	r3, [r7, #3]
 800b560:	f003 030f 	and.w	r3, r3, #15
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	fa22 f303 	lsr.w	r3, r2, r3
 800b56a:	01db      	lsls	r3, r3, #7
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	693a      	ldr	r2, [r7, #16]
 800b570:	4313      	orrs	r3, r2
 800b572:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b574:	78fb      	ldrb	r3, [r7, #3]
 800b576:	015a      	lsls	r2, r3, #5
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	4413      	add	r3, r2
 800b57c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	693a      	ldr	r2, [r7, #16]
 800b584:	4013      	ands	r3, r2
 800b586:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b588:	68bb      	ldr	r3, [r7, #8]
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	371c      	adds	r7, #28
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr

0800b596 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b596:	b480      	push	{r7}
 800b598:	b083      	sub	sp, #12
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	695b      	ldr	r3, [r3, #20]
 800b5a2:	f003 0301 	and.w	r3, r3, #1
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	370c      	adds	r7, #12
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr
	...

0800b5b4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b085      	sub	sp, #20
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	4b09      	ldr	r3, [pc, #36]	@ (800b5f8 <USB_ActivateSetup+0x44>)
 800b5d2:	4013      	ands	r3, r2
 800b5d4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	68fa      	ldr	r2, [r7, #12]
 800b5e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b5e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b5e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b5ea:	2300      	movs	r3, #0
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3714      	adds	r7, #20
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr
 800b5f8:	fffff800 	.word	0xfffff800

0800b5fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b087      	sub	sp, #28
 800b600:	af00      	add	r7, sp, #0
 800b602:	60f8      	str	r0, [r7, #12]
 800b604:	460b      	mov	r3, r1
 800b606:	607a      	str	r2, [r7, #4]
 800b608:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	333c      	adds	r3, #60	@ 0x3c
 800b612:	3304      	adds	r3, #4
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	4a26      	ldr	r2, [pc, #152]	@ (800b6b4 <USB_EP0_OutStart+0xb8>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d90a      	bls.n	800b636 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b62c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b630:	d101      	bne.n	800b636 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b632:	2300      	movs	r3, #0
 800b634:	e037      	b.n	800b6a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b63c:	461a      	mov	r2, r3
 800b63e:	2300      	movs	r3, #0
 800b640:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b648:	691b      	ldr	r3, [r3, #16]
 800b64a:	697a      	ldr	r2, [r7, #20]
 800b64c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b650:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b654:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b65c:	691b      	ldr	r3, [r3, #16]
 800b65e:	697a      	ldr	r2, [r7, #20]
 800b660:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b664:	f043 0318 	orr.w	r3, r3, #24
 800b668:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b670:	691b      	ldr	r3, [r3, #16]
 800b672:	697a      	ldr	r2, [r7, #20]
 800b674:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b678:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b67c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b67e:	7afb      	ldrb	r3, [r7, #11]
 800b680:	2b01      	cmp	r3, #1
 800b682:	d10f      	bne.n	800b6a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b68a:	461a      	mov	r2, r3
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	697a      	ldr	r2, [r7, #20]
 800b69a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b69e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b6a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	371c      	adds	r7, #28
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr
 800b6b2:	bf00      	nop
 800b6b4:	4f54300a 	.word	0x4f54300a

0800b6b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b085      	sub	sp, #20
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b6d0:	d901      	bls.n	800b6d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	e01b      	b.n	800b70e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	691b      	ldr	r3, [r3, #16]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	daf2      	bge.n	800b6c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	691b      	ldr	r3, [r3, #16]
 800b6e6:	f043 0201 	orr.w	r2, r3, #1
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b6fa:	d901      	bls.n	800b700 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b6fc:	2303      	movs	r3, #3
 800b6fe:	e006      	b.n	800b70e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	691b      	ldr	r3, [r3, #16]
 800b704:	f003 0301 	and.w	r3, r3, #1
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d0f0      	beq.n	800b6ee <USB_CoreReset+0x36>

  return HAL_OK;
 800b70c:	2300      	movs	r3, #0
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3714      	adds	r7, #20
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr
	...

0800b71c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	460b      	mov	r3, r1
 800b726:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b728:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b72c:	f002 fcee 	bl	800e10c <USBD_static_malloc>
 800b730:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d109      	bne.n	800b74c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	32b0      	adds	r2, #176	@ 0xb0
 800b742:	2100      	movs	r1, #0
 800b744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b748:	2302      	movs	r3, #2
 800b74a:	e0d4      	b.n	800b8f6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b74c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b750:	2100      	movs	r1, #0
 800b752:	68f8      	ldr	r0, [r7, #12]
 800b754:	f002 fd1e 	bl	800e194 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	32b0      	adds	r2, #176	@ 0xb0
 800b762:	68f9      	ldr	r1, [r7, #12]
 800b764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	32b0      	adds	r2, #176	@ 0xb0
 800b772:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	7c1b      	ldrb	r3, [r3, #16]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d138      	bne.n	800b7f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b784:	4b5e      	ldr	r3, [pc, #376]	@ (800b900 <USBD_CDC_Init+0x1e4>)
 800b786:	7819      	ldrb	r1, [r3, #0]
 800b788:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b78c:	2202      	movs	r2, #2
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f002 fb99 	bl	800dec6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b794:	4b5a      	ldr	r3, [pc, #360]	@ (800b900 <USBD_CDC_Init+0x1e4>)
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	f003 020f 	and.w	r2, r3, #15
 800b79c:	6879      	ldr	r1, [r7, #4]
 800b79e:	4613      	mov	r3, r2
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	4413      	add	r3, r2
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	440b      	add	r3, r1
 800b7a8:	3324      	adds	r3, #36	@ 0x24
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b7ae:	4b55      	ldr	r3, [pc, #340]	@ (800b904 <USBD_CDC_Init+0x1e8>)
 800b7b0:	7819      	ldrb	r1, [r3, #0]
 800b7b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b7b6:	2202      	movs	r2, #2
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f002 fb84 	bl	800dec6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b7be:	4b51      	ldr	r3, [pc, #324]	@ (800b904 <USBD_CDC_Init+0x1e8>)
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	f003 020f 	and.w	r2, r3, #15
 800b7c6:	6879      	ldr	r1, [r7, #4]
 800b7c8:	4613      	mov	r3, r2
 800b7ca:	009b      	lsls	r3, r3, #2
 800b7cc:	4413      	add	r3, r2
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	440b      	add	r3, r1
 800b7d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b7da:	4b4b      	ldr	r3, [pc, #300]	@ (800b908 <USBD_CDC_Init+0x1ec>)
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	f003 020f 	and.w	r2, r3, #15
 800b7e2:	6879      	ldr	r1, [r7, #4]
 800b7e4:	4613      	mov	r3, r2
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	4413      	add	r3, r2
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	440b      	add	r3, r1
 800b7ee:	3326      	adds	r3, #38	@ 0x26
 800b7f0:	2210      	movs	r2, #16
 800b7f2:	801a      	strh	r2, [r3, #0]
 800b7f4:	e035      	b.n	800b862 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b7f6:	4b42      	ldr	r3, [pc, #264]	@ (800b900 <USBD_CDC_Init+0x1e4>)
 800b7f8:	7819      	ldrb	r1, [r3, #0]
 800b7fa:	2340      	movs	r3, #64	@ 0x40
 800b7fc:	2202      	movs	r2, #2
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f002 fb61 	bl	800dec6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b804:	4b3e      	ldr	r3, [pc, #248]	@ (800b900 <USBD_CDC_Init+0x1e4>)
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	f003 020f 	and.w	r2, r3, #15
 800b80c:	6879      	ldr	r1, [r7, #4]
 800b80e:	4613      	mov	r3, r2
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	4413      	add	r3, r2
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	440b      	add	r3, r1
 800b818:	3324      	adds	r3, #36	@ 0x24
 800b81a:	2201      	movs	r2, #1
 800b81c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b81e:	4b39      	ldr	r3, [pc, #228]	@ (800b904 <USBD_CDC_Init+0x1e8>)
 800b820:	7819      	ldrb	r1, [r3, #0]
 800b822:	2340      	movs	r3, #64	@ 0x40
 800b824:	2202      	movs	r2, #2
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f002 fb4d 	bl	800dec6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b82c:	4b35      	ldr	r3, [pc, #212]	@ (800b904 <USBD_CDC_Init+0x1e8>)
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	f003 020f 	and.w	r2, r3, #15
 800b834:	6879      	ldr	r1, [r7, #4]
 800b836:	4613      	mov	r3, r2
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	4413      	add	r3, r2
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	440b      	add	r3, r1
 800b840:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b844:	2201      	movs	r2, #1
 800b846:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b848:	4b2f      	ldr	r3, [pc, #188]	@ (800b908 <USBD_CDC_Init+0x1ec>)
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	f003 020f 	and.w	r2, r3, #15
 800b850:	6879      	ldr	r1, [r7, #4]
 800b852:	4613      	mov	r3, r2
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	4413      	add	r3, r2
 800b858:	009b      	lsls	r3, r3, #2
 800b85a:	440b      	add	r3, r1
 800b85c:	3326      	adds	r3, #38	@ 0x26
 800b85e:	2210      	movs	r2, #16
 800b860:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b862:	4b29      	ldr	r3, [pc, #164]	@ (800b908 <USBD_CDC_Init+0x1ec>)
 800b864:	7819      	ldrb	r1, [r3, #0]
 800b866:	2308      	movs	r3, #8
 800b868:	2203      	movs	r2, #3
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f002 fb2b 	bl	800dec6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b870:	4b25      	ldr	r3, [pc, #148]	@ (800b908 <USBD_CDC_Init+0x1ec>)
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	f003 020f 	and.w	r2, r3, #15
 800b878:	6879      	ldr	r1, [r7, #4]
 800b87a:	4613      	mov	r3, r2
 800b87c:	009b      	lsls	r3, r3, #2
 800b87e:	4413      	add	r3, r2
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	440b      	add	r3, r1
 800b884:	3324      	adds	r3, #36	@ 0x24
 800b886:	2201      	movs	r2, #1
 800b888:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	33b0      	adds	r3, #176	@ 0xb0
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	4413      	add	r3, r2
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d101      	bne.n	800b8c4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b8c0:	2302      	movs	r3, #2
 800b8c2:	e018      	b.n	800b8f6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	7c1b      	ldrb	r3, [r3, #16]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d10a      	bne.n	800b8e2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b8cc:	4b0d      	ldr	r3, [pc, #52]	@ (800b904 <USBD_CDC_Init+0x1e8>)
 800b8ce:	7819      	ldrb	r1, [r3, #0]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b8d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f002 fbe2 	bl	800e0a4 <USBD_LL_PrepareReceive>
 800b8e0:	e008      	b.n	800b8f4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b8e2:	4b08      	ldr	r3, [pc, #32]	@ (800b904 <USBD_CDC_Init+0x1e8>)
 800b8e4:	7819      	ldrb	r1, [r3, #0]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b8ec:	2340      	movs	r3, #64	@ 0x40
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f002 fbd8 	bl	800e0a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	24000097 	.word	0x24000097
 800b904:	24000098 	.word	0x24000098
 800b908:	24000099 	.word	0x24000099

0800b90c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	460b      	mov	r3, r1
 800b916:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b918:	4b3a      	ldr	r3, [pc, #232]	@ (800ba04 <USBD_CDC_DeInit+0xf8>)
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	4619      	mov	r1, r3
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f002 faf7 	bl	800df12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b924:	4b37      	ldr	r3, [pc, #220]	@ (800ba04 <USBD_CDC_DeInit+0xf8>)
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	f003 020f 	and.w	r2, r3, #15
 800b92c:	6879      	ldr	r1, [r7, #4]
 800b92e:	4613      	mov	r3, r2
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	4413      	add	r3, r2
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	440b      	add	r3, r1
 800b938:	3324      	adds	r3, #36	@ 0x24
 800b93a:	2200      	movs	r2, #0
 800b93c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b93e:	4b32      	ldr	r3, [pc, #200]	@ (800ba08 <USBD_CDC_DeInit+0xfc>)
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	4619      	mov	r1, r3
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f002 fae4 	bl	800df12 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b94a:	4b2f      	ldr	r3, [pc, #188]	@ (800ba08 <USBD_CDC_DeInit+0xfc>)
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	f003 020f 	and.w	r2, r3, #15
 800b952:	6879      	ldr	r1, [r7, #4]
 800b954:	4613      	mov	r3, r2
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	4413      	add	r3, r2
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	440b      	add	r3, r1
 800b95e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b962:	2200      	movs	r2, #0
 800b964:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b966:	4b29      	ldr	r3, [pc, #164]	@ (800ba0c <USBD_CDC_DeInit+0x100>)
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	4619      	mov	r1, r3
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f002 fad0 	bl	800df12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b972:	4b26      	ldr	r3, [pc, #152]	@ (800ba0c <USBD_CDC_DeInit+0x100>)
 800b974:	781b      	ldrb	r3, [r3, #0]
 800b976:	f003 020f 	and.w	r2, r3, #15
 800b97a:	6879      	ldr	r1, [r7, #4]
 800b97c:	4613      	mov	r3, r2
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	4413      	add	r3, r2
 800b982:	009b      	lsls	r3, r3, #2
 800b984:	440b      	add	r3, r1
 800b986:	3324      	adds	r3, #36	@ 0x24
 800b988:	2200      	movs	r2, #0
 800b98a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b98c:	4b1f      	ldr	r3, [pc, #124]	@ (800ba0c <USBD_CDC_DeInit+0x100>)
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	f003 020f 	and.w	r2, r3, #15
 800b994:	6879      	ldr	r1, [r7, #4]
 800b996:	4613      	mov	r3, r2
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	4413      	add	r3, r2
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	440b      	add	r3, r1
 800b9a0:	3326      	adds	r3, #38	@ 0x26
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	32b0      	adds	r2, #176	@ 0xb0
 800b9b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d01f      	beq.n	800b9f8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	33b0      	adds	r3, #176	@ 0xb0
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	4413      	add	r3, r2
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	32b0      	adds	r2, #176	@ 0xb0
 800b9d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f002 fba4 	bl	800e128 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	32b0      	adds	r2, #176	@ 0xb0
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b9f8:	2300      	movs	r3, #0
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3708      	adds	r7, #8
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}
 800ba02:	bf00      	nop
 800ba04:	24000097 	.word	0x24000097
 800ba08:	24000098 	.word	0x24000098
 800ba0c:	24000099 	.word	0x24000099

0800ba10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	32b0      	adds	r2, #176	@ 0xb0
 800ba24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba28:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba32:	2300      	movs	r3, #0
 800ba34:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d101      	bne.n	800ba40 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ba3c:	2303      	movs	r3, #3
 800ba3e:	e0bf      	b.n	800bbc0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d050      	beq.n	800baee <USBD_CDC_Setup+0xde>
 800ba4c:	2b20      	cmp	r3, #32
 800ba4e:	f040 80af 	bne.w	800bbb0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	88db      	ldrh	r3, [r3, #6]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d03a      	beq.n	800bad0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	b25b      	sxtb	r3, r3
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	da1b      	bge.n	800ba9c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	33b0      	adds	r3, #176	@ 0xb0
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	4413      	add	r3, r2
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	689b      	ldr	r3, [r3, #8]
 800ba76:	683a      	ldr	r2, [r7, #0]
 800ba78:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ba7a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ba7c:	683a      	ldr	r2, [r7, #0]
 800ba7e:	88d2      	ldrh	r2, [r2, #6]
 800ba80:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	88db      	ldrh	r3, [r3, #6]
 800ba86:	2b07      	cmp	r3, #7
 800ba88:	bf28      	it	cs
 800ba8a:	2307      	movcs	r3, #7
 800ba8c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	89fa      	ldrh	r2, [r7, #14]
 800ba92:	4619      	mov	r1, r3
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f001 fdbd 	bl	800d614 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ba9a:	e090      	b.n	800bbbe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	785a      	ldrb	r2, [r3, #1]
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	88db      	ldrh	r3, [r3, #6]
 800baaa:	2b3f      	cmp	r3, #63	@ 0x3f
 800baac:	d803      	bhi.n	800bab6 <USBD_CDC_Setup+0xa6>
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	88db      	ldrh	r3, [r3, #6]
 800bab2:	b2da      	uxtb	r2, r3
 800bab4:	e000      	b.n	800bab8 <USBD_CDC_Setup+0xa8>
 800bab6:	2240      	movs	r2, #64	@ 0x40
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800babe:	6939      	ldr	r1, [r7, #16]
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800bac6:	461a      	mov	r2, r3
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f001 fdcf 	bl	800d66c <USBD_CtlPrepareRx>
      break;
 800bace:	e076      	b.n	800bbbe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	33b0      	adds	r3, #176	@ 0xb0
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	4413      	add	r3, r2
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	683a      	ldr	r2, [r7, #0]
 800bae4:	7850      	ldrb	r0, [r2, #1]
 800bae6:	2200      	movs	r2, #0
 800bae8:	6839      	ldr	r1, [r7, #0]
 800baea:	4798      	blx	r3
      break;
 800baec:	e067      	b.n	800bbbe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	785b      	ldrb	r3, [r3, #1]
 800baf2:	2b0b      	cmp	r3, #11
 800baf4:	d851      	bhi.n	800bb9a <USBD_CDC_Setup+0x18a>
 800baf6:	a201      	add	r2, pc, #4	@ (adr r2, 800bafc <USBD_CDC_Setup+0xec>)
 800baf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bafc:	0800bb2d 	.word	0x0800bb2d
 800bb00:	0800bba9 	.word	0x0800bba9
 800bb04:	0800bb9b 	.word	0x0800bb9b
 800bb08:	0800bb9b 	.word	0x0800bb9b
 800bb0c:	0800bb9b 	.word	0x0800bb9b
 800bb10:	0800bb9b 	.word	0x0800bb9b
 800bb14:	0800bb9b 	.word	0x0800bb9b
 800bb18:	0800bb9b 	.word	0x0800bb9b
 800bb1c:	0800bb9b 	.word	0x0800bb9b
 800bb20:	0800bb9b 	.word	0x0800bb9b
 800bb24:	0800bb57 	.word	0x0800bb57
 800bb28:	0800bb81 	.word	0x0800bb81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	2b03      	cmp	r3, #3
 800bb36:	d107      	bne.n	800bb48 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bb38:	f107 030a 	add.w	r3, r7, #10
 800bb3c:	2202      	movs	r2, #2
 800bb3e:	4619      	mov	r1, r3
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f001 fd67 	bl	800d614 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb46:	e032      	b.n	800bbae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bb48:	6839      	ldr	r1, [r7, #0]
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f001 fce5 	bl	800d51a <USBD_CtlError>
            ret = USBD_FAIL;
 800bb50:	2303      	movs	r3, #3
 800bb52:	75fb      	strb	r3, [r7, #23]
          break;
 800bb54:	e02b      	b.n	800bbae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	2b03      	cmp	r3, #3
 800bb60:	d107      	bne.n	800bb72 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bb62:	f107 030d 	add.w	r3, r7, #13
 800bb66:	2201      	movs	r2, #1
 800bb68:	4619      	mov	r1, r3
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f001 fd52 	bl	800d614 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb70:	e01d      	b.n	800bbae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bb72:	6839      	ldr	r1, [r7, #0]
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f001 fcd0 	bl	800d51a <USBD_CtlError>
            ret = USBD_FAIL;
 800bb7a:	2303      	movs	r3, #3
 800bb7c:	75fb      	strb	r3, [r7, #23]
          break;
 800bb7e:	e016      	b.n	800bbae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	2b03      	cmp	r3, #3
 800bb8a:	d00f      	beq.n	800bbac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bb8c:	6839      	ldr	r1, [r7, #0]
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f001 fcc3 	bl	800d51a <USBD_CtlError>
            ret = USBD_FAIL;
 800bb94:	2303      	movs	r3, #3
 800bb96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bb98:	e008      	b.n	800bbac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bb9a:	6839      	ldr	r1, [r7, #0]
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f001 fcbc 	bl	800d51a <USBD_CtlError>
          ret = USBD_FAIL;
 800bba2:	2303      	movs	r3, #3
 800bba4:	75fb      	strb	r3, [r7, #23]
          break;
 800bba6:	e002      	b.n	800bbae <USBD_CDC_Setup+0x19e>
          break;
 800bba8:	bf00      	nop
 800bbaa:	e008      	b.n	800bbbe <USBD_CDC_Setup+0x1ae>
          break;
 800bbac:	bf00      	nop
      }
      break;
 800bbae:	e006      	b.n	800bbbe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bbb0:	6839      	ldr	r1, [r7, #0]
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f001 fcb1 	bl	800d51a <USBD_CtlError>
      ret = USBD_FAIL;
 800bbb8:	2303      	movs	r3, #3
 800bbba:	75fb      	strb	r3, [r7, #23]
      break;
 800bbbc:	bf00      	nop
  }

  return (uint8_t)ret;
 800bbbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3718      	adds	r7, #24
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bbda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	32b0      	adds	r2, #176	@ 0xb0
 800bbe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d101      	bne.n	800bbf2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bbee:	2303      	movs	r3, #3
 800bbf0:	e065      	b.n	800bcbe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	32b0      	adds	r2, #176	@ 0xb0
 800bbfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bc02:	78fb      	ldrb	r3, [r7, #3]
 800bc04:	f003 020f 	and.w	r2, r3, #15
 800bc08:	6879      	ldr	r1, [r7, #4]
 800bc0a:	4613      	mov	r3, r2
 800bc0c:	009b      	lsls	r3, r3, #2
 800bc0e:	4413      	add	r3, r2
 800bc10:	009b      	lsls	r3, r3, #2
 800bc12:	440b      	add	r3, r1
 800bc14:	3318      	adds	r3, #24
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d02f      	beq.n	800bc7c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bc1c:	78fb      	ldrb	r3, [r7, #3]
 800bc1e:	f003 020f 	and.w	r2, r3, #15
 800bc22:	6879      	ldr	r1, [r7, #4]
 800bc24:	4613      	mov	r3, r2
 800bc26:	009b      	lsls	r3, r3, #2
 800bc28:	4413      	add	r3, r2
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	440b      	add	r3, r1
 800bc2e:	3318      	adds	r3, #24
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	78fb      	ldrb	r3, [r7, #3]
 800bc34:	f003 010f 	and.w	r1, r3, #15
 800bc38:	68f8      	ldr	r0, [r7, #12]
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	00db      	lsls	r3, r3, #3
 800bc3e:	440b      	add	r3, r1
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	4403      	add	r3, r0
 800bc44:	331c      	adds	r3, #28
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	fbb2 f1f3 	udiv	r1, r2, r3
 800bc4c:	fb01 f303 	mul.w	r3, r1, r3
 800bc50:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d112      	bne.n	800bc7c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bc56:	78fb      	ldrb	r3, [r7, #3]
 800bc58:	f003 020f 	and.w	r2, r3, #15
 800bc5c:	6879      	ldr	r1, [r7, #4]
 800bc5e:	4613      	mov	r3, r2
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	4413      	add	r3, r2
 800bc64:	009b      	lsls	r3, r3, #2
 800bc66:	440b      	add	r3, r1
 800bc68:	3318      	adds	r3, #24
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bc6e:	78f9      	ldrb	r1, [r7, #3]
 800bc70:	2300      	movs	r3, #0
 800bc72:	2200      	movs	r2, #0
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f002 f9f4 	bl	800e062 <USBD_LL_Transmit>
 800bc7a:	e01f      	b.n	800bcbc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	33b0      	adds	r3, #176	@ 0xb0
 800bc8e:	009b      	lsls	r3, r3, #2
 800bc90:	4413      	add	r3, r2
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	691b      	ldr	r3, [r3, #16]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d010      	beq.n	800bcbc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	33b0      	adds	r3, #176	@ 0xb0
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	4413      	add	r3, r2
 800bca8:	685b      	ldr	r3, [r3, #4]
 800bcaa:	691b      	ldr	r3, [r3, #16]
 800bcac:	68ba      	ldr	r2, [r7, #8]
 800bcae:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800bcb2:	68ba      	ldr	r2, [r7, #8]
 800bcb4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800bcb8:	78fa      	ldrb	r2, [r7, #3]
 800bcba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bcbc:	2300      	movs	r3, #0
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3710      	adds	r7, #16
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}

0800bcc6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bcc6:	b580      	push	{r7, lr}
 800bcc8:	b084      	sub	sp, #16
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]
 800bcce:	460b      	mov	r3, r1
 800bcd0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	32b0      	adds	r2, #176	@ 0xb0
 800bcdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bce0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	32b0      	adds	r2, #176	@ 0xb0
 800bcec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d101      	bne.n	800bcf8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bcf4:	2303      	movs	r3, #3
 800bcf6:	e01a      	b.n	800bd2e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bcf8:	78fb      	ldrb	r3, [r7, #3]
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f002 f9f2 	bl	800e0e6 <USBD_LL_GetRxDataSize>
 800bd02:	4602      	mov	r2, r0
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	33b0      	adds	r3, #176	@ 0xb0
 800bd14:	009b      	lsls	r3, r3, #2
 800bd16:	4413      	add	r3, r2
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	68fa      	ldr	r2, [r7, #12]
 800bd1e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800bd22:	68fa      	ldr	r2, [r7, #12]
 800bd24:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800bd28:	4611      	mov	r1, r2
 800bd2a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3710      	adds	r7, #16
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bd36:	b580      	push	{r7, lr}
 800bd38:	b084      	sub	sp, #16
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	32b0      	adds	r2, #176	@ 0xb0
 800bd48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d101      	bne.n	800bd58 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bd54:	2303      	movs	r3, #3
 800bd56:	e024      	b.n	800bda2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	33b0      	adds	r3, #176	@ 0xb0
 800bd62:	009b      	lsls	r3, r3, #2
 800bd64:	4413      	add	r3, r2
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d019      	beq.n	800bda0 <USBD_CDC_EP0_RxReady+0x6a>
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800bd72:	2bff      	cmp	r3, #255	@ 0xff
 800bd74:	d014      	beq.n	800bda0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	33b0      	adds	r3, #176	@ 0xb0
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	4413      	add	r3, r2
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	689b      	ldr	r3, [r3, #8]
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800bd8e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bd96:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	22ff      	movs	r2, #255	@ 0xff
 800bd9c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800bda0:	2300      	movs	r3, #0
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3710      	adds	r7, #16
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
	...

0800bdac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b086      	sub	sp, #24
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bdb4:	2182      	movs	r1, #130	@ 0x82
 800bdb6:	4818      	ldr	r0, [pc, #96]	@ (800be18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bdb8:	f000 fd4f 	bl	800c85a <USBD_GetEpDesc>
 800bdbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bdbe:	2101      	movs	r1, #1
 800bdc0:	4815      	ldr	r0, [pc, #84]	@ (800be18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bdc2:	f000 fd4a 	bl	800c85a <USBD_GetEpDesc>
 800bdc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bdc8:	2181      	movs	r1, #129	@ 0x81
 800bdca:	4813      	ldr	r0, [pc, #76]	@ (800be18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bdcc:	f000 fd45 	bl	800c85a <USBD_GetEpDesc>
 800bdd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d002      	beq.n	800bdde <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	2210      	movs	r2, #16
 800bddc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d006      	beq.n	800bdf2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	2200      	movs	r2, #0
 800bde8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bdec:	711a      	strb	r2, [r3, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d006      	beq.n	800be06 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800be00:	711a      	strb	r2, [r3, #4]
 800be02:	2200      	movs	r2, #0
 800be04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2243      	movs	r2, #67	@ 0x43
 800be0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800be0c:	4b02      	ldr	r3, [pc, #8]	@ (800be18 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3718      	adds	r7, #24
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	24000054 	.word	0x24000054

0800be1c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b086      	sub	sp, #24
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800be24:	2182      	movs	r1, #130	@ 0x82
 800be26:	4818      	ldr	r0, [pc, #96]	@ (800be88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800be28:	f000 fd17 	bl	800c85a <USBD_GetEpDesc>
 800be2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800be2e:	2101      	movs	r1, #1
 800be30:	4815      	ldr	r0, [pc, #84]	@ (800be88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800be32:	f000 fd12 	bl	800c85a <USBD_GetEpDesc>
 800be36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800be38:	2181      	movs	r1, #129	@ 0x81
 800be3a:	4813      	ldr	r0, [pc, #76]	@ (800be88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800be3c:	f000 fd0d 	bl	800c85a <USBD_GetEpDesc>
 800be40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d002      	beq.n	800be4e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	2210      	movs	r2, #16
 800be4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d006      	beq.n	800be62 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	2200      	movs	r2, #0
 800be58:	711a      	strb	r2, [r3, #4]
 800be5a:	2200      	movs	r2, #0
 800be5c:	f042 0202 	orr.w	r2, r2, #2
 800be60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d006      	beq.n	800be76 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2200      	movs	r2, #0
 800be6c:	711a      	strb	r2, [r3, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	f042 0202 	orr.w	r2, r2, #2
 800be74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2243      	movs	r2, #67	@ 0x43
 800be7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800be7c:	4b02      	ldr	r3, [pc, #8]	@ (800be88 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3718      	adds	r7, #24
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	24000054 	.word	0x24000054

0800be8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b086      	sub	sp, #24
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800be94:	2182      	movs	r1, #130	@ 0x82
 800be96:	4818      	ldr	r0, [pc, #96]	@ (800bef8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800be98:	f000 fcdf 	bl	800c85a <USBD_GetEpDesc>
 800be9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800be9e:	2101      	movs	r1, #1
 800bea0:	4815      	ldr	r0, [pc, #84]	@ (800bef8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bea2:	f000 fcda 	bl	800c85a <USBD_GetEpDesc>
 800bea6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bea8:	2181      	movs	r1, #129	@ 0x81
 800beaa:	4813      	ldr	r0, [pc, #76]	@ (800bef8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800beac:	f000 fcd5 	bl	800c85a <USBD_GetEpDesc>
 800beb0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d002      	beq.n	800bebe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	2210      	movs	r2, #16
 800bebc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d006      	beq.n	800bed2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	2200      	movs	r2, #0
 800bec8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800becc:	711a      	strb	r2, [r3, #4]
 800bece:	2200      	movs	r2, #0
 800bed0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d006      	beq.n	800bee6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2200      	movs	r2, #0
 800bedc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bee0:	711a      	strb	r2, [r3, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2243      	movs	r2, #67	@ 0x43
 800beea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800beec:	4b02      	ldr	r3, [pc, #8]	@ (800bef8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3718      	adds	r7, #24
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	24000054 	.word	0x24000054

0800befc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800befc:	b480      	push	{r7}
 800befe:	b083      	sub	sp, #12
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	220a      	movs	r2, #10
 800bf08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bf0a:	4b03      	ldr	r3, [pc, #12]	@ (800bf18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	370c      	adds	r7, #12
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr
 800bf18:	24000010 	.word	0x24000010

0800bf1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b083      	sub	sp, #12
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d101      	bne.n	800bf30 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bf2c:	2303      	movs	r3, #3
 800bf2e:	e009      	b.n	800bf44 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	33b0      	adds	r3, #176	@ 0xb0
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	4413      	add	r3, r2
 800bf3e:	683a      	ldr	r2, [r7, #0]
 800bf40:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bf42:	2300      	movs	r3, #0
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	370c      	adds	r7, #12
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr

0800bf50 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b087      	sub	sp, #28
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	60b9      	str	r1, [r7, #8]
 800bf5a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	32b0      	adds	r2, #176	@ 0xb0
 800bf66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf6a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d101      	bne.n	800bf76 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bf72:	2303      	movs	r3, #3
 800bf74:	e008      	b.n	800bf88 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	68ba      	ldr	r2, [r7, #8]
 800bf7a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800bf86:	2300      	movs	r3, #0
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	371c      	adds	r7, #28
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b085      	sub	sp, #20
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	32b0      	adds	r2, #176	@ 0xb0
 800bfa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d101      	bne.n	800bfb8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bfb4:	2303      	movs	r3, #3
 800bfb6:	e004      	b.n	800bfc2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	683a      	ldr	r2, [r7, #0]
 800bfbc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800bfc0:	2300      	movs	r3, #0
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3714      	adds	r7, #20
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr
	...

0800bfd0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b084      	sub	sp, #16
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	32b0      	adds	r2, #176	@ 0xb0
 800bfe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfe6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800bfe8:	2301      	movs	r3, #1
 800bfea:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d101      	bne.n	800bff6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bff2:	2303      	movs	r3, #3
 800bff4:	e025      	b.n	800c042 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d11f      	bne.n	800c040 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	2201      	movs	r2, #1
 800c004:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c008:	4b10      	ldr	r3, [pc, #64]	@ (800c04c <USBD_CDC_TransmitPacket+0x7c>)
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	f003 020f 	and.w	r2, r3, #15
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	4613      	mov	r3, r2
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	4413      	add	r3, r2
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	4403      	add	r3, r0
 800c022:	3318      	adds	r3, #24
 800c024:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c026:	4b09      	ldr	r3, [pc, #36]	@ (800c04c <USBD_CDC_TransmitPacket+0x7c>)
 800c028:	7819      	ldrb	r1, [r3, #0]
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f002 f813 	bl	800e062 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c03c:	2300      	movs	r3, #0
 800c03e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c040:	7bfb      	ldrb	r3, [r7, #15]
}
 800c042:	4618      	mov	r0, r3
 800c044:	3710      	adds	r7, #16
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	24000097 	.word	0x24000097

0800c050 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	32b0      	adds	r2, #176	@ 0xb0
 800c062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c066:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	32b0      	adds	r2, #176	@ 0xb0
 800c072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d101      	bne.n	800c07e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c07a:	2303      	movs	r3, #3
 800c07c:	e018      	b.n	800c0b0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	7c1b      	ldrb	r3, [r3, #16]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d10a      	bne.n	800c09c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c086:	4b0c      	ldr	r3, [pc, #48]	@ (800c0b8 <USBD_CDC_ReceivePacket+0x68>)
 800c088:	7819      	ldrb	r1, [r3, #0]
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c090:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f002 f805 	bl	800e0a4 <USBD_LL_PrepareReceive>
 800c09a:	e008      	b.n	800c0ae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c09c:	4b06      	ldr	r3, [pc, #24]	@ (800c0b8 <USBD_CDC_ReceivePacket+0x68>)
 800c09e:	7819      	ldrb	r1, [r3, #0]
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c0a6:	2340      	movs	r3, #64	@ 0x40
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f001 fffb 	bl	800e0a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c0ae:	2300      	movs	r3, #0
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3710      	adds	r7, #16
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}
 800c0b8:	24000098 	.word	0x24000098

0800c0bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b086      	sub	sp, #24
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	60b9      	str	r1, [r7, #8]
 800c0c6:	4613      	mov	r3, r2
 800c0c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d101      	bne.n	800c0d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c0d0:	2303      	movs	r3, #3
 800c0d2:	e01f      	b.n	800c114 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d003      	beq.n	800c0fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	68ba      	ldr	r2, [r7, #8]
 800c0f6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	79fa      	ldrb	r2, [r7, #7]
 800c106:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c108:	68f8      	ldr	r0, [r7, #12]
 800c10a:	f001 fe71 	bl	800ddf0 <USBD_LL_Init>
 800c10e:	4603      	mov	r3, r0
 800c110:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c112:	7dfb      	ldrb	r3, [r7, #23]
}
 800c114:	4618      	mov	r0, r3
 800c116:	3718      	adds	r7, #24
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c126:	2300      	movs	r3, #0
 800c128:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d101      	bne.n	800c134 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c130:	2303      	movs	r3, #3
 800c132:	e025      	b.n	800c180 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	683a      	ldr	r2, [r7, #0]
 800c138:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	32ae      	adds	r2, #174	@ 0xae
 800c146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c14a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d00f      	beq.n	800c170 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	32ae      	adds	r2, #174	@ 0xae
 800c15a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c15e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c160:	f107 020e 	add.w	r2, r7, #14
 800c164:	4610      	mov	r0, r2
 800c166:	4798      	blx	r3
 800c168:	4602      	mov	r2, r0
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c176:	1c5a      	adds	r2, r3, #1
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c17e:	2300      	movs	r3, #0
}
 800c180:	4618      	mov	r0, r3
 800c182:	3710      	adds	r7, #16
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f001 fe7d 	bl	800de90 <USBD_LL_Start>
 800c196:	4603      	mov	r3, r0
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b083      	sub	sp, #12
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c1a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	370c      	adds	r7, #12
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr

0800c1b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c1b6:	b580      	push	{r7, lr}
 800c1b8:	b084      	sub	sp, #16
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
 800c1be:	460b      	mov	r3, r1
 800c1c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d009      	beq.n	800c1e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	78fa      	ldrb	r2, [r7, #3]
 800c1da:	4611      	mov	r1, r2
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	4798      	blx	r3
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c1e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3710      	adds	r7, #16
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b084      	sub	sp, #16
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	78fa      	ldrb	r2, [r7, #3]
 800c208:	4611      	mov	r1, r2
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	4798      	blx	r3
 800c20e:	4603      	mov	r3, r0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d001      	beq.n	800c218 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c214:	2303      	movs	r3, #3
 800c216:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c218:	7bfb      	ldrb	r3, [r7, #15]
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3710      	adds	r7, #16
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}

0800c222 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c222:	b580      	push	{r7, lr}
 800c224:	b084      	sub	sp, #16
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
 800c22a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c232:	6839      	ldr	r1, [r7, #0]
 800c234:	4618      	mov	r0, r3
 800c236:	f001 f936 	bl	800d4a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2201      	movs	r2, #1
 800c23e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c248:	461a      	mov	r2, r3
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c256:	f003 031f 	and.w	r3, r3, #31
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	d01a      	beq.n	800c294 <USBD_LL_SetupStage+0x72>
 800c25e:	2b02      	cmp	r3, #2
 800c260:	d822      	bhi.n	800c2a8 <USBD_LL_SetupStage+0x86>
 800c262:	2b00      	cmp	r3, #0
 800c264:	d002      	beq.n	800c26c <USBD_LL_SetupStage+0x4a>
 800c266:	2b01      	cmp	r3, #1
 800c268:	d00a      	beq.n	800c280 <USBD_LL_SetupStage+0x5e>
 800c26a:	e01d      	b.n	800c2a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c272:	4619      	mov	r1, r3
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 fb63 	bl	800c940 <USBD_StdDevReq>
 800c27a:	4603      	mov	r3, r0
 800c27c:	73fb      	strb	r3, [r7, #15]
      break;
 800c27e:	e020      	b.n	800c2c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c286:	4619      	mov	r1, r3
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f000 fbcb 	bl	800ca24 <USBD_StdItfReq>
 800c28e:	4603      	mov	r3, r0
 800c290:	73fb      	strb	r3, [r7, #15]
      break;
 800c292:	e016      	b.n	800c2c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c29a:	4619      	mov	r1, r3
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 fc2d 	bl	800cafc <USBD_StdEPReq>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	73fb      	strb	r3, [r7, #15]
      break;
 800c2a6:	e00c      	b.n	800c2c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c2ae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f001 fe4a 	bl	800df50 <USBD_LL_StallEP>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	73fb      	strb	r3, [r7, #15]
      break;
 800c2c0:	bf00      	nop
  }

  return ret;
 800c2c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3710      	adds	r7, #16
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b086      	sub	sp, #24
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	60f8      	str	r0, [r7, #12]
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	607a      	str	r2, [r7, #4]
 800c2d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c2de:	7afb      	ldrb	r3, [r7, #11]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d16e      	bne.n	800c3c2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c2ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c2f2:	2b03      	cmp	r3, #3
 800c2f4:	f040 8098 	bne.w	800c428 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	689a      	ldr	r2, [r3, #8]
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	429a      	cmp	r2, r3
 800c302:	d913      	bls.n	800c32c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	689a      	ldr	r2, [r3, #8]
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	68db      	ldr	r3, [r3, #12]
 800c30c:	1ad2      	subs	r2, r2, r3
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	68da      	ldr	r2, [r3, #12]
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	689b      	ldr	r3, [r3, #8]
 800c31a:	4293      	cmp	r3, r2
 800c31c:	bf28      	it	cs
 800c31e:	4613      	movcs	r3, r2
 800c320:	461a      	mov	r2, r3
 800c322:	6879      	ldr	r1, [r7, #4]
 800c324:	68f8      	ldr	r0, [r7, #12]
 800c326:	f001 f9be 	bl	800d6a6 <USBD_CtlContinueRx>
 800c32a:	e07d      	b.n	800c428 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c332:	f003 031f 	and.w	r3, r3, #31
 800c336:	2b02      	cmp	r3, #2
 800c338:	d014      	beq.n	800c364 <USBD_LL_DataOutStage+0x98>
 800c33a:	2b02      	cmp	r3, #2
 800c33c:	d81d      	bhi.n	800c37a <USBD_LL_DataOutStage+0xae>
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d002      	beq.n	800c348 <USBD_LL_DataOutStage+0x7c>
 800c342:	2b01      	cmp	r3, #1
 800c344:	d003      	beq.n	800c34e <USBD_LL_DataOutStage+0x82>
 800c346:	e018      	b.n	800c37a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c348:	2300      	movs	r3, #0
 800c34a:	75bb      	strb	r3, [r7, #22]
            break;
 800c34c:	e018      	b.n	800c380 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c354:	b2db      	uxtb	r3, r3
 800c356:	4619      	mov	r1, r3
 800c358:	68f8      	ldr	r0, [r7, #12]
 800c35a:	f000 fa64 	bl	800c826 <USBD_CoreFindIF>
 800c35e:	4603      	mov	r3, r0
 800c360:	75bb      	strb	r3, [r7, #22]
            break;
 800c362:	e00d      	b.n	800c380 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	4619      	mov	r1, r3
 800c36e:	68f8      	ldr	r0, [r7, #12]
 800c370:	f000 fa66 	bl	800c840 <USBD_CoreFindEP>
 800c374:	4603      	mov	r3, r0
 800c376:	75bb      	strb	r3, [r7, #22]
            break;
 800c378:	e002      	b.n	800c380 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c37a:	2300      	movs	r3, #0
 800c37c:	75bb      	strb	r3, [r7, #22]
            break;
 800c37e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c380:	7dbb      	ldrb	r3, [r7, #22]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d119      	bne.n	800c3ba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	2b03      	cmp	r3, #3
 800c390:	d113      	bne.n	800c3ba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c392:	7dba      	ldrb	r2, [r7, #22]
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	32ae      	adds	r2, #174	@ 0xae
 800c398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c39c:	691b      	ldr	r3, [r3, #16]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d00b      	beq.n	800c3ba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c3a2:	7dba      	ldrb	r2, [r7, #22]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c3aa:	7dba      	ldrb	r2, [r7, #22]
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	32ae      	adds	r2, #174	@ 0xae
 800c3b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3b4:	691b      	ldr	r3, [r3, #16]
 800c3b6:	68f8      	ldr	r0, [r7, #12]
 800c3b8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	f001 f984 	bl	800d6c8 <USBD_CtlSendStatus>
 800c3c0:	e032      	b.n	800c428 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c3c2:	7afb      	ldrb	r3, [r7, #11]
 800c3c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	68f8      	ldr	r0, [r7, #12]
 800c3ce:	f000 fa37 	bl	800c840 <USBD_CoreFindEP>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c3d6:	7dbb      	ldrb	r3, [r7, #22]
 800c3d8:	2bff      	cmp	r3, #255	@ 0xff
 800c3da:	d025      	beq.n	800c428 <USBD_LL_DataOutStage+0x15c>
 800c3dc:	7dbb      	ldrb	r3, [r7, #22]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d122      	bne.n	800c428 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3e8:	b2db      	uxtb	r3, r3
 800c3ea:	2b03      	cmp	r3, #3
 800c3ec:	d117      	bne.n	800c41e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c3ee:	7dba      	ldrb	r2, [r7, #22]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	32ae      	adds	r2, #174	@ 0xae
 800c3f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3f8:	699b      	ldr	r3, [r3, #24]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00f      	beq.n	800c41e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c3fe:	7dba      	ldrb	r2, [r7, #22]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c406:	7dba      	ldrb	r2, [r7, #22]
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	32ae      	adds	r2, #174	@ 0xae
 800c40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c410:	699b      	ldr	r3, [r3, #24]
 800c412:	7afa      	ldrb	r2, [r7, #11]
 800c414:	4611      	mov	r1, r2
 800c416:	68f8      	ldr	r0, [r7, #12]
 800c418:	4798      	blx	r3
 800c41a:	4603      	mov	r3, r0
 800c41c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c41e:	7dfb      	ldrb	r3, [r7, #23]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d001      	beq.n	800c428 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c424:	7dfb      	ldrb	r3, [r7, #23]
 800c426:	e000      	b.n	800c42a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c428:	2300      	movs	r3, #0
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3718      	adds	r7, #24
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c432:	b580      	push	{r7, lr}
 800c434:	b086      	sub	sp, #24
 800c436:	af00      	add	r7, sp, #0
 800c438:	60f8      	str	r0, [r7, #12]
 800c43a:	460b      	mov	r3, r1
 800c43c:	607a      	str	r2, [r7, #4]
 800c43e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c440:	7afb      	ldrb	r3, [r7, #11]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d16f      	bne.n	800c526 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	3314      	adds	r3, #20
 800c44a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c452:	2b02      	cmp	r3, #2
 800c454:	d15a      	bne.n	800c50c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	689a      	ldr	r2, [r3, #8]
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	68db      	ldr	r3, [r3, #12]
 800c45e:	429a      	cmp	r2, r3
 800c460:	d914      	bls.n	800c48c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	689a      	ldr	r2, [r3, #8]
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	68db      	ldr	r3, [r3, #12]
 800c46a:	1ad2      	subs	r2, r2, r3
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	689b      	ldr	r3, [r3, #8]
 800c474:	461a      	mov	r2, r3
 800c476:	6879      	ldr	r1, [r7, #4]
 800c478:	68f8      	ldr	r0, [r7, #12]
 800c47a:	f001 f8e6 	bl	800d64a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c47e:	2300      	movs	r3, #0
 800c480:	2200      	movs	r2, #0
 800c482:	2100      	movs	r1, #0
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	f001 fe0d 	bl	800e0a4 <USBD_LL_PrepareReceive>
 800c48a:	e03f      	b.n	800c50c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	68da      	ldr	r2, [r3, #12]
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	689b      	ldr	r3, [r3, #8]
 800c494:	429a      	cmp	r2, r3
 800c496:	d11c      	bne.n	800c4d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	685a      	ldr	r2, [r3, #4]
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d316      	bcc.n	800c4d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	685a      	ldr	r2, [r3, #4]
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d20f      	bcs.n	800c4d2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	2100      	movs	r1, #0
 800c4b6:	68f8      	ldr	r0, [r7, #12]
 800c4b8:	f001 f8c7 	bl	800d64a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	2100      	movs	r1, #0
 800c4ca:	68f8      	ldr	r0, [r7, #12]
 800c4cc:	f001 fdea 	bl	800e0a4 <USBD_LL_PrepareReceive>
 800c4d0:	e01c      	b.n	800c50c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	2b03      	cmp	r3, #3
 800c4dc:	d10f      	bne.n	800c4fe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d009      	beq.n	800c4fe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	68f8      	ldr	r0, [r7, #12]
 800c4fc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4fe:	2180      	movs	r1, #128	@ 0x80
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f001 fd25 	bl	800df50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c506:	68f8      	ldr	r0, [r7, #12]
 800c508:	f001 f8f1 	bl	800d6ee <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c512:	2b00      	cmp	r3, #0
 800c514:	d03a      	beq.n	800c58c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f7ff fe42 	bl	800c1a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2200      	movs	r2, #0
 800c520:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c524:	e032      	b.n	800c58c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c526:	7afb      	ldrb	r3, [r7, #11]
 800c528:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	4619      	mov	r1, r3
 800c530:	68f8      	ldr	r0, [r7, #12]
 800c532:	f000 f985 	bl	800c840 <USBD_CoreFindEP>
 800c536:	4603      	mov	r3, r0
 800c538:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c53a:	7dfb      	ldrb	r3, [r7, #23]
 800c53c:	2bff      	cmp	r3, #255	@ 0xff
 800c53e:	d025      	beq.n	800c58c <USBD_LL_DataInStage+0x15a>
 800c540:	7dfb      	ldrb	r3, [r7, #23]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d122      	bne.n	800c58c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c54c:	b2db      	uxtb	r3, r3
 800c54e:	2b03      	cmp	r3, #3
 800c550:	d11c      	bne.n	800c58c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c552:	7dfa      	ldrb	r2, [r7, #23]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	32ae      	adds	r2, #174	@ 0xae
 800c558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c55c:	695b      	ldr	r3, [r3, #20]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d014      	beq.n	800c58c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c562:	7dfa      	ldrb	r2, [r7, #23]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c56a:	7dfa      	ldrb	r2, [r7, #23]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	32ae      	adds	r2, #174	@ 0xae
 800c570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c574:	695b      	ldr	r3, [r3, #20]
 800c576:	7afa      	ldrb	r2, [r7, #11]
 800c578:	4611      	mov	r1, r2
 800c57a:	68f8      	ldr	r0, [r7, #12]
 800c57c:	4798      	blx	r3
 800c57e:	4603      	mov	r3, r0
 800c580:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c582:	7dbb      	ldrb	r3, [r7, #22]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d001      	beq.n	800c58c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c588:	7dbb      	ldrb	r3, [r7, #22]
 800c58a:	e000      	b.n	800c58e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c58c:	2300      	movs	r3, #0
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3718      	adds	r7, #24
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c596:	b580      	push	{r7, lr}
 800c598:	b084      	sub	sp, #16
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d014      	beq.n	800c5fc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d00e      	beq.n	800c5fc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	6852      	ldr	r2, [r2, #4]
 800c5ea:	b2d2      	uxtb	r2, r2
 800c5ec:	4611      	mov	r1, r2
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	4798      	blx	r3
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d001      	beq.n	800c5fc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c5fc:	2340      	movs	r3, #64	@ 0x40
 800c5fe:	2200      	movs	r2, #0
 800c600:	2100      	movs	r1, #0
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f001 fc5f 	bl	800dec6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2201      	movs	r2, #1
 800c60c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2240      	movs	r2, #64	@ 0x40
 800c614:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c618:	2340      	movs	r3, #64	@ 0x40
 800c61a:	2200      	movs	r2, #0
 800c61c:	2180      	movs	r1, #128	@ 0x80
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f001 fc51 	bl	800dec6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2201      	movs	r2, #1
 800c628:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2240      	movs	r2, #64	@ 0x40
 800c62e:	621a      	str	r2, [r3, #32]

  return ret;
 800c630:	7bfb      	ldrb	r3, [r7, #15]
}
 800c632:	4618      	mov	r0, r3
 800c634:	3710      	adds	r7, #16
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}

0800c63a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c63a:	b480      	push	{r7}
 800c63c:	b083      	sub	sp, #12
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
 800c642:	460b      	mov	r3, r1
 800c644:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	78fa      	ldrb	r2, [r7, #3]
 800c64a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c64c:	2300      	movs	r3, #0
}
 800c64e:	4618      	mov	r0, r3
 800c650:	370c      	adds	r7, #12
 800c652:	46bd      	mov	sp, r7
 800c654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c658:	4770      	bx	lr

0800c65a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c65a:	b480      	push	{r7}
 800c65c:	b083      	sub	sp, #12
 800c65e:	af00      	add	r7, sp, #0
 800c660:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	2b04      	cmp	r3, #4
 800c66c:	d006      	beq.n	800c67c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c674:	b2da      	uxtb	r2, r3
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2204      	movs	r2, #4
 800c680:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c684:	2300      	movs	r3, #0
}
 800c686:	4618      	mov	r0, r3
 800c688:	370c      	adds	r7, #12
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr

0800c692 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c692:	b480      	push	{r7}
 800c694:	b083      	sub	sp, #12
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6a0:	b2db      	uxtb	r3, r3
 800c6a2:	2b04      	cmp	r3, #4
 800c6a4:	d106      	bne.n	800c6b4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c6ac:	b2da      	uxtb	r2, r3
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c6b4:	2300      	movs	r3, #0
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	370c      	adds	r7, #12
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr

0800c6c2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c6c2:	b580      	push	{r7, lr}
 800c6c4:	b082      	sub	sp, #8
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6d0:	b2db      	uxtb	r3, r3
 800c6d2:	2b03      	cmp	r3, #3
 800c6d4:	d110      	bne.n	800c6f8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d00b      	beq.n	800c6f8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6e6:	69db      	ldr	r3, [r3, #28]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d005      	beq.n	800c6f8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6f2:	69db      	ldr	r3, [r3, #28]
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c6f8:	2300      	movs	r3, #0
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3708      	adds	r7, #8
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}

0800c702 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c702:	b580      	push	{r7, lr}
 800c704:	b082      	sub	sp, #8
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]
 800c70a:	460b      	mov	r3, r1
 800c70c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	32ae      	adds	r2, #174	@ 0xae
 800c718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d101      	bne.n	800c724 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c720:	2303      	movs	r3, #3
 800c722:	e01c      	b.n	800c75e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	2b03      	cmp	r3, #3
 800c72e:	d115      	bne.n	800c75c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	32ae      	adds	r2, #174	@ 0xae
 800c73a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c73e:	6a1b      	ldr	r3, [r3, #32]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d00b      	beq.n	800c75c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	32ae      	adds	r2, #174	@ 0xae
 800c74e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c752:	6a1b      	ldr	r3, [r3, #32]
 800c754:	78fa      	ldrb	r2, [r7, #3]
 800c756:	4611      	mov	r1, r2
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c75c:	2300      	movs	r3, #0
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3708      	adds	r7, #8
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}

0800c766 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c766:	b580      	push	{r7, lr}
 800c768:	b082      	sub	sp, #8
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
 800c76e:	460b      	mov	r3, r1
 800c770:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	32ae      	adds	r2, #174	@ 0xae
 800c77c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d101      	bne.n	800c788 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c784:	2303      	movs	r3, #3
 800c786:	e01c      	b.n	800c7c2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	2b03      	cmp	r3, #3
 800c792:	d115      	bne.n	800c7c0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	32ae      	adds	r2, #174	@ 0xae
 800c79e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d00b      	beq.n	800c7c0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	32ae      	adds	r2, #174	@ 0xae
 800c7b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7b8:	78fa      	ldrb	r2, [r7, #3]
 800c7ba:	4611      	mov	r1, r2
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c7c0:	2300      	movs	r3, #0
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3708      	adds	r7, #8
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}

0800c7ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c7ca:	b480      	push	{r7}
 800c7cc:	b083      	sub	sp, #12
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c7d2:	2300      	movs	r3, #0
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	370c      	adds	r7, #12
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr

0800c7e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b084      	sub	sp, #16
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d00e      	beq.n	800c81c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	687a      	ldr	r2, [r7, #4]
 800c808:	6852      	ldr	r2, [r2, #4]
 800c80a:	b2d2      	uxtb	r2, r2
 800c80c:	4611      	mov	r1, r2
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	4798      	blx	r3
 800c812:	4603      	mov	r3, r0
 800c814:	2b00      	cmp	r3, #0
 800c816:	d001      	beq.n	800c81c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c818:	2303      	movs	r3, #3
 800c81a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3710      	adds	r7, #16
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}

0800c826 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c826:	b480      	push	{r7}
 800c828:	b083      	sub	sp, #12
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
 800c82e:	460b      	mov	r3, r1
 800c830:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c832:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c834:	4618      	mov	r0, r3
 800c836:	370c      	adds	r7, #12
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr

0800c840 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c840:	b480      	push	{r7}
 800c842:	b083      	sub	sp, #12
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	460b      	mov	r3, r1
 800c84a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c84c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c84e:	4618      	mov	r0, r3
 800c850:	370c      	adds	r7, #12
 800c852:	46bd      	mov	sp, r7
 800c854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c858:	4770      	bx	lr

0800c85a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c85a:	b580      	push	{r7, lr}
 800c85c:	b086      	sub	sp, #24
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
 800c862:	460b      	mov	r3, r1
 800c864:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c86e:	2300      	movs	r3, #0
 800c870:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	885b      	ldrh	r3, [r3, #2]
 800c876:	b29b      	uxth	r3, r3
 800c878:	68fa      	ldr	r2, [r7, #12]
 800c87a:	7812      	ldrb	r2, [r2, #0]
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d91f      	bls.n	800c8c0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c886:	e013      	b.n	800c8b0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c888:	f107 030a 	add.w	r3, r7, #10
 800c88c:	4619      	mov	r1, r3
 800c88e:	6978      	ldr	r0, [r7, #20]
 800c890:	f000 f81b 	bl	800c8ca <USBD_GetNextDesc>
 800c894:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	785b      	ldrb	r3, [r3, #1]
 800c89a:	2b05      	cmp	r3, #5
 800c89c:	d108      	bne.n	800c8b0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	789b      	ldrb	r3, [r3, #2]
 800c8a6:	78fa      	ldrb	r2, [r7, #3]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d008      	beq.n	800c8be <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	885b      	ldrh	r3, [r3, #2]
 800c8b4:	b29a      	uxth	r2, r3
 800c8b6:	897b      	ldrh	r3, [r7, #10]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d8e5      	bhi.n	800c888 <USBD_GetEpDesc+0x2e>
 800c8bc:	e000      	b.n	800c8c0 <USBD_GetEpDesc+0x66>
          break;
 800c8be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c8c0:	693b      	ldr	r3, [r7, #16]
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3718      	adds	r7, #24
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}

0800c8ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c8ca:	b480      	push	{r7}
 800c8cc:	b085      	sub	sp, #20
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
 800c8d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	881b      	ldrh	r3, [r3, #0]
 800c8dc:	68fa      	ldr	r2, [r7, #12]
 800c8de:	7812      	ldrb	r2, [r2, #0]
 800c8e0:	4413      	add	r3, r2
 800c8e2:	b29a      	uxth	r2, r3
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3714      	adds	r7, #20
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr

0800c902 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c902:	b480      	push	{r7}
 800c904:	b087      	sub	sp, #28
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	3301      	adds	r3, #1
 800c918:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c920:	8a3b      	ldrh	r3, [r7, #16]
 800c922:	021b      	lsls	r3, r3, #8
 800c924:	b21a      	sxth	r2, r3
 800c926:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c92a:	4313      	orrs	r3, r2
 800c92c:	b21b      	sxth	r3, r3
 800c92e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c930:	89fb      	ldrh	r3, [r7, #14]
}
 800c932:	4618      	mov	r0, r3
 800c934:	371c      	adds	r7, #28
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr
	...

0800c940 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b084      	sub	sp, #16
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c94a:	2300      	movs	r3, #0
 800c94c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c956:	2b40      	cmp	r3, #64	@ 0x40
 800c958:	d005      	beq.n	800c966 <USBD_StdDevReq+0x26>
 800c95a:	2b40      	cmp	r3, #64	@ 0x40
 800c95c:	d857      	bhi.n	800ca0e <USBD_StdDevReq+0xce>
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d00f      	beq.n	800c982 <USBD_StdDevReq+0x42>
 800c962:	2b20      	cmp	r3, #32
 800c964:	d153      	bne.n	800ca0e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	32ae      	adds	r2, #174	@ 0xae
 800c970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c974:	689b      	ldr	r3, [r3, #8]
 800c976:	6839      	ldr	r1, [r7, #0]
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	4798      	blx	r3
 800c97c:	4603      	mov	r3, r0
 800c97e:	73fb      	strb	r3, [r7, #15]
      break;
 800c980:	e04a      	b.n	800ca18 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	785b      	ldrb	r3, [r3, #1]
 800c986:	2b09      	cmp	r3, #9
 800c988:	d83b      	bhi.n	800ca02 <USBD_StdDevReq+0xc2>
 800c98a:	a201      	add	r2, pc, #4	@ (adr r2, 800c990 <USBD_StdDevReq+0x50>)
 800c98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c990:	0800c9e5 	.word	0x0800c9e5
 800c994:	0800c9f9 	.word	0x0800c9f9
 800c998:	0800ca03 	.word	0x0800ca03
 800c99c:	0800c9ef 	.word	0x0800c9ef
 800c9a0:	0800ca03 	.word	0x0800ca03
 800c9a4:	0800c9c3 	.word	0x0800c9c3
 800c9a8:	0800c9b9 	.word	0x0800c9b9
 800c9ac:	0800ca03 	.word	0x0800ca03
 800c9b0:	0800c9db 	.word	0x0800c9db
 800c9b4:	0800c9cd 	.word	0x0800c9cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c9b8:	6839      	ldr	r1, [r7, #0]
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f000 fa3c 	bl	800ce38 <USBD_GetDescriptor>
          break;
 800c9c0:	e024      	b.n	800ca0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c9c2:	6839      	ldr	r1, [r7, #0]
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f000 fbcb 	bl	800d160 <USBD_SetAddress>
          break;
 800c9ca:	e01f      	b.n	800ca0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c9cc:	6839      	ldr	r1, [r7, #0]
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 fc0a 	bl	800d1e8 <USBD_SetConfig>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	73fb      	strb	r3, [r7, #15]
          break;
 800c9d8:	e018      	b.n	800ca0c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c9da:	6839      	ldr	r1, [r7, #0]
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f000 fcad 	bl	800d33c <USBD_GetConfig>
          break;
 800c9e2:	e013      	b.n	800ca0c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c9e4:	6839      	ldr	r1, [r7, #0]
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f000 fcde 	bl	800d3a8 <USBD_GetStatus>
          break;
 800c9ec:	e00e      	b.n	800ca0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c9ee:	6839      	ldr	r1, [r7, #0]
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 fd0d 	bl	800d410 <USBD_SetFeature>
          break;
 800c9f6:	e009      	b.n	800ca0c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c9f8:	6839      	ldr	r1, [r7, #0]
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 fd31 	bl	800d462 <USBD_ClrFeature>
          break;
 800ca00:	e004      	b.n	800ca0c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ca02:	6839      	ldr	r1, [r7, #0]
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f000 fd88 	bl	800d51a <USBD_CtlError>
          break;
 800ca0a:	bf00      	nop
      }
      break;
 800ca0c:	e004      	b.n	800ca18 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ca0e:	6839      	ldr	r1, [r7, #0]
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f000 fd82 	bl	800d51a <USBD_CtlError>
      break;
 800ca16:	bf00      	nop
  }

  return ret;
 800ca18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3710      	adds	r7, #16
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop

0800ca24 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ca3a:	2b40      	cmp	r3, #64	@ 0x40
 800ca3c:	d005      	beq.n	800ca4a <USBD_StdItfReq+0x26>
 800ca3e:	2b40      	cmp	r3, #64	@ 0x40
 800ca40:	d852      	bhi.n	800cae8 <USBD_StdItfReq+0xc4>
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d001      	beq.n	800ca4a <USBD_StdItfReq+0x26>
 800ca46:	2b20      	cmp	r3, #32
 800ca48:	d14e      	bne.n	800cae8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca50:	b2db      	uxtb	r3, r3
 800ca52:	3b01      	subs	r3, #1
 800ca54:	2b02      	cmp	r3, #2
 800ca56:	d840      	bhi.n	800cada <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	889b      	ldrh	r3, [r3, #4]
 800ca5c:	b2db      	uxtb	r3, r3
 800ca5e:	2b01      	cmp	r3, #1
 800ca60:	d836      	bhi.n	800cad0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	889b      	ldrh	r3, [r3, #4]
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	4619      	mov	r1, r3
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f7ff fedb 	bl	800c826 <USBD_CoreFindIF>
 800ca70:	4603      	mov	r3, r0
 800ca72:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca74:	7bbb      	ldrb	r3, [r7, #14]
 800ca76:	2bff      	cmp	r3, #255	@ 0xff
 800ca78:	d01d      	beq.n	800cab6 <USBD_StdItfReq+0x92>
 800ca7a:	7bbb      	ldrb	r3, [r7, #14]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d11a      	bne.n	800cab6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ca80:	7bba      	ldrb	r2, [r7, #14]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	32ae      	adds	r2, #174	@ 0xae
 800ca86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca8a:	689b      	ldr	r3, [r3, #8]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d00f      	beq.n	800cab0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ca90:	7bba      	ldrb	r2, [r7, #14]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ca98:	7bba      	ldrb	r2, [r7, #14]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	32ae      	adds	r2, #174	@ 0xae
 800ca9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	6839      	ldr	r1, [r7, #0]
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	4798      	blx	r3
 800caaa:	4603      	mov	r3, r0
 800caac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800caae:	e004      	b.n	800caba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cab0:	2303      	movs	r3, #3
 800cab2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cab4:	e001      	b.n	800caba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cab6:	2303      	movs	r3, #3
 800cab8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	88db      	ldrh	r3, [r3, #6]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d110      	bne.n	800cae4 <USBD_StdItfReq+0xc0>
 800cac2:	7bfb      	ldrb	r3, [r7, #15]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d10d      	bne.n	800cae4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f000 fdfd 	bl	800d6c8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cace:	e009      	b.n	800cae4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cad0:	6839      	ldr	r1, [r7, #0]
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 fd21 	bl	800d51a <USBD_CtlError>
          break;
 800cad8:	e004      	b.n	800cae4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cada:	6839      	ldr	r1, [r7, #0]
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 fd1c 	bl	800d51a <USBD_CtlError>
          break;
 800cae2:	e000      	b.n	800cae6 <USBD_StdItfReq+0xc2>
          break;
 800cae4:	bf00      	nop
      }
      break;
 800cae6:	e004      	b.n	800caf2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cae8:	6839      	ldr	r1, [r7, #0]
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f000 fd15 	bl	800d51a <USBD_CtlError>
      break;
 800caf0:	bf00      	nop
  }

  return ret;
 800caf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3710      	adds	r7, #16
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}

0800cafc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb06:	2300      	movs	r3, #0
 800cb08:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	889b      	ldrh	r3, [r3, #4]
 800cb0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cb18:	2b40      	cmp	r3, #64	@ 0x40
 800cb1a:	d007      	beq.n	800cb2c <USBD_StdEPReq+0x30>
 800cb1c:	2b40      	cmp	r3, #64	@ 0x40
 800cb1e:	f200 817f 	bhi.w	800ce20 <USBD_StdEPReq+0x324>
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d02a      	beq.n	800cb7c <USBD_StdEPReq+0x80>
 800cb26:	2b20      	cmp	r3, #32
 800cb28:	f040 817a 	bne.w	800ce20 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cb2c:	7bbb      	ldrb	r3, [r7, #14]
 800cb2e:	4619      	mov	r1, r3
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f7ff fe85 	bl	800c840 <USBD_CoreFindEP>
 800cb36:	4603      	mov	r3, r0
 800cb38:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb3a:	7b7b      	ldrb	r3, [r7, #13]
 800cb3c:	2bff      	cmp	r3, #255	@ 0xff
 800cb3e:	f000 8174 	beq.w	800ce2a <USBD_StdEPReq+0x32e>
 800cb42:	7b7b      	ldrb	r3, [r7, #13]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	f040 8170 	bne.w	800ce2a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cb4a:	7b7a      	ldrb	r2, [r7, #13]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cb52:	7b7a      	ldrb	r2, [r7, #13]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	32ae      	adds	r2, #174	@ 0xae
 800cb58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb5c:	689b      	ldr	r3, [r3, #8]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	f000 8163 	beq.w	800ce2a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cb64:	7b7a      	ldrb	r2, [r7, #13]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	32ae      	adds	r2, #174	@ 0xae
 800cb6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb6e:	689b      	ldr	r3, [r3, #8]
 800cb70:	6839      	ldr	r1, [r7, #0]
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	4798      	blx	r3
 800cb76:	4603      	mov	r3, r0
 800cb78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cb7a:	e156      	b.n	800ce2a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	785b      	ldrb	r3, [r3, #1]
 800cb80:	2b03      	cmp	r3, #3
 800cb82:	d008      	beq.n	800cb96 <USBD_StdEPReq+0x9a>
 800cb84:	2b03      	cmp	r3, #3
 800cb86:	f300 8145 	bgt.w	800ce14 <USBD_StdEPReq+0x318>
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	f000 809b 	beq.w	800ccc6 <USBD_StdEPReq+0x1ca>
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d03c      	beq.n	800cc0e <USBD_StdEPReq+0x112>
 800cb94:	e13e      	b.n	800ce14 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	2b02      	cmp	r3, #2
 800cba0:	d002      	beq.n	800cba8 <USBD_StdEPReq+0xac>
 800cba2:	2b03      	cmp	r3, #3
 800cba4:	d016      	beq.n	800cbd4 <USBD_StdEPReq+0xd8>
 800cba6:	e02c      	b.n	800cc02 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cba8:	7bbb      	ldrb	r3, [r7, #14]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d00d      	beq.n	800cbca <USBD_StdEPReq+0xce>
 800cbae:	7bbb      	ldrb	r3, [r7, #14]
 800cbb0:	2b80      	cmp	r3, #128	@ 0x80
 800cbb2:	d00a      	beq.n	800cbca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbb4:	7bbb      	ldrb	r3, [r7, #14]
 800cbb6:	4619      	mov	r1, r3
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f001 f9c9 	bl	800df50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbbe:	2180      	movs	r1, #128	@ 0x80
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f001 f9c5 	bl	800df50 <USBD_LL_StallEP>
 800cbc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cbc8:	e020      	b.n	800cc0c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cbca:	6839      	ldr	r1, [r7, #0]
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f000 fca4 	bl	800d51a <USBD_CtlError>
              break;
 800cbd2:	e01b      	b.n	800cc0c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	885b      	ldrh	r3, [r3, #2]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d10e      	bne.n	800cbfa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cbdc:	7bbb      	ldrb	r3, [r7, #14]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d00b      	beq.n	800cbfa <USBD_StdEPReq+0xfe>
 800cbe2:	7bbb      	ldrb	r3, [r7, #14]
 800cbe4:	2b80      	cmp	r3, #128	@ 0x80
 800cbe6:	d008      	beq.n	800cbfa <USBD_StdEPReq+0xfe>
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	88db      	ldrh	r3, [r3, #6]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d104      	bne.n	800cbfa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbf0:	7bbb      	ldrb	r3, [r7, #14]
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f001 f9ab 	bl	800df50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f000 fd64 	bl	800d6c8 <USBD_CtlSendStatus>

              break;
 800cc00:	e004      	b.n	800cc0c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cc02:	6839      	ldr	r1, [r7, #0]
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f000 fc88 	bl	800d51a <USBD_CtlError>
              break;
 800cc0a:	bf00      	nop
          }
          break;
 800cc0c:	e107      	b.n	800ce1e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc14:	b2db      	uxtb	r3, r3
 800cc16:	2b02      	cmp	r3, #2
 800cc18:	d002      	beq.n	800cc20 <USBD_StdEPReq+0x124>
 800cc1a:	2b03      	cmp	r3, #3
 800cc1c:	d016      	beq.n	800cc4c <USBD_StdEPReq+0x150>
 800cc1e:	e04b      	b.n	800ccb8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc20:	7bbb      	ldrb	r3, [r7, #14]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d00d      	beq.n	800cc42 <USBD_StdEPReq+0x146>
 800cc26:	7bbb      	ldrb	r3, [r7, #14]
 800cc28:	2b80      	cmp	r3, #128	@ 0x80
 800cc2a:	d00a      	beq.n	800cc42 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc2c:	7bbb      	ldrb	r3, [r7, #14]
 800cc2e:	4619      	mov	r1, r3
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f001 f98d 	bl	800df50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc36:	2180      	movs	r1, #128	@ 0x80
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f001 f989 	bl	800df50 <USBD_LL_StallEP>
 800cc3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc40:	e040      	b.n	800ccc4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cc42:	6839      	ldr	r1, [r7, #0]
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 fc68 	bl	800d51a <USBD_CtlError>
              break;
 800cc4a:	e03b      	b.n	800ccc4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	885b      	ldrh	r3, [r3, #2]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d136      	bne.n	800ccc2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cc54:	7bbb      	ldrb	r3, [r7, #14]
 800cc56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d004      	beq.n	800cc68 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cc5e:	7bbb      	ldrb	r3, [r7, #14]
 800cc60:	4619      	mov	r1, r3
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f001 f993 	bl	800df8e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f000 fd2d 	bl	800d6c8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cc6e:	7bbb      	ldrb	r3, [r7, #14]
 800cc70:	4619      	mov	r1, r3
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f7ff fde4 	bl	800c840 <USBD_CoreFindEP>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc7c:	7b7b      	ldrb	r3, [r7, #13]
 800cc7e:	2bff      	cmp	r3, #255	@ 0xff
 800cc80:	d01f      	beq.n	800ccc2 <USBD_StdEPReq+0x1c6>
 800cc82:	7b7b      	ldrb	r3, [r7, #13]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d11c      	bne.n	800ccc2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cc88:	7b7a      	ldrb	r2, [r7, #13]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cc90:	7b7a      	ldrb	r2, [r7, #13]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	32ae      	adds	r2, #174	@ 0xae
 800cc96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc9a:	689b      	ldr	r3, [r3, #8]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d010      	beq.n	800ccc2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cca0:	7b7a      	ldrb	r2, [r7, #13]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	32ae      	adds	r2, #174	@ 0xae
 800cca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	6839      	ldr	r1, [r7, #0]
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	4798      	blx	r3
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ccb6:	e004      	b.n	800ccc2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ccb8:	6839      	ldr	r1, [r7, #0]
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 fc2d 	bl	800d51a <USBD_CtlError>
              break;
 800ccc0:	e000      	b.n	800ccc4 <USBD_StdEPReq+0x1c8>
              break;
 800ccc2:	bf00      	nop
          }
          break;
 800ccc4:	e0ab      	b.n	800ce1e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cccc:	b2db      	uxtb	r3, r3
 800ccce:	2b02      	cmp	r3, #2
 800ccd0:	d002      	beq.n	800ccd8 <USBD_StdEPReq+0x1dc>
 800ccd2:	2b03      	cmp	r3, #3
 800ccd4:	d032      	beq.n	800cd3c <USBD_StdEPReq+0x240>
 800ccd6:	e097      	b.n	800ce08 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ccd8:	7bbb      	ldrb	r3, [r7, #14]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d007      	beq.n	800ccee <USBD_StdEPReq+0x1f2>
 800ccde:	7bbb      	ldrb	r3, [r7, #14]
 800cce0:	2b80      	cmp	r3, #128	@ 0x80
 800cce2:	d004      	beq.n	800ccee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cce4:	6839      	ldr	r1, [r7, #0]
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 fc17 	bl	800d51a <USBD_CtlError>
                break;
 800ccec:	e091      	b.n	800ce12 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	da0b      	bge.n	800cd0e <USBD_StdEPReq+0x212>
 800ccf6:	7bbb      	ldrb	r3, [r7, #14]
 800ccf8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ccfc:	4613      	mov	r3, r2
 800ccfe:	009b      	lsls	r3, r3, #2
 800cd00:	4413      	add	r3, r2
 800cd02:	009b      	lsls	r3, r3, #2
 800cd04:	3310      	adds	r3, #16
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	4413      	add	r3, r2
 800cd0a:	3304      	adds	r3, #4
 800cd0c:	e00b      	b.n	800cd26 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cd0e:	7bbb      	ldrb	r3, [r7, #14]
 800cd10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd14:	4613      	mov	r3, r2
 800cd16:	009b      	lsls	r3, r3, #2
 800cd18:	4413      	add	r3, r2
 800cd1a:	009b      	lsls	r3, r3, #2
 800cd1c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	4413      	add	r3, r2
 800cd24:	3304      	adds	r3, #4
 800cd26:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	2202      	movs	r2, #2
 800cd32:	4619      	mov	r1, r3
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 fc6d 	bl	800d614 <USBD_CtlSendData>
              break;
 800cd3a:	e06a      	b.n	800ce12 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cd3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	da11      	bge.n	800cd68 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cd44:	7bbb      	ldrb	r3, [r7, #14]
 800cd46:	f003 020f 	and.w	r2, r3, #15
 800cd4a:	6879      	ldr	r1, [r7, #4]
 800cd4c:	4613      	mov	r3, r2
 800cd4e:	009b      	lsls	r3, r3, #2
 800cd50:	4413      	add	r3, r2
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	440b      	add	r3, r1
 800cd56:	3324      	adds	r3, #36	@ 0x24
 800cd58:	881b      	ldrh	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d117      	bne.n	800cd8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cd5e:	6839      	ldr	r1, [r7, #0]
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 fbda 	bl	800d51a <USBD_CtlError>
                  break;
 800cd66:	e054      	b.n	800ce12 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cd68:	7bbb      	ldrb	r3, [r7, #14]
 800cd6a:	f003 020f 	and.w	r2, r3, #15
 800cd6e:	6879      	ldr	r1, [r7, #4]
 800cd70:	4613      	mov	r3, r2
 800cd72:	009b      	lsls	r3, r3, #2
 800cd74:	4413      	add	r3, r2
 800cd76:	009b      	lsls	r3, r3, #2
 800cd78:	440b      	add	r3, r1
 800cd7a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cd7e:	881b      	ldrh	r3, [r3, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d104      	bne.n	800cd8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cd84:	6839      	ldr	r1, [r7, #0]
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f000 fbc7 	bl	800d51a <USBD_CtlError>
                  break;
 800cd8c:	e041      	b.n	800ce12 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	da0b      	bge.n	800cdae <USBD_StdEPReq+0x2b2>
 800cd96:	7bbb      	ldrb	r3, [r7, #14]
 800cd98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cd9c:	4613      	mov	r3, r2
 800cd9e:	009b      	lsls	r3, r3, #2
 800cda0:	4413      	add	r3, r2
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	3310      	adds	r3, #16
 800cda6:	687a      	ldr	r2, [r7, #4]
 800cda8:	4413      	add	r3, r2
 800cdaa:	3304      	adds	r3, #4
 800cdac:	e00b      	b.n	800cdc6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cdae:	7bbb      	ldrb	r3, [r7, #14]
 800cdb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cdb4:	4613      	mov	r3, r2
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	4413      	add	r3, r2
 800cdba:	009b      	lsls	r3, r3, #2
 800cdbc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	4413      	add	r3, r2
 800cdc4:	3304      	adds	r3, #4
 800cdc6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cdc8:	7bbb      	ldrb	r3, [r7, #14]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d002      	beq.n	800cdd4 <USBD_StdEPReq+0x2d8>
 800cdce:	7bbb      	ldrb	r3, [r7, #14]
 800cdd0:	2b80      	cmp	r3, #128	@ 0x80
 800cdd2:	d103      	bne.n	800cddc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	601a      	str	r2, [r3, #0]
 800cdda:	e00e      	b.n	800cdfa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cddc:	7bbb      	ldrb	r3, [r7, #14]
 800cdde:	4619      	mov	r1, r3
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f001 f8f3 	bl	800dfcc <USBD_LL_IsStallEP>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d003      	beq.n	800cdf4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	601a      	str	r2, [r3, #0]
 800cdf2:	e002      	b.n	800cdfa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	2202      	movs	r2, #2
 800cdfe:	4619      	mov	r1, r3
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f000 fc07 	bl	800d614 <USBD_CtlSendData>
              break;
 800ce06:	e004      	b.n	800ce12 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ce08:	6839      	ldr	r1, [r7, #0]
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 fb85 	bl	800d51a <USBD_CtlError>
              break;
 800ce10:	bf00      	nop
          }
          break;
 800ce12:	e004      	b.n	800ce1e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ce14:	6839      	ldr	r1, [r7, #0]
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f000 fb7f 	bl	800d51a <USBD_CtlError>
          break;
 800ce1c:	bf00      	nop
      }
      break;
 800ce1e:	e005      	b.n	800ce2c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ce20:	6839      	ldr	r1, [r7, #0]
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 fb79 	bl	800d51a <USBD_CtlError>
      break;
 800ce28:	e000      	b.n	800ce2c <USBD_StdEPReq+0x330>
      break;
 800ce2a:	bf00      	nop
  }

  return ret;
 800ce2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3710      	adds	r7, #16
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
	...

0800ce38 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ce42:	2300      	movs	r3, #0
 800ce44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ce46:	2300      	movs	r3, #0
 800ce48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	885b      	ldrh	r3, [r3, #2]
 800ce52:	0a1b      	lsrs	r3, r3, #8
 800ce54:	b29b      	uxth	r3, r3
 800ce56:	3b01      	subs	r3, #1
 800ce58:	2b0e      	cmp	r3, #14
 800ce5a:	f200 8152 	bhi.w	800d102 <USBD_GetDescriptor+0x2ca>
 800ce5e:	a201      	add	r2, pc, #4	@ (adr r2, 800ce64 <USBD_GetDescriptor+0x2c>)
 800ce60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce64:	0800ced5 	.word	0x0800ced5
 800ce68:	0800ceed 	.word	0x0800ceed
 800ce6c:	0800cf2d 	.word	0x0800cf2d
 800ce70:	0800d103 	.word	0x0800d103
 800ce74:	0800d103 	.word	0x0800d103
 800ce78:	0800d0a3 	.word	0x0800d0a3
 800ce7c:	0800d0cf 	.word	0x0800d0cf
 800ce80:	0800d103 	.word	0x0800d103
 800ce84:	0800d103 	.word	0x0800d103
 800ce88:	0800d103 	.word	0x0800d103
 800ce8c:	0800d103 	.word	0x0800d103
 800ce90:	0800d103 	.word	0x0800d103
 800ce94:	0800d103 	.word	0x0800d103
 800ce98:	0800d103 	.word	0x0800d103
 800ce9c:	0800cea1 	.word	0x0800cea1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cea6:	69db      	ldr	r3, [r3, #28]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d00b      	beq.n	800cec4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ceb2:	69db      	ldr	r3, [r3, #28]
 800ceb4:	687a      	ldr	r2, [r7, #4]
 800ceb6:	7c12      	ldrb	r2, [r2, #16]
 800ceb8:	f107 0108 	add.w	r1, r7, #8
 800cebc:	4610      	mov	r0, r2
 800cebe:	4798      	blx	r3
 800cec0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cec2:	e126      	b.n	800d112 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cec4:	6839      	ldr	r1, [r7, #0]
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f000 fb27 	bl	800d51a <USBD_CtlError>
        err++;
 800cecc:	7afb      	ldrb	r3, [r7, #11]
 800cece:	3301      	adds	r3, #1
 800ced0:	72fb      	strb	r3, [r7, #11]
      break;
 800ced2:	e11e      	b.n	800d112 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	687a      	ldr	r2, [r7, #4]
 800cede:	7c12      	ldrb	r2, [r2, #16]
 800cee0:	f107 0108 	add.w	r1, r7, #8
 800cee4:	4610      	mov	r0, r2
 800cee6:	4798      	blx	r3
 800cee8:	60f8      	str	r0, [r7, #12]
      break;
 800ceea:	e112      	b.n	800d112 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	7c1b      	ldrb	r3, [r3, #16]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d10d      	bne.n	800cf10 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cefa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cefc:	f107 0208 	add.w	r2, r7, #8
 800cf00:	4610      	mov	r0, r2
 800cf02:	4798      	blx	r3
 800cf04:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	3301      	adds	r3, #1
 800cf0a:	2202      	movs	r2, #2
 800cf0c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cf0e:	e100      	b.n	800d112 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf18:	f107 0208 	add.w	r2, r7, #8
 800cf1c:	4610      	mov	r0, r2
 800cf1e:	4798      	blx	r3
 800cf20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	3301      	adds	r3, #1
 800cf26:	2202      	movs	r2, #2
 800cf28:	701a      	strb	r2, [r3, #0]
      break;
 800cf2a:	e0f2      	b.n	800d112 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	885b      	ldrh	r3, [r3, #2]
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	2b05      	cmp	r3, #5
 800cf34:	f200 80ac 	bhi.w	800d090 <USBD_GetDescriptor+0x258>
 800cf38:	a201      	add	r2, pc, #4	@ (adr r2, 800cf40 <USBD_GetDescriptor+0x108>)
 800cf3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf3e:	bf00      	nop
 800cf40:	0800cf59 	.word	0x0800cf59
 800cf44:	0800cf8d 	.word	0x0800cf8d
 800cf48:	0800cfc1 	.word	0x0800cfc1
 800cf4c:	0800cff5 	.word	0x0800cff5
 800cf50:	0800d029 	.word	0x0800d029
 800cf54:	0800d05d 	.word	0x0800d05d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf5e:	685b      	ldr	r3, [r3, #4]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d00b      	beq.n	800cf7c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	7c12      	ldrb	r2, [r2, #16]
 800cf70:	f107 0108 	add.w	r1, r7, #8
 800cf74:	4610      	mov	r0, r2
 800cf76:	4798      	blx	r3
 800cf78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf7a:	e091      	b.n	800d0a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf7c:	6839      	ldr	r1, [r7, #0]
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f000 facb 	bl	800d51a <USBD_CtlError>
            err++;
 800cf84:	7afb      	ldrb	r3, [r7, #11]
 800cf86:	3301      	adds	r3, #1
 800cf88:	72fb      	strb	r3, [r7, #11]
          break;
 800cf8a:	e089      	b.n	800d0a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf92:	689b      	ldr	r3, [r3, #8]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d00b      	beq.n	800cfb0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf9e:	689b      	ldr	r3, [r3, #8]
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	7c12      	ldrb	r2, [r2, #16]
 800cfa4:	f107 0108 	add.w	r1, r7, #8
 800cfa8:	4610      	mov	r0, r2
 800cfaa:	4798      	blx	r3
 800cfac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfae:	e077      	b.n	800d0a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cfb0:	6839      	ldr	r1, [r7, #0]
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 fab1 	bl	800d51a <USBD_CtlError>
            err++;
 800cfb8:	7afb      	ldrb	r3, [r7, #11]
 800cfba:	3301      	adds	r3, #1
 800cfbc:	72fb      	strb	r3, [r7, #11]
          break;
 800cfbe:	e06f      	b.n	800d0a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d00b      	beq.n	800cfe4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cfd2:	68db      	ldr	r3, [r3, #12]
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	7c12      	ldrb	r2, [r2, #16]
 800cfd8:	f107 0108 	add.w	r1, r7, #8
 800cfdc:	4610      	mov	r0, r2
 800cfde:	4798      	blx	r3
 800cfe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfe2:	e05d      	b.n	800d0a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cfe4:	6839      	ldr	r1, [r7, #0]
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 fa97 	bl	800d51a <USBD_CtlError>
            err++;
 800cfec:	7afb      	ldrb	r3, [r7, #11]
 800cfee:	3301      	adds	r3, #1
 800cff0:	72fb      	strb	r3, [r7, #11]
          break;
 800cff2:	e055      	b.n	800d0a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cffa:	691b      	ldr	r3, [r3, #16]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d00b      	beq.n	800d018 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d006:	691b      	ldr	r3, [r3, #16]
 800d008:	687a      	ldr	r2, [r7, #4]
 800d00a:	7c12      	ldrb	r2, [r2, #16]
 800d00c:	f107 0108 	add.w	r1, r7, #8
 800d010:	4610      	mov	r0, r2
 800d012:	4798      	blx	r3
 800d014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d016:	e043      	b.n	800d0a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d018:	6839      	ldr	r1, [r7, #0]
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 fa7d 	bl	800d51a <USBD_CtlError>
            err++;
 800d020:	7afb      	ldrb	r3, [r7, #11]
 800d022:	3301      	adds	r3, #1
 800d024:	72fb      	strb	r3, [r7, #11]
          break;
 800d026:	e03b      	b.n	800d0a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d02e:	695b      	ldr	r3, [r3, #20]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d00b      	beq.n	800d04c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d03a:	695b      	ldr	r3, [r3, #20]
 800d03c:	687a      	ldr	r2, [r7, #4]
 800d03e:	7c12      	ldrb	r2, [r2, #16]
 800d040:	f107 0108 	add.w	r1, r7, #8
 800d044:	4610      	mov	r0, r2
 800d046:	4798      	blx	r3
 800d048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d04a:	e029      	b.n	800d0a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d04c:	6839      	ldr	r1, [r7, #0]
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f000 fa63 	bl	800d51a <USBD_CtlError>
            err++;
 800d054:	7afb      	ldrb	r3, [r7, #11]
 800d056:	3301      	adds	r3, #1
 800d058:	72fb      	strb	r3, [r7, #11]
          break;
 800d05a:	e021      	b.n	800d0a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d062:	699b      	ldr	r3, [r3, #24]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d00b      	beq.n	800d080 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d06e:	699b      	ldr	r3, [r3, #24]
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	7c12      	ldrb	r2, [r2, #16]
 800d074:	f107 0108 	add.w	r1, r7, #8
 800d078:	4610      	mov	r0, r2
 800d07a:	4798      	blx	r3
 800d07c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d07e:	e00f      	b.n	800d0a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d080:	6839      	ldr	r1, [r7, #0]
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f000 fa49 	bl	800d51a <USBD_CtlError>
            err++;
 800d088:	7afb      	ldrb	r3, [r7, #11]
 800d08a:	3301      	adds	r3, #1
 800d08c:	72fb      	strb	r3, [r7, #11]
          break;
 800d08e:	e007      	b.n	800d0a0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d090:	6839      	ldr	r1, [r7, #0]
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 fa41 	bl	800d51a <USBD_CtlError>
          err++;
 800d098:	7afb      	ldrb	r3, [r7, #11]
 800d09a:	3301      	adds	r3, #1
 800d09c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d09e:	bf00      	nop
      }
      break;
 800d0a0:	e037      	b.n	800d112 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	7c1b      	ldrb	r3, [r3, #16]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d109      	bne.n	800d0be <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0b2:	f107 0208 	add.w	r2, r7, #8
 800d0b6:	4610      	mov	r0, r2
 800d0b8:	4798      	blx	r3
 800d0ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d0bc:	e029      	b.n	800d112 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d0be:	6839      	ldr	r1, [r7, #0]
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f000 fa2a 	bl	800d51a <USBD_CtlError>
        err++;
 800d0c6:	7afb      	ldrb	r3, [r7, #11]
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	72fb      	strb	r3, [r7, #11]
      break;
 800d0cc:	e021      	b.n	800d112 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	7c1b      	ldrb	r3, [r3, #16]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d10d      	bne.n	800d0f2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0de:	f107 0208 	add.w	r2, r7, #8
 800d0e2:	4610      	mov	r0, r2
 800d0e4:	4798      	blx	r3
 800d0e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	2207      	movs	r2, #7
 800d0ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d0f0:	e00f      	b.n	800d112 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d0f2:	6839      	ldr	r1, [r7, #0]
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f000 fa10 	bl	800d51a <USBD_CtlError>
        err++;
 800d0fa:	7afb      	ldrb	r3, [r7, #11]
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	72fb      	strb	r3, [r7, #11]
      break;
 800d100:	e007      	b.n	800d112 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d102:	6839      	ldr	r1, [r7, #0]
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 fa08 	bl	800d51a <USBD_CtlError>
      err++;
 800d10a:	7afb      	ldrb	r3, [r7, #11]
 800d10c:	3301      	adds	r3, #1
 800d10e:	72fb      	strb	r3, [r7, #11]
      break;
 800d110:	bf00      	nop
  }

  if (err != 0U)
 800d112:	7afb      	ldrb	r3, [r7, #11]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d11e      	bne.n	800d156 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	88db      	ldrh	r3, [r3, #6]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d016      	beq.n	800d14e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d120:	893b      	ldrh	r3, [r7, #8]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d00e      	beq.n	800d144 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	88da      	ldrh	r2, [r3, #6]
 800d12a:	893b      	ldrh	r3, [r7, #8]
 800d12c:	4293      	cmp	r3, r2
 800d12e:	bf28      	it	cs
 800d130:	4613      	movcs	r3, r2
 800d132:	b29b      	uxth	r3, r3
 800d134:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d136:	893b      	ldrh	r3, [r7, #8]
 800d138:	461a      	mov	r2, r3
 800d13a:	68f9      	ldr	r1, [r7, #12]
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f000 fa69 	bl	800d614 <USBD_CtlSendData>
 800d142:	e009      	b.n	800d158 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d144:	6839      	ldr	r1, [r7, #0]
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f000 f9e7 	bl	800d51a <USBD_CtlError>
 800d14c:	e004      	b.n	800d158 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f000 faba 	bl	800d6c8 <USBD_CtlSendStatus>
 800d154:	e000      	b.n	800d158 <USBD_GetDescriptor+0x320>
    return;
 800d156:	bf00      	nop
  }
}
 800d158:	3710      	adds	r7, #16
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop

0800d160 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	889b      	ldrh	r3, [r3, #4]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d131      	bne.n	800d1d6 <USBD_SetAddress+0x76>
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	88db      	ldrh	r3, [r3, #6]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d12d      	bne.n	800d1d6 <USBD_SetAddress+0x76>
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	885b      	ldrh	r3, [r3, #2]
 800d17e:	2b7f      	cmp	r3, #127	@ 0x7f
 800d180:	d829      	bhi.n	800d1d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	885b      	ldrh	r3, [r3, #2]
 800d186:	b2db      	uxtb	r3, r3
 800d188:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d18c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d194:	b2db      	uxtb	r3, r3
 800d196:	2b03      	cmp	r3, #3
 800d198:	d104      	bne.n	800d1a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d19a:	6839      	ldr	r1, [r7, #0]
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f000 f9bc 	bl	800d51a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1a2:	e01d      	b.n	800d1e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	7bfa      	ldrb	r2, [r7, #15]
 800d1a8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d1ac:	7bfb      	ldrb	r3, [r7, #15]
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f000 ff37 	bl	800e024 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f000 fa86 	bl	800d6c8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d1bc:	7bfb      	ldrb	r3, [r7, #15]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d004      	beq.n	800d1cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2202      	movs	r2, #2
 800d1c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1ca:	e009      	b.n	800d1e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1d4:	e004      	b.n	800d1e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d1d6:	6839      	ldr	r1, [r7, #0]
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f000 f99e 	bl	800d51a <USBD_CtlError>
  }
}
 800d1de:	bf00      	nop
 800d1e0:	bf00      	nop
 800d1e2:	3710      	adds	r7, #16
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b084      	sub	sp, #16
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	885b      	ldrh	r3, [r3, #2]
 800d1fa:	b2da      	uxtb	r2, r3
 800d1fc:	4b4e      	ldr	r3, [pc, #312]	@ (800d338 <USBD_SetConfig+0x150>)
 800d1fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d200:	4b4d      	ldr	r3, [pc, #308]	@ (800d338 <USBD_SetConfig+0x150>)
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	2b01      	cmp	r3, #1
 800d206:	d905      	bls.n	800d214 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d208:	6839      	ldr	r1, [r7, #0]
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 f985 	bl	800d51a <USBD_CtlError>
    return USBD_FAIL;
 800d210:	2303      	movs	r3, #3
 800d212:	e08c      	b.n	800d32e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d21a:	b2db      	uxtb	r3, r3
 800d21c:	2b02      	cmp	r3, #2
 800d21e:	d002      	beq.n	800d226 <USBD_SetConfig+0x3e>
 800d220:	2b03      	cmp	r3, #3
 800d222:	d029      	beq.n	800d278 <USBD_SetConfig+0x90>
 800d224:	e075      	b.n	800d312 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d226:	4b44      	ldr	r3, [pc, #272]	@ (800d338 <USBD_SetConfig+0x150>)
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d020      	beq.n	800d270 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d22e:	4b42      	ldr	r3, [pc, #264]	@ (800d338 <USBD_SetConfig+0x150>)
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	461a      	mov	r2, r3
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d238:	4b3f      	ldr	r3, [pc, #252]	@ (800d338 <USBD_SetConfig+0x150>)
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	4619      	mov	r1, r3
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f7fe ffb9 	bl	800c1b6 <USBD_SetClassConfig>
 800d244:	4603      	mov	r3, r0
 800d246:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d248:	7bfb      	ldrb	r3, [r7, #15]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d008      	beq.n	800d260 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d24e:	6839      	ldr	r1, [r7, #0]
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f000 f962 	bl	800d51a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2202      	movs	r2, #2
 800d25a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d25e:	e065      	b.n	800d32c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f000 fa31 	bl	800d6c8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2203      	movs	r2, #3
 800d26a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d26e:	e05d      	b.n	800d32c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f000 fa29 	bl	800d6c8 <USBD_CtlSendStatus>
      break;
 800d276:	e059      	b.n	800d32c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d278:	4b2f      	ldr	r3, [pc, #188]	@ (800d338 <USBD_SetConfig+0x150>)
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d112      	bne.n	800d2a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2202      	movs	r2, #2
 800d284:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d288:	4b2b      	ldr	r3, [pc, #172]	@ (800d338 <USBD_SetConfig+0x150>)
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	461a      	mov	r2, r3
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d292:	4b29      	ldr	r3, [pc, #164]	@ (800d338 <USBD_SetConfig+0x150>)
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	4619      	mov	r1, r3
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f7fe ffa8 	bl	800c1ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f000 fa12 	bl	800d6c8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d2a4:	e042      	b.n	800d32c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d2a6:	4b24      	ldr	r3, [pc, #144]	@ (800d338 <USBD_SetConfig+0x150>)
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d02a      	beq.n	800d30a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f7fe ff96 	bl	800c1ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d2c2:	4b1d      	ldr	r3, [pc, #116]	@ (800d338 <USBD_SetConfig+0x150>)
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d2cc:	4b1a      	ldr	r3, [pc, #104]	@ (800d338 <USBD_SetConfig+0x150>)
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f7fe ff6f 	bl	800c1b6 <USBD_SetClassConfig>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d2dc:	7bfb      	ldrb	r3, [r7, #15]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d00f      	beq.n	800d302 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d2e2:	6839      	ldr	r1, [r7, #0]
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 f918 	bl	800d51a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	b2db      	uxtb	r3, r3
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f7fe ff7b 	bl	800c1ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2202      	movs	r2, #2
 800d2fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d300:	e014      	b.n	800d32c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f000 f9e0 	bl	800d6c8 <USBD_CtlSendStatus>
      break;
 800d308:	e010      	b.n	800d32c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f000 f9dc 	bl	800d6c8 <USBD_CtlSendStatus>
      break;
 800d310:	e00c      	b.n	800d32c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d312:	6839      	ldr	r1, [r7, #0]
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 f900 	bl	800d51a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d31a:	4b07      	ldr	r3, [pc, #28]	@ (800d338 <USBD_SetConfig+0x150>)
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	4619      	mov	r1, r3
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f7fe ff64 	bl	800c1ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d326:	2303      	movs	r3, #3
 800d328:	73fb      	strb	r3, [r7, #15]
      break;
 800d32a:	bf00      	nop
  }

  return ret;
 800d32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3710      	adds	r7, #16
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}
 800d336:	bf00      	nop
 800d338:	24002a1c 	.word	0x24002a1c

0800d33c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	88db      	ldrh	r3, [r3, #6]
 800d34a:	2b01      	cmp	r3, #1
 800d34c:	d004      	beq.n	800d358 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d34e:	6839      	ldr	r1, [r7, #0]
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f000 f8e2 	bl	800d51a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d356:	e023      	b.n	800d3a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d35e:	b2db      	uxtb	r3, r3
 800d360:	2b02      	cmp	r3, #2
 800d362:	dc02      	bgt.n	800d36a <USBD_GetConfig+0x2e>
 800d364:	2b00      	cmp	r3, #0
 800d366:	dc03      	bgt.n	800d370 <USBD_GetConfig+0x34>
 800d368:	e015      	b.n	800d396 <USBD_GetConfig+0x5a>
 800d36a:	2b03      	cmp	r3, #3
 800d36c:	d00b      	beq.n	800d386 <USBD_GetConfig+0x4a>
 800d36e:	e012      	b.n	800d396 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2200      	movs	r2, #0
 800d374:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	3308      	adds	r3, #8
 800d37a:	2201      	movs	r2, #1
 800d37c:	4619      	mov	r1, r3
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 f948 	bl	800d614 <USBD_CtlSendData>
        break;
 800d384:	e00c      	b.n	800d3a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	3304      	adds	r3, #4
 800d38a:	2201      	movs	r2, #1
 800d38c:	4619      	mov	r1, r3
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f000 f940 	bl	800d614 <USBD_CtlSendData>
        break;
 800d394:	e004      	b.n	800d3a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d396:	6839      	ldr	r1, [r7, #0]
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f000 f8be 	bl	800d51a <USBD_CtlError>
        break;
 800d39e:	bf00      	nop
}
 800d3a0:	bf00      	nop
 800d3a2:	3708      	adds	r7, #8
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3b8:	b2db      	uxtb	r3, r3
 800d3ba:	3b01      	subs	r3, #1
 800d3bc:	2b02      	cmp	r3, #2
 800d3be:	d81e      	bhi.n	800d3fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	88db      	ldrh	r3, [r3, #6]
 800d3c4:	2b02      	cmp	r3, #2
 800d3c6:	d004      	beq.n	800d3d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d3c8:	6839      	ldr	r1, [r7, #0]
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f000 f8a5 	bl	800d51a <USBD_CtlError>
        break;
 800d3d0:	e01a      	b.n	800d408 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d005      	beq.n	800d3ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	68db      	ldr	r3, [r3, #12]
 800d3e6:	f043 0202 	orr.w	r2, r3, #2
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	330c      	adds	r3, #12
 800d3f2:	2202      	movs	r2, #2
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f000 f90c 	bl	800d614 <USBD_CtlSendData>
      break;
 800d3fc:	e004      	b.n	800d408 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d3fe:	6839      	ldr	r1, [r7, #0]
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 f88a 	bl	800d51a <USBD_CtlError>
      break;
 800d406:	bf00      	nop
  }
}
 800d408:	bf00      	nop
 800d40a:	3708      	adds	r7, #8
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b082      	sub	sp, #8
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	885b      	ldrh	r3, [r3, #2]
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d107      	bne.n	800d432 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2201      	movs	r2, #1
 800d426:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 f94c 	bl	800d6c8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d430:	e013      	b.n	800d45a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	885b      	ldrh	r3, [r3, #2]
 800d436:	2b02      	cmp	r3, #2
 800d438:	d10b      	bne.n	800d452 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	889b      	ldrh	r3, [r3, #4]
 800d43e:	0a1b      	lsrs	r3, r3, #8
 800d440:	b29b      	uxth	r3, r3
 800d442:	b2da      	uxtb	r2, r3
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f000 f93c 	bl	800d6c8 <USBD_CtlSendStatus>
}
 800d450:	e003      	b.n	800d45a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d452:	6839      	ldr	r1, [r7, #0]
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f000 f860 	bl	800d51a <USBD_CtlError>
}
 800d45a:	bf00      	nop
 800d45c:	3708      	adds	r7, #8
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}

0800d462 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d462:	b580      	push	{r7, lr}
 800d464:	b082      	sub	sp, #8
 800d466:	af00      	add	r7, sp, #0
 800d468:	6078      	str	r0, [r7, #4]
 800d46a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d472:	b2db      	uxtb	r3, r3
 800d474:	3b01      	subs	r3, #1
 800d476:	2b02      	cmp	r3, #2
 800d478:	d80b      	bhi.n	800d492 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	885b      	ldrh	r3, [r3, #2]
 800d47e:	2b01      	cmp	r3, #1
 800d480:	d10c      	bne.n	800d49c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2200      	movs	r2, #0
 800d486:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 f91c 	bl	800d6c8 <USBD_CtlSendStatus>
      }
      break;
 800d490:	e004      	b.n	800d49c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d492:	6839      	ldr	r1, [r7, #0]
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f000 f840 	bl	800d51a <USBD_CtlError>
      break;
 800d49a:	e000      	b.n	800d49e <USBD_ClrFeature+0x3c>
      break;
 800d49c:	bf00      	nop
  }
}
 800d49e:	bf00      	nop
 800d4a0:	3708      	adds	r7, #8
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}

0800d4a6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d4a6:	b580      	push	{r7, lr}
 800d4a8:	b084      	sub	sp, #16
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	6078      	str	r0, [r7, #4]
 800d4ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	781a      	ldrb	r2, [r3, #0]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	3301      	adds	r3, #1
 800d4c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	781a      	ldrb	r2, [r3, #0]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d4d0:	68f8      	ldr	r0, [r7, #12]
 800d4d2:	f7ff fa16 	bl	800c902 <SWAPBYTE>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	461a      	mov	r2, r3
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d4ea:	68f8      	ldr	r0, [r7, #12]
 800d4ec:	f7ff fa09 	bl	800c902 <SWAPBYTE>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	3301      	adds	r3, #1
 800d4fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	3301      	adds	r3, #1
 800d502:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d504:	68f8      	ldr	r0, [r7, #12]
 800d506:	f7ff f9fc 	bl	800c902 <SWAPBYTE>
 800d50a:	4603      	mov	r3, r0
 800d50c:	461a      	mov	r2, r3
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	80da      	strh	r2, [r3, #6]
}
 800d512:	bf00      	nop
 800d514:	3710      	adds	r7, #16
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}

0800d51a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d51a:	b580      	push	{r7, lr}
 800d51c:	b082      	sub	sp, #8
 800d51e:	af00      	add	r7, sp, #0
 800d520:	6078      	str	r0, [r7, #4]
 800d522:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d524:	2180      	movs	r1, #128	@ 0x80
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f000 fd12 	bl	800df50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d52c:	2100      	movs	r1, #0
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f000 fd0e 	bl	800df50 <USBD_LL_StallEP>
}
 800d534:	bf00      	nop
 800d536:	3708      	adds	r7, #8
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}

0800d53c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b086      	sub	sp, #24
 800d540:	af00      	add	r7, sp, #0
 800d542:	60f8      	str	r0, [r7, #12]
 800d544:	60b9      	str	r1, [r7, #8]
 800d546:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d548:	2300      	movs	r3, #0
 800d54a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d042      	beq.n	800d5d8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d556:	6938      	ldr	r0, [r7, #16]
 800d558:	f000 f842 	bl	800d5e0 <USBD_GetLen>
 800d55c:	4603      	mov	r3, r0
 800d55e:	3301      	adds	r3, #1
 800d560:	005b      	lsls	r3, r3, #1
 800d562:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d566:	d808      	bhi.n	800d57a <USBD_GetString+0x3e>
 800d568:	6938      	ldr	r0, [r7, #16]
 800d56a:	f000 f839 	bl	800d5e0 <USBD_GetLen>
 800d56e:	4603      	mov	r3, r0
 800d570:	3301      	adds	r3, #1
 800d572:	b29b      	uxth	r3, r3
 800d574:	005b      	lsls	r3, r3, #1
 800d576:	b29a      	uxth	r2, r3
 800d578:	e001      	b.n	800d57e <USBD_GetString+0x42>
 800d57a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d582:	7dfb      	ldrb	r3, [r7, #23]
 800d584:	68ba      	ldr	r2, [r7, #8]
 800d586:	4413      	add	r3, r2
 800d588:	687a      	ldr	r2, [r7, #4]
 800d58a:	7812      	ldrb	r2, [r2, #0]
 800d58c:	701a      	strb	r2, [r3, #0]
  idx++;
 800d58e:	7dfb      	ldrb	r3, [r7, #23]
 800d590:	3301      	adds	r3, #1
 800d592:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d594:	7dfb      	ldrb	r3, [r7, #23]
 800d596:	68ba      	ldr	r2, [r7, #8]
 800d598:	4413      	add	r3, r2
 800d59a:	2203      	movs	r2, #3
 800d59c:	701a      	strb	r2, [r3, #0]
  idx++;
 800d59e:	7dfb      	ldrb	r3, [r7, #23]
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d5a4:	e013      	b.n	800d5ce <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d5a6:	7dfb      	ldrb	r3, [r7, #23]
 800d5a8:	68ba      	ldr	r2, [r7, #8]
 800d5aa:	4413      	add	r3, r2
 800d5ac:	693a      	ldr	r2, [r7, #16]
 800d5ae:	7812      	ldrb	r2, [r2, #0]
 800d5b0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	613b      	str	r3, [r7, #16]
    idx++;
 800d5b8:	7dfb      	ldrb	r3, [r7, #23]
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d5be:	7dfb      	ldrb	r3, [r7, #23]
 800d5c0:	68ba      	ldr	r2, [r7, #8]
 800d5c2:	4413      	add	r3, r2
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	701a      	strb	r2, [r3, #0]
    idx++;
 800d5c8:	7dfb      	ldrb	r3, [r7, #23]
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d1e7      	bne.n	800d5a6 <USBD_GetString+0x6a>
 800d5d6:	e000      	b.n	800d5da <USBD_GetString+0x9e>
    return;
 800d5d8:	bf00      	nop
  }
}
 800d5da:	3718      	adds	r7, #24
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b085      	sub	sp, #20
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d5f0:	e005      	b.n	800d5fe <USBD_GetLen+0x1e>
  {
    len++;
 800d5f2:	7bfb      	ldrb	r3, [r7, #15]
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d1f5      	bne.n	800d5f2 <USBD_GetLen+0x12>
  }

  return len;
 800d606:	7bfb      	ldrb	r3, [r7, #15]
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3714      	adds	r7, #20
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr

0800d614 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b084      	sub	sp, #16
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2202      	movs	r2, #2
 800d624:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	687a      	ldr	r2, [r7, #4]
 800d632:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	68ba      	ldr	r2, [r7, #8]
 800d638:	2100      	movs	r1, #0
 800d63a:	68f8      	ldr	r0, [r7, #12]
 800d63c:	f000 fd11 	bl	800e062 <USBD_LL_Transmit>

  return USBD_OK;
 800d640:	2300      	movs	r3, #0
}
 800d642:	4618      	mov	r0, r3
 800d644:	3710      	adds	r7, #16
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}

0800d64a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d64a:	b580      	push	{r7, lr}
 800d64c:	b084      	sub	sp, #16
 800d64e:	af00      	add	r7, sp, #0
 800d650:	60f8      	str	r0, [r7, #12]
 800d652:	60b9      	str	r1, [r7, #8]
 800d654:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	68ba      	ldr	r2, [r7, #8]
 800d65a:	2100      	movs	r1, #0
 800d65c:	68f8      	ldr	r0, [r7, #12]
 800d65e:	f000 fd00 	bl	800e062 <USBD_LL_Transmit>

  return USBD_OK;
 800d662:	2300      	movs	r3, #0
}
 800d664:	4618      	mov	r0, r3
 800d666:	3710      	adds	r7, #16
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2203      	movs	r2, #3
 800d67c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	687a      	ldr	r2, [r7, #4]
 800d684:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	68ba      	ldr	r2, [r7, #8]
 800d694:	2100      	movs	r1, #0
 800d696:	68f8      	ldr	r0, [r7, #12]
 800d698:	f000 fd04 	bl	800e0a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d69c:	2300      	movs	r3, #0
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3710      	adds	r7, #16
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}

0800d6a6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d6a6:	b580      	push	{r7, lr}
 800d6a8:	b084      	sub	sp, #16
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	60f8      	str	r0, [r7, #12]
 800d6ae:	60b9      	str	r1, [r7, #8]
 800d6b0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	68ba      	ldr	r2, [r7, #8]
 800d6b6:	2100      	movs	r1, #0
 800d6b8:	68f8      	ldr	r0, [r7, #12]
 800d6ba:	f000 fcf3 	bl	800e0a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d6be:	2300      	movs	r3, #0
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3710      	adds	r7, #16
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2204      	movs	r2, #4
 800d6d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d6d8:	2300      	movs	r3, #0
 800d6da:	2200      	movs	r2, #0
 800d6dc:	2100      	movs	r1, #0
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f000 fcbf 	bl	800e062 <USBD_LL_Transmit>

  return USBD_OK;
 800d6e4:	2300      	movs	r3, #0
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3708      	adds	r7, #8
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}

0800d6ee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d6ee:	b580      	push	{r7, lr}
 800d6f0:	b082      	sub	sp, #8
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2205      	movs	r2, #5
 800d6fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d6fe:	2300      	movs	r3, #0
 800d700:	2200      	movs	r2, #0
 800d702:	2100      	movs	r1, #0
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f000 fccd 	bl	800e0a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d70a:	2300      	movs	r3, #0
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3708      	adds	r7, #8
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d718:	2200      	movs	r2, #0
 800d71a:	4913      	ldr	r1, [pc, #76]	@ (800d768 <MX_USB_DEVICE_Init+0x54>)
 800d71c:	4813      	ldr	r0, [pc, #76]	@ (800d76c <MX_USB_DEVICE_Init+0x58>)
 800d71e:	f7fe fccd 	bl	800c0bc <USBD_Init>
 800d722:	4603      	mov	r3, r0
 800d724:	2b00      	cmp	r3, #0
 800d726:	d001      	beq.n	800d72c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d728:	f7f3 f826 	bl	8000778 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d72c:	4910      	ldr	r1, [pc, #64]	@ (800d770 <MX_USB_DEVICE_Init+0x5c>)
 800d72e:	480f      	ldr	r0, [pc, #60]	@ (800d76c <MX_USB_DEVICE_Init+0x58>)
 800d730:	f7fe fcf4 	bl	800c11c <USBD_RegisterClass>
 800d734:	4603      	mov	r3, r0
 800d736:	2b00      	cmp	r3, #0
 800d738:	d001      	beq.n	800d73e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d73a:	f7f3 f81d 	bl	8000778 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d73e:	490d      	ldr	r1, [pc, #52]	@ (800d774 <MX_USB_DEVICE_Init+0x60>)
 800d740:	480a      	ldr	r0, [pc, #40]	@ (800d76c <MX_USB_DEVICE_Init+0x58>)
 800d742:	f7fe fbeb 	bl	800bf1c <USBD_CDC_RegisterInterface>
 800d746:	4603      	mov	r3, r0
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d001      	beq.n	800d750 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d74c:	f7f3 f814 	bl	8000778 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d750:	4806      	ldr	r0, [pc, #24]	@ (800d76c <MX_USB_DEVICE_Init+0x58>)
 800d752:	f7fe fd19 	bl	800c188 <USBD_Start>
 800d756:	4603      	mov	r3, r0
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d001      	beq.n	800d760 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d75c:	f7f3 f80c 	bl	8000778 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800d760:	f7f8 fc18 	bl	8005f94 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d764:	bf00      	nop
 800d766:	bd80      	pop	{r7, pc}
 800d768:	240000b0 	.word	0x240000b0
 800d76c:	24002a20 	.word	0x24002a20
 800d770:	2400001c 	.word	0x2400001c
 800d774:	2400009c 	.word	0x2400009c

0800d778 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d77c:	2200      	movs	r2, #0
 800d77e:	4905      	ldr	r1, [pc, #20]	@ (800d794 <CDC_Init_FS+0x1c>)
 800d780:	4805      	ldr	r0, [pc, #20]	@ (800d798 <CDC_Init_FS+0x20>)
 800d782:	f7fe fbe5 	bl	800bf50 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d786:	4905      	ldr	r1, [pc, #20]	@ (800d79c <CDC_Init_FS+0x24>)
 800d788:	4803      	ldr	r0, [pc, #12]	@ (800d798 <CDC_Init_FS+0x20>)
 800d78a:	f7fe fc03 	bl	800bf94 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d78e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d790:	4618      	mov	r0, r3
 800d792:	bd80      	pop	{r7, pc}
 800d794:	240034fc 	.word	0x240034fc
 800d798:	24002a20 	.word	0x24002a20
 800d79c:	24002cfc 	.word	0x24002cfc

0800d7a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d7a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b083      	sub	sp, #12
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	6039      	str	r1, [r7, #0]
 800d7ba:	71fb      	strb	r3, [r7, #7]
 800d7bc:	4613      	mov	r3, r2
 800d7be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d7c0:	79fb      	ldrb	r3, [r7, #7]
 800d7c2:	2b23      	cmp	r3, #35	@ 0x23
 800d7c4:	d84a      	bhi.n	800d85c <CDC_Control_FS+0xac>
 800d7c6:	a201      	add	r2, pc, #4	@ (adr r2, 800d7cc <CDC_Control_FS+0x1c>)
 800d7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7cc:	0800d85d 	.word	0x0800d85d
 800d7d0:	0800d85d 	.word	0x0800d85d
 800d7d4:	0800d85d 	.word	0x0800d85d
 800d7d8:	0800d85d 	.word	0x0800d85d
 800d7dc:	0800d85d 	.word	0x0800d85d
 800d7e0:	0800d85d 	.word	0x0800d85d
 800d7e4:	0800d85d 	.word	0x0800d85d
 800d7e8:	0800d85d 	.word	0x0800d85d
 800d7ec:	0800d85d 	.word	0x0800d85d
 800d7f0:	0800d85d 	.word	0x0800d85d
 800d7f4:	0800d85d 	.word	0x0800d85d
 800d7f8:	0800d85d 	.word	0x0800d85d
 800d7fc:	0800d85d 	.word	0x0800d85d
 800d800:	0800d85d 	.word	0x0800d85d
 800d804:	0800d85d 	.word	0x0800d85d
 800d808:	0800d85d 	.word	0x0800d85d
 800d80c:	0800d85d 	.word	0x0800d85d
 800d810:	0800d85d 	.word	0x0800d85d
 800d814:	0800d85d 	.word	0x0800d85d
 800d818:	0800d85d 	.word	0x0800d85d
 800d81c:	0800d85d 	.word	0x0800d85d
 800d820:	0800d85d 	.word	0x0800d85d
 800d824:	0800d85d 	.word	0x0800d85d
 800d828:	0800d85d 	.word	0x0800d85d
 800d82c:	0800d85d 	.word	0x0800d85d
 800d830:	0800d85d 	.word	0x0800d85d
 800d834:	0800d85d 	.word	0x0800d85d
 800d838:	0800d85d 	.word	0x0800d85d
 800d83c:	0800d85d 	.word	0x0800d85d
 800d840:	0800d85d 	.word	0x0800d85d
 800d844:	0800d85d 	.word	0x0800d85d
 800d848:	0800d85d 	.word	0x0800d85d
 800d84c:	0800d85d 	.word	0x0800d85d
 800d850:	0800d85d 	.word	0x0800d85d
 800d854:	0800d85d 	.word	0x0800d85d
 800d858:	0800d85d 	.word	0x0800d85d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d85c:	bf00      	nop
  }

  return (USBD_OK);
 800d85e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d860:	4618      	mov	r0, r3
 800d862:	370c      	adds	r7, #12
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr

0800d86c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d876:	6879      	ldr	r1, [r7, #4]
 800d878:	4805      	ldr	r0, [pc, #20]	@ (800d890 <CDC_Receive_FS+0x24>)
 800d87a:	f7fe fb8b 	bl	800bf94 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d87e:	4804      	ldr	r0, [pc, #16]	@ (800d890 <CDC_Receive_FS+0x24>)
 800d880:	f7fe fbe6 	bl	800c050 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d884:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d886:	4618      	mov	r0, r3
 800d888:	3708      	adds	r7, #8
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}
 800d88e:	bf00      	nop
 800d890:	24002a20 	.word	0x24002a20

0800d894 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b084      	sub	sp, #16
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	460b      	mov	r3, r1
 800d89e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d8a4:	4b0d      	ldr	r3, [pc, #52]	@ (800d8dc <CDC_Transmit_FS+0x48>)
 800d8a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d8aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d001      	beq.n	800d8ba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e00b      	b.n	800d8d2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d8ba:	887b      	ldrh	r3, [r7, #2]
 800d8bc:	461a      	mov	r2, r3
 800d8be:	6879      	ldr	r1, [r7, #4]
 800d8c0:	4806      	ldr	r0, [pc, #24]	@ (800d8dc <CDC_Transmit_FS+0x48>)
 800d8c2:	f7fe fb45 	bl	800bf50 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d8c6:	4805      	ldr	r0, [pc, #20]	@ (800d8dc <CDC_Transmit_FS+0x48>)
 800d8c8:	f7fe fb82 	bl	800bfd0 <USBD_CDC_TransmitPacket>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3710      	adds	r7, #16
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	24002a20 	.word	0x24002a20

0800d8e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b087      	sub	sp, #28
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	60f8      	str	r0, [r7, #12]
 800d8e8:	60b9      	str	r1, [r7, #8]
 800d8ea:	4613      	mov	r3, r2
 800d8ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d8f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	371c      	adds	r7, #28
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d900:	4770      	bx	lr
	...

0800d904 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d904:	b480      	push	{r7}
 800d906:	b083      	sub	sp, #12
 800d908:	af00      	add	r7, sp, #0
 800d90a:	4603      	mov	r3, r0
 800d90c:	6039      	str	r1, [r7, #0]
 800d90e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	2212      	movs	r2, #18
 800d914:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d916:	4b03      	ldr	r3, [pc, #12]	@ (800d924 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d918:	4618      	mov	r0, r3
 800d91a:	370c      	adds	r7, #12
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr
 800d924:	240000d0 	.word	0x240000d0

0800d928 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d928:	b480      	push	{r7}
 800d92a:	b083      	sub	sp, #12
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	4603      	mov	r3, r0
 800d930:	6039      	str	r1, [r7, #0]
 800d932:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	2204      	movs	r2, #4
 800d938:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d93a:	4b03      	ldr	r3, [pc, #12]	@ (800d948 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	370c      	adds	r7, #12
 800d940:	46bd      	mov	sp, r7
 800d942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d946:	4770      	bx	lr
 800d948:	240000e4 	.word	0x240000e4

0800d94c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b082      	sub	sp, #8
 800d950:	af00      	add	r7, sp, #0
 800d952:	4603      	mov	r3, r0
 800d954:	6039      	str	r1, [r7, #0]
 800d956:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d958:	79fb      	ldrb	r3, [r7, #7]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d105      	bne.n	800d96a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d95e:	683a      	ldr	r2, [r7, #0]
 800d960:	4907      	ldr	r1, [pc, #28]	@ (800d980 <USBD_FS_ProductStrDescriptor+0x34>)
 800d962:	4808      	ldr	r0, [pc, #32]	@ (800d984 <USBD_FS_ProductStrDescriptor+0x38>)
 800d964:	f7ff fdea 	bl	800d53c <USBD_GetString>
 800d968:	e004      	b.n	800d974 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d96a:	683a      	ldr	r2, [r7, #0]
 800d96c:	4904      	ldr	r1, [pc, #16]	@ (800d980 <USBD_FS_ProductStrDescriptor+0x34>)
 800d96e:	4805      	ldr	r0, [pc, #20]	@ (800d984 <USBD_FS_ProductStrDescriptor+0x38>)
 800d970:	f7ff fde4 	bl	800d53c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d974:	4b02      	ldr	r3, [pc, #8]	@ (800d980 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d976:	4618      	mov	r0, r3
 800d978:	3708      	adds	r7, #8
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	24003cfc 	.word	0x24003cfc
 800d984:	0800e204 	.word	0x0800e204

0800d988 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	4603      	mov	r3, r0
 800d990:	6039      	str	r1, [r7, #0]
 800d992:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d994:	683a      	ldr	r2, [r7, #0]
 800d996:	4904      	ldr	r1, [pc, #16]	@ (800d9a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d998:	4804      	ldr	r0, [pc, #16]	@ (800d9ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d99a:	f7ff fdcf 	bl	800d53c <USBD_GetString>
  return USBD_StrDesc;
 800d99e:	4b02      	ldr	r3, [pc, #8]	@ (800d9a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3708      	adds	r7, #8
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}
 800d9a8:	24003cfc 	.word	0x24003cfc
 800d9ac:	0800e21c 	.word	0x0800e21c

0800d9b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	6039      	str	r1, [r7, #0]
 800d9ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	221a      	movs	r2, #26
 800d9c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d9c2:	f000 f843 	bl	800da4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d9c6:	4b02      	ldr	r3, [pc, #8]	@ (800d9d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3708      	adds	r7, #8
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	240000e8 	.word	0x240000e8

0800d9d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b082      	sub	sp, #8
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	4603      	mov	r3, r0
 800d9dc:	6039      	str	r1, [r7, #0]
 800d9de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d9e0:	79fb      	ldrb	r3, [r7, #7]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d105      	bne.n	800d9f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d9e6:	683a      	ldr	r2, [r7, #0]
 800d9e8:	4907      	ldr	r1, [pc, #28]	@ (800da08 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d9ea:	4808      	ldr	r0, [pc, #32]	@ (800da0c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d9ec:	f7ff fda6 	bl	800d53c <USBD_GetString>
 800d9f0:	e004      	b.n	800d9fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d9f2:	683a      	ldr	r2, [r7, #0]
 800d9f4:	4904      	ldr	r1, [pc, #16]	@ (800da08 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d9f6:	4805      	ldr	r0, [pc, #20]	@ (800da0c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d9f8:	f7ff fda0 	bl	800d53c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d9fc:	4b02      	ldr	r3, [pc, #8]	@ (800da08 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3708      	adds	r7, #8
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}
 800da06:	bf00      	nop
 800da08:	24003cfc 	.word	0x24003cfc
 800da0c:	0800e230 	.word	0x0800e230

0800da10 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b082      	sub	sp, #8
 800da14:	af00      	add	r7, sp, #0
 800da16:	4603      	mov	r3, r0
 800da18:	6039      	str	r1, [r7, #0]
 800da1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800da1c:	79fb      	ldrb	r3, [r7, #7]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d105      	bne.n	800da2e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800da22:	683a      	ldr	r2, [r7, #0]
 800da24:	4907      	ldr	r1, [pc, #28]	@ (800da44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800da26:	4808      	ldr	r0, [pc, #32]	@ (800da48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800da28:	f7ff fd88 	bl	800d53c <USBD_GetString>
 800da2c:	e004      	b.n	800da38 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800da2e:	683a      	ldr	r2, [r7, #0]
 800da30:	4904      	ldr	r1, [pc, #16]	@ (800da44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800da32:	4805      	ldr	r0, [pc, #20]	@ (800da48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800da34:	f7ff fd82 	bl	800d53c <USBD_GetString>
  }
  return USBD_StrDesc;
 800da38:	4b02      	ldr	r3, [pc, #8]	@ (800da44 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3708      	adds	r7, #8
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	24003cfc 	.word	0x24003cfc
 800da48:	0800e23c 	.word	0x0800e23c

0800da4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800da52:	4b0f      	ldr	r3, [pc, #60]	@ (800da90 <Get_SerialNum+0x44>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800da58:	4b0e      	ldr	r3, [pc, #56]	@ (800da94 <Get_SerialNum+0x48>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800da5e:	4b0e      	ldr	r3, [pc, #56]	@ (800da98 <Get_SerialNum+0x4c>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800da64:	68fa      	ldr	r2, [r7, #12]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	4413      	add	r3, r2
 800da6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d009      	beq.n	800da86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800da72:	2208      	movs	r2, #8
 800da74:	4909      	ldr	r1, [pc, #36]	@ (800da9c <Get_SerialNum+0x50>)
 800da76:	68f8      	ldr	r0, [r7, #12]
 800da78:	f000 f814 	bl	800daa4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800da7c:	2204      	movs	r2, #4
 800da7e:	4908      	ldr	r1, [pc, #32]	@ (800daa0 <Get_SerialNum+0x54>)
 800da80:	68b8      	ldr	r0, [r7, #8]
 800da82:	f000 f80f 	bl	800daa4 <IntToUnicode>
  }
}
 800da86:	bf00      	nop
 800da88:	3710      	adds	r7, #16
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	1ff1e800 	.word	0x1ff1e800
 800da94:	1ff1e804 	.word	0x1ff1e804
 800da98:	1ff1e808 	.word	0x1ff1e808
 800da9c:	240000ea 	.word	0x240000ea
 800daa0:	240000fa 	.word	0x240000fa

0800daa4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800daa4:	b480      	push	{r7}
 800daa6:	b087      	sub	sp, #28
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	4613      	mov	r3, r2
 800dab0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dab2:	2300      	movs	r3, #0
 800dab4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dab6:	2300      	movs	r3, #0
 800dab8:	75fb      	strb	r3, [r7, #23]
 800daba:	e027      	b.n	800db0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	0f1b      	lsrs	r3, r3, #28
 800dac0:	2b09      	cmp	r3, #9
 800dac2:	d80b      	bhi.n	800dadc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	0f1b      	lsrs	r3, r3, #28
 800dac8:	b2da      	uxtb	r2, r3
 800daca:	7dfb      	ldrb	r3, [r7, #23]
 800dacc:	005b      	lsls	r3, r3, #1
 800dace:	4619      	mov	r1, r3
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	440b      	add	r3, r1
 800dad4:	3230      	adds	r2, #48	@ 0x30
 800dad6:	b2d2      	uxtb	r2, r2
 800dad8:	701a      	strb	r2, [r3, #0]
 800dada:	e00a      	b.n	800daf2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	0f1b      	lsrs	r3, r3, #28
 800dae0:	b2da      	uxtb	r2, r3
 800dae2:	7dfb      	ldrb	r3, [r7, #23]
 800dae4:	005b      	lsls	r3, r3, #1
 800dae6:	4619      	mov	r1, r3
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	440b      	add	r3, r1
 800daec:	3237      	adds	r2, #55	@ 0x37
 800daee:	b2d2      	uxtb	r2, r2
 800daf0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	011b      	lsls	r3, r3, #4
 800daf6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800daf8:	7dfb      	ldrb	r3, [r7, #23]
 800dafa:	005b      	lsls	r3, r3, #1
 800dafc:	3301      	adds	r3, #1
 800dafe:	68ba      	ldr	r2, [r7, #8]
 800db00:	4413      	add	r3, r2
 800db02:	2200      	movs	r2, #0
 800db04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800db06:	7dfb      	ldrb	r3, [r7, #23]
 800db08:	3301      	adds	r3, #1
 800db0a:	75fb      	strb	r3, [r7, #23]
 800db0c:	7dfa      	ldrb	r2, [r7, #23]
 800db0e:	79fb      	ldrb	r3, [r7, #7]
 800db10:	429a      	cmp	r2, r3
 800db12:	d3d3      	bcc.n	800dabc <IntToUnicode+0x18>
  }
}
 800db14:	bf00      	nop
 800db16:	bf00      	nop
 800db18:	371c      	adds	r7, #28
 800db1a:	46bd      	mov	sp, r7
 800db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db20:	4770      	bx	lr
	...

0800db24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b0ba      	sub	sp, #232	@ 0xe8
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db2c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800db30:	2200      	movs	r2, #0
 800db32:	601a      	str	r2, [r3, #0]
 800db34:	605a      	str	r2, [r3, #4]
 800db36:	609a      	str	r2, [r3, #8]
 800db38:	60da      	str	r2, [r3, #12]
 800db3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800db3c:	f107 0310 	add.w	r3, r7, #16
 800db40:	22c0      	movs	r2, #192	@ 0xc0
 800db42:	2100      	movs	r1, #0
 800db44:	4618      	mov	r0, r3
 800db46:	f000 fb25 	bl	800e194 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4a2c      	ldr	r2, [pc, #176]	@ (800dc00 <HAL_PCD_MspInit+0xdc>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d151      	bne.n	800dbf8 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800db54:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800db58:	f04f 0300 	mov.w	r3, #0
 800db5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800db60:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800db64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800db68:	f107 0310 	add.w	r3, r7, #16
 800db6c:	4618      	mov	r0, r3
 800db6e:	f7f9 f9f1 	bl	8006f54 <HAL_RCCEx_PeriphCLKConfig>
 800db72:	4603      	mov	r3, r0
 800db74:	2b00      	cmp	r3, #0
 800db76:	d001      	beq.n	800db7c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800db78:	f7f2 fdfe 	bl	8000778 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800db7c:	f7f8 fa0a 	bl	8005f94 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db80:	4b20      	ldr	r3, [pc, #128]	@ (800dc04 <HAL_PCD_MspInit+0xe0>)
 800db82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800db86:	4a1f      	ldr	r2, [pc, #124]	@ (800dc04 <HAL_PCD_MspInit+0xe0>)
 800db88:	f043 0301 	orr.w	r3, r3, #1
 800db8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800db90:	4b1c      	ldr	r3, [pc, #112]	@ (800dc04 <HAL_PCD_MspInit+0xe0>)
 800db92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800db96:	f003 0301 	and.w	r3, r3, #1
 800db9a:	60fb      	str	r3, [r7, #12]
 800db9c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800db9e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800dba2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dba6:	2302      	movs	r3, #2
 800dba8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbac:	2300      	movs	r3, #0
 800dbae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800dbb8:	230a      	movs	r3, #10
 800dbba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dbbe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800dbc2:	4619      	mov	r1, r3
 800dbc4:	4810      	ldr	r0, [pc, #64]	@ (800dc08 <HAL_PCD_MspInit+0xe4>)
 800dbc6:	f7f6 fd43 	bl	8004650 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dbca:	4b0e      	ldr	r3, [pc, #56]	@ (800dc04 <HAL_PCD_MspInit+0xe0>)
 800dbcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800dbd0:	4a0c      	ldr	r2, [pc, #48]	@ (800dc04 <HAL_PCD_MspInit+0xe0>)
 800dbd2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800dbd6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800dbda:	4b0a      	ldr	r3, [pc, #40]	@ (800dc04 <HAL_PCD_MspInit+0xe0>)
 800dbdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800dbe0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dbe4:	60bb      	str	r3, [r7, #8]
 800dbe6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800dbe8:	2200      	movs	r2, #0
 800dbea:	2100      	movs	r1, #0
 800dbec:	2065      	movs	r0, #101	@ 0x65
 800dbee:	f7f4 fc22 	bl	8002436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dbf2:	2065      	movs	r0, #101	@ 0x65
 800dbf4:	f7f4 fc39 	bl	800246a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dbf8:	bf00      	nop
 800dbfa:	37e8      	adds	r7, #232	@ 0xe8
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}
 800dc00:	40080000 	.word	0x40080000
 800dc04:	58024400 	.word	0x58024400
 800dc08:	58020000 	.word	0x58020000

0800dc0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800dc20:	4619      	mov	r1, r3
 800dc22:	4610      	mov	r0, r2
 800dc24:	f7fe fafd 	bl	800c222 <USBD_LL_SetupStage>
}
 800dc28:	bf00      	nop
 800dc2a:	3708      	adds	r7, #8
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b082      	sub	sp, #8
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	460b      	mov	r3, r1
 800dc3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800dc42:	78fa      	ldrb	r2, [r7, #3]
 800dc44:	6879      	ldr	r1, [r7, #4]
 800dc46:	4613      	mov	r3, r2
 800dc48:	00db      	lsls	r3, r3, #3
 800dc4a:	4413      	add	r3, r2
 800dc4c:	009b      	lsls	r3, r3, #2
 800dc4e:	440b      	add	r3, r1
 800dc50:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800dc54:	681a      	ldr	r2, [r3, #0]
 800dc56:	78fb      	ldrb	r3, [r7, #3]
 800dc58:	4619      	mov	r1, r3
 800dc5a:	f7fe fb37 	bl	800c2cc <USBD_LL_DataOutStage>
}
 800dc5e:	bf00      	nop
 800dc60:	3708      	adds	r7, #8
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}

0800dc66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc66:	b580      	push	{r7, lr}
 800dc68:	b082      	sub	sp, #8
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	6078      	str	r0, [r7, #4]
 800dc6e:	460b      	mov	r3, r1
 800dc70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800dc78:	78fa      	ldrb	r2, [r7, #3]
 800dc7a:	6879      	ldr	r1, [r7, #4]
 800dc7c:	4613      	mov	r3, r2
 800dc7e:	00db      	lsls	r3, r3, #3
 800dc80:	4413      	add	r3, r2
 800dc82:	009b      	lsls	r3, r3, #2
 800dc84:	440b      	add	r3, r1
 800dc86:	3320      	adds	r3, #32
 800dc88:	681a      	ldr	r2, [r3, #0]
 800dc8a:	78fb      	ldrb	r3, [r7, #3]
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	f7fe fbd0 	bl	800c432 <USBD_LL_DataInStage>
}
 800dc92:	bf00      	nop
 800dc94:	3708      	adds	r7, #8
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}

0800dc9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc9a:	b580      	push	{r7, lr}
 800dc9c:	b082      	sub	sp, #8
 800dc9e:	af00      	add	r7, sp, #0
 800dca0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7fe fd0a 	bl	800c6c2 <USBD_LL_SOF>
}
 800dcae:	bf00      	nop
 800dcb0:	3708      	adds	r7, #8
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}

0800dcb6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcb6:	b580      	push	{r7, lr}
 800dcb8:	b084      	sub	sp, #16
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	79db      	ldrb	r3, [r3, #7]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d102      	bne.n	800dcd0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800dcca:	2300      	movs	r3, #0
 800dccc:	73fb      	strb	r3, [r7, #15]
 800dcce:	e008      	b.n	800dce2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	79db      	ldrb	r3, [r3, #7]
 800dcd4:	2b02      	cmp	r3, #2
 800dcd6:	d102      	bne.n	800dcde <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800dcd8:	2301      	movs	r3, #1
 800dcda:	73fb      	strb	r3, [r7, #15]
 800dcdc:	e001      	b.n	800dce2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800dcde:	f7f2 fd4b 	bl	8000778 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dce8:	7bfa      	ldrb	r2, [r7, #15]
 800dcea:	4611      	mov	r1, r2
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7fe fca4 	bl	800c63a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f7fe fc4c 	bl	800c596 <USBD_LL_Reset>
}
 800dcfe:	bf00      	nop
 800dd00:	3710      	adds	r7, #16
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
	...

0800dd08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b082      	sub	sp, #8
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7fe fc9f 	bl	800c65a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	687a      	ldr	r2, [r7, #4]
 800dd28:	6812      	ldr	r2, [r2, #0]
 800dd2a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dd2e:	f043 0301 	orr.w	r3, r3, #1
 800dd32:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	7adb      	ldrb	r3, [r3, #11]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d005      	beq.n	800dd48 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd3c:	4b04      	ldr	r3, [pc, #16]	@ (800dd50 <HAL_PCD_SuspendCallback+0x48>)
 800dd3e:	691b      	ldr	r3, [r3, #16]
 800dd40:	4a03      	ldr	r2, [pc, #12]	@ (800dd50 <HAL_PCD_SuspendCallback+0x48>)
 800dd42:	f043 0306 	orr.w	r3, r3, #6
 800dd46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dd48:	bf00      	nop
 800dd4a:	3708      	adds	r7, #8
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}
 800dd50:	e000ed00 	.word	0xe000ed00

0800dd54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b082      	sub	sp, #8
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7fe fc95 	bl	800c692 <USBD_LL_Resume>
}
 800dd68:	bf00      	nop
 800dd6a:	3708      	adds	r7, #8
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	460b      	mov	r3, r1
 800dd7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dd82:	78fa      	ldrb	r2, [r7, #3]
 800dd84:	4611      	mov	r1, r2
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7fe fced 	bl	800c766 <USBD_LL_IsoOUTIncomplete>
}
 800dd8c:	bf00      	nop
 800dd8e:	3708      	adds	r7, #8
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}

0800dd94 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b082      	sub	sp, #8
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
 800dd9c:	460b      	mov	r3, r1
 800dd9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dda6:	78fa      	ldrb	r2, [r7, #3]
 800dda8:	4611      	mov	r1, r2
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7fe fca9 	bl	800c702 <USBD_LL_IsoINIncomplete>
}
 800ddb0:	bf00      	nop
 800ddb2:	3708      	adds	r7, #8
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}

0800ddb8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b082      	sub	sp, #8
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7fe fcff 	bl	800c7ca <USBD_LL_DevConnected>
}
 800ddcc:	bf00      	nop
 800ddce:	3708      	adds	r7, #8
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b082      	sub	sp, #8
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dde2:	4618      	mov	r0, r3
 800dde4:	f7fe fcfc 	bl	800c7e0 <USBD_LL_DevDisconnected>
}
 800dde8:	bf00      	nop
 800ddea:	3708      	adds	r7, #8
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b082      	sub	sp, #8
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d13e      	bne.n	800de7e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800de00:	4a21      	ldr	r2, [pc, #132]	@ (800de88 <USBD_LL_Init+0x98>)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	4a1f      	ldr	r2, [pc, #124]	@ (800de88 <USBD_LL_Init+0x98>)
 800de0c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800de10:	4b1d      	ldr	r3, [pc, #116]	@ (800de88 <USBD_LL_Init+0x98>)
 800de12:	4a1e      	ldr	r2, [pc, #120]	@ (800de8c <USBD_LL_Init+0x9c>)
 800de14:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800de16:	4b1c      	ldr	r3, [pc, #112]	@ (800de88 <USBD_LL_Init+0x98>)
 800de18:	2209      	movs	r2, #9
 800de1a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800de1c:	4b1a      	ldr	r3, [pc, #104]	@ (800de88 <USBD_LL_Init+0x98>)
 800de1e:	2202      	movs	r2, #2
 800de20:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800de22:	4b19      	ldr	r3, [pc, #100]	@ (800de88 <USBD_LL_Init+0x98>)
 800de24:	2200      	movs	r2, #0
 800de26:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800de28:	4b17      	ldr	r3, [pc, #92]	@ (800de88 <USBD_LL_Init+0x98>)
 800de2a:	2202      	movs	r2, #2
 800de2c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800de2e:	4b16      	ldr	r3, [pc, #88]	@ (800de88 <USBD_LL_Init+0x98>)
 800de30:	2200      	movs	r2, #0
 800de32:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800de34:	4b14      	ldr	r3, [pc, #80]	@ (800de88 <USBD_LL_Init+0x98>)
 800de36:	2200      	movs	r2, #0
 800de38:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800de3a:	4b13      	ldr	r3, [pc, #76]	@ (800de88 <USBD_LL_Init+0x98>)
 800de3c:	2200      	movs	r2, #0
 800de3e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800de40:	4b11      	ldr	r3, [pc, #68]	@ (800de88 <USBD_LL_Init+0x98>)
 800de42:	2200      	movs	r2, #0
 800de44:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800de46:	4b10      	ldr	r3, [pc, #64]	@ (800de88 <USBD_LL_Init+0x98>)
 800de48:	2200      	movs	r2, #0
 800de4a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800de4c:	4b0e      	ldr	r3, [pc, #56]	@ (800de88 <USBD_LL_Init+0x98>)
 800de4e:	2200      	movs	r2, #0
 800de50:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800de52:	480d      	ldr	r0, [pc, #52]	@ (800de88 <USBD_LL_Init+0x98>)
 800de54:	f7f6 fdc5 	bl	80049e2 <HAL_PCD_Init>
 800de58:	4603      	mov	r3, r0
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d001      	beq.n	800de62 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800de5e:	f7f2 fc8b 	bl	8000778 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800de62:	2180      	movs	r1, #128	@ 0x80
 800de64:	4808      	ldr	r0, [pc, #32]	@ (800de88 <USBD_LL_Init+0x98>)
 800de66:	f7f8 f81a 	bl	8005e9e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800de6a:	2240      	movs	r2, #64	@ 0x40
 800de6c:	2100      	movs	r1, #0
 800de6e:	4806      	ldr	r0, [pc, #24]	@ (800de88 <USBD_LL_Init+0x98>)
 800de70:	f7f7 ffce 	bl	8005e10 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800de74:	2280      	movs	r2, #128	@ 0x80
 800de76:	2101      	movs	r1, #1
 800de78:	4803      	ldr	r0, [pc, #12]	@ (800de88 <USBD_LL_Init+0x98>)
 800de7a:	f7f7 ffc9 	bl	8005e10 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800de7e:	2300      	movs	r3, #0
}
 800de80:	4618      	mov	r0, r3
 800de82:	3708      	adds	r7, #8
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}
 800de88:	24003efc 	.word	0x24003efc
 800de8c:	40080000 	.word	0x40080000

0800de90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b084      	sub	sp, #16
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de98:	2300      	movs	r3, #0
 800de9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de9c:	2300      	movs	r3, #0
 800de9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7f6 fea7 	bl	8004bfa <HAL_PCD_Start>
 800deac:	4603      	mov	r3, r0
 800deae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800deb0:	7bfb      	ldrb	r3, [r7, #15]
 800deb2:	4618      	mov	r0, r3
 800deb4:	f000 f942 	bl	800e13c <USBD_Get_USB_Status>
 800deb8:	4603      	mov	r3, r0
 800deba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800debc:	7bbb      	ldrb	r3, [r7, #14]
}
 800debe:	4618      	mov	r0, r3
 800dec0:	3710      	adds	r7, #16
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}

0800dec6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dec6:	b580      	push	{r7, lr}
 800dec8:	b084      	sub	sp, #16
 800deca:	af00      	add	r7, sp, #0
 800decc:	6078      	str	r0, [r7, #4]
 800dece:	4608      	mov	r0, r1
 800ded0:	4611      	mov	r1, r2
 800ded2:	461a      	mov	r2, r3
 800ded4:	4603      	mov	r3, r0
 800ded6:	70fb      	strb	r3, [r7, #3]
 800ded8:	460b      	mov	r3, r1
 800deda:	70bb      	strb	r3, [r7, #2]
 800dedc:	4613      	mov	r3, r2
 800dede:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dee0:	2300      	movs	r3, #0
 800dee2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dee4:	2300      	movs	r3, #0
 800dee6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800deee:	78bb      	ldrb	r3, [r7, #2]
 800def0:	883a      	ldrh	r2, [r7, #0]
 800def2:	78f9      	ldrb	r1, [r7, #3]
 800def4:	f7f7 fba8 	bl	8005648 <HAL_PCD_EP_Open>
 800def8:	4603      	mov	r3, r0
 800defa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800defc:	7bfb      	ldrb	r3, [r7, #15]
 800defe:	4618      	mov	r0, r3
 800df00:	f000 f91c 	bl	800e13c <USBD_Get_USB_Status>
 800df04:	4603      	mov	r3, r0
 800df06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df08:	7bbb      	ldrb	r3, [r7, #14]
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3710      	adds	r7, #16
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}

0800df12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df12:	b580      	push	{r7, lr}
 800df14:	b084      	sub	sp, #16
 800df16:	af00      	add	r7, sp, #0
 800df18:	6078      	str	r0, [r7, #4]
 800df1a:	460b      	mov	r3, r1
 800df1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df1e:	2300      	movs	r3, #0
 800df20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df22:	2300      	movs	r3, #0
 800df24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df2c:	78fa      	ldrb	r2, [r7, #3]
 800df2e:	4611      	mov	r1, r2
 800df30:	4618      	mov	r0, r3
 800df32:	f7f7 fbf1 	bl	8005718 <HAL_PCD_EP_Close>
 800df36:	4603      	mov	r3, r0
 800df38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df3a:	7bfb      	ldrb	r3, [r7, #15]
 800df3c:	4618      	mov	r0, r3
 800df3e:	f000 f8fd 	bl	800e13c <USBD_Get_USB_Status>
 800df42:	4603      	mov	r3, r0
 800df44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df46:	7bbb      	ldrb	r3, [r7, #14]
}
 800df48:	4618      	mov	r0, r3
 800df4a:	3710      	adds	r7, #16
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}

0800df50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b084      	sub	sp, #16
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	460b      	mov	r3, r1
 800df5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df5c:	2300      	movs	r3, #0
 800df5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df60:	2300      	movs	r3, #0
 800df62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df6a:	78fa      	ldrb	r2, [r7, #3]
 800df6c:	4611      	mov	r1, r2
 800df6e:	4618      	mov	r0, r3
 800df70:	f7f7 fca9 	bl	80058c6 <HAL_PCD_EP_SetStall>
 800df74:	4603      	mov	r3, r0
 800df76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df78:	7bfb      	ldrb	r3, [r7, #15]
 800df7a:	4618      	mov	r0, r3
 800df7c:	f000 f8de 	bl	800e13c <USBD_Get_USB_Status>
 800df80:	4603      	mov	r3, r0
 800df82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df84:	7bbb      	ldrb	r3, [r7, #14]
}
 800df86:	4618      	mov	r0, r3
 800df88:	3710      	adds	r7, #16
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}

0800df8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df8e:	b580      	push	{r7, lr}
 800df90:	b084      	sub	sp, #16
 800df92:	af00      	add	r7, sp, #0
 800df94:	6078      	str	r0, [r7, #4]
 800df96:	460b      	mov	r3, r1
 800df98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df9a:	2300      	movs	r3, #0
 800df9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dfa8:	78fa      	ldrb	r2, [r7, #3]
 800dfaa:	4611      	mov	r1, r2
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7f7 fced 	bl	800598c <HAL_PCD_EP_ClrStall>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfb6:	7bfb      	ldrb	r3, [r7, #15]
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f000 f8bf 	bl	800e13c <USBD_Get_USB_Status>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3710      	adds	r7, #16
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}

0800dfcc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b085      	sub	sp, #20
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	460b      	mov	r3, r1
 800dfd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dfde:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dfe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	da0b      	bge.n	800e000 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dfe8:	78fb      	ldrb	r3, [r7, #3]
 800dfea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dfee:	68f9      	ldr	r1, [r7, #12]
 800dff0:	4613      	mov	r3, r2
 800dff2:	00db      	lsls	r3, r3, #3
 800dff4:	4413      	add	r3, r2
 800dff6:	009b      	lsls	r3, r3, #2
 800dff8:	440b      	add	r3, r1
 800dffa:	3316      	adds	r3, #22
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	e00b      	b.n	800e018 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e000:	78fb      	ldrb	r3, [r7, #3]
 800e002:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e006:	68f9      	ldr	r1, [r7, #12]
 800e008:	4613      	mov	r3, r2
 800e00a:	00db      	lsls	r3, r3, #3
 800e00c:	4413      	add	r3, r2
 800e00e:	009b      	lsls	r3, r3, #2
 800e010:	440b      	add	r3, r1
 800e012:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e016:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e018:	4618      	mov	r0, r3
 800e01a:	3714      	adds	r7, #20
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr

0800e024 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b084      	sub	sp, #16
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	460b      	mov	r3, r1
 800e02e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e030:	2300      	movs	r3, #0
 800e032:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e034:	2300      	movs	r3, #0
 800e036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e03e:	78fa      	ldrb	r2, [r7, #3]
 800e040:	4611      	mov	r1, r2
 800e042:	4618      	mov	r0, r3
 800e044:	f7f7 fadc 	bl	8005600 <HAL_PCD_SetAddress>
 800e048:	4603      	mov	r3, r0
 800e04a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e04c:	7bfb      	ldrb	r3, [r7, #15]
 800e04e:	4618      	mov	r0, r3
 800e050:	f000 f874 	bl	800e13c <USBD_Get_USB_Status>
 800e054:	4603      	mov	r3, r0
 800e056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e058:	7bbb      	ldrb	r3, [r7, #14]
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3710      	adds	r7, #16
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}

0800e062 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e062:	b580      	push	{r7, lr}
 800e064:	b086      	sub	sp, #24
 800e066:	af00      	add	r7, sp, #0
 800e068:	60f8      	str	r0, [r7, #12]
 800e06a:	607a      	str	r2, [r7, #4]
 800e06c:	603b      	str	r3, [r7, #0]
 800e06e:	460b      	mov	r3, r1
 800e070:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e072:	2300      	movs	r3, #0
 800e074:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e076:	2300      	movs	r3, #0
 800e078:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e080:	7af9      	ldrb	r1, [r7, #11]
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	687a      	ldr	r2, [r7, #4]
 800e086:	f7f7 fbe4 	bl	8005852 <HAL_PCD_EP_Transmit>
 800e08a:	4603      	mov	r3, r0
 800e08c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e08e:	7dfb      	ldrb	r3, [r7, #23]
 800e090:	4618      	mov	r0, r3
 800e092:	f000 f853 	bl	800e13c <USBD_Get_USB_Status>
 800e096:	4603      	mov	r3, r0
 800e098:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e09a:	7dbb      	ldrb	r3, [r7, #22]
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3718      	adds	r7, #24
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}

0800e0a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b086      	sub	sp, #24
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	60f8      	str	r0, [r7, #12]
 800e0ac:	607a      	str	r2, [r7, #4]
 800e0ae:	603b      	str	r3, [r7, #0]
 800e0b0:	460b      	mov	r3, r1
 800e0b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e0c2:	7af9      	ldrb	r1, [r7, #11]
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	687a      	ldr	r2, [r7, #4]
 800e0c8:	f7f7 fb70 	bl	80057ac <HAL_PCD_EP_Receive>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0d0:	7dfb      	ldrb	r3, [r7, #23]
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f000 f832 	bl	800e13c <USBD_Get_USB_Status>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e0dc:	7dbb      	ldrb	r3, [r7, #22]
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3718      	adds	r7, #24
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}

0800e0e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0e6:	b580      	push	{r7, lr}
 800e0e8:	b082      	sub	sp, #8
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	6078      	str	r0, [r7, #4]
 800e0ee:	460b      	mov	r3, r1
 800e0f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e0f8:	78fa      	ldrb	r2, [r7, #3]
 800e0fa:	4611      	mov	r1, r2
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7f7 fb90 	bl	8005822 <HAL_PCD_EP_GetRxCount>
 800e102:	4603      	mov	r3, r0
}
 800e104:	4618      	mov	r0, r3
 800e106:	3708      	adds	r7, #8
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e10c:	b480      	push	{r7}
 800e10e:	b083      	sub	sp, #12
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e114:	4b03      	ldr	r3, [pc, #12]	@ (800e124 <USBD_static_malloc+0x18>)
}
 800e116:	4618      	mov	r0, r3
 800e118:	370c      	adds	r7, #12
 800e11a:	46bd      	mov	sp, r7
 800e11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e120:	4770      	bx	lr
 800e122:	bf00      	nop
 800e124:	240043e0 	.word	0x240043e0

0800e128 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e128:	b480      	push	{r7}
 800e12a:	b083      	sub	sp, #12
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800e130:	bf00      	nop
 800e132:	370c      	adds	r7, #12
 800e134:	46bd      	mov	sp, r7
 800e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13a:	4770      	bx	lr

0800e13c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b085      	sub	sp, #20
 800e140:	af00      	add	r7, sp, #0
 800e142:	4603      	mov	r3, r0
 800e144:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e146:	2300      	movs	r3, #0
 800e148:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e14a:	79fb      	ldrb	r3, [r7, #7]
 800e14c:	2b03      	cmp	r3, #3
 800e14e:	d817      	bhi.n	800e180 <USBD_Get_USB_Status+0x44>
 800e150:	a201      	add	r2, pc, #4	@ (adr r2, 800e158 <USBD_Get_USB_Status+0x1c>)
 800e152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e156:	bf00      	nop
 800e158:	0800e169 	.word	0x0800e169
 800e15c:	0800e16f 	.word	0x0800e16f
 800e160:	0800e175 	.word	0x0800e175
 800e164:	0800e17b 	.word	0x0800e17b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e168:	2300      	movs	r3, #0
 800e16a:	73fb      	strb	r3, [r7, #15]
    break;
 800e16c:	e00b      	b.n	800e186 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e16e:	2303      	movs	r3, #3
 800e170:	73fb      	strb	r3, [r7, #15]
    break;
 800e172:	e008      	b.n	800e186 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e174:	2301      	movs	r3, #1
 800e176:	73fb      	strb	r3, [r7, #15]
    break;
 800e178:	e005      	b.n	800e186 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e17a:	2303      	movs	r3, #3
 800e17c:	73fb      	strb	r3, [r7, #15]
    break;
 800e17e:	e002      	b.n	800e186 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e180:	2303      	movs	r3, #3
 800e182:	73fb      	strb	r3, [r7, #15]
    break;
 800e184:	bf00      	nop
  }
  return usb_status;
 800e186:	7bfb      	ldrb	r3, [r7, #15]
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3714      	adds	r7, #20
 800e18c:	46bd      	mov	sp, r7
 800e18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e192:	4770      	bx	lr

0800e194 <memset>:
 800e194:	4402      	add	r2, r0
 800e196:	4603      	mov	r3, r0
 800e198:	4293      	cmp	r3, r2
 800e19a:	d100      	bne.n	800e19e <memset+0xa>
 800e19c:	4770      	bx	lr
 800e19e:	f803 1b01 	strb.w	r1, [r3], #1
 800e1a2:	e7f9      	b.n	800e198 <memset+0x4>

0800e1a4 <__libc_init_array>:
 800e1a4:	b570      	push	{r4, r5, r6, lr}
 800e1a6:	4d0d      	ldr	r5, [pc, #52]	@ (800e1dc <__libc_init_array+0x38>)
 800e1a8:	4c0d      	ldr	r4, [pc, #52]	@ (800e1e0 <__libc_init_array+0x3c>)
 800e1aa:	1b64      	subs	r4, r4, r5
 800e1ac:	10a4      	asrs	r4, r4, #2
 800e1ae:	2600      	movs	r6, #0
 800e1b0:	42a6      	cmp	r6, r4
 800e1b2:	d109      	bne.n	800e1c8 <__libc_init_array+0x24>
 800e1b4:	4d0b      	ldr	r5, [pc, #44]	@ (800e1e4 <__libc_init_array+0x40>)
 800e1b6:	4c0c      	ldr	r4, [pc, #48]	@ (800e1e8 <__libc_init_array+0x44>)
 800e1b8:	f000 f818 	bl	800e1ec <_init>
 800e1bc:	1b64      	subs	r4, r4, r5
 800e1be:	10a4      	asrs	r4, r4, #2
 800e1c0:	2600      	movs	r6, #0
 800e1c2:	42a6      	cmp	r6, r4
 800e1c4:	d105      	bne.n	800e1d2 <__libc_init_array+0x2e>
 800e1c6:	bd70      	pop	{r4, r5, r6, pc}
 800e1c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1cc:	4798      	blx	r3
 800e1ce:	3601      	adds	r6, #1
 800e1d0:	e7ee      	b.n	800e1b0 <__libc_init_array+0xc>
 800e1d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1d6:	4798      	blx	r3
 800e1d8:	3601      	adds	r6, #1
 800e1da:	e7f2      	b.n	800e1c2 <__libc_init_array+0x1e>
 800e1dc:	0800e264 	.word	0x0800e264
 800e1e0:	0800e264 	.word	0x0800e264
 800e1e4:	0800e264 	.word	0x0800e264
 800e1e8:	0800e268 	.word	0x0800e268

0800e1ec <_init>:
 800e1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ee:	bf00      	nop
 800e1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1f2:	bc08      	pop	{r3}
 800e1f4:	469e      	mov	lr, r3
 800e1f6:	4770      	bx	lr

0800e1f8 <_fini>:
 800e1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1fa:	bf00      	nop
 800e1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1fe:	bc08      	pop	{r3}
 800e200:	469e      	mov	lr, r3
 800e202:	4770      	bx	lr
