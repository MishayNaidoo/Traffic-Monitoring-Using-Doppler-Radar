ARM GAS  /tmp/cc5Q23UD.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB146:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "usb_device.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** #include "usbd_cdc_if.h"
  26:Core/Src/main.c **** #include "MCP3914.h"
  27:Core/Src/main.c **** /* USER CODE END Includes */
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  31:Core/Src/main.c **** 
ARM GAS  /tmp/cc5Q23UD.s 			page 2


  32:Core/Src/main.c **** /* USER CODE END PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PD */
  36:Core/Src/main.c **** #define BUFFER_SIZE 6  // Adjust the buffer size as needed
  37:Core/Src/main.c **** /* USER CODE END PD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* USER CODE END PM */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  45:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** I2S_HandleTypeDef hi2s3;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** SPI_HandleTypeDef hspi1;
  50:Core/Src/main.c **** SPI_HandleTypeDef hspi2;
  51:Core/Src/main.c **** DMA_HandleTypeDef hdma_spi2_rx;
  52:Core/Src/main.c **** DMA_HandleTypeDef hdma_spi2_tx;
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* USER CODE BEGIN PV */
  57:Core/Src/main.c **** static MCP3914 adc;
  58:Core/Src/main.c **** uint8_t spiComplete = 0;
  59:Core/Src/main.c **** uint8_t spiHalfComplete = 0;
  60:Core/Src/main.c **** uint8_t bufPointer;
  61:Core/Src/main.c **** uint8_t txrxCount = 0;
  62:Core/Src/main.c **** /* USER CODE END PV */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  65:Core/Src/main.c **** void SystemClock_Config(void);
  66:Core/Src/main.c **** static void MX_GPIO_Init(void);
  67:Core/Src/main.c **** static void MX_DMA_Init(void);
  68:Core/Src/main.c **** static void MX_I2C1_Init(void);
  69:Core/Src/main.c **** static void MX_I2S3_Init(void);
  70:Core/Src/main.c **** static void MX_SPI1_Init(void);
  71:Core/Src/main.c **** static void MX_SPI2_Init(void);
  72:Core/Src/main.c **** static void MX_TIM1_Init(void);
  73:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** /* USER CODE END PFP */
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  78:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** /* USER CODE END 0 */
  81:Core/Src/main.c **** 
  82:Core/Src/main.c **** /**
  83:Core/Src/main.c ****   * @brief  The application entry point.
  84:Core/Src/main.c ****   * @retval int
  85:Core/Src/main.c ****   */
  86:Core/Src/main.c **** int main(void)
  87:Core/Src/main.c **** {
  88:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
ARM GAS  /tmp/cc5Q23UD.s 			page 3


  89:Core/Src/main.c **** 
  90:Core/Src/main.c ****   /* USER CODE END 1 */
  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  95:Core/Src/main.c ****   HAL_Init();
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   /* USER CODE END Init */
 100:Core/Src/main.c **** 
 101:Core/Src/main.c ****   /* Configure the system clock */
 102:Core/Src/main.c ****   SystemClock_Config();
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 105:Core/Src/main.c **** 
 106:Core/Src/main.c ****   /* USER CODE END SysInit */
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   /* Initialize all configured peripherals */
 109:Core/Src/main.c ****   MX_GPIO_Init();
 110:Core/Src/main.c ****   MX_DMA_Init();
 111:Core/Src/main.c ****   MX_I2C1_Init();
 112:Core/Src/main.c ****   MX_I2S3_Init();
 113:Core/Src/main.c ****   MX_SPI1_Init();
 114:Core/Src/main.c ****   MX_SPI2_Init();
 115:Core/Src/main.c ****   MX_USB_DEVICE_Init();
 116:Core/Src/main.c ****   MX_TIM1_Init();
 117:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 118:Core/Src/main.c ****   MCP3914_Initialise(&adc, &hspi2, NCS_GPIO_Port, NCS_Pin, BUFFER_SIZE);
 119:Core/Src/main.c **** 
 120:Core/Src/main.c ****   // ARRAY TO SET OSR TO 32 BY WRITING TO CONFIG0
 121:Core/Src/main.c ****   uint8_t osr32[3];
 122:Core/Src/main.c **** 
 123:Core/Src/main.c ****   // Extract the individual bytes using bitwise operations
 124:Core/Src/main.c ****   osr32[0] = (MCP3914_OSR_32 >> 16) & 0xFF; // Most significant byte
 125:Core/Src/main.c ****   osr32[1] = (MCP3914_OSR_32 >> 8) & 0xFF;  // Middle byte
 126:Core/Src/main.c ****   osr32[2] = MCP3914_OSR_32 & 0xFF;         // Least significant byte
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****   MCP3914_WriteRegister(&adc, MCP3914_REG_CONFIG0, osr32);
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****   // ARRAY TO STATUSCOM TO SINGLE CHANNEL
 131:Core/Src/main.c ****   uint8_t singleChannel[3];
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****   // Extract the individual bytes using bitwise operations
 134:Core/Src/main.c ****   singleChannel[0] = (MCP3914_SINGLECHANNEL >> 16) & 0xFF; // Most significant byte
 135:Core/Src/main.c ****   singleChannel[1] = (MCP3914_SINGLECHANNEL >> 8) & 0xFF;  // Middle byte
 136:Core/Src/main.c ****   singleChannel[2] = MCP3914_SINGLECHANNEL & 0xFF;         // Least significant byte
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   MCP3914_WriteRegister(&adc, MCP3914_REG_STATUSCOM, singleChannel);
 139:Core/Src/main.c **** 
 140:Core/Src/main.c ****   //uint8_t dataBuffer[BUFFER_SIZE];
 141:Core/Src/main.c ****   /* USER CODE END 2 */
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****   /* Infinite loop */
 144:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 145:Core/Src/main.c ****   //MCP3914_ReadRegister_DMA(&adc, MCP3914_REG_CHANNEL_1, BUFFER_SIZE);
ARM GAS  /tmp/cc5Q23UD.s 			page 4


 146:Core/Src/main.c ****   
 147:Core/Src/main.c ****   uint8_t REG = 0x41 | (MCP3914_REG_CHANNEL_1 << 1);
 148:Core/Src/main.c ****   uint8_t sendData[BUFFER_SIZE+1];
 149:Core/Src/main.c ****   sendData[0] = REG;
 150:Core/Src/main.c ****   uint8_t receiveData[BUFFER_SIZE+1];
 151:Core/Src/main.c ****   HAL_GPIO_WritePin(NCS_GPIO_Port, NCS_Pin, GPIO_PIN_RESET); //enable SPI by setting CS low
 152:Core/Src/main.c ****   if(HAL_SPI_TransmitReceive_DMA(&hspi2, sendData, receiveData, BUFFER_SIZE+1) != HAL_OK)
 153:Core/Src/main.c ****   {
 154:Core/Src/main.c ****     Error_Handler();
 155:Core/Src/main.c ****   }
 156:Core/Src/main.c ****   //HAL_GPIO_WritePin(NCS_GPIO_Port, NCS_Pin, GPIO_PIN_SET); //enable SPI by setting CS low
 157:Core/Src/main.c **** 
 158:Core/Src/main.c ****   while (1)
 159:Core/Src/main.c ****   {
 160:Core/Src/main.c ****     
 161:Core/Src/main.c ****     //HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 162:Core/Src/main.c ****      if(spiHalfComplete == 1)
 163:Core/Src/main.c ****      {
 164:Core/Src/main.c ****       // for(int i=0; i<BUFFER_SIZE; i++)
 165:Core/Src/main.c ****       // {
 166:Core/Src/main.c ****       //   adc.dmaData[i] = receiveData[i+1];
 167:Core/Src/main.c ****       // }
 168:Core/Src/main.c ****       //uint8_t test = 0;
 169:Core/Src/main.c ****       //CDC_Transmit_FS((uint8_t *)test, 1);
 170:Core/Src/main.c ****       //CDC_Transmit_FS(receiveData+1, (sizeof(receiveData)-1)/2);
 171:Core/Src/main.c ****       //HAL_Delay(1000);
 172:Core/Src/main.c ****       //HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 173:Core/Src/main.c ****       spiHalfComplete = 0;
 174:Core/Src/main.c ****      }
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****      if(spiComplete == 1)
 177:Core/Src/main.c ****      {
 178:Core/Src/main.c ****       for(int i=0; i<BUFFER_SIZE; i++)
 179:Core/Src/main.c ****       {
 180:Core/Src/main.c ****         adc.dmaData[i] = receiveData[i+1];
 181:Core/Src/main.c ****       }
 182:Core/Src/main.c ****       //uint8_t test = 0;
 183:Core/Src/main.c ****       //CDC_Transmit_FS((uint8_t *)test, 1);
 184:Core/Src/main.c ****       //CDC_Transmit_FS(receiveData+1+BUFFER_SIZE/2, (sizeof(receiveData)-1)/2);
 185:Core/Src/main.c ****       //HAL_Delay(1000);
 186:Core/Src/main.c ****       CDC_Transmit_FS(adc.dmaData, sizeof(adc.dmaData));
 187:Core/Src/main.c ****       HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 188:Core/Src/main.c ****       spiComplete = 0;
 189:Core/Src/main.c ****      }
 190:Core/Src/main.c ****     // MCP3914_ReadRegister_Buffer(&adc, MCP3914_REG_CHANNEL_1, BUFFER_SIZE);
 191:Core/Src/main.c ****     // CDC_Transmit_FS(adc.dmaData, sizeof(adc.dmaData));
 192:Core/Src/main.c ****     // MCP3914_ReadRegister(&adc, MCP3914_REG_CHANNEL_1);
 193:Core/Src/main.c ****     // CDC_Transmit_FS(adc.adcData, sizeof(adc.adcData));
 194:Core/Src/main.c ****     
 195:Core/Src/main.c ****     // HAL_Delay(1000);
 196:Core/Src/main.c ****    
 197:Core/Src/main.c ****     /* USER CODE END WHILE */
 198:Core/Src/main.c **** 
 199:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 200:Core/Src/main.c ****   }
 201:Core/Src/main.c ****   /* USER CODE END 3 */
 202:Core/Src/main.c **** }
ARM GAS  /tmp/cc5Q23UD.s 			page 5


 203:Core/Src/main.c **** 
 204:Core/Src/main.c **** /**
 205:Core/Src/main.c ****   * @brief System Clock Configuration
 206:Core/Src/main.c ****   * @retval None
 207:Core/Src/main.c ****   */
 208:Core/Src/main.c **** void SystemClock_Config(void)
 209:Core/Src/main.c **** {
 210:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 211:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 212:Core/Src/main.c **** 
 213:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 214:Core/Src/main.c ****   */
 215:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 216:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 217:Core/Src/main.c **** 
 218:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 219:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 220:Core/Src/main.c ****   */
 221:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 222:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 223:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 224:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 225:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 226:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 227:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 228:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 229:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 230:Core/Src/main.c ****   {
 231:Core/Src/main.c ****     Error_Handler();
 232:Core/Src/main.c ****   }
 233:Core/Src/main.c **** 
 234:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 235:Core/Src/main.c ****   */
 236:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 237:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 238:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 239:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 240:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 241:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 242:Core/Src/main.c **** 
 243:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 244:Core/Src/main.c ****   {
 245:Core/Src/main.c ****     Error_Handler();
 246:Core/Src/main.c ****   }
 247:Core/Src/main.c **** }
 248:Core/Src/main.c **** 
 249:Core/Src/main.c **** /**
 250:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 251:Core/Src/main.c ****   * @param None
 252:Core/Src/main.c ****   * @retval None
 253:Core/Src/main.c ****   */
 254:Core/Src/main.c **** static void MX_I2C1_Init(void)
 255:Core/Src/main.c **** {
 256:Core/Src/main.c **** 
 257:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 258:Core/Src/main.c **** 
 259:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
ARM GAS  /tmp/cc5Q23UD.s 			page 6


 260:Core/Src/main.c **** 
 261:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 262:Core/Src/main.c **** 
 263:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 264:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 265:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 266:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 267:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 268:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 269:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 270:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 271:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 272:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 273:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 274:Core/Src/main.c ****   {
 275:Core/Src/main.c ****     Error_Handler();
 276:Core/Src/main.c ****   }
 277:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 278:Core/Src/main.c **** 
 279:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 280:Core/Src/main.c **** 
 281:Core/Src/main.c **** }
 282:Core/Src/main.c **** 
 283:Core/Src/main.c **** /**
 284:Core/Src/main.c ****   * @brief I2S3 Initialization Function
 285:Core/Src/main.c ****   * @param None
 286:Core/Src/main.c ****   * @retval None
 287:Core/Src/main.c ****   */
 288:Core/Src/main.c **** static void MX_I2S3_Init(void)
 289:Core/Src/main.c **** {
 290:Core/Src/main.c **** 
 291:Core/Src/main.c ****   /* USER CODE BEGIN I2S3_Init 0 */
 292:Core/Src/main.c **** 
 293:Core/Src/main.c ****   /* USER CODE END I2S3_Init 0 */
 294:Core/Src/main.c **** 
 295:Core/Src/main.c ****   /* USER CODE BEGIN I2S3_Init 1 */
 296:Core/Src/main.c **** 
 297:Core/Src/main.c ****   /* USER CODE END I2S3_Init 1 */
 298:Core/Src/main.c ****   hi2s3.Instance = SPI3;
 299:Core/Src/main.c ****   hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 300:Core/Src/main.c ****   hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 301:Core/Src/main.c ****   hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 302:Core/Src/main.c ****   hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 303:Core/Src/main.c ****   hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 304:Core/Src/main.c ****   hi2s3.Init.CPOL = I2S_CPOL_LOW;
 305:Core/Src/main.c ****   hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 306:Core/Src/main.c ****   hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 307:Core/Src/main.c ****   if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 308:Core/Src/main.c ****   {
 309:Core/Src/main.c ****     Error_Handler();
 310:Core/Src/main.c ****   }
 311:Core/Src/main.c ****   /* USER CODE BEGIN I2S3_Init 2 */
 312:Core/Src/main.c **** 
 313:Core/Src/main.c ****   /* USER CODE END I2S3_Init 2 */
 314:Core/Src/main.c **** 
 315:Core/Src/main.c **** }
 316:Core/Src/main.c **** 
ARM GAS  /tmp/cc5Q23UD.s 			page 7


 317:Core/Src/main.c **** /**
 318:Core/Src/main.c ****   * @brief SPI1 Initialization Function
 319:Core/Src/main.c ****   * @param None
 320:Core/Src/main.c ****   * @retval None
 321:Core/Src/main.c ****   */
 322:Core/Src/main.c **** static void MX_SPI1_Init(void)
 323:Core/Src/main.c **** {
 324:Core/Src/main.c **** 
 325:Core/Src/main.c ****   /* USER CODE BEGIN SPI1_Init 0 */
 326:Core/Src/main.c **** 
 327:Core/Src/main.c ****   /* USER CODE END SPI1_Init 0 */
 328:Core/Src/main.c **** 
 329:Core/Src/main.c ****   /* USER CODE BEGIN SPI1_Init 1 */
 330:Core/Src/main.c **** 
 331:Core/Src/main.c ****   /* USER CODE END SPI1_Init 1 */
 332:Core/Src/main.c ****   /* SPI1 parameter configuration*/
 333:Core/Src/main.c ****   hspi1.Instance = SPI1;
 334:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 335:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 336:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 337:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 338:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 339:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 340:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 341:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 342:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 343:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 344:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 10;
 345:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 346:Core/Src/main.c ****   {
 347:Core/Src/main.c ****     Error_Handler();
 348:Core/Src/main.c ****   }
 349:Core/Src/main.c ****   /* USER CODE BEGIN SPI1_Init 2 */
 350:Core/Src/main.c **** 
 351:Core/Src/main.c ****   /* USER CODE END SPI1_Init 2 */
 352:Core/Src/main.c **** 
 353:Core/Src/main.c **** }
 354:Core/Src/main.c **** 
 355:Core/Src/main.c **** /**
 356:Core/Src/main.c ****   * @brief SPI2 Initialization Function
 357:Core/Src/main.c ****   * @param None
 358:Core/Src/main.c ****   * @retval None
 359:Core/Src/main.c ****   */
 360:Core/Src/main.c **** static void MX_SPI2_Init(void)
 361:Core/Src/main.c **** {
 362:Core/Src/main.c **** 
 363:Core/Src/main.c ****   /* USER CODE BEGIN SPI2_Init 0 */
 364:Core/Src/main.c **** 
 365:Core/Src/main.c ****   /* USER CODE END SPI2_Init 0 */
 366:Core/Src/main.c **** 
 367:Core/Src/main.c ****   /* USER CODE BEGIN SPI2_Init 1 */
 368:Core/Src/main.c **** 
 369:Core/Src/main.c ****   /* USER CODE END SPI2_Init 1 */
 370:Core/Src/main.c ****   /* SPI2 parameter configuration*/
 371:Core/Src/main.c ****   hspi2.Instance = SPI2;
 372:Core/Src/main.c ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 373:Core/Src/main.c ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
ARM GAS  /tmp/cc5Q23UD.s 			page 8


 374:Core/Src/main.c ****   hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 375:Core/Src/main.c ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 376:Core/Src/main.c ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 377:Core/Src/main.c ****   hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 378:Core/Src/main.c ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 379:Core/Src/main.c ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 380:Core/Src/main.c ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 381:Core/Src/main.c ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 382:Core/Src/main.c ****   hspi2.Init.CRCPolynomial = 10;
 383:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 384:Core/Src/main.c ****   {
 385:Core/Src/main.c ****     Error_Handler();
 386:Core/Src/main.c ****   }
 387:Core/Src/main.c ****   /* USER CODE BEGIN SPI2_Init 2 */
 388:Core/Src/main.c **** 
 389:Core/Src/main.c ****   /* USER CODE END SPI2_Init 2 */
 390:Core/Src/main.c **** 
 391:Core/Src/main.c **** }
 392:Core/Src/main.c **** 
 393:Core/Src/main.c **** /**
 394:Core/Src/main.c ****   * @brief TIM1 Initialization Function
 395:Core/Src/main.c ****   * @param None
 396:Core/Src/main.c ****   * @retval None
 397:Core/Src/main.c ****   */
 398:Core/Src/main.c **** static void MX_TIM1_Init(void)
 399:Core/Src/main.c **** {
 400:Core/Src/main.c **** 
 401:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 402:Core/Src/main.c **** 
 403:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 404:Core/Src/main.c **** 
 405:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 406:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 407:Core/Src/main.c **** 
 408:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 409:Core/Src/main.c **** 
 410:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 411:Core/Src/main.c ****   htim1.Instance = TIM1;
 412:Core/Src/main.c ****   htim1.Init.Prescaler = 168-1;
 413:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 414:Core/Src/main.c ****   htim1.Init.Period = 65536-1;
 415:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 416:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 417:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 418:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 419:Core/Src/main.c ****   {
 420:Core/Src/main.c ****     Error_Handler();
 421:Core/Src/main.c ****   }
 422:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 423:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 424:Core/Src/main.c ****   {
 425:Core/Src/main.c ****     Error_Handler();
 426:Core/Src/main.c ****   }
 427:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 428:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 429:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 430:Core/Src/main.c ****   {
ARM GAS  /tmp/cc5Q23UD.s 			page 9


 431:Core/Src/main.c ****     Error_Handler();
 432:Core/Src/main.c ****   }
 433:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 434:Core/Src/main.c **** 
 435:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 436:Core/Src/main.c **** 
 437:Core/Src/main.c **** }
 438:Core/Src/main.c **** 
 439:Core/Src/main.c **** /**
 440:Core/Src/main.c ****   * Enable DMA controller clock
 441:Core/Src/main.c ****   */
 442:Core/Src/main.c **** static void MX_DMA_Init(void)
 443:Core/Src/main.c **** {
 444:Core/Src/main.c **** 
 445:Core/Src/main.c ****   /* DMA controller clock enable */
 446:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 447:Core/Src/main.c **** 
 448:Core/Src/main.c ****   /* DMA interrupt init */
 449:Core/Src/main.c ****   /* DMA1_Stream3_IRQn interrupt configuration */
 450:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 451:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 452:Core/Src/main.c ****   /* DMA1_Stream4_IRQn interrupt configuration */
 453:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 454:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 455:Core/Src/main.c **** 
 456:Core/Src/main.c **** }
 457:Core/Src/main.c **** 
 458:Core/Src/main.c **** /**
 459:Core/Src/main.c ****   * @brief GPIO Initialization Function
 460:Core/Src/main.c ****   * @param None
 461:Core/Src/main.c ****   * @retval None
 462:Core/Src/main.c ****   */
 463:Core/Src/main.c **** static void MX_GPIO_Init(void)
 464:Core/Src/main.c **** {
  28              		.loc 1 464 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 48
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  33              		.cfi_def_cfa_offset 36
  34              		.cfi_offset 4, -36
  35              		.cfi_offset 5, -32
  36              		.cfi_offset 6, -28
  37              		.cfi_offset 7, -24
  38              		.cfi_offset 8, -20
  39              		.cfi_offset 9, -16
  40              		.cfi_offset 10, -12
  41              		.cfi_offset 11, -8
  42              		.cfi_offset 14, -4
  43 0004 8DB0     		sub	sp, sp, #52
  44              		.cfi_def_cfa_offset 88
 465:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  45              		.loc 1 465 3 view .LVU1
  46              		.loc 1 465 20 is_stmt 0 view .LVU2
  47 0006 0024     		movs	r4, #0
  48 0008 0794     		str	r4, [sp, #28]
  49 000a 0894     		str	r4, [sp, #32]
ARM GAS  /tmp/cc5Q23UD.s 			page 10


  50 000c 0994     		str	r4, [sp, #36]
  51 000e 0A94     		str	r4, [sp, #40]
  52 0010 0B94     		str	r4, [sp, #44]
 466:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 467:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 468:Core/Src/main.c **** 
 469:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 470:Core/Src/main.c ****   __HAL_RCC_GPIOE_CLK_ENABLE();
  53              		.loc 1 470 3 is_stmt 1 view .LVU3
  54              	.LBB4:
  55              		.loc 1 470 3 view .LVU4
  56 0012 0194     		str	r4, [sp, #4]
  57              		.loc 1 470 3 view .LVU5
  58 0014 564B     		ldr	r3, .L3
  59 0016 1A6B     		ldr	r2, [r3, #48]
  60 0018 42F01002 		orr	r2, r2, #16
  61 001c 1A63     		str	r2, [r3, #48]
  62              		.loc 1 470 3 view .LVU6
  63 001e 1A6B     		ldr	r2, [r3, #48]
  64 0020 02F01002 		and	r2, r2, #16
  65 0024 0192     		str	r2, [sp, #4]
  66              		.loc 1 470 3 view .LVU7
  67 0026 019A     		ldr	r2, [sp, #4]
  68              	.LBE4:
  69              		.loc 1 470 3 view .LVU8
 471:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  70              		.loc 1 471 3 view .LVU9
  71              	.LBB5:
  72              		.loc 1 471 3 view .LVU10
  73 0028 0294     		str	r4, [sp, #8]
  74              		.loc 1 471 3 view .LVU11
  75 002a 1A6B     		ldr	r2, [r3, #48]
  76 002c 42F00402 		orr	r2, r2, #4
  77 0030 1A63     		str	r2, [r3, #48]
  78              		.loc 1 471 3 view .LVU12
  79 0032 1A6B     		ldr	r2, [r3, #48]
  80 0034 02F00402 		and	r2, r2, #4
  81 0038 0292     		str	r2, [sp, #8]
  82              		.loc 1 471 3 view .LVU13
  83 003a 029A     		ldr	r2, [sp, #8]
  84              	.LBE5:
  85              		.loc 1 471 3 view .LVU14
 472:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  86              		.loc 1 472 3 view .LVU15
  87              	.LBB6:
  88              		.loc 1 472 3 view .LVU16
  89 003c 0394     		str	r4, [sp, #12]
  90              		.loc 1 472 3 view .LVU17
  91 003e 1A6B     		ldr	r2, [r3, #48]
  92 0040 42F08002 		orr	r2, r2, #128
  93 0044 1A63     		str	r2, [r3, #48]
  94              		.loc 1 472 3 view .LVU18
  95 0046 1A6B     		ldr	r2, [r3, #48]
  96 0048 02F08002 		and	r2, r2, #128
  97 004c 0392     		str	r2, [sp, #12]
  98              		.loc 1 472 3 view .LVU19
  99 004e 039A     		ldr	r2, [sp, #12]
ARM GAS  /tmp/cc5Q23UD.s 			page 11


 100              	.LBE6:
 101              		.loc 1 472 3 view .LVU20
 473:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 102              		.loc 1 473 3 view .LVU21
 103              	.LBB7:
 104              		.loc 1 473 3 view .LVU22
 105 0050 0494     		str	r4, [sp, #16]
 106              		.loc 1 473 3 view .LVU23
 107 0052 1A6B     		ldr	r2, [r3, #48]
 108 0054 42F00102 		orr	r2, r2, #1
 109 0058 1A63     		str	r2, [r3, #48]
 110              		.loc 1 473 3 view .LVU24
 111 005a 1A6B     		ldr	r2, [r3, #48]
 112 005c 02F00102 		and	r2, r2, #1
 113 0060 0492     		str	r2, [sp, #16]
 114              		.loc 1 473 3 view .LVU25
 115 0062 049A     		ldr	r2, [sp, #16]
 116              	.LBE7:
 117              		.loc 1 473 3 view .LVU26
 474:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 118              		.loc 1 474 3 view .LVU27
 119              	.LBB8:
 120              		.loc 1 474 3 view .LVU28
 121 0064 0594     		str	r4, [sp, #20]
 122              		.loc 1 474 3 view .LVU29
 123 0066 1A6B     		ldr	r2, [r3, #48]
 124 0068 42F00202 		orr	r2, r2, #2
 125 006c 1A63     		str	r2, [r3, #48]
 126              		.loc 1 474 3 view .LVU30
 127 006e 1A6B     		ldr	r2, [r3, #48]
 128 0070 02F00202 		and	r2, r2, #2
 129 0074 0592     		str	r2, [sp, #20]
 130              		.loc 1 474 3 view .LVU31
 131 0076 059A     		ldr	r2, [sp, #20]
 132              	.LBE8:
 133              		.loc 1 474 3 view .LVU32
 475:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 134              		.loc 1 475 3 view .LVU33
 135              	.LBB9:
 136              		.loc 1 475 3 view .LVU34
 137 0078 0694     		str	r4, [sp, #24]
 138              		.loc 1 475 3 view .LVU35
 139 007a 1A6B     		ldr	r2, [r3, #48]
 140 007c 42F00802 		orr	r2, r2, #8
 141 0080 1A63     		str	r2, [r3, #48]
 142              		.loc 1 475 3 view .LVU36
 143 0082 1B6B     		ldr	r3, [r3, #48]
 144 0084 03F00803 		and	r3, r3, #8
 145 0088 0693     		str	r3, [sp, #24]
 146              		.loc 1 475 3 view .LVU37
 147 008a 069B     		ldr	r3, [sp, #24]
 148              	.LBE9:
 149              		.loc 1 475 3 view .LVU38
 476:Core/Src/main.c **** 
 477:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 478:Core/Src/main.c ****   HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 150              		.loc 1 478 3 view .LVU39
ARM GAS  /tmp/cc5Q23UD.s 			page 12


 151 008c 394E     		ldr	r6, .L3+4
 152 008e 2246     		mov	r2, r4
 153 0090 0821     		movs	r1, #8
 154 0092 3046     		mov	r0, r6
 155 0094 FFF7FEFF 		bl	HAL_GPIO_WritePin
 156              	.LVL0:
 479:Core/Src/main.c **** 
 480:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 481:Core/Src/main.c ****   HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 157              		.loc 1 481 3 view .LVU40
 158 0098 DFF8E090 		ldr	r9, .L3+12
 159 009c 0122     		movs	r2, #1
 160 009e 1146     		mov	r1, r2
 161 00a0 4846     		mov	r0, r9
 162 00a2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 163              	.LVL1:
 482:Core/Src/main.c **** 
 483:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 484:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOD, NCS_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 164              		.loc 1 484 3 view .LVU41
 165 00a6 DFF8D880 		ldr	r8, .L3+16
 166 00aa 2246     		mov	r2, r4
 167 00ac 4FF21011 		movw	r1, #61712
 168 00b0 4046     		mov	r0, r8
 169 00b2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 170              	.LVL2:
 485:Core/Src/main.c ****                           |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 486:Core/Src/main.c **** 
 487:Core/Src/main.c ****   /*Configure GPIO pin : CS_I2C_SPI_Pin */
 488:Core/Src/main.c ****   GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 171              		.loc 1 488 3 view .LVU42
 172              		.loc 1 488 23 is_stmt 0 view .LVU43
 173 00b6 0827     		movs	r7, #8
 174 00b8 0797     		str	r7, [sp, #28]
 489:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 175              		.loc 1 489 3 is_stmt 1 view .LVU44
 176              		.loc 1 489 24 is_stmt 0 view .LVU45
 177 00ba 0125     		movs	r5, #1
 178 00bc 0895     		str	r5, [sp, #32]
 490:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 179              		.loc 1 490 3 is_stmt 1 view .LVU46
 180              		.loc 1 490 24 is_stmt 0 view .LVU47
 181 00be 0994     		str	r4, [sp, #36]
 491:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 182              		.loc 1 491 3 is_stmt 1 view .LVU48
 183              		.loc 1 491 25 is_stmt 0 view .LVU49
 184 00c0 0A94     		str	r4, [sp, #40]
 492:Core/Src/main.c ****   HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 185              		.loc 1 492 3 is_stmt 1 view .LVU50
 186 00c2 07A9     		add	r1, sp, #28
 187 00c4 3046     		mov	r0, r6
 188 00c6 FFF7FEFF 		bl	HAL_GPIO_Init
 189              	.LVL3:
 493:Core/Src/main.c **** 
 494:Core/Src/main.c ****   /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
 495:Core/Src/main.c ****   GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 190              		.loc 1 495 3 view .LVU51
ARM GAS  /tmp/cc5Q23UD.s 			page 13


 191              		.loc 1 495 23 is_stmt 0 view .LVU52
 192 00ca 0795     		str	r5, [sp, #28]
 496:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 193              		.loc 1 496 3 is_stmt 1 view .LVU53
 194              		.loc 1 496 24 is_stmt 0 view .LVU54
 195 00cc 0895     		str	r5, [sp, #32]
 497:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 196              		.loc 1 497 3 is_stmt 1 view .LVU55
 197              		.loc 1 497 24 is_stmt 0 view .LVU56
 198 00ce 0994     		str	r4, [sp, #36]
 498:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 199              		.loc 1 498 3 is_stmt 1 view .LVU57
 200              		.loc 1 498 25 is_stmt 0 view .LVU58
 201 00d0 0A94     		str	r4, [sp, #40]
 499:Core/Src/main.c ****   HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 202              		.loc 1 499 3 is_stmt 1 view .LVU59
 203 00d2 07A9     		add	r1, sp, #28
 204 00d4 4846     		mov	r0, r9
 205 00d6 FFF7FEFF 		bl	HAL_GPIO_Init
 206              	.LVL4:
 500:Core/Src/main.c **** 
 501:Core/Src/main.c ****   /*Configure GPIO pin : PDM_OUT_Pin */
 502:Core/Src/main.c ****   GPIO_InitStruct.Pin = PDM_OUT_Pin;
 207              		.loc 1 502 3 view .LVU60
 208              		.loc 1 502 23 is_stmt 0 view .LVU61
 209 00da 0797     		str	r7, [sp, #28]
 503:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 210              		.loc 1 503 3 is_stmt 1 view .LVU62
 211              		.loc 1 503 24 is_stmt 0 view .LVU63
 212 00dc 0227     		movs	r7, #2
 213 00de 0897     		str	r7, [sp, #32]
 504:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 214              		.loc 1 504 3 is_stmt 1 view .LVU64
 215              		.loc 1 504 24 is_stmt 0 view .LVU65
 216 00e0 0994     		str	r4, [sp, #36]
 505:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 217              		.loc 1 505 3 is_stmt 1 view .LVU66
 218              		.loc 1 505 25 is_stmt 0 view .LVU67
 219 00e2 0A94     		str	r4, [sp, #40]
 506:Core/Src/main.c ****   GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 220              		.loc 1 506 3 is_stmt 1 view .LVU68
 221              		.loc 1 506 29 is_stmt 0 view .LVU69
 222 00e4 4FF0050A 		mov	r10, #5
 223 00e8 CDF82CA0 		str	r10, [sp, #44]
 507:Core/Src/main.c ****   HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 224              		.loc 1 507 3 is_stmt 1 view .LVU70
 225 00ec 07A9     		add	r1, sp, #28
 226 00ee 4846     		mov	r0, r9
 227 00f0 FFF7FEFF 		bl	HAL_GPIO_Init
 228              	.LVL5:
 508:Core/Src/main.c **** 
 509:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 510:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 229              		.loc 1 510 3 view .LVU71
 230              		.loc 1 510 23 is_stmt 0 view .LVU72
 231 00f4 0795     		str	r5, [sp, #28]
 511:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
ARM GAS  /tmp/cc5Q23UD.s 			page 14


 232              		.loc 1 511 3 is_stmt 1 view .LVU73
 233              		.loc 1 511 24 is_stmt 0 view .LVU74
 234 00f6 4FF49019 		mov	r9, #1179648
 235 00fa CDF82090 		str	r9, [sp, #32]
 512:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 236              		.loc 1 512 3 is_stmt 1 view .LVU75
 237              		.loc 1 512 24 is_stmt 0 view .LVU76
 238 00fe 0994     		str	r4, [sp, #36]
 513:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 239              		.loc 1 513 3 is_stmt 1 view .LVU77
 240 0100 07A9     		add	r1, sp, #28
 241 0102 1D48     		ldr	r0, .L3+8
 242 0104 FFF7FEFF 		bl	HAL_GPIO_Init
 243              	.LVL6:
 514:Core/Src/main.c **** 
 515:Core/Src/main.c ****   /*Configure GPIO pin : BOOT1_Pin */
 516:Core/Src/main.c ****   GPIO_InitStruct.Pin = BOOT1_Pin;
 244              		.loc 1 516 3 view .LVU78
 245              		.loc 1 516 23 is_stmt 0 view .LVU79
 246 0108 0423     		movs	r3, #4
 247 010a 0793     		str	r3, [sp, #28]
 517:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 248              		.loc 1 517 3 is_stmt 1 view .LVU80
 249              		.loc 1 517 24 is_stmt 0 view .LVU81
 250 010c 0894     		str	r4, [sp, #32]
 518:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 251              		.loc 1 518 3 is_stmt 1 view .LVU82
 252              		.loc 1 518 24 is_stmt 0 view .LVU83
 253 010e 0994     		str	r4, [sp, #36]
 519:Core/Src/main.c ****   HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 254              		.loc 1 519 3 is_stmt 1 view .LVU84
 255 0110 DFF870B0 		ldr	fp, .L3+20
 256 0114 07A9     		add	r1, sp, #28
 257 0116 5846     		mov	r0, fp
 258 0118 FFF7FEFF 		bl	HAL_GPIO_Init
 259              	.LVL7:
 520:Core/Src/main.c **** 
 521:Core/Src/main.c ****   /*Configure GPIO pin : CLK_IN_Pin */
 522:Core/Src/main.c ****   GPIO_InitStruct.Pin = CLK_IN_Pin;
 260              		.loc 1 522 3 view .LVU85
 261              		.loc 1 522 23 is_stmt 0 view .LVU86
 262 011c 4FF48063 		mov	r3, #1024
 263 0120 0793     		str	r3, [sp, #28]
 523:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 264              		.loc 1 523 3 is_stmt 1 view .LVU87
 265              		.loc 1 523 24 is_stmt 0 view .LVU88
 266 0122 0897     		str	r7, [sp, #32]
 524:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 267              		.loc 1 524 3 is_stmt 1 view .LVU89
 268              		.loc 1 524 24 is_stmt 0 view .LVU90
 269 0124 0994     		str	r4, [sp, #36]
 525:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 270              		.loc 1 525 3 is_stmt 1 view .LVU91
 271              		.loc 1 525 25 is_stmt 0 view .LVU92
 272 0126 0A94     		str	r4, [sp, #40]
 526:Core/Src/main.c ****   GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 273              		.loc 1 526 3 is_stmt 1 view .LVU93
ARM GAS  /tmp/cc5Q23UD.s 			page 15


 274              		.loc 1 526 29 is_stmt 0 view .LVU94
 275 0128 CDF82CA0 		str	r10, [sp, #44]
 527:Core/Src/main.c ****   HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 276              		.loc 1 527 3 is_stmt 1 view .LVU95
 277 012c 07A9     		add	r1, sp, #28
 278 012e 5846     		mov	r0, fp
 279 0130 FFF7FEFF 		bl	HAL_GPIO_Init
 280              	.LVL8:
 528:Core/Src/main.c **** 
 529:Core/Src/main.c ****   /*Configure GPIO pins : NCS_Pin LD4_Pin LD3_Pin LD5_Pin
 530:Core/Src/main.c ****                            LD6_Pin Audio_RST_Pin */
 531:Core/Src/main.c ****   GPIO_InitStruct.Pin = NCS_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 281              		.loc 1 531 3 view .LVU96
 282              		.loc 1 531 23 is_stmt 0 view .LVU97
 283 0134 4FF21013 		movw	r3, #61712
 284 0138 0793     		str	r3, [sp, #28]
 532:Core/Src/main.c ****                           |LD6_Pin|Audio_RST_Pin;
 533:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 285              		.loc 1 533 3 is_stmt 1 view .LVU98
 286              		.loc 1 533 24 is_stmt 0 view .LVU99
 287 013a 0895     		str	r5, [sp, #32]
 534:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 288              		.loc 1 534 3 is_stmt 1 view .LVU100
 289              		.loc 1 534 24 is_stmt 0 view .LVU101
 290 013c 0994     		str	r4, [sp, #36]
 535:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 291              		.loc 1 535 3 is_stmt 1 view .LVU102
 292              		.loc 1 535 25 is_stmt 0 view .LVU103
 293 013e 0A94     		str	r4, [sp, #40]
 536:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 294              		.loc 1 536 3 is_stmt 1 view .LVU104
 295 0140 07A9     		add	r1, sp, #28
 296 0142 4046     		mov	r0, r8
 297 0144 FFF7FEFF 		bl	HAL_GPIO_Init
 298              	.LVL9:
 537:Core/Src/main.c **** 
 538:Core/Src/main.c ****   /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
 539:Core/Src/main.c ****   GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 299              		.loc 1 539 3 view .LVU105
 300              		.loc 1 539 23 is_stmt 0 view .LVU106
 301 0148 2023     		movs	r3, #32
 302 014a 0793     		str	r3, [sp, #28]
 540:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 303              		.loc 1 540 3 is_stmt 1 view .LVU107
 304              		.loc 1 540 24 is_stmt 0 view .LVU108
 305 014c 0894     		str	r4, [sp, #32]
 541:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 306              		.loc 1 541 3 is_stmt 1 view .LVU109
 307              		.loc 1 541 24 is_stmt 0 view .LVU110
 308 014e 0994     		str	r4, [sp, #36]
 542:Core/Src/main.c ****   HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 309              		.loc 1 542 3 is_stmt 1 view .LVU111
 310 0150 07A9     		add	r1, sp, #28
 311 0152 4046     		mov	r0, r8
 312 0154 FFF7FEFF 		bl	HAL_GPIO_Init
 313              	.LVL10:
 543:Core/Src/main.c **** 
ARM GAS  /tmp/cc5Q23UD.s 			page 16


 544:Core/Src/main.c ****   /*Configure GPIO pin : MEMS_INT2_Pin */
 545:Core/Src/main.c ****   GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 314              		.loc 1 545 3 view .LVU112
 315              		.loc 1 545 23 is_stmt 0 view .LVU113
 316 0158 0797     		str	r7, [sp, #28]
 546:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 317              		.loc 1 546 3 is_stmt 1 view .LVU114
 318              		.loc 1 546 24 is_stmt 0 view .LVU115
 319 015a CDF82090 		str	r9, [sp, #32]
 547:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 320              		.loc 1 547 3 is_stmt 1 view .LVU116
 321              		.loc 1 547 24 is_stmt 0 view .LVU117
 322 015e 0994     		str	r4, [sp, #36]
 548:Core/Src/main.c ****   HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 323              		.loc 1 548 3 is_stmt 1 view .LVU118
 324 0160 07A9     		add	r1, sp, #28
 325 0162 3046     		mov	r0, r6
 326 0164 FFF7FEFF 		bl	HAL_GPIO_Init
 327              	.LVL11:
 549:Core/Src/main.c **** 
 550:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 551:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 552:Core/Src/main.c **** }
 328              		.loc 1 552 1 is_stmt 0 view .LVU119
 329 0168 0DB0     		add	sp, sp, #52
 330              		.cfi_def_cfa_offset 36
 331              		@ sp needed
 332 016a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 333              	.L4:
 334 016e 00BF     		.align	2
 335              	.L3:
 336 0170 00380240 		.word	1073887232
 337 0174 00100240 		.word	1073876992
 338 0178 00000240 		.word	1073872896
 339 017c 00080240 		.word	1073874944
 340 0180 000C0240 		.word	1073875968
 341 0184 00040240 		.word	1073873920
 342              		.cfi_endproc
 343              	.LFE146:
 345              		.section	.text.MX_DMA_Init,"ax",%progbits
 346              		.align	1
 347              		.syntax unified
 348              		.thumb
 349              		.thumb_func
 351              	MX_DMA_Init:
 352              	.LFB145:
 443:Core/Src/main.c **** 
 353              		.loc 1 443 1 is_stmt 1 view -0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 8
 356              		@ frame_needed = 0, uses_anonymous_args = 0
 357 0000 10B5     		push	{r4, lr}
 358              		.cfi_def_cfa_offset 8
 359              		.cfi_offset 4, -8
 360              		.cfi_offset 14, -4
 361 0002 82B0     		sub	sp, sp, #8
 362              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cc5Q23UD.s 			page 17


 446:Core/Src/main.c **** 
 363              		.loc 1 446 3 view .LVU121
 364              	.LBB10:
 446:Core/Src/main.c **** 
 365              		.loc 1 446 3 view .LVU122
 366 0004 0024     		movs	r4, #0
 367 0006 0194     		str	r4, [sp, #4]
 446:Core/Src/main.c **** 
 368              		.loc 1 446 3 view .LVU123
 369 0008 0D4B     		ldr	r3, .L7
 370 000a 1A6B     		ldr	r2, [r3, #48]
 371 000c 42F40012 		orr	r2, r2, #2097152
 372 0010 1A63     		str	r2, [r3, #48]
 446:Core/Src/main.c **** 
 373              		.loc 1 446 3 view .LVU124
 374 0012 1B6B     		ldr	r3, [r3, #48]
 375 0014 03F40013 		and	r3, r3, #2097152
 376 0018 0193     		str	r3, [sp, #4]
 446:Core/Src/main.c **** 
 377              		.loc 1 446 3 view .LVU125
 378 001a 019B     		ldr	r3, [sp, #4]
 379              	.LBE10:
 446:Core/Src/main.c **** 
 380              		.loc 1 446 3 view .LVU126
 450:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 381              		.loc 1 450 3 view .LVU127
 382 001c 2246     		mov	r2, r4
 383 001e 2146     		mov	r1, r4
 384 0020 0E20     		movs	r0, #14
 385 0022 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 386              	.LVL12:
 451:Core/Src/main.c ****   /* DMA1_Stream4_IRQn interrupt configuration */
 387              		.loc 1 451 3 view .LVU128
 388 0026 0E20     		movs	r0, #14
 389 0028 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 390              	.LVL13:
 453:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 391              		.loc 1 453 3 view .LVU129
 392 002c 2246     		mov	r2, r4
 393 002e 2146     		mov	r1, r4
 394 0030 0F20     		movs	r0, #15
 395 0032 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 396              	.LVL14:
 454:Core/Src/main.c **** 
 397              		.loc 1 454 3 view .LVU130
 398 0036 0F20     		movs	r0, #15
 399 0038 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 400              	.LVL15:
 456:Core/Src/main.c **** 
 401              		.loc 1 456 1 is_stmt 0 view .LVU131
 402 003c 02B0     		add	sp, sp, #8
 403              		.cfi_def_cfa_offset 8
 404              		@ sp needed
 405 003e 10BD     		pop	{r4, pc}
 406              	.L8:
 407              		.align	2
 408              	.L7:
ARM GAS  /tmp/cc5Q23UD.s 			page 18


 409 0040 00380240 		.word	1073887232
 410              		.cfi_endproc
 411              	.LFE145:
 413              		.section	.text.HAL_SPI_TxRxCpltCallback,"ax",%progbits
 414              		.align	1
 415              		.global	HAL_SPI_TxRxCpltCallback
 416              		.syntax unified
 417              		.thumb
 418              		.thumb_func
 420              	HAL_SPI_TxRxCpltCallback:
 421              	.LVL16:
 422              	.LFB147:
 553:Core/Src/main.c **** 
 554:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 555:Core/Src/main.c **** void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
 556:Core/Src/main.c **** {
 423              		.loc 1 556 1 is_stmt 1 view -0
 424              		.cfi_startproc
 425              		@ args = 0, pretend = 0, frame = 0
 426              		@ frame_needed = 0, uses_anonymous_args = 0
 427              		@ link register save eliminated.
 557:Core/Src/main.c ****   spiComplete = 1;
 428              		.loc 1 557 3 view .LVU133
 429              		.loc 1 557 15 is_stmt 0 view .LVU134
 430 0000 014B     		ldr	r3, .L10
 431 0002 0122     		movs	r2, #1
 432 0004 1A70     		strb	r2, [r3]
 558:Core/Src/main.c **** 
 559:Core/Src/main.c ****   // HAL_GPIO_WritePin(NCS_GPIO_Port, NCS_Pin, GPIO_PIN_SET); //disable SPI by setting CS high
 560:Core/Src/main.c ****   // HAL_SPI_DMAStop(&hspi2);
 561:Core/Src/main.c **** 
 562:Core/Src/main.c ****   // uint8_t REG = 0x41 | (MCP3914_REG_CHANNEL_1 << 1);
 563:Core/Src/main.c ****   // uint8_t sendData[BUFFER_SIZE+1];
 564:Core/Src/main.c ****   // sendData[0] = REG;
 565:Core/Src/main.c ****   // uint8_t receiveData[BUFFER_SIZE+1];
 566:Core/Src/main.c **** 
 567:Core/Src/main.c ****   // HAL_GPIO_WritePin(NCS_GPIO_Port, NCS_Pin, GPIO_PIN_RESET); //enable SPI by setting CS low
 568:Core/Src/main.c ****   // if(HAL_SPI_TransmitReceive_DMA(&hspi2, sendData, receiveData, BUFFER_SIZE+1) != HAL_OK)
 569:Core/Src/main.c ****   // {
 570:Core/Src/main.c ****   //   Error_Handler();
 571:Core/Src/main.c ****   // }
 572:Core/Src/main.c ****   //MCP3914_ReadRegister_DMA(&adc, MCP3914_REG_CHANNEL_1, BUFFER_SIZE);
 573:Core/Src/main.c ****   
 574:Core/Src/main.c ****   // HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 575:Core/Src/main.c ****   // HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 576:Core/Src/main.c **** }
 433              		.loc 1 576 1 view .LVU135
 434 0006 7047     		bx	lr
 435              	.L11:
 436              		.align	2
 437              	.L10:
 438 0008 00000000 		.word	spiComplete
 439              		.cfi_endproc
 440              	.LFE147:
 442              		.section	.text.HAL_SPI_TxRxHalfCpltCallback,"ax",%progbits
 443              		.align	1
 444              		.global	HAL_SPI_TxRxHalfCpltCallback
ARM GAS  /tmp/cc5Q23UD.s 			page 19


 445              		.syntax unified
 446              		.thumb
 447              		.thumb_func
 449              	HAL_SPI_TxRxHalfCpltCallback:
 450              	.LVL17:
 451              	.LFB148:
 577:Core/Src/main.c **** 
 578:Core/Src/main.c **** void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 579:Core/Src/main.c **** {
 452              		.loc 1 579 1 is_stmt 1 view -0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 0
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456              		@ link register save eliminated.
 580:Core/Src/main.c ****   spiHalfComplete = 1;
 457              		.loc 1 580 3 view .LVU137
 458              		.loc 1 580 19 is_stmt 0 view .LVU138
 459 0000 014B     		ldr	r3, .L13
 460 0002 0122     		movs	r2, #1
 461 0004 1A70     		strb	r2, [r3]
 581:Core/Src/main.c ****   //HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 582:Core/Src/main.c **** }
 462              		.loc 1 582 1 view .LVU139
 463 0006 7047     		bx	lr
 464              	.L14:
 465              		.align	2
 466              	.L13:
 467 0008 00000000 		.word	spiHalfComplete
 468              		.cfi_endproc
 469              	.LFE148:
 471              		.section	.text.Error_Handler,"ax",%progbits
 472              		.align	1
 473              		.global	Error_Handler
 474              		.syntax unified
 475              		.thumb
 476              		.thumb_func
 478              	Error_Handler:
 479              	.LFB149:
 583:Core/Src/main.c **** /* USER CODE END 4 */
 584:Core/Src/main.c **** 
 585:Core/Src/main.c **** /**
 586:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 587:Core/Src/main.c ****   * @retval None
 588:Core/Src/main.c ****   */
 589:Core/Src/main.c **** void Error_Handler(void)
 590:Core/Src/main.c **** {
 480              		.loc 1 590 1 is_stmt 1 view -0
 481              		.cfi_startproc
 482              		@ Volatile: function does not return.
 483              		@ args = 0, pretend = 0, frame = 0
 484              		@ frame_needed = 0, uses_anonymous_args = 0
 485 0000 08B5     		push	{r3, lr}
 486              		.cfi_def_cfa_offset 8
 487              		.cfi_offset 3, -8
 488              		.cfi_offset 14, -4
 591:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 592:Core/Src/main.c ****   HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
ARM GAS  /tmp/cc5Q23UD.s 			page 20


 489              		.loc 1 592 3 view .LVU141
 490 0002 4FF48051 		mov	r1, #4096
 491 0006 0248     		ldr	r0, .L18
 492 0008 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 493              	.LVL18:
 593:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 594:Core/Src/main.c ****   __disable_irq();
 494              		.loc 1 594 3 view .LVU142
 495              	.LBB11:
 496              	.LBI11:
 497              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
ARM GAS  /tmp/cc5Q23UD.s 			page 21


  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
ARM GAS  /tmp/cc5Q23UD.s 			page 22


 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
ARM GAS  /tmp/cc5Q23UD.s 			page 23


 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
ARM GAS  /tmp/cc5Q23UD.s 			page 24


 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc5Q23UD.s 			page 25


 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
ARM GAS  /tmp/cc5Q23UD.s 			page 26


 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
ARM GAS  /tmp/cc5Q23UD.s 			page 27


 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cc5Q23UD.s 			page 28


 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc5Q23UD.s 			page 29


 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
ARM GAS  /tmp/cc5Q23UD.s 			page 30


 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
ARM GAS  /tmp/cc5Q23UD.s 			page 31


 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc5Q23UD.s 			page 32


 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
ARM GAS  /tmp/cc5Q23UD.s 			page 33


 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
ARM GAS  /tmp/cc5Q23UD.s 			page 34


 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cc5Q23UD.s 			page 35


 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
ARM GAS  /tmp/cc5Q23UD.s 			page 36


 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
ARM GAS  /tmp/cc5Q23UD.s 			page 37


 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 498              		.loc 2 960 27 view .LVU143
 499              	.LBB12:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 500              		.loc 2 962 3 view .LVU144
 501              		.syntax unified
 502              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 503 000c 72B6     		cpsid i
 504              	@ 0 "" 2
 505              		.thumb
 506              		.syntax unified
 507              	.L16:
 508              	.LBE12:
 509              	.LBE11:
 595:Core/Src/main.c ****   while (1)
 510              		.loc 1 595 3 view .LVU145
 596:Core/Src/main.c ****   {
 597:Core/Src/main.c ****   }
 511              		.loc 1 597 3 view .LVU146
 595:Core/Src/main.c ****   while (1)
 512              		.loc 1 595 9 view .LVU147
 513 000e FEE7     		b	.L16
 514              	.L19:
 515              		.align	2
 516              	.L18:
 517 0010 000C0240 		.word	1073875968
 518              		.cfi_endproc
 519              	.LFE149:
 521              		.section	.text.MX_I2C1_Init,"ax",%progbits
 522              		.align	1
 523              		.syntax unified
 524              		.thumb
 525              		.thumb_func
 527              	MX_I2C1_Init:
 528              	.LFB140:
 255:Core/Src/main.c **** 
 529              		.loc 1 255 1 view -0
 530              		.cfi_startproc
 531              		@ args = 0, pretend = 0, frame = 0
 532              		@ frame_needed = 0, uses_anonymous_args = 0
 533 0000 08B5     		push	{r3, lr}
 534              		.cfi_def_cfa_offset 8
 535              		.cfi_offset 3, -8
 536              		.cfi_offset 14, -4
 264:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 537              		.loc 1 264 3 view .LVU149
 264:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 538              		.loc 1 264 18 is_stmt 0 view .LVU150
 539 0002 0A48     		ldr	r0, .L24
 540 0004 0A4B     		ldr	r3, .L24+4
 541 0006 0360     		str	r3, [r0]
 265:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 542              		.loc 1 265 3 is_stmt 1 view .LVU151
 265:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 543              		.loc 1 265 25 is_stmt 0 view .LVU152
ARM GAS  /tmp/cc5Q23UD.s 			page 38


 544 0008 0A4B     		ldr	r3, .L24+8
 545 000a 4360     		str	r3, [r0, #4]
 266:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 546              		.loc 1 266 3 is_stmt 1 view .LVU153
 266:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 547              		.loc 1 266 24 is_stmt 0 view .LVU154
 548 000c 0023     		movs	r3, #0
 549 000e 8360     		str	r3, [r0, #8]
 267:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 550              		.loc 1 267 3 is_stmt 1 view .LVU155
 267:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 551              		.loc 1 267 26 is_stmt 0 view .LVU156
 552 0010 C360     		str	r3, [r0, #12]
 268:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 553              		.loc 1 268 3 is_stmt 1 view .LVU157
 268:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 554              		.loc 1 268 29 is_stmt 0 view .LVU158
 555 0012 4FF48042 		mov	r2, #16384
 556 0016 0261     		str	r2, [r0, #16]
 269:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 557              		.loc 1 269 3 is_stmt 1 view .LVU159
 269:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 558              		.loc 1 269 30 is_stmt 0 view .LVU160
 559 0018 4361     		str	r3, [r0, #20]
 270:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 560              		.loc 1 270 3 is_stmt 1 view .LVU161
 270:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 561              		.loc 1 270 26 is_stmt 0 view .LVU162
 562 001a 8361     		str	r3, [r0, #24]
 271:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 563              		.loc 1 271 3 is_stmt 1 view .LVU163
 271:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 564              		.loc 1 271 30 is_stmt 0 view .LVU164
 565 001c C361     		str	r3, [r0, #28]
 272:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 566              		.loc 1 272 3 is_stmt 1 view .LVU165
 272:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 567              		.loc 1 272 28 is_stmt 0 view .LVU166
 568 001e 0362     		str	r3, [r0, #32]
 273:Core/Src/main.c ****   {
 569              		.loc 1 273 3 is_stmt 1 view .LVU167
 273:Core/Src/main.c ****   {
 570              		.loc 1 273 7 is_stmt 0 view .LVU168
 571 0020 FFF7FEFF 		bl	HAL_I2C_Init
 572              	.LVL19:
 273:Core/Src/main.c ****   {
 573              		.loc 1 273 6 discriminator 1 view .LVU169
 574 0024 00B9     		cbnz	r0, .L23
 281:Core/Src/main.c **** 
 575              		.loc 1 281 1 view .LVU170
 576 0026 08BD     		pop	{r3, pc}
 577              	.L23:
 275:Core/Src/main.c ****   }
 578              		.loc 1 275 5 is_stmt 1 view .LVU171
 579 0028 FFF7FEFF 		bl	Error_Handler
 580              	.LVL20:
 581              	.L25:
ARM GAS  /tmp/cc5Q23UD.s 			page 39


 582              		.align	2
 583              	.L24:
 584 002c 00000000 		.word	hi2c1
 585 0030 00540040 		.word	1073763328
 586 0034 A0860100 		.word	100000
 587              		.cfi_endproc
 588              	.LFE140:
 590              		.section	.text.MX_I2S3_Init,"ax",%progbits
 591              		.align	1
 592              		.syntax unified
 593              		.thumb
 594              		.thumb_func
 596              	MX_I2S3_Init:
 597              	.LFB141:
 289:Core/Src/main.c **** 
 598              		.loc 1 289 1 view -0
 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 0
 601              		@ frame_needed = 0, uses_anonymous_args = 0
 602 0000 08B5     		push	{r3, lr}
 603              		.cfi_def_cfa_offset 8
 604              		.cfi_offset 3, -8
 605              		.cfi_offset 14, -4
 298:Core/Src/main.c ****   hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 606              		.loc 1 298 3 view .LVU173
 298:Core/Src/main.c ****   hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 607              		.loc 1 298 18 is_stmt 0 view .LVU174
 608 0002 0A48     		ldr	r0, .L30
 609 0004 0A4B     		ldr	r3, .L30+4
 610 0006 0360     		str	r3, [r0]
 299:Core/Src/main.c ****   hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 611              		.loc 1 299 3 is_stmt 1 view .LVU175
 299:Core/Src/main.c ****   hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 612              		.loc 1 299 19 is_stmt 0 view .LVU176
 613 0008 4FF40072 		mov	r2, #512
 614 000c 4260     		str	r2, [r0, #4]
 300:Core/Src/main.c ****   hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 615              		.loc 1 300 3 is_stmt 1 view .LVU177
 300:Core/Src/main.c ****   hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 616              		.loc 1 300 23 is_stmt 0 view .LVU178
 617 000e 0023     		movs	r3, #0
 618 0010 8360     		str	r3, [r0, #8]
 301:Core/Src/main.c ****   hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 619              		.loc 1 301 3 is_stmt 1 view .LVU179
 301:Core/Src/main.c ****   hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 620              		.loc 1 301 25 is_stmt 0 view .LVU180
 621 0012 C360     		str	r3, [r0, #12]
 302:Core/Src/main.c ****   hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 622              		.loc 1 302 3 is_stmt 1 view .LVU181
 302:Core/Src/main.c ****   hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 623              		.loc 1 302 25 is_stmt 0 view .LVU182
 624 0014 0261     		str	r2, [r0, #16]
 303:Core/Src/main.c ****   hi2s3.Init.CPOL = I2S_CPOL_LOW;
 625              		.loc 1 303 3 is_stmt 1 view .LVU183
 303:Core/Src/main.c ****   hi2s3.Init.CPOL = I2S_CPOL_LOW;
 626              		.loc 1 303 24 is_stmt 0 view .LVU184
 627 0016 074A     		ldr	r2, .L30+8
ARM GAS  /tmp/cc5Q23UD.s 			page 40


 628 0018 4261     		str	r2, [r0, #20]
 304:Core/Src/main.c ****   hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 629              		.loc 1 304 3 is_stmt 1 view .LVU185
 304:Core/Src/main.c ****   hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 630              		.loc 1 304 19 is_stmt 0 view .LVU186
 631 001a 8361     		str	r3, [r0, #24]
 305:Core/Src/main.c ****   hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 632              		.loc 1 305 3 is_stmt 1 view .LVU187
 305:Core/Src/main.c ****   hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 633              		.loc 1 305 26 is_stmt 0 view .LVU188
 634 001c C361     		str	r3, [r0, #28]
 306:Core/Src/main.c ****   if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 635              		.loc 1 306 3 is_stmt 1 view .LVU189
 306:Core/Src/main.c ****   if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 636              		.loc 1 306 29 is_stmt 0 view .LVU190
 637 001e 0362     		str	r3, [r0, #32]
 307:Core/Src/main.c ****   {
 638              		.loc 1 307 3 is_stmt 1 view .LVU191
 307:Core/Src/main.c ****   {
 639              		.loc 1 307 7 is_stmt 0 view .LVU192
 640 0020 FFF7FEFF 		bl	HAL_I2S_Init
 641              	.LVL21:
 307:Core/Src/main.c ****   {
 642              		.loc 1 307 6 discriminator 1 view .LVU193
 643 0024 00B9     		cbnz	r0, .L29
 315:Core/Src/main.c **** 
 644              		.loc 1 315 1 view .LVU194
 645 0026 08BD     		pop	{r3, pc}
 646              	.L29:
 309:Core/Src/main.c ****   }
 647              		.loc 1 309 5 is_stmt 1 view .LVU195
 648 0028 FFF7FEFF 		bl	Error_Handler
 649              	.LVL22:
 650              	.L31:
 651              		.align	2
 652              	.L30:
 653 002c 00000000 		.word	hi2s3
 654 0030 003C0040 		.word	1073757184
 655 0034 00770100 		.word	96000
 656              		.cfi_endproc
 657              	.LFE141:
 659              		.section	.text.MX_SPI1_Init,"ax",%progbits
 660              		.align	1
 661              		.syntax unified
 662              		.thumb
 663              		.thumb_func
 665              	MX_SPI1_Init:
 666              	.LFB142:
 323:Core/Src/main.c **** 
 667              		.loc 1 323 1 view -0
 668              		.cfi_startproc
 669              		@ args = 0, pretend = 0, frame = 0
 670              		@ frame_needed = 0, uses_anonymous_args = 0
 671 0000 08B5     		push	{r3, lr}
 672              		.cfi_def_cfa_offset 8
 673              		.cfi_offset 3, -8
 674              		.cfi_offset 14, -4
ARM GAS  /tmp/cc5Q23UD.s 			page 41


 333:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 675              		.loc 1 333 3 view .LVU197
 333:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 676              		.loc 1 333 18 is_stmt 0 view .LVU198
 677 0002 0D48     		ldr	r0, .L36
 678 0004 0D4B     		ldr	r3, .L36+4
 679 0006 0360     		str	r3, [r0]
 334:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 680              		.loc 1 334 3 is_stmt 1 view .LVU199
 334:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 681              		.loc 1 334 19 is_stmt 0 view .LVU200
 682 0008 4FF48273 		mov	r3, #260
 683 000c 4360     		str	r3, [r0, #4]
 335:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 684              		.loc 1 335 3 is_stmt 1 view .LVU201
 335:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 685              		.loc 1 335 24 is_stmt 0 view .LVU202
 686 000e 0023     		movs	r3, #0
 687 0010 8360     		str	r3, [r0, #8]
 336:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 688              		.loc 1 336 3 is_stmt 1 view .LVU203
 336:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 689              		.loc 1 336 23 is_stmt 0 view .LVU204
 690 0012 C360     		str	r3, [r0, #12]
 337:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 691              		.loc 1 337 3 is_stmt 1 view .LVU205
 337:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 692              		.loc 1 337 26 is_stmt 0 view .LVU206
 693 0014 0361     		str	r3, [r0, #16]
 338:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 694              		.loc 1 338 3 is_stmt 1 view .LVU207
 338:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 695              		.loc 1 338 23 is_stmt 0 view .LVU208
 696 0016 4361     		str	r3, [r0, #20]
 339:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 697              		.loc 1 339 3 is_stmt 1 view .LVU209
 339:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 698              		.loc 1 339 18 is_stmt 0 view .LVU210
 699 0018 4FF40072 		mov	r2, #512
 700 001c 8261     		str	r2, [r0, #24]
 340:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 701              		.loc 1 340 3 is_stmt 1 view .LVU211
 340:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 702              		.loc 1 340 32 is_stmt 0 view .LVU212
 703 001e C361     		str	r3, [r0, #28]
 341:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 704              		.loc 1 341 3 is_stmt 1 view .LVU213
 341:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 705              		.loc 1 341 23 is_stmt 0 view .LVU214
 706 0020 0362     		str	r3, [r0, #32]
 342:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 707              		.loc 1 342 3 is_stmt 1 view .LVU215
 342:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 708              		.loc 1 342 21 is_stmt 0 view .LVU216
 709 0022 4362     		str	r3, [r0, #36]
 343:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 10;
 710              		.loc 1 343 3 is_stmt 1 view .LVU217
ARM GAS  /tmp/cc5Q23UD.s 			page 42


 343:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 10;
 711              		.loc 1 343 29 is_stmt 0 view .LVU218
 712 0024 8362     		str	r3, [r0, #40]
 344:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 713              		.loc 1 344 3 is_stmt 1 view .LVU219
 344:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 714              		.loc 1 344 28 is_stmt 0 view .LVU220
 715 0026 0A23     		movs	r3, #10
 716 0028 C362     		str	r3, [r0, #44]
 345:Core/Src/main.c ****   {
 717              		.loc 1 345 3 is_stmt 1 view .LVU221
 345:Core/Src/main.c ****   {
 718              		.loc 1 345 7 is_stmt 0 view .LVU222
 719 002a FFF7FEFF 		bl	HAL_SPI_Init
 720              	.LVL23:
 345:Core/Src/main.c ****   {
 721              		.loc 1 345 6 discriminator 1 view .LVU223
 722 002e 00B9     		cbnz	r0, .L35
 353:Core/Src/main.c **** 
 723              		.loc 1 353 1 view .LVU224
 724 0030 08BD     		pop	{r3, pc}
 725              	.L35:
 347:Core/Src/main.c ****   }
 726              		.loc 1 347 5 is_stmt 1 view .LVU225
 727 0032 FFF7FEFF 		bl	Error_Handler
 728              	.LVL24:
 729              	.L37:
 730 0036 00BF     		.align	2
 731              	.L36:
 732 0038 00000000 		.word	hspi1
 733 003c 00300140 		.word	1073819648
 734              		.cfi_endproc
 735              	.LFE142:
 737              		.section	.text.MX_SPI2_Init,"ax",%progbits
 738              		.align	1
 739              		.syntax unified
 740              		.thumb
 741              		.thumb_func
 743              	MX_SPI2_Init:
 744              	.LFB143:
 361:Core/Src/main.c **** 
 745              		.loc 1 361 1 view -0
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 0
 748              		@ frame_needed = 0, uses_anonymous_args = 0
 749 0000 08B5     		push	{r3, lr}
 750              		.cfi_def_cfa_offset 8
 751              		.cfi_offset 3, -8
 752              		.cfi_offset 14, -4
 371:Core/Src/main.c ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 753              		.loc 1 371 3 view .LVU227
 371:Core/Src/main.c ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 754              		.loc 1 371 18 is_stmt 0 view .LVU228
 755 0002 0D48     		ldr	r0, .L42
 756 0004 0D4B     		ldr	r3, .L42+4
 757 0006 0360     		str	r3, [r0]
 372:Core/Src/main.c ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
ARM GAS  /tmp/cc5Q23UD.s 			page 43


 758              		.loc 1 372 3 is_stmt 1 view .LVU229
 372:Core/Src/main.c ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 759              		.loc 1 372 19 is_stmt 0 view .LVU230
 760 0008 4FF48273 		mov	r3, #260
 761 000c 4360     		str	r3, [r0, #4]
 373:Core/Src/main.c ****   hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 762              		.loc 1 373 3 is_stmt 1 view .LVU231
 373:Core/Src/main.c ****   hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 763              		.loc 1 373 24 is_stmt 0 view .LVU232
 764 000e 0023     		movs	r3, #0
 765 0010 8360     		str	r3, [r0, #8]
 374:Core/Src/main.c ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 766              		.loc 1 374 3 is_stmt 1 view .LVU233
 374:Core/Src/main.c ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 767              		.loc 1 374 23 is_stmt 0 view .LVU234
 768 0012 C360     		str	r3, [r0, #12]
 375:Core/Src/main.c ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 769              		.loc 1 375 3 is_stmt 1 view .LVU235
 375:Core/Src/main.c ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 770              		.loc 1 375 26 is_stmt 0 view .LVU236
 771 0014 0361     		str	r3, [r0, #16]
 376:Core/Src/main.c ****   hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 772              		.loc 1 376 3 is_stmt 1 view .LVU237
 376:Core/Src/main.c ****   hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 773              		.loc 1 376 23 is_stmt 0 view .LVU238
 774 0016 4361     		str	r3, [r0, #20]
 377:Core/Src/main.c ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 775              		.loc 1 377 3 is_stmt 1 view .LVU239
 377:Core/Src/main.c ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 776              		.loc 1 377 18 is_stmt 0 view .LVU240
 777 0018 4FF48022 		mov	r2, #262144
 778 001c 8261     		str	r2, [r0, #24]
 378:Core/Src/main.c ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 779              		.loc 1 378 3 is_stmt 1 view .LVU241
 378:Core/Src/main.c ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 780              		.loc 1 378 32 is_stmt 0 view .LVU242
 781 001e C361     		str	r3, [r0, #28]
 379:Core/Src/main.c ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 782              		.loc 1 379 3 is_stmt 1 view .LVU243
 379:Core/Src/main.c ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 783              		.loc 1 379 23 is_stmt 0 view .LVU244
 784 0020 0362     		str	r3, [r0, #32]
 380:Core/Src/main.c ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 785              		.loc 1 380 3 is_stmt 1 view .LVU245
 380:Core/Src/main.c ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 786              		.loc 1 380 21 is_stmt 0 view .LVU246
 787 0022 4362     		str	r3, [r0, #36]
 381:Core/Src/main.c ****   hspi2.Init.CRCPolynomial = 10;
 788              		.loc 1 381 3 is_stmt 1 view .LVU247
 381:Core/Src/main.c ****   hspi2.Init.CRCPolynomial = 10;
 789              		.loc 1 381 29 is_stmt 0 view .LVU248
 790 0024 8362     		str	r3, [r0, #40]
 382:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 791              		.loc 1 382 3 is_stmt 1 view .LVU249
 382:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 792              		.loc 1 382 28 is_stmt 0 view .LVU250
 793 0026 0A23     		movs	r3, #10
ARM GAS  /tmp/cc5Q23UD.s 			page 44


 794 0028 C362     		str	r3, [r0, #44]
 383:Core/Src/main.c ****   {
 795              		.loc 1 383 3 is_stmt 1 view .LVU251
 383:Core/Src/main.c ****   {
 796              		.loc 1 383 7 is_stmt 0 view .LVU252
 797 002a FFF7FEFF 		bl	HAL_SPI_Init
 798              	.LVL25:
 383:Core/Src/main.c ****   {
 799              		.loc 1 383 6 discriminator 1 view .LVU253
 800 002e 00B9     		cbnz	r0, .L41
 391:Core/Src/main.c **** 
 801              		.loc 1 391 1 view .LVU254
 802 0030 08BD     		pop	{r3, pc}
 803              	.L41:
 385:Core/Src/main.c ****   }
 804              		.loc 1 385 5 is_stmt 1 view .LVU255
 805 0032 FFF7FEFF 		bl	Error_Handler
 806              	.LVL26:
 807              	.L43:
 808 0036 00BF     		.align	2
 809              	.L42:
 810 0038 00000000 		.word	hspi2
 811 003c 00380040 		.word	1073756160
 812              		.cfi_endproc
 813              	.LFE143:
 815              		.section	.text.MX_TIM1_Init,"ax",%progbits
 816              		.align	1
 817              		.syntax unified
 818              		.thumb
 819              		.thumb_func
 821              	MX_TIM1_Init:
 822              	.LFB144:
 399:Core/Src/main.c **** 
 823              		.loc 1 399 1 view -0
 824              		.cfi_startproc
 825              		@ args = 0, pretend = 0, frame = 24
 826              		@ frame_needed = 0, uses_anonymous_args = 0
 827 0000 00B5     		push	{lr}
 828              		.cfi_def_cfa_offset 4
 829              		.cfi_offset 14, -4
 830 0002 87B0     		sub	sp, sp, #28
 831              		.cfi_def_cfa_offset 32
 405:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 832              		.loc 1 405 3 view .LVU257
 405:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 833              		.loc 1 405 26 is_stmt 0 view .LVU258
 834 0004 0023     		movs	r3, #0
 835 0006 0293     		str	r3, [sp, #8]
 836 0008 0393     		str	r3, [sp, #12]
 837 000a 0493     		str	r3, [sp, #16]
 838 000c 0593     		str	r3, [sp, #20]
 406:Core/Src/main.c **** 
 839              		.loc 1 406 3 is_stmt 1 view .LVU259
 406:Core/Src/main.c **** 
 840              		.loc 1 406 27 is_stmt 0 view .LVU260
 841 000e 0093     		str	r3, [sp]
 842 0010 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/cc5Q23UD.s 			page 45


 411:Core/Src/main.c ****   htim1.Init.Prescaler = 168-1;
 843              		.loc 1 411 3 is_stmt 1 view .LVU261
 411:Core/Src/main.c ****   htim1.Init.Prescaler = 168-1;
 844              		.loc 1 411 18 is_stmt 0 view .LVU262
 845 0012 1448     		ldr	r0, .L52
 846 0014 144A     		ldr	r2, .L52+4
 847 0016 0260     		str	r2, [r0]
 412:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 848              		.loc 1 412 3 is_stmt 1 view .LVU263
 412:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 849              		.loc 1 412 24 is_stmt 0 view .LVU264
 850 0018 A722     		movs	r2, #167
 851 001a 4260     		str	r2, [r0, #4]
 413:Core/Src/main.c ****   htim1.Init.Period = 65536-1;
 852              		.loc 1 413 3 is_stmt 1 view .LVU265
 413:Core/Src/main.c ****   htim1.Init.Period = 65536-1;
 853              		.loc 1 413 26 is_stmt 0 view .LVU266
 854 001c 8360     		str	r3, [r0, #8]
 414:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 855              		.loc 1 414 3 is_stmt 1 view .LVU267
 414:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 856              		.loc 1 414 21 is_stmt 0 view .LVU268
 857 001e 4FF6FF72 		movw	r2, #65535
 858 0022 C260     		str	r2, [r0, #12]
 415:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 859              		.loc 1 415 3 is_stmt 1 view .LVU269
 415:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 860              		.loc 1 415 28 is_stmt 0 view .LVU270
 861 0024 0361     		str	r3, [r0, #16]
 416:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 862              		.loc 1 416 3 is_stmt 1 view .LVU271
 416:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 863              		.loc 1 416 32 is_stmt 0 view .LVU272
 864 0026 4361     		str	r3, [r0, #20]
 417:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 865              		.loc 1 417 3 is_stmt 1 view .LVU273
 417:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 866              		.loc 1 417 32 is_stmt 0 view .LVU274
 867 0028 8361     		str	r3, [r0, #24]
 418:Core/Src/main.c ****   {
 868              		.loc 1 418 3 is_stmt 1 view .LVU275
 418:Core/Src/main.c ****   {
 869              		.loc 1 418 7 is_stmt 0 view .LVU276
 870 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 871              	.LVL27:
 418:Core/Src/main.c ****   {
 872              		.loc 1 418 6 discriminator 1 view .LVU277
 873 002e 90B9     		cbnz	r0, .L49
 422:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 874              		.loc 1 422 3 is_stmt 1 view .LVU278
 422:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 875              		.loc 1 422 34 is_stmt 0 view .LVU279
 876 0030 4FF48053 		mov	r3, #4096
 877 0034 0293     		str	r3, [sp, #8]
 423:Core/Src/main.c ****   {
 878              		.loc 1 423 3 is_stmt 1 view .LVU280
 423:Core/Src/main.c ****   {
ARM GAS  /tmp/cc5Q23UD.s 			page 46


 879              		.loc 1 423 7 is_stmt 0 view .LVU281
 880 0036 02A9     		add	r1, sp, #8
 881 0038 0A48     		ldr	r0, .L52
 882 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 883              	.LVL28:
 423:Core/Src/main.c ****   {
 884              		.loc 1 423 6 discriminator 1 view .LVU282
 885 003e 60B9     		cbnz	r0, .L50
 427:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 886              		.loc 1 427 3 is_stmt 1 view .LVU283
 427:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 887              		.loc 1 427 37 is_stmt 0 view .LVU284
 888 0040 0023     		movs	r3, #0
 889 0042 0093     		str	r3, [sp]
 428:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 890              		.loc 1 428 3 is_stmt 1 view .LVU285
 428:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 891              		.loc 1 428 33 is_stmt 0 view .LVU286
 892 0044 0193     		str	r3, [sp, #4]
 429:Core/Src/main.c ****   {
 893              		.loc 1 429 3 is_stmt 1 view .LVU287
 429:Core/Src/main.c ****   {
 894              		.loc 1 429 7 is_stmt 0 view .LVU288
 895 0046 6946     		mov	r1, sp
 896 0048 0648     		ldr	r0, .L52
 897 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 898              	.LVL29:
 429:Core/Src/main.c ****   {
 899              		.loc 1 429 6 discriminator 1 view .LVU289
 900 004e 30B9     		cbnz	r0, .L51
 437:Core/Src/main.c **** 
 901              		.loc 1 437 1 view .LVU290
 902 0050 07B0     		add	sp, sp, #28
 903              		.cfi_remember_state
 904              		.cfi_def_cfa_offset 4
 905              		@ sp needed
 906 0052 5DF804FB 		ldr	pc, [sp], #4
 907              	.L49:
 908              		.cfi_restore_state
 420:Core/Src/main.c ****   }
 909              		.loc 1 420 5 is_stmt 1 view .LVU291
 910 0056 FFF7FEFF 		bl	Error_Handler
 911              	.LVL30:
 912              	.L50:
 425:Core/Src/main.c ****   }
 913              		.loc 1 425 5 view .LVU292
 914 005a FFF7FEFF 		bl	Error_Handler
 915              	.LVL31:
 916              	.L51:
 431:Core/Src/main.c ****   }
 917              		.loc 1 431 5 view .LVU293
 918 005e FFF7FEFF 		bl	Error_Handler
 919              	.LVL32:
 920              	.L53:
 921 0062 00BF     		.align	2
 922              	.L52:
 923 0064 00000000 		.word	htim1
ARM GAS  /tmp/cc5Q23UD.s 			page 47


 924 0068 00000140 		.word	1073807360
 925              		.cfi_endproc
 926              	.LFE144:
 928              		.section	.text.SystemClock_Config,"ax",%progbits
 929              		.align	1
 930              		.global	SystemClock_Config
 931              		.syntax unified
 932              		.thumb
 933              		.thumb_func
 935              	SystemClock_Config:
 936              	.LFB139:
 209:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 937              		.loc 1 209 1 view -0
 938              		.cfi_startproc
 939              		@ args = 0, pretend = 0, frame = 80
 940              		@ frame_needed = 0, uses_anonymous_args = 0
 941 0000 00B5     		push	{lr}
 942              		.cfi_def_cfa_offset 4
 943              		.cfi_offset 14, -4
 944 0002 95B0     		sub	sp, sp, #84
 945              		.cfi_def_cfa_offset 88
 210:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 946              		.loc 1 210 3 view .LVU295
 210:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 947              		.loc 1 210 22 is_stmt 0 view .LVU296
 948 0004 3022     		movs	r2, #48
 949 0006 0021     		movs	r1, #0
 950 0008 08A8     		add	r0, sp, #32
 951 000a FFF7FEFF 		bl	memset
 952              	.LVL33:
 211:Core/Src/main.c **** 
 953              		.loc 1 211 3 is_stmt 1 view .LVU297
 211:Core/Src/main.c **** 
 954              		.loc 1 211 22 is_stmt 0 view .LVU298
 955 000e 0023     		movs	r3, #0
 956 0010 0393     		str	r3, [sp, #12]
 957 0012 0493     		str	r3, [sp, #16]
 958 0014 0593     		str	r3, [sp, #20]
 959 0016 0693     		str	r3, [sp, #24]
 960 0018 0793     		str	r3, [sp, #28]
 215:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 961              		.loc 1 215 3 is_stmt 1 view .LVU299
 962              	.LBB13:
 215:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 963              		.loc 1 215 3 view .LVU300
 964 001a 0193     		str	r3, [sp, #4]
 215:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 965              		.loc 1 215 3 view .LVU301
 966 001c 214A     		ldr	r2, .L60
 967 001e 116C     		ldr	r1, [r2, #64]
 968 0020 41F08051 		orr	r1, r1, #268435456
 969 0024 1164     		str	r1, [r2, #64]
 215:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 970              		.loc 1 215 3 view .LVU302
 971 0026 126C     		ldr	r2, [r2, #64]
 972 0028 02F08052 		and	r2, r2, #268435456
 973 002c 0192     		str	r2, [sp, #4]
ARM GAS  /tmp/cc5Q23UD.s 			page 48


 215:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 974              		.loc 1 215 3 view .LVU303
 975 002e 019A     		ldr	r2, [sp, #4]
 976              	.LBE13:
 215:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 977              		.loc 1 215 3 view .LVU304
 216:Core/Src/main.c **** 
 978              		.loc 1 216 3 view .LVU305
 979              	.LBB14:
 216:Core/Src/main.c **** 
 980              		.loc 1 216 3 view .LVU306
 981 0030 0293     		str	r3, [sp, #8]
 216:Core/Src/main.c **** 
 982              		.loc 1 216 3 view .LVU307
 983 0032 1D4B     		ldr	r3, .L60+4
 984 0034 1A68     		ldr	r2, [r3]
 985 0036 42F48042 		orr	r2, r2, #16384
 986 003a 1A60     		str	r2, [r3]
 216:Core/Src/main.c **** 
 987              		.loc 1 216 3 view .LVU308
 988 003c 1B68     		ldr	r3, [r3]
 989 003e 03F48043 		and	r3, r3, #16384
 990 0042 0293     		str	r3, [sp, #8]
 216:Core/Src/main.c **** 
 991              		.loc 1 216 3 view .LVU309
 992 0044 029B     		ldr	r3, [sp, #8]
 993              	.LBE14:
 216:Core/Src/main.c **** 
 994              		.loc 1 216 3 view .LVU310
 221:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 995              		.loc 1 221 3 view .LVU311
 221:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 996              		.loc 1 221 36 is_stmt 0 view .LVU312
 997 0046 0123     		movs	r3, #1
 998 0048 0893     		str	r3, [sp, #32]
 222:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 999              		.loc 1 222 3 is_stmt 1 view .LVU313
 222:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1000              		.loc 1 222 30 is_stmt 0 view .LVU314
 1001 004a 4FF48033 		mov	r3, #65536
 1002 004e 0993     		str	r3, [sp, #36]
 223:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1003              		.loc 1 223 3 is_stmt 1 view .LVU315
 223:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1004              		.loc 1 223 34 is_stmt 0 view .LVU316
 1005 0050 0223     		movs	r3, #2
 1006 0052 0E93     		str	r3, [sp, #56]
 224:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1007              		.loc 1 224 3 is_stmt 1 view .LVU317
 224:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1008              		.loc 1 224 35 is_stmt 0 view .LVU318
 1009 0054 4FF48002 		mov	r2, #4194304
 1010 0058 0F92     		str	r2, [sp, #60]
 225:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1011              		.loc 1 225 3 is_stmt 1 view .LVU319
 225:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1012              		.loc 1 225 30 is_stmt 0 view .LVU320
ARM GAS  /tmp/cc5Q23UD.s 			page 49


 1013 005a 0822     		movs	r2, #8
 1014 005c 1092     		str	r2, [sp, #64]
 226:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1015              		.loc 1 226 3 is_stmt 1 view .LVU321
 226:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1016              		.loc 1 226 30 is_stmt 0 view .LVU322
 1017 005e 4FF4A872 		mov	r2, #336
 1018 0062 1192     		str	r2, [sp, #68]
 227:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 1019              		.loc 1 227 3 is_stmt 1 view .LVU323
 227:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 1020              		.loc 1 227 30 is_stmt 0 view .LVU324
 1021 0064 1293     		str	r3, [sp, #72]
 228:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1022              		.loc 1 228 3 is_stmt 1 view .LVU325
 228:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1023              		.loc 1 228 30 is_stmt 0 view .LVU326
 1024 0066 0723     		movs	r3, #7
 1025 0068 1393     		str	r3, [sp, #76]
 229:Core/Src/main.c ****   {
 1026              		.loc 1 229 3 is_stmt 1 view .LVU327
 229:Core/Src/main.c ****   {
 1027              		.loc 1 229 7 is_stmt 0 view .LVU328
 1028 006a 08A8     		add	r0, sp, #32
 1029 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 1030              	.LVL34:
 229:Core/Src/main.c ****   {
 1031              		.loc 1 229 6 discriminator 1 view .LVU329
 1032 0070 98B9     		cbnz	r0, .L58
 236:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1033              		.loc 1 236 3 is_stmt 1 view .LVU330
 236:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1034              		.loc 1 236 31 is_stmt 0 view .LVU331
 1035 0072 0F23     		movs	r3, #15
 1036 0074 0393     		str	r3, [sp, #12]
 238:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1037              		.loc 1 238 3 is_stmt 1 view .LVU332
 238:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1038              		.loc 1 238 34 is_stmt 0 view .LVU333
 1039 0076 0223     		movs	r3, #2
 1040 0078 0493     		str	r3, [sp, #16]
 239:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 1041              		.loc 1 239 3 is_stmt 1 view .LVU334
 239:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 1042              		.loc 1 239 35 is_stmt 0 view .LVU335
 1043 007a 0023     		movs	r3, #0
 1044 007c 0593     		str	r3, [sp, #20]
 240:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1045              		.loc 1 240 3 is_stmt 1 view .LVU336
 240:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1046              		.loc 1 240 36 is_stmt 0 view .LVU337
 1047 007e 4FF4A053 		mov	r3, #5120
 1048 0082 0693     		str	r3, [sp, #24]
 241:Core/Src/main.c **** 
 1049              		.loc 1 241 3 is_stmt 1 view .LVU338
 241:Core/Src/main.c **** 
 1050              		.loc 1 241 36 is_stmt 0 view .LVU339
ARM GAS  /tmp/cc5Q23UD.s 			page 50


 1051 0084 4FF48053 		mov	r3, #4096
 1052 0088 0793     		str	r3, [sp, #28]
 243:Core/Src/main.c ****   {
 1053              		.loc 1 243 3 is_stmt 1 view .LVU340
 243:Core/Src/main.c ****   {
 1054              		.loc 1 243 7 is_stmt 0 view .LVU341
 1055 008a 0521     		movs	r1, #5
 1056 008c 03A8     		add	r0, sp, #12
 1057 008e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1058              	.LVL35:
 243:Core/Src/main.c ****   {
 1059              		.loc 1 243 6 discriminator 1 view .LVU342
 1060 0092 20B9     		cbnz	r0, .L59
 247:Core/Src/main.c **** 
 1061              		.loc 1 247 1 view .LVU343
 1062 0094 15B0     		add	sp, sp, #84
 1063              		.cfi_remember_state
 1064              		.cfi_def_cfa_offset 4
 1065              		@ sp needed
 1066 0096 5DF804FB 		ldr	pc, [sp], #4
 1067              	.L58:
 1068              		.cfi_restore_state
 231:Core/Src/main.c ****   }
 1069              		.loc 1 231 5 is_stmt 1 view .LVU344
 1070 009a FFF7FEFF 		bl	Error_Handler
 1071              	.LVL36:
 1072              	.L59:
 245:Core/Src/main.c ****   }
 1073              		.loc 1 245 5 view .LVU345
 1074 009e FFF7FEFF 		bl	Error_Handler
 1075              	.LVL37:
 1076              	.L61:
 1077 00a2 00BF     		.align	2
 1078              	.L60:
 1079 00a4 00380240 		.word	1073887232
 1080 00a8 00700040 		.word	1073770496
 1081              		.cfi_endproc
 1082              	.LFE139:
 1084              		.section	.text.main,"ax",%progbits
 1085              		.align	1
 1086              		.global	main
 1087              		.syntax unified
 1088              		.thumb
 1089              		.thumb_func
 1091              	main:
 1092              	.LFB138:
  87:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1093              		.loc 1 87 1 view -0
 1094              		.cfi_startproc
 1095              		@ args = 0, pretend = 0, frame = 24
 1096              		@ frame_needed = 0, uses_anonymous_args = 0
 1097 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1098              		.cfi_def_cfa_offset 20
 1099              		.cfi_offset 4, -20
 1100              		.cfi_offset 5, -16
 1101              		.cfi_offset 6, -12
 1102              		.cfi_offset 7, -8
ARM GAS  /tmp/cc5Q23UD.s 			page 51


 1103              		.cfi_offset 14, -4
 1104 0002 89B0     		sub	sp, sp, #36
 1105              		.cfi_def_cfa_offset 56
  95:Core/Src/main.c **** 
 1106              		.loc 1 95 3 view .LVU347
 1107 0004 FFF7FEFF 		bl	HAL_Init
 1108              	.LVL38:
 102:Core/Src/main.c **** 
 1109              		.loc 1 102 3 view .LVU348
 1110 0008 FFF7FEFF 		bl	SystemClock_Config
 1111              	.LVL39:
 109:Core/Src/main.c ****   MX_DMA_Init();
 1112              		.loc 1 109 3 view .LVU349
 1113 000c FFF7FEFF 		bl	MX_GPIO_Init
 1114              	.LVL40:
 110:Core/Src/main.c ****   MX_I2C1_Init();
 1115              		.loc 1 110 3 view .LVU350
 1116 0010 FFF7FEFF 		bl	MX_DMA_Init
 1117              	.LVL41:
 111:Core/Src/main.c ****   MX_I2S3_Init();
 1118              		.loc 1 111 3 view .LVU351
 1119 0014 FFF7FEFF 		bl	MX_I2C1_Init
 1120              	.LVL42:
 112:Core/Src/main.c ****   MX_SPI1_Init();
 1121              		.loc 1 112 3 view .LVU352
 1122 0018 FFF7FEFF 		bl	MX_I2S3_Init
 1123              	.LVL43:
 113:Core/Src/main.c ****   MX_SPI2_Init();
 1124              		.loc 1 113 3 view .LVU353
 1125 001c FFF7FEFF 		bl	MX_SPI1_Init
 1126              	.LVL44:
 114:Core/Src/main.c ****   MX_USB_DEVICE_Init();
 1127              		.loc 1 114 3 view .LVU354
 1128 0020 FFF7FEFF 		bl	MX_SPI2_Init
 1129              	.LVL45:
 115:Core/Src/main.c ****   MX_TIM1_Init();
 1130              		.loc 1 115 3 view .LVU355
 1131 0024 FFF7FEFF 		bl	MX_USB_DEVICE_Init
 1132              	.LVL46:
 116:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1133              		.loc 1 116 3 view .LVU356
 1134 0028 FFF7FEFF 		bl	MX_TIM1_Init
 1135              	.LVL47:
 118:Core/Src/main.c **** 
 1136              		.loc 1 118 3 view .LVU357
 1137 002c 2F4F     		ldr	r7, .L71
 1138 002e 304E     		ldr	r6, .L71+4
 1139 0030 304D     		ldr	r5, .L71+8
 1140 0032 0623     		movs	r3, #6
 1141 0034 0093     		str	r3, [sp]
 1142 0036 4FF48073 		mov	r3, #256
 1143 003a 3A46     		mov	r2, r7
 1144 003c 3146     		mov	r1, r6
 1145 003e 2846     		mov	r0, r5
 1146 0040 FFF7FEFF 		bl	MCP3914_Initialise
 1147              	.LVL48:
 121:Core/Src/main.c **** 
ARM GAS  /tmp/cc5Q23UD.s 			page 52


 1148              		.loc 1 121 3 view .LVU358
 124:Core/Src/main.c ****   osr32[1] = (MCP3914_OSR_32 >> 8) & 0xFF;  // Middle byte
 1149              		.loc 1 124 3 view .LVU359
 124:Core/Src/main.c ****   osr32[1] = (MCP3914_OSR_32 >> 8) & 0xFF;  // Middle byte
 1150              		.loc 1 124 12 is_stmt 0 view .LVU360
 1151 0044 3823     		movs	r3, #56
 1152 0046 8DF81C30 		strb	r3, [sp, #28]
 125:Core/Src/main.c ****   osr32[2] = MCP3914_OSR_32 & 0xFF;         // Least significant byte
 1153              		.loc 1 125 3 is_stmt 1 view .LVU361
 125:Core/Src/main.c ****   osr32[2] = MCP3914_OSR_32 & 0xFF;         // Least significant byte
 1154              		.loc 1 125 12 is_stmt 0 view .LVU362
 1155 004a 0024     		movs	r4, #0
 1156 004c 8DF81D40 		strb	r4, [sp, #29]
 126:Core/Src/main.c **** 
 1157              		.loc 1 126 3 is_stmt 1 view .LVU363
 126:Core/Src/main.c **** 
 1158              		.loc 1 126 12 is_stmt 0 view .LVU364
 1159 0050 5023     		movs	r3, #80
 1160 0052 8DF81E30 		strb	r3, [sp, #30]
 128:Core/Src/main.c **** 
 1161              		.loc 1 128 3 is_stmt 1 view .LVU365
 1162 0056 07AA     		add	r2, sp, #28
 1163 0058 0D21     		movs	r1, #13
 1164 005a 2846     		mov	r0, r5
 1165 005c FFF7FEFF 		bl	MCP3914_WriteRegister
 1166              	.LVL49:
 131:Core/Src/main.c **** 
 1167              		.loc 1 131 3 view .LVU366
 134:Core/Src/main.c ****   singleChannel[1] = (MCP3914_SINGLECHANNEL >> 8) & 0xFF;  // Middle byte
 1168              		.loc 1 134 3 view .LVU367
 134:Core/Src/main.c ****   singleChannel[1] = (MCP3914_SINGLECHANNEL >> 8) & 0xFF;  // Middle byte
 1169              		.loc 1 134 20 is_stmt 0 view .LVU368
 1170 0060 2923     		movs	r3, #41
 1171 0062 8DF81830 		strb	r3, [sp, #24]
 135:Core/Src/main.c ****   singleChannel[2] = MCP3914_SINGLECHANNEL & 0xFF;         // Least significant byte
 1172              		.loc 1 135 3 is_stmt 1 view .LVU369
 135:Core/Src/main.c ****   singleChannel[2] = MCP3914_SINGLECHANNEL & 0xFF;         // Least significant byte
 1173              		.loc 1 135 20 is_stmt 0 view .LVU370
 1174 0066 8DF81940 		strb	r4, [sp, #25]
 136:Core/Src/main.c **** 
 1175              		.loc 1 136 3 is_stmt 1 view .LVU371
 136:Core/Src/main.c **** 
 1176              		.loc 1 136 20 is_stmt 0 view .LVU372
 1177 006a 8DF81A40 		strb	r4, [sp, #26]
 138:Core/Src/main.c **** 
 1178              		.loc 1 138 3 is_stmt 1 view .LVU373
 1179 006e 06AA     		add	r2, sp, #24
 1180 0070 0C21     		movs	r1, #12
 1181 0072 2846     		mov	r0, r5
 1182 0074 FFF7FEFF 		bl	MCP3914_WriteRegister
 1183              	.LVL50:
 147:Core/Src/main.c ****   uint8_t sendData[BUFFER_SIZE+1];
 1184              		.loc 1 147 3 view .LVU374
 148:Core/Src/main.c ****   sendData[0] = REG;
 1185              		.loc 1 148 3 view .LVU375
 149:Core/Src/main.c ****   uint8_t receiveData[BUFFER_SIZE+1];
 1186              		.loc 1 149 3 view .LVU376
ARM GAS  /tmp/cc5Q23UD.s 			page 53


 149:Core/Src/main.c ****   uint8_t receiveData[BUFFER_SIZE+1];
 1187              		.loc 1 149 15 is_stmt 0 view .LVU377
 1188 0078 4323     		movs	r3, #67
 1189 007a 8DF81030 		strb	r3, [sp, #16]
 150:Core/Src/main.c ****   HAL_GPIO_WritePin(NCS_GPIO_Port, NCS_Pin, GPIO_PIN_RESET); //enable SPI by setting CS low
 1190              		.loc 1 150 3 is_stmt 1 view .LVU378
 151:Core/Src/main.c ****   if(HAL_SPI_TransmitReceive_DMA(&hspi2, sendData, receiveData, BUFFER_SIZE+1) != HAL_OK)
 1191              		.loc 1 151 3 view .LVU379
 1192 007e 2246     		mov	r2, r4
 1193 0080 4FF48071 		mov	r1, #256
 1194 0084 3846     		mov	r0, r7
 1195 0086 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1196              	.LVL51:
 152:Core/Src/main.c ****   {
 1197              		.loc 1 152 3 view .LVU380
 152:Core/Src/main.c ****   {
 1198              		.loc 1 152 6 is_stmt 0 view .LVU381
 1199 008a 0723     		movs	r3, #7
 1200 008c 02AA     		add	r2, sp, #8
 1201 008e 04A9     		add	r1, sp, #16
 1202 0090 3046     		mov	r0, r6
 1203 0092 FFF7FEFF 		bl	HAL_SPI_TransmitReceive_DMA
 1204              	.LVL52:
 152:Core/Src/main.c ****   {
 1205              		.loc 1 152 5 discriminator 1 view .LVU382
 1206 0096 28B1     		cbz	r0, .L66
 154:Core/Src/main.c ****   }
 1207              		.loc 1 154 5 is_stmt 1 view .LVU383
 1208 0098 FFF7FEFF 		bl	Error_Handler
 1209              	.LVL53:
 1210              	.L64:
 176:Core/Src/main.c ****      {
 1211              		.loc 1 176 6 view .LVU384
 176:Core/Src/main.c ****      {
 1212              		.loc 1 176 21 is_stmt 0 view .LVU385
 1213 009c 164B     		ldr	r3, .L71+12
 1214 009e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 176:Core/Src/main.c ****      {
 1215              		.loc 1 176 8 view .LVU386
 1216 00a0 012B     		cmp	r3, #1
 1217 00a2 20D0     		beq	.L70
 1218              	.L66:
 158:Core/Src/main.c ****   {
 1219              		.loc 1 158 3 is_stmt 1 view .LVU387
 162:Core/Src/main.c ****      {
 1220              		.loc 1 162 6 view .LVU388
 162:Core/Src/main.c ****      {
 1221              		.loc 1 162 25 is_stmt 0 view .LVU389
 1222 00a4 154B     		ldr	r3, .L71+16
 1223 00a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 162:Core/Src/main.c ****      {
 1224              		.loc 1 162 8 view .LVU390
 1225 00a8 012B     		cmp	r3, #1
 1226 00aa F7D1     		bne	.L64
 173:Core/Src/main.c ****      }
 1227              		.loc 1 173 7 is_stmt 1 view .LVU391
 173:Core/Src/main.c ****      }
ARM GAS  /tmp/cc5Q23UD.s 			page 54


 1228              		.loc 1 173 23 is_stmt 0 view .LVU392
 1229 00ac 134B     		ldr	r3, .L71+16
 1230 00ae 0022     		movs	r2, #0
 1231 00b0 1A70     		strb	r2, [r3]
 1232 00b2 F3E7     		b	.L64
 1233              	.LVL54:
 1234              	.L67:
 1235              	.LBB15:
 180:Core/Src/main.c ****       }
 1236              		.loc 1 180 9 is_stmt 1 view .LVU393
 180:Core/Src/main.c ****       }
 1237              		.loc 1 180 39 is_stmt 0 view .LVU394
 1238 00b4 591C     		adds	r1, r3, #1
 180:Core/Src/main.c ****       }
 1239              		.loc 1 180 37 view .LVU395
 1240 00b6 03F12102 		add	r2, r3, #33
 1241 00ba 6A44     		add	r2, sp, r2
 1242 00bc 12F8180C 		ldrb	r0, [r2, #-24]	@ zero_extendqisi2
 180:Core/Src/main.c ****       }
 1243              		.loc 1 180 24 view .LVU396
 1244 00c0 0C4A     		ldr	r2, .L71+8
 1245 00c2 1344     		add	r3, r3, r2
 1246              	.LVL55:
 180:Core/Src/main.c ****       }
 1247              		.loc 1 180 24 view .LVU397
 1248 00c4 5873     		strb	r0, [r3, #13]
 178:Core/Src/main.c ****       {
 1249              		.loc 1 178 36 is_stmt 1 discriminator 3 view .LVU398
 1250              	.LVL56:
 178:Core/Src/main.c ****       {
 1251              		.loc 1 178 36 is_stmt 0 discriminator 3 view .LVU399
 1252 00c6 0B46     		mov	r3, r1
 1253              	.LVL57:
 1254              	.L65:
 178:Core/Src/main.c ****       {
 1255              		.loc 1 178 21 is_stmt 1 discriminator 1 view .LVU400
 1256 00c8 052B     		cmp	r3, #5
 1257 00ca F3DD     		ble	.L67
 1258              	.LBE15:
 186:Core/Src/main.c ****       HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 1259              		.loc 1 186 7 view .LVU401
 1260 00cc 2421     		movs	r1, #36
 1261 00ce 0C48     		ldr	r0, .L71+20
 1262 00d0 FFF7FEFF 		bl	CDC_Transmit_FS
 1263              	.LVL58:
 187:Core/Src/main.c ****       spiComplete = 0;
 1264              		.loc 1 187 7 view .LVU402
 1265 00d4 4FF40051 		mov	r1, #8192
 1266 00d8 0448     		ldr	r0, .L71
 1267 00da FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1268              	.LVL59:
 188:Core/Src/main.c ****      }
 1269              		.loc 1 188 7 view .LVU403
 188:Core/Src/main.c ****      }
 1270              		.loc 1 188 19 is_stmt 0 view .LVU404
 1271 00de 064B     		ldr	r3, .L71+12
 1272 00e0 0022     		movs	r2, #0
ARM GAS  /tmp/cc5Q23UD.s 			page 55


 1273 00e2 1A70     		strb	r2, [r3]
 1274 00e4 DEE7     		b	.L66
 1275              	.LVL60:
 1276              	.L70:
 1277              	.LBB16:
 178:Core/Src/main.c ****       {
 1278              		.loc 1 178 15 view .LVU405
 1279 00e6 0023     		movs	r3, #0
 1280 00e8 EEE7     		b	.L65
 1281              	.L72:
 1282 00ea 00BF     		.align	2
 1283              	.L71:
 1284 00ec 000C0240 		.word	1073875968
 1285 00f0 00000000 		.word	hspi2
 1286 00f4 00000000 		.word	adc
 1287 00f8 00000000 		.word	spiComplete
 1288 00fc 00000000 		.word	spiHalfComplete
 1289 0100 0D000000 		.word	adc+13
 1290              	.LBE16:
 1291              		.cfi_endproc
 1292              	.LFE138:
 1294              		.global	txrxCount
 1295              		.section	.bss.txrxCount,"aw",%nobits
 1298              	txrxCount:
 1299 0000 00       		.space	1
 1300              		.global	bufPointer
 1301              		.section	.bss.bufPointer,"aw",%nobits
 1304              	bufPointer:
 1305 0000 00       		.space	1
 1306              		.global	spiHalfComplete
 1307              		.section	.bss.spiHalfComplete,"aw",%nobits
 1310              	spiHalfComplete:
 1311 0000 00       		.space	1
 1312              		.global	spiComplete
 1313              		.section	.bss.spiComplete,"aw",%nobits
 1316              	spiComplete:
 1317 0000 00       		.space	1
 1318              		.section	.bss.adc,"aw",%nobits
 1319              		.align	2
 1322              	adc:
 1323 0000 00000000 		.space	52
 1323      00000000 
 1323      00000000 
 1323      00000000 
 1323      00000000 
 1324              		.global	htim1
 1325              		.section	.bss.htim1,"aw",%nobits
 1326              		.align	2
 1329              	htim1:
 1330 0000 00000000 		.space	72
 1330      00000000 
 1330      00000000 
 1330      00000000 
 1330      00000000 
 1331              		.global	hdma_spi2_tx
 1332              		.section	.bss.hdma_spi2_tx,"aw",%nobits
 1333              		.align	2
ARM GAS  /tmp/cc5Q23UD.s 			page 56


 1336              	hdma_spi2_tx:
 1337 0000 00000000 		.space	96
 1337      00000000 
 1337      00000000 
 1337      00000000 
 1337      00000000 
 1338              		.global	hdma_spi2_rx
 1339              		.section	.bss.hdma_spi2_rx,"aw",%nobits
 1340              		.align	2
 1343              	hdma_spi2_rx:
 1344 0000 00000000 		.space	96
 1344      00000000 
 1344      00000000 
 1344      00000000 
 1344      00000000 
 1345              		.global	hspi2
 1346              		.section	.bss.hspi2,"aw",%nobits
 1347              		.align	2
 1350              	hspi2:
 1351 0000 00000000 		.space	88
 1351      00000000 
 1351      00000000 
 1351      00000000 
 1351      00000000 
 1352              		.global	hspi1
 1353              		.section	.bss.hspi1,"aw",%nobits
 1354              		.align	2
 1357              	hspi1:
 1358 0000 00000000 		.space	88
 1358      00000000 
 1358      00000000 
 1358      00000000 
 1358      00000000 
 1359              		.global	hi2s3
 1360              		.section	.bss.hi2s3,"aw",%nobits
 1361              		.align	2
 1364              	hi2s3:
 1365 0000 00000000 		.space	72
 1365      00000000 
 1365      00000000 
 1365      00000000 
 1365      00000000 
 1366              		.global	hi2c1
 1367              		.section	.bss.hi2c1,"aw",%nobits
 1368              		.align	2
 1371              	hi2c1:
 1372 0000 00000000 		.space	84
 1372      00000000 
 1372      00000000 
 1372      00000000 
 1372      00000000 
 1373              		.text
 1374              	.Letext0:
 1375              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 1376              		.file 4 "/home/mishay/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-no
 1377              		.file 5 "/home/mishay/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-no
 1378              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
ARM GAS  /tmp/cc5Q23UD.s 			page 57


 1379              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1380              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1381              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1382              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1383              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 1384              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2s.h"
 1385              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 1386              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1387              		.file 15 "Core/Inc/MCP3914.h"
 1388              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1389              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1390              		.file 18 "USB_DEVICE/App/usbd_cdc_if.h"
 1391              		.file 19 "USB_DEVICE/App/usb_device.h"
 1392              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1393              		.file 21 "<built-in>"
ARM GAS  /tmp/cc5Q23UD.s 			page 58


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc5Q23UD.s:21     .text.MX_GPIO_Init:00000000 $t
     /tmp/cc5Q23UD.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/cc5Q23UD.s:336    .text.MX_GPIO_Init:00000170 $d
     /tmp/cc5Q23UD.s:346    .text.MX_DMA_Init:00000000 $t
     /tmp/cc5Q23UD.s:351    .text.MX_DMA_Init:00000000 MX_DMA_Init
     /tmp/cc5Q23UD.s:409    .text.MX_DMA_Init:00000040 $d
     /tmp/cc5Q23UD.s:414    .text.HAL_SPI_TxRxCpltCallback:00000000 $t
     /tmp/cc5Q23UD.s:420    .text.HAL_SPI_TxRxCpltCallback:00000000 HAL_SPI_TxRxCpltCallback
     /tmp/cc5Q23UD.s:438    .text.HAL_SPI_TxRxCpltCallback:00000008 $d
     /tmp/cc5Q23UD.s:1316   .bss.spiComplete:00000000 spiComplete
     /tmp/cc5Q23UD.s:443    .text.HAL_SPI_TxRxHalfCpltCallback:00000000 $t
     /tmp/cc5Q23UD.s:449    .text.HAL_SPI_TxRxHalfCpltCallback:00000000 HAL_SPI_TxRxHalfCpltCallback
     /tmp/cc5Q23UD.s:467    .text.HAL_SPI_TxRxHalfCpltCallback:00000008 $d
     /tmp/cc5Q23UD.s:1310   .bss.spiHalfComplete:00000000 spiHalfComplete
     /tmp/cc5Q23UD.s:472    .text.Error_Handler:00000000 $t
     /tmp/cc5Q23UD.s:478    .text.Error_Handler:00000000 Error_Handler
     /tmp/cc5Q23UD.s:517    .text.Error_Handler:00000010 $d
     /tmp/cc5Q23UD.s:522    .text.MX_I2C1_Init:00000000 $t
     /tmp/cc5Q23UD.s:527    .text.MX_I2C1_Init:00000000 MX_I2C1_Init
     /tmp/cc5Q23UD.s:584    .text.MX_I2C1_Init:0000002c $d
     /tmp/cc5Q23UD.s:1371   .bss.hi2c1:00000000 hi2c1
     /tmp/cc5Q23UD.s:591    .text.MX_I2S3_Init:00000000 $t
     /tmp/cc5Q23UD.s:596    .text.MX_I2S3_Init:00000000 MX_I2S3_Init
     /tmp/cc5Q23UD.s:653    .text.MX_I2S3_Init:0000002c $d
     /tmp/cc5Q23UD.s:1364   .bss.hi2s3:00000000 hi2s3
     /tmp/cc5Q23UD.s:660    .text.MX_SPI1_Init:00000000 $t
     /tmp/cc5Q23UD.s:665    .text.MX_SPI1_Init:00000000 MX_SPI1_Init
     /tmp/cc5Q23UD.s:732    .text.MX_SPI1_Init:00000038 $d
     /tmp/cc5Q23UD.s:1357   .bss.hspi1:00000000 hspi1
     /tmp/cc5Q23UD.s:738    .text.MX_SPI2_Init:00000000 $t
     /tmp/cc5Q23UD.s:743    .text.MX_SPI2_Init:00000000 MX_SPI2_Init
     /tmp/cc5Q23UD.s:810    .text.MX_SPI2_Init:00000038 $d
     /tmp/cc5Q23UD.s:1350   .bss.hspi2:00000000 hspi2
     /tmp/cc5Q23UD.s:816    .text.MX_TIM1_Init:00000000 $t
     /tmp/cc5Q23UD.s:821    .text.MX_TIM1_Init:00000000 MX_TIM1_Init
     /tmp/cc5Q23UD.s:923    .text.MX_TIM1_Init:00000064 $d
     /tmp/cc5Q23UD.s:1329   .bss.htim1:00000000 htim1
     /tmp/cc5Q23UD.s:929    .text.SystemClock_Config:00000000 $t
     /tmp/cc5Q23UD.s:935    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/cc5Q23UD.s:1079   .text.SystemClock_Config:000000a4 $d
     /tmp/cc5Q23UD.s:1085   .text.main:00000000 $t
     /tmp/cc5Q23UD.s:1091   .text.main:00000000 main
     /tmp/cc5Q23UD.s:1284   .text.main:000000ec $d
     /tmp/cc5Q23UD.s:1322   .bss.adc:00000000 adc
     /tmp/cc5Q23UD.s:1298   .bss.txrxCount:00000000 txrxCount
     /tmp/cc5Q23UD.s:1299   .bss.txrxCount:00000000 $d
     /tmp/cc5Q23UD.s:1304   .bss.bufPointer:00000000 bufPointer
     /tmp/cc5Q23UD.s:1305   .bss.bufPointer:00000000 $d
     /tmp/cc5Q23UD.s:1311   .bss.spiHalfComplete:00000000 $d
     /tmp/cc5Q23UD.s:1317   .bss.spiComplete:00000000 $d
     /tmp/cc5Q23UD.s:1319   .bss.adc:00000000 $d
     /tmp/cc5Q23UD.s:1326   .bss.htim1:00000000 $d
     /tmp/cc5Q23UD.s:1336   .bss.hdma_spi2_tx:00000000 hdma_spi2_tx
     /tmp/cc5Q23UD.s:1333   .bss.hdma_spi2_tx:00000000 $d
     /tmp/cc5Q23UD.s:1343   .bss.hdma_spi2_rx:00000000 hdma_spi2_rx
ARM GAS  /tmp/cc5Q23UD.s 			page 59


     /tmp/cc5Q23UD.s:1340   .bss.hdma_spi2_rx:00000000 $d
     /tmp/cc5Q23UD.s:1347   .bss.hspi2:00000000 $d
     /tmp/cc5Q23UD.s:1354   .bss.hspi1:00000000 $d
     /tmp/cc5Q23UD.s:1361   .bss.hi2s3:00000000 $d
     /tmp/cc5Q23UD.s:1368   .bss.hi2c1:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_TogglePin
HAL_I2C_Init
HAL_I2S_Init
HAL_SPI_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_USB_DEVICE_Init
MCP3914_Initialise
MCP3914_WriteRegister
HAL_SPI_TransmitReceive_DMA
CDC_Transmit_FS
