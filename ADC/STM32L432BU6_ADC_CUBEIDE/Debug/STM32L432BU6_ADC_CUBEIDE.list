
STM32L432BU6_ADC_CUBEIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08009fc8  08009fc8  00019fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a08c  0800a08c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a08c  0800a08c  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a08c  0800a08c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a08c  0800a08c  0001a08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a090  0800a090  0001a090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800a094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001258  200001f4  0800a288  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000144c  0800a288  0002144c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128f6  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030cc  00000000  00000000  00032b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00035be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db0  00000000  00000000  00036b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024397  00000000  00000000  000378c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a0c  00000000  00000000  0005bc57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1ade  00000000  00000000  0006e663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00140141  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004094  00000000  00000000  00140194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009fb0 	.word	0x08009fb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	08009fb0 	.word	0x08009fb0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fa52 	bl	800072e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f82f 	bl	80002ec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800028e:	f000 f87f 	bl	8000390 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000292:	f000 f90f 	bl	80004b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000296:	f000 f8a9 	bl	80003ec <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 800029a:	f008 fc51 	bl	8008b40 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_ADC_Start(&hadc1);
 800029e:	4811      	ldr	r0, [pc, #68]	; (80002e4 <main+0x64>)
 80002a0:	f000 fdee 	bl	8000e80 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002a4:	f04f 31ff 	mov.w	r1, #4294967295
 80002a8:	480e      	ldr	r0, [pc, #56]	; (80002e4 <main+0x64>)
 80002aa:	f000 fe4c 	bl	8000f46 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 80002ae:	480d      	ldr	r0, [pc, #52]	; (80002e4 <main+0x64>)
 80002b0:	f000 fed8 	bl	8001064 <HAL_ADC_GetValue>
 80002b4:	4603      	mov	r3, r0
 80002b6:	81fb      	strh	r3, [r7, #14]


	  sprintf(msg, "%hu\r\n", raw);
 80002b8:	89fa      	ldrh	r2, [r7, #14]
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	490a      	ldr	r1, [pc, #40]	; (80002e8 <main+0x68>)
 80002be:	4618      	mov	r0, r3
 80002c0:	f009 fa08 	bl	80096d4 <siprintf>
	  CDC_Transmit_FS((uint8_t *) msg, strlen(msg));
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	4618      	mov	r0, r3
 80002c8:	f7ff ff82 	bl	80001d0 <strlen>
 80002cc:	4603      	mov	r3, r0
 80002ce:	b29a      	uxth	r2, r3
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	4611      	mov	r1, r2
 80002d4:	4618      	mov	r0, r3
 80002d6:	f008 fcf1 	bl	8008cbc <CDC_Transmit_FS>
	  HAL_Delay(1000);
 80002da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002de:	f000 fa9b 	bl	8000818 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80002e2:	e7dc      	b.n	800029e <main+0x1e>
 80002e4:	20000210 	.word	0x20000210
 80002e8:	08009fc8 	.word	0x08009fc8

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b096      	sub	sp, #88	; 0x58
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0314 	add.w	r3, r7, #20
 80002f6:	2244      	movs	r2, #68	; 0x44
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f009 f9e2 	bl	80096c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	463b      	mov	r3, r7
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800030e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000312:	f003 fb49 	bl	80039a8 <HAL_PWREx_ControlVoltageScaling>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800031c:	f000 f8fa 	bl	8000514 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000320:	2310      	movs	r3, #16
 8000322:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000324:	2301      	movs	r3, #1
 8000326:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000328:	2300      	movs	r3, #0
 800032a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800032c:	2360      	movs	r3, #96	; 0x60
 800032e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000330:	2302      	movs	r3, #2
 8000332:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000334:	2301      	movs	r3, #1
 8000336:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000338:	2301      	movs	r3, #1
 800033a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800033c:	2328      	movs	r3, #40	; 0x28
 800033e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000340:	2307      	movs	r3, #7
 8000342:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000344:	2302      	movs	r3, #2
 8000346:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000348:	2302      	movs	r3, #2
 800034a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034c:	f107 0314 	add.w	r3, r7, #20
 8000350:	4618      	mov	r0, r3
 8000352:	f003 fb8f 	bl	8003a74 <HAL_RCC_OscConfig>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800035c:	f000 f8da 	bl	8000514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000360:	230f      	movs	r3, #15
 8000362:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000364:	2303      	movs	r3, #3
 8000366:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000374:	463b      	mov	r3, r7
 8000376:	2104      	movs	r1, #4
 8000378:	4618      	mov	r0, r3
 800037a:	f003 ff8f 	bl	800429c <HAL_RCC_ClockConfig>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000384:	f000 f8c6 	bl	8000514 <Error_Handler>
  }
}
 8000388:	bf00      	nop
 800038a:	3758      	adds	r7, #88	; 0x58
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b096      	sub	sp, #88	; 0x58
 8000394:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2254      	movs	r2, #84	; 0x54
 800039a:	2100      	movs	r1, #0
 800039c:	4618      	mov	r0, r3
 800039e:	f009 f991 	bl	80096c4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80003a2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80003a6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80003a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80003ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80003ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80003b2:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80003b4:	2301      	movs	r3, #1
 80003b6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80003b8:	2301      	movs	r3, #1
 80003ba:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80003bc:	2318      	movs	r3, #24
 80003be:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80003c0:	2307      	movs	r3, #7
 80003c2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80003c4:	2302      	movs	r3, #2
 80003c6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80003c8:	2302      	movs	r3, #2
 80003ca:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80003cc:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80003d0:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	4618      	mov	r0, r3
 80003d6:	f004 f94d 	bl	8004674 <HAL_RCCEx_PeriphCLKConfig>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80003e0:	f000 f898 	bl	8000514 <Error_Handler>
  }
}
 80003e4:	bf00      	nop
 80003e6:	3758      	adds	r7, #88	; 0x58
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b086      	sub	sp, #24
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003f2:	463b      	mov	r3, r7
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
 80003fa:	609a      	str	r2, [r3, #8]
 80003fc:	60da      	str	r2, [r3, #12]
 80003fe:	611a      	str	r2, [r3, #16]
 8000400:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000402:	4b29      	ldr	r3, [pc, #164]	; (80004a8 <MX_ADC1_Init+0xbc>)
 8000404:	4a29      	ldr	r2, [pc, #164]	; (80004ac <MX_ADC1_Init+0xc0>)
 8000406:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000408:	4b27      	ldr	r3, [pc, #156]	; (80004a8 <MX_ADC1_Init+0xbc>)
 800040a:	2200      	movs	r2, #0
 800040c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800040e:	4b26      	ldr	r3, [pc, #152]	; (80004a8 <MX_ADC1_Init+0xbc>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000414:	4b24      	ldr	r3, [pc, #144]	; (80004a8 <MX_ADC1_Init+0xbc>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800041a:	4b23      	ldr	r3, [pc, #140]	; (80004a8 <MX_ADC1_Init+0xbc>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000420:	4b21      	ldr	r3, [pc, #132]	; (80004a8 <MX_ADC1_Init+0xbc>)
 8000422:	2204      	movs	r2, #4
 8000424:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000426:	4b20      	ldr	r3, [pc, #128]	; (80004a8 <MX_ADC1_Init+0xbc>)
 8000428:	2200      	movs	r2, #0
 800042a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800042c:	4b1e      	ldr	r3, [pc, #120]	; (80004a8 <MX_ADC1_Init+0xbc>)
 800042e:	2200      	movs	r2, #0
 8000430:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000432:	4b1d      	ldr	r3, [pc, #116]	; (80004a8 <MX_ADC1_Init+0xbc>)
 8000434:	2201      	movs	r2, #1
 8000436:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <MX_ADC1_Init+0xbc>)
 800043a:	2200      	movs	r2, #0
 800043c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000440:	4b19      	ldr	r3, [pc, #100]	; (80004a8 <MX_ADC1_Init+0xbc>)
 8000442:	2200      	movs	r2, #0
 8000444:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000446:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <MX_ADC1_Init+0xbc>)
 8000448:	2200      	movs	r2, #0
 800044a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800044c:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <MX_ADC1_Init+0xbc>)
 800044e:	2200      	movs	r2, #0
 8000450:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000454:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <MX_ADC1_Init+0xbc>)
 8000456:	2200      	movs	r2, #0
 8000458:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <MX_ADC1_Init+0xbc>)
 800045c:	2200      	movs	r2, #0
 800045e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000462:	4811      	ldr	r0, [pc, #68]	; (80004a8 <MX_ADC1_Init+0xbc>)
 8000464:	f000 fbc4 	bl	8000bf0 <HAL_ADC_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800046e:	f000 f851 	bl	8000514 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000472:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <MX_ADC1_Init+0xc4>)
 8000474:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000476:	2306      	movs	r3, #6
 8000478:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800047a:	2300      	movs	r3, #0
 800047c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800047e:	237f      	movs	r3, #127	; 0x7f
 8000480:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000482:	2304      	movs	r3, #4
 8000484:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800048a:	463b      	mov	r3, r7
 800048c:	4619      	mov	r1, r3
 800048e:	4806      	ldr	r0, [pc, #24]	; (80004a8 <MX_ADC1_Init+0xbc>)
 8000490:	f000 fdf6 	bl	8001080 <HAL_ADC_ConfigChannel>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800049a:	f000 f83b 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800049e:	bf00      	nop
 80004a0:	3718      	adds	r7, #24
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	20000210 	.word	0x20000210
 80004ac:	50040000 	.word	0x50040000
 80004b0:	14f00020 	.word	0x14f00020

080004b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
 80004c4:	60da      	str	r2, [r3, #12]
 80004c6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c8:	4b11      	ldr	r3, [pc, #68]	; (8000510 <MX_GPIO_Init+0x5c>)
 80004ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004cc:	4a10      	ldr	r2, [pc, #64]	; (8000510 <MX_GPIO_Init+0x5c>)
 80004ce:	f043 0301 	orr.w	r3, r3, #1
 80004d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <MX_GPIO_Init+0x5c>)
 80004d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d8:	f003 0301 	and.w	r3, r3, #1
 80004dc:	603b      	str	r3, [r7, #0]
 80004de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2108      	movs	r1, #8
 80004e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e8:	f001 fcac 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80004ec:	2308      	movs	r3, #8
 80004ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f0:	2301      	movs	r3, #1
 80004f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f8:	2300      	movs	r3, #0
 80004fa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	4619      	mov	r1, r3
 8000500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000504:	f001 fb34 	bl	8001b70 <HAL_GPIO_Init>

}
 8000508:	bf00      	nop
 800050a:	3718      	adds	r7, #24
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40021000 	.word	0x40021000

08000514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000518:	b672      	cpsid	i
}
 800051a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800051c:	e7fe      	b.n	800051c <Error_Handler+0x8>
	...

08000520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <HAL_MspInit+0x44>)
 8000528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800052a:	4a0e      	ldr	r2, [pc, #56]	; (8000564 <HAL_MspInit+0x44>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6613      	str	r3, [r2, #96]	; 0x60
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <HAL_MspInit+0x44>)
 8000534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <HAL_MspInit+0x44>)
 8000540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000542:	4a08      	ldr	r2, [pc, #32]	; (8000564 <HAL_MspInit+0x44>)
 8000544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000548:	6593      	str	r3, [r2, #88]	; 0x58
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_MspInit+0x44>)
 800054c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800054e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000556:	bf00      	nop
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000

08000568 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a15      	ldr	r2, [pc, #84]	; (80005dc <HAL_ADC_MspInit+0x74>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d124      	bne.n	80005d4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <HAL_ADC_MspInit+0x78>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <HAL_ADC_MspInit+0x78>)
 8000590:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000596:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <HAL_ADC_MspInit+0x78>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <HAL_ADC_MspInit+0x78>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <HAL_ADC_MspInit+0x78>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <HAL_ADC_MspInit+0x78>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005ba:	2301      	movs	r3, #1
 80005bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80005be:	230b      	movs	r3, #11
 80005c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	4619      	mov	r1, r3
 80005cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d0:	f001 face 	bl	8001b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005d4:	bf00      	nop
 80005d6:	3728      	adds	r7, #40	; 0x28
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	50040000 	.word	0x50040000
 80005e0:	40021000 	.word	0x40021000

080005e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <NMI_Handler+0x4>

080005ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <HardFault_Handler+0x4>

080005f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <MemManage_Handler+0x4>

080005f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <BusFault_Handler+0x4>

080005fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <UsageFault_Handler+0x4>

08000602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000630:	f000 f8d2 	bl	80007d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}

08000638 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800063c:	4802      	ldr	r0, [pc, #8]	; (8000648 <USB_IRQHandler+0x10>)
 800063e:	f001 fd52 	bl	80020e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000f20 	.word	0x20000f20

0800064c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000654:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <_sbrk+0x5c>)
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <_sbrk+0x60>)
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <_sbrk+0x64>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d102      	bne.n	800066e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <_sbrk+0x64>)
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <_sbrk+0x68>)
 800066c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <_sbrk+0x64>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	693a      	ldr	r2, [r7, #16]
 8000678:	429a      	cmp	r2, r3
 800067a:	d207      	bcs.n	800068c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800067c:	f008 fff8 	bl	8009670 <__errno>
 8000680:	4603      	mov	r3, r0
 8000682:	220c      	movs	r2, #12
 8000684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
 800068a:	e009      	b.n	80006a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <_sbrk+0x64>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <_sbrk+0x64>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4413      	add	r3, r2
 800069a:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <_sbrk+0x64>)
 800069c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800069e:	68fb      	ldr	r3, [r7, #12]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3718      	adds	r7, #24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20010000 	.word	0x20010000
 80006ac:	00000400 	.word	0x00000400
 80006b0:	20000274 	.word	0x20000274
 80006b4:	20001450 	.word	0x20001450

080006b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <SystemInit+0x20>)
 80006be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006c2:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <SystemInit+0x20>)
 80006c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000714 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006e0:	f7ff ffea 	bl	80006b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e4:	480c      	ldr	r0, [pc, #48]	; (8000718 <LoopForever+0x6>)
  ldr r1, =_edata
 80006e6:	490d      	ldr	r1, [pc, #52]	; (800071c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e8:	4a0d      	ldr	r2, [pc, #52]	; (8000720 <LoopForever+0xe>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ec:	e002      	b.n	80006f4 <LoopCopyDataInit>

080006ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f2:	3304      	adds	r3, #4

080006f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f8:	d3f9      	bcc.n	80006ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fa:	4a0a      	ldr	r2, [pc, #40]	; (8000724 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006fc:	4c0a      	ldr	r4, [pc, #40]	; (8000728 <LoopForever+0x16>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000700:	e001      	b.n	8000706 <LoopFillZerobss>

08000702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000704:	3204      	adds	r2, #4

08000706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000708:	d3fb      	bcc.n	8000702 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800070a:	f008 ffb7 	bl	800967c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800070e:	f7ff fdb7 	bl	8000280 <main>

08000712 <LoopForever>:

LoopForever:
    b LoopForever
 8000712:	e7fe      	b.n	8000712 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000714:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800071c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8000720:	0800a094 	.word	0x0800a094
  ldr r2, =_sbss
 8000724:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8000728:	2000144c 	.word	0x2000144c

0800072c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800072c:	e7fe      	b.n	800072c <ADC1_IRQHandler>

0800072e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000734:	2300      	movs	r3, #0
 8000736:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000738:	2003      	movs	r0, #3
 800073a:	f001 f9d7 	bl	8001aec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800073e:	200f      	movs	r0, #15
 8000740:	f000 f80e 	bl	8000760 <HAL_InitTick>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d002      	beq.n	8000750 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800074a:	2301      	movs	r3, #1
 800074c:	71fb      	strb	r3, [r7, #7]
 800074e:	e001      	b.n	8000754 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000750:	f7ff fee6 	bl	8000520 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000754:	79fb      	ldrb	r3, [r7, #7]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000768:	2300      	movs	r3, #0
 800076a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800076c:	4b17      	ldr	r3, [pc, #92]	; (80007cc <HAL_InitTick+0x6c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d023      	beq.n	80007bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <HAL_InitTick+0x70>)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <HAL_InitTick+0x6c>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	4619      	mov	r1, r3
 800077e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000782:	fbb3 f3f1 	udiv	r3, r3, r1
 8000786:	fbb2 f3f3 	udiv	r3, r2, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f001 f9e3 	bl	8001b56 <HAL_SYSTICK_Config>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d10f      	bne.n	80007b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b0f      	cmp	r3, #15
 800079a:	d809      	bhi.n	80007b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800079c:	2200      	movs	r2, #0
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	f04f 30ff 	mov.w	r0, #4294967295
 80007a4:	f001 f9ad 	bl	8001b02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007a8:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <HAL_InitTick+0x74>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6013      	str	r3, [r2, #0]
 80007ae:	e007      	b.n	80007c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007b0:	2301      	movs	r3, #1
 80007b2:	73fb      	strb	r3, [r7, #15]
 80007b4:	e004      	b.n	80007c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	73fb      	strb	r3, [r7, #15]
 80007ba:	e001      	b.n	80007c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007bc:	2301      	movs	r3, #1
 80007be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000008 	.word	0x20000008
 80007d0:	20000000 	.word	0x20000000
 80007d4:	20000004 	.word	0x20000004

080007d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_IncTick+0x20>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_IncTick+0x24>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4413      	add	r3, r2
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <HAL_IncTick+0x24>)
 80007ea:	6013      	str	r3, [r2, #0]
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	20000008 	.word	0x20000008
 80007fc:	20000278 	.word	0x20000278

08000800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  return uwTick;
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <HAL_GetTick+0x14>)
 8000806:	681b      	ldr	r3, [r3, #0]
}
 8000808:	4618      	mov	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000278 	.word	0x20000278

08000818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000820:	f7ff ffee 	bl	8000800 <HAL_GetTick>
 8000824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000830:	d005      	beq.n	800083e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000832:	4b0a      	ldr	r3, [pc, #40]	; (800085c <HAL_Delay+0x44>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	461a      	mov	r2, r3
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	4413      	add	r3, r2
 800083c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800083e:	bf00      	nop
 8000840:	f7ff ffde 	bl	8000800 <HAL_GetTick>
 8000844:	4602      	mov	r2, r0
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	429a      	cmp	r2, r3
 800084e:	d8f7      	bhi.n	8000840 <HAL_Delay+0x28>
  {
  }
}
 8000850:	bf00      	nop
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000008 	.word	0x20000008

08000860 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	431a      	orrs	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	609a      	str	r2, [r3, #8]
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000886:	b480      	push	{r7}
 8000888:	b083      	sub	sp, #12
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
 800088e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	431a      	orrs	r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	609a      	str	r2, [r3, #8]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80008bc:	4618      	mov	r0, r3
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
 80008d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	3360      	adds	r3, #96	; 0x60
 80008da:	461a      	mov	r2, r3
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <LL_ADC_SetOffset+0x44>)
 80008ea:	4013      	ands	r3, r2
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80008f2:	683a      	ldr	r2, [r7, #0]
 80008f4:	430a      	orrs	r2, r1
 80008f6:	4313      	orrs	r3, r2
 80008f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000900:	bf00      	nop
 8000902:	371c      	adds	r7, #28
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	03fff000 	.word	0x03fff000

08000910 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3360      	adds	r3, #96	; 0x60
 800091e:	461a      	mov	r2, r3
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	4413      	add	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000930:	4618      	mov	r0, r3
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800093c:	b480      	push	{r7}
 800093e:	b087      	sub	sp, #28
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	3360      	adds	r3, #96	; 0x60
 800094c:	461a      	mov	r2, r3
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	4413      	add	r3, r2
 8000954:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	431a      	orrs	r2, r3
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000966:	bf00      	nop
 8000968:	371c      	adds	r7, #28
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000972:	b480      	push	{r7}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000982:	2b00      	cmp	r3, #0
 8000984:	d101      	bne.n	800098a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000986:	2301      	movs	r3, #1
 8000988:	e000      	b.n	800098c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800098a:	2300      	movs	r3, #0
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000998:	b480      	push	{r7}
 800099a:	b087      	sub	sp, #28
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	3330      	adds	r3, #48	; 0x30
 80009a8:	461a      	mov	r2, r3
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	0a1b      	lsrs	r3, r3, #8
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	f003 030c 	and.w	r3, r3, #12
 80009b4:	4413      	add	r3, r2
 80009b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	f003 031f 	and.w	r3, r3, #31
 80009c2:	211f      	movs	r1, #31
 80009c4:	fa01 f303 	lsl.w	r3, r1, r3
 80009c8:	43db      	mvns	r3, r3
 80009ca:	401a      	ands	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	0e9b      	lsrs	r3, r3, #26
 80009d0:	f003 011f 	and.w	r1, r3, #31
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	f003 031f 	and.w	r3, r3, #31
 80009da:	fa01 f303 	lsl.w	r3, r1, r3
 80009de:	431a      	orrs	r2, r3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80009e4:	bf00      	nop
 80009e6:	371c      	adds	r7, #28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b087      	sub	sp, #28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	3314      	adds	r3, #20
 8000a00:	461a      	mov	r2, r3
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	0e5b      	lsrs	r3, r3, #25
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	f003 0304 	and.w	r3, r3, #4
 8000a0c:	4413      	add	r3, r2
 8000a0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	0d1b      	lsrs	r3, r3, #20
 8000a18:	f003 031f 	and.w	r3, r3, #31
 8000a1c:	2107      	movs	r1, #7
 8000a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a22:	43db      	mvns	r3, r3
 8000a24:	401a      	ands	r2, r3
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	0d1b      	lsrs	r3, r3, #20
 8000a2a:	f003 031f 	and.w	r3, r3, #31
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	fa01 f303 	lsl.w	r3, r1, r3
 8000a34:	431a      	orrs	r2, r3
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000a3a:	bf00      	nop
 8000a3c:	371c      	adds	r7, #28
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
	...

08000a48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a60:	43db      	mvns	r3, r3
 8000a62:	401a      	ands	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f003 0318 	and.w	r3, r3, #24
 8000a6a:	4908      	ldr	r1, [pc, #32]	; (8000a8c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000a6c:	40d9      	lsrs	r1, r3
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	400b      	ands	r3, r1
 8000a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a76:	431a      	orrs	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000a7e:	bf00      	nop
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	0007ffff 	.word	0x0007ffff

08000a90 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000aa0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	6093      	str	r3, [r2, #8]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ac8:	d101      	bne.n	8000ace <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000aca:	2301      	movs	r3, #1
 8000acc:	e000      	b.n	8000ad0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000aec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000af0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000b18:	d101      	bne.n	8000b1e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e000      	b.n	8000b20 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000b1e:	2300      	movs	r3, #0
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000b3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b40:	f043 0201 	orr.w	r2, r3, #1
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d101      	bne.n	8000b6c <LL_ADC_IsEnabled+0x18>
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e000      	b.n	8000b6e <LL_ADC_IsEnabled+0x1a>
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b8e:	f043 0204 	orr.w	r2, r3, #4
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	d101      	bne.n	8000bba <LL_ADC_REG_IsConversionOngoing+0x18>
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e000      	b.n	8000bbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000bba:	2300      	movs	r3, #0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	f003 0308 	and.w	r3, r3, #8
 8000bd8:	2b08      	cmp	r3, #8
 8000bda:	d101      	bne.n	8000be0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e000      	b.n	8000be2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d101      	bne.n	8000c0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e12c      	b.n	8000e64 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	691b      	ldr	r3, [r3, #16]
 8000c0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d109      	bne.n	8000c2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff fca5 	bl	8000568 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff3f 	bl	8000ab4 <LL_ADC_IsDeepPowerDownEnabled>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d004      	beq.n	8000c46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff25 	bl	8000a90 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff5a 	bl	8000b04 <LL_ADC_IsInternalRegulatorEnabled>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d115      	bne.n	8000c82 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ff3e 	bl	8000adc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000c60:	4b82      	ldr	r3, [pc, #520]	; (8000e6c <HAL_ADC_Init+0x27c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	099b      	lsrs	r3, r3, #6
 8000c66:	4a82      	ldr	r2, [pc, #520]	; (8000e70 <HAL_ADC_Init+0x280>)
 8000c68:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6c:	099b      	lsrs	r3, r3, #6
 8000c6e:	3301      	adds	r3, #1
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c74:	e002      	b.n	8000c7c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1f9      	bne.n	8000c76 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ff3c 	bl	8000b04 <LL_ADC_IsInternalRegulatorEnabled>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d10d      	bne.n	8000cae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c96:	f043 0210 	orr.w	r2, r3, #16
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca2:	f043 0201 	orr.w	r2, r3, #1
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff75 	bl	8000ba2 <LL_ADC_REG_IsConversionOngoing>
 8000cb8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cbe:	f003 0310 	and.w	r3, r3, #16
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 80c5 	bne.w	8000e52 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f040 80c1 	bne.w	8000e52 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cd4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000cd8:	f043 0202 	orr.w	r2, r3, #2
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff35 	bl	8000b54 <LL_ADC_IsEnabled>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d10b      	bne.n	8000d08 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000cf0:	4860      	ldr	r0, [pc, #384]	; (8000e74 <HAL_ADC_Init+0x284>)
 8000cf2:	f7ff ff2f 	bl	8000b54 <LL_ADC_IsEnabled>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d105      	bne.n	8000d08 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	4619      	mov	r1, r3
 8000d02:	485d      	ldr	r0, [pc, #372]	; (8000e78 <HAL_ADC_Init+0x288>)
 8000d04:	f7ff fdac 	bl	8000860 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	7e5b      	ldrb	r3, [r3, #25]
 8000d0c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000d12:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000d18:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000d1e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d26:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d106      	bne.n	8000d44 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	045b      	lsls	r3, r3, #17
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d009      	beq.n	8000d60 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d50:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d58:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	68da      	ldr	r2, [r3, #12]
 8000d66:	4b45      	ldr	r3, [pc, #276]	; (8000e7c <HAL_ADC_Init+0x28c>)
 8000d68:	4013      	ands	r3, r2
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	6812      	ldr	r2, [r2, #0]
 8000d6e:	69b9      	ldr	r1, [r7, #24]
 8000d70:	430b      	orrs	r3, r1
 8000d72:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff12 	bl	8000ba2 <LL_ADC_REG_IsConversionOngoing>
 8000d7e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff1f 	bl	8000bc8 <LL_ADC_INJ_IsConversionOngoing>
 8000d8a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d13d      	bne.n	8000e0e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d13a      	bne.n	8000e0e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d9c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000da4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000db4:	f023 0302 	bic.w	r3, r3, #2
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	6812      	ldr	r2, [r2, #0]
 8000dbc:	69b9      	ldr	r1, [r7, #24]
 8000dbe:	430b      	orrs	r3, r1
 8000dc0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d118      	bne.n	8000dfe <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	691b      	ldr	r3, [r3, #16]
 8000dd2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000dd6:	f023 0304 	bic.w	r3, r3, #4
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000de2:	4311      	orrs	r1, r2
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000de8:	4311      	orrs	r1, r2
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000dee:	430a      	orrs	r2, r1
 8000df0:	431a      	orrs	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f042 0201 	orr.w	r2, r2, #1
 8000dfa:	611a      	str	r2, [r3, #16]
 8000dfc:	e007      	b.n	8000e0e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	691a      	ldr	r2, [r3, #16]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f022 0201 	bic.w	r2, r2, #1
 8000e0c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	691b      	ldr	r3, [r3, #16]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d10c      	bne.n	8000e30 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	f023 010f 	bic.w	r1, r3, #15
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	69db      	ldr	r3, [r3, #28]
 8000e24:	1e5a      	subs	r2, r3, #1
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e2e:	e007      	b.n	8000e40 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f022 020f 	bic.w	r2, r2, #15
 8000e3e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e44:	f023 0303 	bic.w	r3, r3, #3
 8000e48:	f043 0201 	orr.w	r2, r3, #1
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	655a      	str	r2, [r3, #84]	; 0x54
 8000e50:	e007      	b.n	8000e62 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e56:	f043 0210 	orr.w	r2, r3, #16
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000e62:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3720      	adds	r7, #32
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	053e2d63 	.word	0x053e2d63
 8000e74:	50040000 	.word	0x50040000
 8000e78:	50040300 	.word	0x50040300
 8000e7c:	fff0c007 	.word	0xfff0c007

08000e80 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fe88 	bl	8000ba2 <LL_ADC_REG_IsConversionOngoing>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d14f      	bne.n	8000f38 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d101      	bne.n	8000ea6 <HAL_ADC_Start+0x26>
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	e04b      	b.n	8000f3e <HAL_ADC_Start+0xbe>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 fcc6 	bl	8001840 <ADC_Enable>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d137      	bne.n	8000f2e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ec2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ec6:	f023 0301 	bic.w	r3, r3, #1
 8000eca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ed6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ede:	d106      	bne.n	8000eee <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee4:	f023 0206 	bic.w	r2, r3, #6
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	659a      	str	r2, [r3, #88]	; 0x58
 8000eec:	e002      	b.n	8000ef4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	221c      	movs	r2, #28
 8000efa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d007      	beq.n	8000f22 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fe27 	bl	8000b7a <LL_ADC_REG_StartConversion>
 8000f2c:	e006      	b.n	8000f3c <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000f36:	e001      	b.n	8000f3c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b086      	sub	sp, #24
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	2b08      	cmp	r3, #8
 8000f56:	d102      	bne.n	8000f5e <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000f58:	2308      	movs	r3, #8
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	e010      	b.n	8000f80 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d007      	beq.n	8000f7c <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f70:	f043 0220 	orr.w	r2, r3, #32
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e06f      	b.n	800105c <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f80:	f7ff fc3e 	bl	8000800 <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000f86:	e021      	b.n	8000fcc <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8e:	d01d      	beq.n	8000fcc <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000f90:	f7ff fc36 	bl	8000800 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d302      	bcc.n	8000fa6 <HAL_ADC_PollForConversion+0x60>
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d112      	bne.n	8000fcc <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d10b      	bne.n	8000fcc <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fb8:	f043 0204 	orr.w	r2, r3, #4
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e047      	b.n	800105c <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0d6      	beq.n	8000f88 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fde:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fcc1 	bl	8000972 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d01c      	beq.n	8001030 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	7e5b      	ldrb	r3, [r3, #25]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d118      	bne.n	8001030 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0308 	and.w	r3, r3, #8
 8001008:	2b08      	cmp	r3, #8
 800100a:	d111      	bne.n	8001030 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001010:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800101c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d105      	bne.n	8001030 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001028:	f043 0201 	orr.w	r2, r3, #1
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	2b08      	cmp	r3, #8
 800103c:	d104      	bne.n	8001048 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2208      	movs	r2, #8
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	e008      	b.n	800105a <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d103      	bne.n	800105a <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	220c      	movs	r2, #12
 8001058:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b0b6      	sub	sp, #216	; 0xd8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800109a:	2b01      	cmp	r3, #1
 800109c:	d101      	bne.n	80010a2 <HAL_ADC_ConfigChannel+0x22>
 800109e:	2302      	movs	r3, #2
 80010a0:	e3b9      	b.n	8001816 <HAL_ADC_ConfigChannel+0x796>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2201      	movs	r2, #1
 80010a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fd77 	bl	8000ba2 <LL_ADC_REG_IsConversionOngoing>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f040 839e 	bne.w	80017f8 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b05      	cmp	r3, #5
 80010c2:	d824      	bhi.n	800110e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	3b02      	subs	r3, #2
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d81b      	bhi.n	8001106 <HAL_ADC_ConfigChannel+0x86>
 80010ce:	a201      	add	r2, pc, #4	; (adr r2, 80010d4 <HAL_ADC_ConfigChannel+0x54>)
 80010d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d4:	080010e5 	.word	0x080010e5
 80010d8:	080010ed 	.word	0x080010ed
 80010dc:	080010f5 	.word	0x080010f5
 80010e0:	080010fd 	.word	0x080010fd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	220c      	movs	r2, #12
 80010e8:	605a      	str	r2, [r3, #4]
          break;
 80010ea:	e011      	b.n	8001110 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2212      	movs	r2, #18
 80010f0:	605a      	str	r2, [r3, #4]
          break;
 80010f2:	e00d      	b.n	8001110 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2218      	movs	r2, #24
 80010f8:	605a      	str	r2, [r3, #4]
          break;
 80010fa:	e009      	b.n	8001110 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001102:	605a      	str	r2, [r3, #4]
          break;
 8001104:	e004      	b.n	8001110 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2206      	movs	r2, #6
 800110a:	605a      	str	r2, [r3, #4]
          break;
 800110c:	e000      	b.n	8001110 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800110e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	6859      	ldr	r1, [r3, #4]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	f7ff fc3b 	bl	8000998 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fd3b 	bl	8000ba2 <LL_ADC_REG_IsConversionOngoing>
 800112c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fd47 	bl	8000bc8 <LL_ADC_INJ_IsConversionOngoing>
 800113a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800113e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001142:	2b00      	cmp	r3, #0
 8001144:	f040 81a6 	bne.w	8001494 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001148:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800114c:	2b00      	cmp	r3, #0
 800114e:	f040 81a1 	bne.w	8001494 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6818      	ldr	r0, [r3, #0]
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	6819      	ldr	r1, [r3, #0]
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	461a      	mov	r2, r3
 8001160:	f7ff fc46 	bl	80009f0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	695a      	ldr	r2, [r3, #20]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	08db      	lsrs	r3, r3, #3
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	2b04      	cmp	r3, #4
 8001184:	d00a      	beq.n	800119c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6818      	ldr	r0, [r3, #0]
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	6919      	ldr	r1, [r3, #16]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001196:	f7ff fb97 	bl	80008c8 <LL_ADC_SetOffset>
 800119a:	e17b      	b.n	8001494 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fbb4 	bl	8000910 <LL_ADC_GetOffsetChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10a      	bne.n	80011c8 <HAL_ADC_ConfigChannel+0x148>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fba9 	bl	8000910 <LL_ADC_GetOffsetChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	0e9b      	lsrs	r3, r3, #26
 80011c2:	f003 021f 	and.w	r2, r3, #31
 80011c6:	e01e      	b.n	8001206 <HAL_ADC_ConfigChannel+0x186>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fb9e 	bl	8000910 <LL_ADC_GetOffsetChannel>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80011de:	fa93 f3a3 	rbit	r3, r3
 80011e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80011ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80011ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80011f6:	2320      	movs	r3, #32
 80011f8:	e004      	b.n	8001204 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80011fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80011fe:	fab3 f383 	clz	r3, r3
 8001202:	b2db      	uxtb	r3, r3
 8001204:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800120e:	2b00      	cmp	r3, #0
 8001210:	d105      	bne.n	800121e <HAL_ADC_ConfigChannel+0x19e>
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	0e9b      	lsrs	r3, r3, #26
 8001218:	f003 031f 	and.w	r3, r3, #31
 800121c:	e018      	b.n	8001250 <HAL_ADC_ConfigChannel+0x1d0>
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001226:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800122a:	fa93 f3a3 	rbit	r3, r3
 800122e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001236:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800123a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001242:	2320      	movs	r3, #32
 8001244:	e004      	b.n	8001250 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001246:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800124a:	fab3 f383 	clz	r3, r3
 800124e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001250:	429a      	cmp	r2, r3
 8001252:	d106      	bne.n	8001262 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2200      	movs	r2, #0
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fb6d 	bl	800093c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2101      	movs	r1, #1
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fb51 	bl	8000910 <LL_ADC_GetOffsetChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10a      	bne.n	800128e <HAL_ADC_ConfigChannel+0x20e>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2101      	movs	r1, #1
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fb46 	bl	8000910 <LL_ADC_GetOffsetChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	0e9b      	lsrs	r3, r3, #26
 8001288:	f003 021f 	and.w	r2, r3, #31
 800128c:	e01e      	b.n	80012cc <HAL_ADC_ConfigChannel+0x24c>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2101      	movs	r1, #1
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fb3b 	bl	8000910 <LL_ADC_GetOffsetChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012a4:	fa93 f3a3 	rbit	r3, r3
 80012a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80012ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80012b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80012b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d101      	bne.n	80012c0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80012bc:	2320      	movs	r3, #32
 80012be:	e004      	b.n	80012ca <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80012c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012c4:	fab3 f383 	clz	r3, r3
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d105      	bne.n	80012e4 <HAL_ADC_ConfigChannel+0x264>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	0e9b      	lsrs	r3, r3, #26
 80012de:	f003 031f 	and.w	r3, r3, #31
 80012e2:	e018      	b.n	8001316 <HAL_ADC_ConfigChannel+0x296>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80012f0:	fa93 f3a3 	rbit	r3, r3
 80012f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80012f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80012fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001300:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001308:	2320      	movs	r3, #32
 800130a:	e004      	b.n	8001316 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800130c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001310:	fab3 f383 	clz	r3, r3
 8001314:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001316:	429a      	cmp	r2, r3
 8001318:	d106      	bne.n	8001328 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2200      	movs	r2, #0
 8001320:	2101      	movs	r1, #1
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fb0a 	bl	800093c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2102      	movs	r1, #2
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff faee 	bl	8000910 <LL_ADC_GetOffsetChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10a      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x2d4>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2102      	movs	r1, #2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fae3 	bl	8000910 <LL_ADC_GetOffsetChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	0e9b      	lsrs	r3, r3, #26
 800134e:	f003 021f 	and.w	r2, r3, #31
 8001352:	e01e      	b.n	8001392 <HAL_ADC_ConfigChannel+0x312>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2102      	movs	r1, #2
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fad8 	bl	8000910 <LL_ADC_GetOffsetChannel>
 8001360:	4603      	mov	r3, r0
 8001362:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001366:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800136a:	fa93 f3a3 	rbit	r3, r3
 800136e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001372:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001376:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800137a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001382:	2320      	movs	r3, #32
 8001384:	e004      	b.n	8001390 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001386:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800138a:	fab3 f383 	clz	r3, r3
 800138e:	b2db      	uxtb	r3, r3
 8001390:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800139a:	2b00      	cmp	r3, #0
 800139c:	d105      	bne.n	80013aa <HAL_ADC_ConfigChannel+0x32a>
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	0e9b      	lsrs	r3, r3, #26
 80013a4:	f003 031f 	and.w	r3, r3, #31
 80013a8:	e016      	b.n	80013d8 <HAL_ADC_ConfigChannel+0x358>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013b6:	fa93 f3a3 	rbit	r3, r3
 80013ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80013bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80013c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80013ca:	2320      	movs	r3, #32
 80013cc:	e004      	b.n	80013d8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80013ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013d2:	fab3 f383 	clz	r3, r3
 80013d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80013d8:	429a      	cmp	r2, r3
 80013da:	d106      	bne.n	80013ea <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2200      	movs	r2, #0
 80013e2:	2102      	movs	r1, #2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff faa9 	bl	800093c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2103      	movs	r1, #3
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fa8d 	bl	8000910 <LL_ADC_GetOffsetChannel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d10a      	bne.n	8001416 <HAL_ADC_ConfigChannel+0x396>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2103      	movs	r1, #3
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fa82 	bl	8000910 <LL_ADC_GetOffsetChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	0e9b      	lsrs	r3, r3, #26
 8001410:	f003 021f 	and.w	r2, r3, #31
 8001414:	e017      	b.n	8001446 <HAL_ADC_ConfigChannel+0x3c6>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2103      	movs	r1, #3
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fa77 	bl	8000910 <LL_ADC_GetOffsetChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001428:	fa93 f3a3 	rbit	r3, r3
 800142c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800142e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001430:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001432:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001438:	2320      	movs	r3, #32
 800143a:	e003      	b.n	8001444 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800143c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800143e:	fab3 f383 	clz	r3, r3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800144e:	2b00      	cmp	r3, #0
 8001450:	d105      	bne.n	800145e <HAL_ADC_ConfigChannel+0x3de>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	0e9b      	lsrs	r3, r3, #26
 8001458:	f003 031f 	and.w	r3, r3, #31
 800145c:	e011      	b.n	8001482 <HAL_ADC_ConfigChannel+0x402>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001464:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001466:	fa93 f3a3 	rbit	r3, r3
 800146a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800146c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800146e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001476:	2320      	movs	r3, #32
 8001478:	e003      	b.n	8001482 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800147a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800147c:	fab3 f383 	clz	r3, r3
 8001480:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001482:	429a      	cmp	r2, r3
 8001484:	d106      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2200      	movs	r2, #0
 800148c:	2103      	movs	r1, #3
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fa54 	bl	800093c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fb5b 	bl	8000b54 <LL_ADC_IsEnabled>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f040 813f 	bne.w	8001724 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6818      	ldr	r0, [r3, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	6819      	ldr	r1, [r3, #0]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	461a      	mov	r2, r3
 80014b4:	f7ff fac8 	bl	8000a48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4a8e      	ldr	r2, [pc, #568]	; (80016f8 <HAL_ADC_ConfigChannel+0x678>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	f040 8130 	bne.w	8001724 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10b      	bne.n	80014ec <HAL_ADC_ConfigChannel+0x46c>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	0e9b      	lsrs	r3, r3, #26
 80014da:	3301      	adds	r3, #1
 80014dc:	f003 031f 	and.w	r3, r3, #31
 80014e0:	2b09      	cmp	r3, #9
 80014e2:	bf94      	ite	ls
 80014e4:	2301      	movls	r3, #1
 80014e6:	2300      	movhi	r3, #0
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	e019      	b.n	8001520 <HAL_ADC_ConfigChannel+0x4a0>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014f4:	fa93 f3a3 	rbit	r3, r3
 80014f8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80014fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014fc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80014fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001504:	2320      	movs	r3, #32
 8001506:	e003      	b.n	8001510 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001508:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800150a:	fab3 f383 	clz	r3, r3
 800150e:	b2db      	uxtb	r3, r3
 8001510:	3301      	adds	r3, #1
 8001512:	f003 031f 	and.w	r3, r3, #31
 8001516:	2b09      	cmp	r3, #9
 8001518:	bf94      	ite	ls
 800151a:	2301      	movls	r3, #1
 800151c:	2300      	movhi	r3, #0
 800151e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001520:	2b00      	cmp	r3, #0
 8001522:	d079      	beq.n	8001618 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800152c:	2b00      	cmp	r3, #0
 800152e:	d107      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x4c0>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	0e9b      	lsrs	r3, r3, #26
 8001536:	3301      	adds	r3, #1
 8001538:	069b      	lsls	r3, r3, #26
 800153a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800153e:	e015      	b.n	800156c <HAL_ADC_ConfigChannel+0x4ec>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001548:	fa93 f3a3 	rbit	r3, r3
 800154c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800154e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001550:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001558:	2320      	movs	r3, #32
 800155a:	e003      	b.n	8001564 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800155c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800155e:	fab3 f383 	clz	r3, r3
 8001562:	b2db      	uxtb	r3, r3
 8001564:	3301      	adds	r3, #1
 8001566:	069b      	lsls	r3, r3, #26
 8001568:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001574:	2b00      	cmp	r3, #0
 8001576:	d109      	bne.n	800158c <HAL_ADC_ConfigChannel+0x50c>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	0e9b      	lsrs	r3, r3, #26
 800157e:	3301      	adds	r3, #1
 8001580:	f003 031f 	and.w	r3, r3, #31
 8001584:	2101      	movs	r1, #1
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	e017      	b.n	80015bc <HAL_ADC_ConfigChannel+0x53c>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001594:	fa93 f3a3 	rbit	r3, r3
 8001598:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800159a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800159c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800159e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80015a4:	2320      	movs	r3, #32
 80015a6:	e003      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80015a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015aa:	fab3 f383 	clz	r3, r3
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	3301      	adds	r3, #1
 80015b2:	f003 031f 	and.w	r3, r3, #31
 80015b6:	2101      	movs	r1, #1
 80015b8:	fa01 f303 	lsl.w	r3, r1, r3
 80015bc:	ea42 0103 	orr.w	r1, r2, r3
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10a      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x562>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	0e9b      	lsrs	r3, r3, #26
 80015d2:	3301      	adds	r3, #1
 80015d4:	f003 021f 	and.w	r2, r3, #31
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	051b      	lsls	r3, r3, #20
 80015e0:	e018      	b.n	8001614 <HAL_ADC_ConfigChannel+0x594>
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ea:	fa93 f3a3 	rbit	r3, r3
 80015ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80015f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80015f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80015fa:	2320      	movs	r3, #32
 80015fc:	e003      	b.n	8001606 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80015fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001600:	fab3 f383 	clz	r3, r3
 8001604:	b2db      	uxtb	r3, r3
 8001606:	3301      	adds	r3, #1
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	4613      	mov	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001614:	430b      	orrs	r3, r1
 8001616:	e080      	b.n	800171a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001620:	2b00      	cmp	r3, #0
 8001622:	d107      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x5b4>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	0e9b      	lsrs	r3, r3, #26
 800162a:	3301      	adds	r3, #1
 800162c:	069b      	lsls	r3, r3, #26
 800162e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001632:	e015      	b.n	8001660 <HAL_ADC_ConfigChannel+0x5e0>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163c:	fa93 f3a3 	rbit	r3, r3
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001644:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800164c:	2320      	movs	r3, #32
 800164e:	e003      	b.n	8001658 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001652:	fab3 f383 	clz	r3, r3
 8001656:	b2db      	uxtb	r3, r3
 8001658:	3301      	adds	r3, #1
 800165a:	069b      	lsls	r3, r3, #26
 800165c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001668:	2b00      	cmp	r3, #0
 800166a:	d109      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x600>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	0e9b      	lsrs	r3, r3, #26
 8001672:	3301      	adds	r3, #1
 8001674:	f003 031f 	and.w	r3, r3, #31
 8001678:	2101      	movs	r1, #1
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	e017      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x630>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001686:	6a3b      	ldr	r3, [r7, #32]
 8001688:	fa93 f3a3 	rbit	r3, r3
 800168c:	61fb      	str	r3, [r7, #28]
  return result;
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001698:	2320      	movs	r3, #32
 800169a:	e003      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	fab3 f383 	clz	r3, r3
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	3301      	adds	r3, #1
 80016a6:	f003 031f 	and.w	r3, r3, #31
 80016aa:	2101      	movs	r1, #1
 80016ac:	fa01 f303 	lsl.w	r3, r1, r3
 80016b0:	ea42 0103 	orr.w	r1, r2, r3
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10d      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x65c>
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	0e9b      	lsrs	r3, r3, #26
 80016c6:	3301      	adds	r3, #1
 80016c8:	f003 021f 	and.w	r2, r3, #31
 80016cc:	4613      	mov	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	3b1e      	subs	r3, #30
 80016d4:	051b      	lsls	r3, r3, #20
 80016d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016da:	e01d      	b.n	8001718 <HAL_ADC_ConfigChannel+0x698>
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	fa93 f3a3 	rbit	r3, r3
 80016e8:	613b      	str	r3, [r7, #16]
  return result;
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d103      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80016f4:	2320      	movs	r3, #32
 80016f6:	e005      	b.n	8001704 <HAL_ADC_ConfigChannel+0x684>
 80016f8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	fab3 f383 	clz	r3, r3
 8001702:	b2db      	uxtb	r3, r3
 8001704:	3301      	adds	r3, #1
 8001706:	f003 021f 	and.w	r2, r3, #31
 800170a:	4613      	mov	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	3b1e      	subs	r3, #30
 8001712:	051b      	lsls	r3, r3, #20
 8001714:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001718:	430b      	orrs	r3, r1
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	6892      	ldr	r2, [r2, #8]
 800171e:	4619      	mov	r1, r3
 8001720:	f7ff f966 	bl	80009f0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b3d      	ldr	r3, [pc, #244]	; (8001820 <HAL_ADC_ConfigChannel+0x7a0>)
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d06c      	beq.n	800180a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001730:	483c      	ldr	r0, [pc, #240]	; (8001824 <HAL_ADC_ConfigChannel+0x7a4>)
 8001732:	f7ff f8bb 	bl	80008ac <LL_ADC_GetCommonPathInternalCh>
 8001736:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a3a      	ldr	r2, [pc, #232]	; (8001828 <HAL_ADC_ConfigChannel+0x7a8>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d127      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001744:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001748:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d121      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a35      	ldr	r2, [pc, #212]	; (800182c <HAL_ADC_ConfigChannel+0x7ac>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d157      	bne.n	800180a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800175a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800175e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001762:	4619      	mov	r1, r3
 8001764:	482f      	ldr	r0, [pc, #188]	; (8001824 <HAL_ADC_ConfigChannel+0x7a4>)
 8001766:	f7ff f88e 	bl	8000886 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800176a:	4b31      	ldr	r3, [pc, #196]	; (8001830 <HAL_ADC_ConfigChannel+0x7b0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	099b      	lsrs	r3, r3, #6
 8001770:	4a30      	ldr	r2, [pc, #192]	; (8001834 <HAL_ADC_ConfigChannel+0x7b4>)
 8001772:	fba2 2303 	umull	r2, r3, r2, r3
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001784:	e002      	b.n	800178c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	3b01      	subs	r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f9      	bne.n	8001786 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001792:	e03a      	b.n	800180a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a27      	ldr	r2, [pc, #156]	; (8001838 <HAL_ADC_ConfigChannel+0x7b8>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d113      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x746>
 800179e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10d      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a1f      	ldr	r2, [pc, #124]	; (800182c <HAL_ADC_ConfigChannel+0x7ac>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d12a      	bne.n	800180a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017bc:	4619      	mov	r1, r3
 80017be:	4819      	ldr	r0, [pc, #100]	; (8001824 <HAL_ADC_ConfigChannel+0x7a4>)
 80017c0:	f7ff f861 	bl	8000886 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80017c4:	e021      	b.n	800180a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a1c      	ldr	r2, [pc, #112]	; (800183c <HAL_ADC_ConfigChannel+0x7bc>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d11c      	bne.n	800180a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80017d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d116      	bne.n	800180a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a12      	ldr	r2, [pc, #72]	; (800182c <HAL_ADC_ConfigChannel+0x7ac>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d111      	bne.n	800180a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017ee:	4619      	mov	r1, r3
 80017f0:	480c      	ldr	r0, [pc, #48]	; (8001824 <HAL_ADC_ConfigChannel+0x7a4>)
 80017f2:	f7ff f848 	bl	8000886 <LL_ADC_SetCommonPathInternalCh>
 80017f6:	e008      	b.n	800180a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fc:	f043 0220 	orr.w	r2, r3, #32
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001812:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001816:	4618      	mov	r0, r3
 8001818:	37d8      	adds	r7, #216	; 0xd8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	80080000 	.word	0x80080000
 8001824:	50040300 	.word	0x50040300
 8001828:	c7520000 	.word	0xc7520000
 800182c:	50040000 	.word	0x50040000
 8001830:	20000000 	.word	0x20000000
 8001834:	053e2d63 	.word	0x053e2d63
 8001838:	cb840000 	.word	0xcb840000
 800183c:	80000001 	.word	0x80000001

08001840 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff f97f 	bl	8000b54 <LL_ADC_IsEnabled>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d169      	bne.n	8001930 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	4b36      	ldr	r3, [pc, #216]	; (800193c <ADC_Enable+0xfc>)
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00d      	beq.n	8001886 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186e:	f043 0210 	orr.w	r2, r3, #16
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187a:	f043 0201 	orr.w	r2, r3, #1
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e055      	b.n	8001932 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff f94e 	bl	8000b2c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001890:	482b      	ldr	r0, [pc, #172]	; (8001940 <ADC_Enable+0x100>)
 8001892:	f7ff f80b 	bl	80008ac <LL_ADC_GetCommonPathInternalCh>
 8001896:	4603      	mov	r3, r0
 8001898:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d013      	beq.n	80018c8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018a0:	4b28      	ldr	r3, [pc, #160]	; (8001944 <ADC_Enable+0x104>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	099b      	lsrs	r3, r3, #6
 80018a6:	4a28      	ldr	r2, [pc, #160]	; (8001948 <ADC_Enable+0x108>)
 80018a8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ac:	099b      	lsrs	r3, r3, #6
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	4613      	mov	r3, r2
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	4413      	add	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80018ba:	e002      	b.n	80018c2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	3b01      	subs	r3, #1
 80018c0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f9      	bne.n	80018bc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80018c8:	f7fe ff9a 	bl	8000800 <HAL_GetTick>
 80018cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018ce:	e028      	b.n	8001922 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff f93d 	bl	8000b54 <LL_ADC_IsEnabled>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d104      	bne.n	80018ea <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff f921 	bl	8000b2c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018ea:	f7fe ff89 	bl	8000800 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d914      	bls.n	8001922 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b01      	cmp	r3, #1
 8001904:	d00d      	beq.n	8001922 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190a:	f043 0210 	orr.w	r2, r3, #16
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001916:	f043 0201 	orr.w	r2, r3, #1
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e007      	b.n	8001932 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b01      	cmp	r3, #1
 800192e:	d1cf      	bne.n	80018d0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	8000003f 	.word	0x8000003f
 8001940:	50040300 	.word	0x50040300
 8001944:	20000000 	.word	0x20000000
 8001948:	053e2d63 	.word	0x053e2d63

0800194c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001968:	4013      	ands	r3, r2
 800196a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197e:	4a04      	ldr	r2, [pc, #16]	; (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	60d3      	str	r3, [r2, #12]
}
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <__NVIC_GetPriorityGrouping+0x18>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	f003 0307 	and.w	r3, r3, #7
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	db0b      	blt.n	80019da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	f003 021f 	and.w	r2, r3, #31
 80019c8:	4907      	ldr	r1, [pc, #28]	; (80019e8 <__NVIC_EnableIRQ+0x38>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	2001      	movs	r0, #1
 80019d2:	fa00 f202 	lsl.w	r2, r0, r2
 80019d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000e100 	.word	0xe000e100

080019ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	db0a      	blt.n	8001a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	490c      	ldr	r1, [pc, #48]	; (8001a38 <__NVIC_SetPriority+0x4c>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	0112      	lsls	r2, r2, #4
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	440b      	add	r3, r1
 8001a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a14:	e00a      	b.n	8001a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4908      	ldr	r1, [pc, #32]	; (8001a3c <__NVIC_SetPriority+0x50>)
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	3b04      	subs	r3, #4
 8001a24:	0112      	lsls	r2, r2, #4
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	440b      	add	r3, r1
 8001a2a:	761a      	strb	r2, [r3, #24]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000e100 	.word	0xe000e100
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f1c3 0307 	rsb	r3, r3, #7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	bf28      	it	cs
 8001a5e:	2304      	movcs	r3, #4
 8001a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3304      	adds	r3, #4
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d902      	bls.n	8001a70 <NVIC_EncodePriority+0x30>
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3b03      	subs	r3, #3
 8001a6e:	e000      	b.n	8001a72 <NVIC_EncodePriority+0x32>
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	f04f 32ff 	mov.w	r2, #4294967295
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	401a      	ands	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	43d9      	mvns	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	4313      	orrs	r3, r2
         );
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3724      	adds	r7, #36	; 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab8:	d301      	bcc.n	8001abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00f      	b.n	8001ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001abe:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <SysTick_Config+0x40>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8001acc:	f7ff ff8e 	bl	80019ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad6:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad8:	2207      	movs	r2, #7
 8001ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	e000e010 	.word	0xe000e010

08001aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ff29 	bl	800194c <__NVIC_SetPriorityGrouping>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b086      	sub	sp, #24
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b14:	f7ff ff3e 	bl	8001994 <__NVIC_GetPriorityGrouping>
 8001b18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	6978      	ldr	r0, [r7, #20]
 8001b20:	f7ff ff8e 	bl	8001a40 <NVIC_EncodePriority>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff5d 	bl	80019ec <__NVIC_SetPriority>
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff31 	bl	80019b0 <__NVIC_EnableIRQ>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ffa2 	bl	8001aa8 <SysTick_Config>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7e:	e148      	b.n	8001e12 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	2101      	movs	r1, #1
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 813a 	beq.w	8001e0c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d005      	beq.n	8001bb0 <HAL_GPIO_Init+0x40>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d130      	bne.n	8001c12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	2203      	movs	r2, #3
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001be6:	2201      	movs	r2, #1
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	f003 0201 	and.w	r2, r3, #1
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d017      	beq.n	8001c4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	2203      	movs	r2, #3
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d123      	bne.n	8001ca2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	08da      	lsrs	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3208      	adds	r2, #8
 8001c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	220f      	movs	r2, #15
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	691a      	ldr	r2, [r3, #16]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	08da      	lsrs	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3208      	adds	r2, #8
 8001c9c:	6939      	ldr	r1, [r7, #16]
 8001c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	2203      	movs	r2, #3
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0203 	and.w	r2, r3, #3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 8094 	beq.w	8001e0c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce4:	4b52      	ldr	r3, [pc, #328]	; (8001e30 <HAL_GPIO_Init+0x2c0>)
 8001ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce8:	4a51      	ldr	r2, [pc, #324]	; (8001e30 <HAL_GPIO_Init+0x2c0>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6613      	str	r3, [r2, #96]	; 0x60
 8001cf0:	4b4f      	ldr	r3, [pc, #316]	; (8001e30 <HAL_GPIO_Init+0x2c0>)
 8001cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cfc:	4a4d      	ldr	r2, [pc, #308]	; (8001e34 <HAL_GPIO_Init+0x2c4>)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	089b      	lsrs	r3, r3, #2
 8001d02:	3302      	adds	r3, #2
 8001d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	220f      	movs	r2, #15
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d26:	d00d      	beq.n	8001d44 <HAL_GPIO_Init+0x1d4>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a43      	ldr	r2, [pc, #268]	; (8001e38 <HAL_GPIO_Init+0x2c8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d007      	beq.n	8001d40 <HAL_GPIO_Init+0x1d0>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a42      	ldr	r2, [pc, #264]	; (8001e3c <HAL_GPIO_Init+0x2cc>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d101      	bne.n	8001d3c <HAL_GPIO_Init+0x1cc>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e004      	b.n	8001d46 <HAL_GPIO_Init+0x1d6>
 8001d3c:	2307      	movs	r3, #7
 8001d3e:	e002      	b.n	8001d46 <HAL_GPIO_Init+0x1d6>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <HAL_GPIO_Init+0x1d6>
 8001d44:	2300      	movs	r3, #0
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	f002 0203 	and.w	r2, r2, #3
 8001d4c:	0092      	lsls	r2, r2, #2
 8001d4e:	4093      	lsls	r3, r2
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d56:	4937      	ldr	r1, [pc, #220]	; (8001e34 <HAL_GPIO_Init+0x2c4>)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	089b      	lsrs	r3, r3, #2
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d64:	4b36      	ldr	r3, [pc, #216]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d88:	4a2d      	ldr	r2, [pc, #180]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d8e:	4b2c      	ldr	r3, [pc, #176]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001db2:	4a23      	ldr	r2, [pc, #140]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001db8:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ddc:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e06:	4a0e      	ldr	r2, [pc, #56]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f47f aeaf 	bne.w	8001b80 <HAL_GPIO_Init+0x10>
  }
}
 8001e22:	bf00      	nop
 8001e24:	bf00      	nop
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40010000 	.word	0x40010000
 8001e38:	48000400 	.word	0x48000400
 8001e3c:	48000800 	.word	0x48000800
 8001e40:	40010400 	.word	0x40010400

08001e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
 8001e50:	4613      	mov	r3, r2
 8001e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e54:	787b      	ldrb	r3, [r7, #1]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e60:	e002      	b.n	8001e68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e62:	887a      	ldrh	r2, [r7, #2]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e76:	b08b      	sub	sp, #44	; 0x2c
 8001e78:	af06      	add	r7, sp, #24
 8001e7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e109      	b.n	800209a <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d106      	bne.n	8001ea0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f007 f868 	bl	8008f70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f002 fef1 	bl	8004c94 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	603b      	str	r3, [r7, #0]
 8001eb8:	687e      	ldr	r6, [r7, #4]
 8001eba:	466d      	mov	r5, sp
 8001ebc:	f106 0410 	add.w	r4, r6, #16
 8001ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ec8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ecc:	1d33      	adds	r3, r6, #4
 8001ece:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ed0:	6838      	ldr	r0, [r7, #0]
 8001ed2:	f002 feb7 	bl	8004c44 <USB_CoreInit>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0d8      	b.n	800209a <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f002 feeb 	bl	8004cca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	73fb      	strb	r3, [r7, #15]
 8001ef8:	e04d      	b.n	8001f96 <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	440b      	add	r3, r1
 8001f0a:	3305      	adds	r3, #5
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	440b      	add	r3, r1
 8001f20:	3304      	adds	r3, #4
 8001f22:	7bfa      	ldrb	r2, [r7, #15]
 8001f24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f26:	7bfa      	ldrb	r2, [r7, #15]
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	b298      	uxth	r0, r3
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	440b      	add	r3, r1
 8001f38:	333a      	adds	r3, #58	; 0x3a
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	440b      	add	r3, r1
 8001f4e:	3307      	adds	r3, #7
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f54:	7bfa      	ldrb	r2, [r7, #15]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	440b      	add	r3, r1
 8001f62:	333c      	adds	r3, #60	; 0x3c
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	440b      	add	r3, r1
 8001f76:	3340      	adds	r3, #64	; 0x40
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	440b      	add	r3, r1
 8001f8a:	3344      	adds	r3, #68	; 0x44
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	3301      	adds	r3, #1
 8001f94:	73fb      	strb	r3, [r7, #15]
 8001f96:	7bfa      	ldrb	r2, [r7, #15]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d3ac      	bcc.n	8001efa <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	73fb      	strb	r3, [r7, #15]
 8001fa4:	e044      	b.n	8002030 <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fa6:	7bfa      	ldrb	r2, [r7, #15]
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	440b      	add	r3, r1
 8001fb4:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	440b      	add	r3, r1
 8001fca:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001fce:	7bfa      	ldrb	r2, [r7, #15]
 8001fd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	440b      	add	r3, r1
 8001fe0:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	440b      	add	r3, r1
 8001ff6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ffe:	7bfa      	ldrb	r2, [r7, #15]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	440b      	add	r3, r1
 800200c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	440b      	add	r3, r1
 8002022:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	3301      	adds	r3, #1
 800202e:	73fb      	strb	r3, [r7, #15]
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	429a      	cmp	r2, r3
 8002038:	d3b5      	bcc.n	8001fa6 <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	603b      	str	r3, [r7, #0]
 8002040:	687e      	ldr	r6, [r7, #4]
 8002042:	466d      	mov	r5, sp
 8002044:	f106 0410 	add.w	r4, r6, #16
 8002048:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800204a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800204c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002050:	e885 0003 	stmia.w	r5, {r0, r1}
 8002054:	1d33      	adds	r3, r6, #4
 8002056:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002058:	6838      	ldr	r0, [r7, #0]
 800205a:	f002 fe43 	bl	8004ce4 <USB_DevInit>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2202      	movs	r2, #2
 8002068:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e014      	b.n	800209a <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d102      	bne.n	800208e <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f001 fc55 	bl	8003938 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f005 f84f 	bl	8007136 <USB_DevDisconnect>

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_PCD_Start+0x16>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e012      	b.n	80020de <HAL_PCD_Start+0x3c>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f002 fdce 	bl	8004c66 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f005 f81a 	bl	8007108 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b084      	sub	sp, #16
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f005 f834 	bl	8007160 <USB_ReadInterrupts>
 80020f8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 fb3e 	bl	8002786 <PCD_EP_ISR_Handler>

    return;
 800210a:	e110      	b.n	800232e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002112:	2b00      	cmp	r3, #0
 8002114:	d013      	beq.n	800213e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800211e:	b29a      	uxth	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002128:	b292      	uxth	r2, r2
 800212a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f006 ff99 	bl	8009066 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002134:	2100      	movs	r1, #0
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f8fc 	bl	8002334 <HAL_PCD_SetAddress>

    return;
 800213c:	e0f7      	b.n	800232e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00c      	beq.n	8002162 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002150:	b29a      	uxth	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800215a:	b292      	uxth	r2, r2
 800215c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002160:	e0e5      	b.n	800232e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00c      	beq.n	8002186 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002174:	b29a      	uxth	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800217e:	b292      	uxth	r2, r2
 8002180:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002184:	e0d3      	b.n	800232e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d034      	beq.n	80021fa <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002198:	b29a      	uxth	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0204 	bic.w	r2, r2, #4
 80021a2:	b292      	uxth	r2, r2
 80021a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0208 	bic.w	r2, r2, #8
 80021ba:	b292      	uxth	r2, r2
 80021bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d107      	bne.n	80021da <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021d2:	2100      	movs	r1, #0
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f007 f9f7 	bl	80095c8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f006 ff7c 	bl	80090d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021f2:	b292      	uxth	r2, r2
 80021f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80021f8:	e099      	b.n	800232e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002200:	2b00      	cmp	r3, #0
 8002202:	d027      	beq.n	8002254 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800220c:	b29a      	uxth	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0208 	orr.w	r2, r2, #8
 8002216:	b292      	uxth	r2, r2
 8002218:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002224:	b29a      	uxth	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800222e:	b292      	uxth	r2, r2
 8002230:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800223c:	b29a      	uxth	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0204 	orr.w	r2, r2, #4
 8002246:	b292      	uxth	r2, r2
 8002248:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f006 ff29 	bl	80090a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002252:	e06c      	b.n	800232e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225a:	2b00      	cmp	r3, #0
 800225c:	d040      	beq.n	80022e0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002266:	b29a      	uxth	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002270:	b292      	uxth	r2, r2
 8002272:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d12b      	bne.n	80022d8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002288:	b29a      	uxth	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0204 	orr.w	r2, r2, #4
 8002292:	b292      	uxth	r2, r2
 8002294:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0208 	orr.w	r2, r2, #8
 80022aa:	b292      	uxth	r2, r2
 80022ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	089b      	lsrs	r3, r3, #2
 80022c4:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80022ce:	2101      	movs	r1, #1
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f007 f979 	bl	80095c8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80022d6:	e02a      	b.n	800232e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f006 fee3 	bl	80090a4 <HAL_PCD_SuspendCallback>
    return;
 80022de:	e026      	b.n	800232e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00f      	beq.n	800230a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022fc:	b292      	uxth	r2, r2
 80022fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f006 fea1 	bl	800904a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002308:	e011      	b.n	800232e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00c      	beq.n	800232e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800231c:	b29a      	uxth	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002326:	b292      	uxth	r2, r2
 8002328:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800232c:	bf00      	nop
  }
}
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <HAL_PCD_SetAddress+0x1a>
 800234a:	2302      	movs	r3, #2
 800234c:	e013      	b.n	8002376 <HAL_PCD_SetAddress+0x42>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	4611      	mov	r1, r2
 8002366:	4618      	mov	r0, r3
 8002368:	f004 feba 	bl	80070e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b084      	sub	sp, #16
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	4608      	mov	r0, r1
 8002388:	4611      	mov	r1, r2
 800238a:	461a      	mov	r2, r3
 800238c:	4603      	mov	r3, r0
 800238e:	70fb      	strb	r3, [r7, #3]
 8002390:	460b      	mov	r3, r1
 8002392:	803b      	strh	r3, [r7, #0]
 8002394:	4613      	mov	r3, r2
 8002396:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800239c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	da0f      	bge.n	80023c4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	4413      	add	r3, r2
 80023b8:	3304      	adds	r3, #4
 80023ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2201      	movs	r2, #1
 80023c0:	705a      	strb	r2, [r3, #1]
 80023c2:	e00f      	b.n	80023e4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	f003 0207 	and.w	r2, r3, #7
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	3304      	adds	r3, #4
 80023dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80023f0:	883a      	ldrh	r2, [r7, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	78ba      	ldrb	r2, [r7, #2]
 80023fa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	785b      	ldrb	r3, [r3, #1]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d004      	beq.n	800240e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800240e:	78bb      	ldrb	r3, [r7, #2]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d102      	bne.n	800241a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_PCD_EP_Open+0xaa>
 8002424:	2302      	movs	r3, #2
 8002426:	e00e      	b.n	8002446 <HAL_PCD_EP_Open+0xc8>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68f9      	ldr	r1, [r7, #12]
 8002436:	4618      	mov	r0, r3
 8002438:	f002 fc76 	bl	8004d28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 8002444:	7afb      	ldrb	r3, [r7, #11]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b084      	sub	sp, #16
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	460b      	mov	r3, r1
 8002458:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800245a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800245e:	2b00      	cmp	r3, #0
 8002460:	da0f      	bge.n	8002482 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002462:	78fb      	ldrb	r3, [r7, #3]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	3304      	adds	r3, #4
 8002478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2201      	movs	r2, #1
 800247e:	705a      	strb	r2, [r3, #1]
 8002480:	e00f      	b.n	80024a2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002482:	78fb      	ldrb	r3, [r7, #3]
 8002484:	f003 0207 	and.w	r2, r3, #7
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	4413      	add	r3, r2
 8002498:	3304      	adds	r3, #4
 800249a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_PCD_EP_Close+0x6e>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e00e      	b.n	80024da <HAL_PCD_EP_Close+0x8c>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68f9      	ldr	r1, [r7, #12]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f002 ffe6 	bl	800549c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	603b      	str	r3, [r7, #0]
 80024ee:	460b      	mov	r3, r1
 80024f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024f2:	7afb      	ldrb	r3, [r7, #11]
 80024f4:	f003 0207 	and.w	r2, r3, #7
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4413      	add	r3, r2
 8002508:	3304      	adds	r3, #4
 800250a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	2200      	movs	r2, #0
 800251c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2200      	movs	r2, #0
 8002522:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002524:	7afb      	ldrb	r3, [r7, #11]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	b2da      	uxtb	r2, r3
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002530:	7afb      	ldrb	r3, [r7, #11]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	2b00      	cmp	r3, #0
 8002538:	d106      	bne.n	8002548 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6979      	ldr	r1, [r7, #20]
 8002540:	4618      	mov	r0, r3
 8002542:	f003 f998 	bl	8005876 <USB_EPStartXfer>
 8002546:	e005      	b.n	8002554 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6979      	ldr	r1, [r7, #20]
 800254e:	4618      	mov	r0, r3
 8002550:	f003 f991 	bl	8005876 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	460b      	mov	r3, r1
 8002568:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800256a:	78fb      	ldrb	r3, [r7, #3]
 800256c:	f003 0207 	and.w	r2, r3, #7
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	440b      	add	r3, r1
 800257c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002580:	681b      	ldr	r3, [r3, #0]
}
 8002582:	4618      	mov	r0, r3
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b086      	sub	sp, #24
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	603b      	str	r3, [r7, #0]
 800259a:	460b      	mov	r3, r1
 800259c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800259e:	7afb      	ldrb	r3, [r7, #11]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	4413      	add	r3, r2
 80025b2:	3304      	adds	r3, #4
 80025b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2200      	movs	r2, #0
 80025d4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2201      	movs	r2, #1
 80025da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025dc:	7afb      	ldrb	r3, [r7, #11]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025e8:	7afb      	ldrb	r3, [r7, #11]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6979      	ldr	r1, [r7, #20]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f003 f93c 	bl	8005876 <USB_EPStartXfer>
 80025fe:	e005      	b.n	800260c <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6979      	ldr	r1, [r7, #20]
 8002606:	4618      	mov	r0, r3
 8002608:	f003 f935 	bl	8005876 <USB_EPStartXfer>
  }

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b084      	sub	sp, #16
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	460b      	mov	r3, r1
 8002620:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002622:	78fb      	ldrb	r3, [r7, #3]
 8002624:	f003 0207 	and.w	r2, r3, #7
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	429a      	cmp	r2, r3
 800262e:	d901      	bls.n	8002634 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e04e      	b.n	80026d2 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002634:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002638:	2b00      	cmp	r3, #0
 800263a:	da0f      	bge.n	800265c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	4413      	add	r3, r2
 8002650:	3304      	adds	r3, #4
 8002652:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2201      	movs	r2, #1
 8002658:	705a      	strb	r2, [r3, #1]
 800265a:	e00d      	b.n	8002678 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	3304      	adds	r3, #4
 8002670:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2201      	movs	r2, #1
 800267c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800267e:	78fb      	ldrb	r3, [r7, #3]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	b2da      	uxtb	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_PCD_EP_SetStall+0x82>
 8002694:	2302      	movs	r3, #2
 8002696:	e01c      	b.n	80026d2 <HAL_PCD_EP_SetStall+0xbc>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68f9      	ldr	r1, [r7, #12]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f004 fc1b 	bl	8006ee2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d108      	bne.n	80026c8 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80026c0:	4619      	mov	r1, r3
 80026c2:	4610      	mov	r0, r2
 80026c4:	f004 fd5c 	bl	8007180 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	460b      	mov	r3, r1
 80026e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026e6:	78fb      	ldrb	r3, [r7, #3]
 80026e8:	f003 020f 	and.w	r2, r3, #15
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d901      	bls.n	80026f8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e042      	b.n	800277e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	da0f      	bge.n	8002720 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	4413      	add	r3, r2
 8002714:	3304      	adds	r3, #4
 8002716:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2201      	movs	r2, #1
 800271c:	705a      	strb	r2, [r3, #1]
 800271e:	e00f      	b.n	8002740 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	f003 0207 	and.w	r2, r3, #7
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	3304      	adds	r3, #4
 8002738:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	b2da      	uxtb	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_PCD_EP_ClrStall+0x86>
 800275c:	2302      	movs	r3, #2
 800275e:	e00e      	b.n	800277e <HAL_PCD_EP_ClrStall+0xa4>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68f9      	ldr	r1, [r7, #12]
 800276e:	4618      	mov	r0, r3
 8002770:	f004 fc08 	bl	8006f84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b096      	sub	sp, #88	; 0x58
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800278e:	e3a9      	b.n	8002ee4 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002798:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800279c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80027aa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f040 8169 	bne.w	8002a86 <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80027b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d150      	bne.n	8002862 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80027cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d0:	81fb      	strh	r3, [r7, #14]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	89fb      	ldrh	r3, [r7, #14]
 80027d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	332c      	adds	r3, #44	; 0x2c
 80027e8:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	461a      	mov	r2, r3
 80027f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4413      	add	r3, r2
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	4413      	add	r3, r2
 8002804:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800280e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002810:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	441a      	add	r2, r3
 800281c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800281e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002820:	2100      	movs	r1, #0
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f006 fbf7 	bl	8009016 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8357 	beq.w	8002ee4 <PCD_EP_ISR_Handler+0x75e>
 8002836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	2b00      	cmp	r3, #0
 800283c:	f040 8352 	bne.w	8002ee4 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002846:	b2db      	uxtb	r3, r3
 8002848:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800284c:	b2da      	uxtb	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	b292      	uxth	r2, r2
 8002854:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002860:	e340      	b.n	8002ee4 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8002868:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002874:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800287c:	2b00      	cmp	r3, #0
 800287e:	d032      	beq.n	80028e6 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002888:	b29b      	uxth	r3, r3
 800288a:	461a      	mov	r2, r3
 800288c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4413      	add	r3, r2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	4413      	add	r3, r2
 800289a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028a6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6818      	ldr	r0, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 80028b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80028b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	f004 fcae 	bl	800721c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028cc:	4013      	ands	r3, r2
 80028ce:	823b      	strh	r3, [r7, #16]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	8a3a      	ldrh	r2, [r7, #16]
 80028d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028da:	b292      	uxth	r2, r2
 80028dc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f006 fb6c 	bl	8008fbc <HAL_PCD_SetupStageCallback>
 80028e4:	e2fe      	b.n	8002ee4 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028e6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f280 82fa 	bge.w	8002ee4 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028fc:	4013      	ands	r3, r2
 80028fe:	83fb      	strh	r3, [r7, #30]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	8bfa      	ldrh	r2, [r7, #30]
 8002906:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800290a:	b292      	uxth	r2, r2
 800290c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002916:	b29b      	uxth	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	4413      	add	r3, r2
 8002928:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002934:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d019      	beq.n	8002972 <PCD_EP_ISR_Handler+0x1ec>
 800293e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d015      	beq.n	8002972 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6818      	ldr	r0, [r3, #0]
 800294a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800294c:	6959      	ldr	r1, [r3, #20]
 800294e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002950:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002954:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002956:	b29b      	uxth	r3, r3
 8002958:	f004 fc60 	bl	800721c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800295c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800295e:	695a      	ldr	r2, [r3, #20]
 8002960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	441a      	add	r2, r3
 8002966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002968:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800296a:	2100      	movs	r1, #0
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f006 fb37 	bl	8008fe0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800297c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002984:	2b00      	cmp	r3, #0
 8002986:	f040 82ad 	bne.w	8002ee4 <PCD_EP_ISR_Handler+0x75e>
 800298a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800298e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002992:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002996:	f000 82a5 	beq.w	8002ee4 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	61bb      	str	r3, [r7, #24]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	461a      	mov	r2, r3
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	4413      	add	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	2b3e      	cmp	r3, #62	; 0x3e
 80029c0:	d918      	bls.n	80029f4 <PCD_EP_ISR_Handler+0x26e>
 80029c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	647b      	str	r3, [r7, #68]	; 0x44
 80029ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f003 031f 	and.w	r3, r3, #31
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d102      	bne.n	80029dc <PCD_EP_ISR_Handler+0x256>
 80029d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029d8:	3b01      	subs	r3, #1
 80029da:	647b      	str	r3, [r7, #68]	; 0x44
 80029dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029de:	b29b      	uxth	r3, r3
 80029e0:	029b      	lsls	r3, r3, #10
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	801a      	strh	r2, [r3, #0]
 80029f2:	e029      	b.n	8002a48 <PCD_EP_ISR_Handler+0x2c2>
 80029f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d112      	bne.n	8002a22 <PCD_EP_ISR_Handler+0x29c>
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	801a      	strh	r2, [r3, #0]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	801a      	strh	r2, [r3, #0]
 8002a20:	e012      	b.n	8002a48 <PCD_EP_ISR_Handler+0x2c2>
 8002a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	085b      	lsrs	r3, r3, #1
 8002a28:	647b      	str	r3, [r7, #68]	; 0x44
 8002a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <PCD_EP_ISR_Handler+0x2b6>
 8002a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a38:	3301      	adds	r3, #1
 8002a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	029b      	lsls	r3, r3, #10
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a58:	827b      	strh	r3, [r7, #18]
 8002a5a:	8a7b      	ldrh	r3, [r7, #18]
 8002a5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002a60:	827b      	strh	r3, [r7, #18]
 8002a62:	8a7b      	ldrh	r3, [r7, #18]
 8002a64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a68:	827b      	strh	r3, [r7, #18]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	8a7b      	ldrh	r3, [r7, #18]
 8002a70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	8013      	strh	r3, [r2, #0]
 8002a84:	e22e      	b.n	8002ee4 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a9a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f280 80f7 	bge.w	8002c92 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002aba:	4013      	ands	r3, r2
 8002abc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002ad2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ad6:	b292      	uxth	r2, r2
 8002ad8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002ada:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	4413      	add	r3, r2
 8002aee:	3304      	adds	r3, #4
 8002af0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002af4:	7b1b      	ldrb	r3, [r3, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d123      	bne.n	8002b42 <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6812      	ldr	r2, [r2, #0]
 8002b12:	4413      	add	r3, r2
 8002b14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b1e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002b22:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 808e 	beq.w	8002c48 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b32:	6959      	ldr	r1, [r3, #20]
 8002b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b36:	88da      	ldrh	r2, [r3, #6]
 8002b38:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002b3c:	f004 fb6e 	bl	800721c <USB_ReadPMA>
 8002b40:	e082      	b.n	8002c48 <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b44:	78db      	ldrb	r3, [r3, #3]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d10a      	bne.n	8002b60 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002b4a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002b4e:	461a      	mov	r2, r3
 8002b50:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f9d4 	bl	8002f00 <HAL_PCD_EP_DB_Receive>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002b5e:	e073      	b.n	8002c48 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	441a      	add	r2, r3
 8002b8c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d022      	beq.n	8002c04 <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6812      	ldr	r2, [r2, #0]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002be2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002be6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d02c      	beq.n	8002c48 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf4:	6959      	ldr	r1, [r3, #20]
 8002bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf8:	891a      	ldrh	r2, [r3, #8]
 8002bfa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002bfe:	f004 fb0d 	bl	800721c <USB_ReadPMA>
 8002c02:	e021      	b.n	8002c48 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4413      	add	r3, r2
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c28:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002c2c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d009      	beq.n	8002c48 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6818      	ldr	r0, [r3, #0]
 8002c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c3a:	6959      	ldr	r1, [r3, #20]
 8002c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c3e:	895a      	ldrh	r2, [r3, #10]
 8002c40:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c44:	f004 faea 	bl	800721c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c4a:	69da      	ldr	r2, [r3, #28]
 8002c4c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c50:	441a      	add	r2, r3
 8002c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c54:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c5e:	441a      	add	r2, r3
 8002c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c62:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <PCD_EP_ISR_Handler+0x4f2>
 8002c6c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d206      	bcs.n	8002c86 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f006 f9ae 	bl	8008fe0 <HAL_PCD_DataOutStageCallback>
 8002c84:	e005      	b.n	8002c92 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f002 fdf2 	bl	8005876 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002c92:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 8122 	beq.w	8002ee4 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8002ca0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	441a      	add	r2, r3
 8002ce2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf4:	78db      	ldrb	r3, [r3, #3]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	f040 80a2 	bne.w	8002e40 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8002cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cfe:	2200      	movs	r2, #0
 8002d00:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d04:	7b1b      	ldrb	r3, [r3, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 8093 	beq.w	8002e32 <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d0c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d046      	beq.n	8002da6 <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d1a:	785b      	ldrb	r3, [r3, #1]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d126      	bne.n	8002d6e <PCD_EP_ISR_Handler+0x5e8>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	4413      	add	r3, r2
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
 8002d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	00da      	lsls	r2, r3, #3
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	4413      	add	r3, r2
 8002d42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d46:	623b      	str	r3, [r7, #32]
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	801a      	strh	r2, [r3, #0]
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	801a      	strh	r2, [r3, #0]
 8002d6c:	e061      	b.n	8002e32 <PCD_EP_ISR_Handler+0x6ac>
 8002d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d70:	785b      	ldrb	r3, [r3, #1]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d15d      	bne.n	8002e32 <PCD_EP_ISR_Handler+0x6ac>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	461a      	mov	r2, r3
 8002d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8a:	4413      	add	r3, r2
 8002d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	00da      	lsls	r2, r3, #3
 8002d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d96:	4413      	add	r3, r2
 8002d98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	2200      	movs	r2, #0
 8002da2:	801a      	strh	r2, [r3, #0]
 8002da4:	e045      	b.n	8002e32 <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dae:	785b      	ldrb	r3, [r3, #1]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d126      	bne.n	8002e02 <PCD_EP_ISR_Handler+0x67c>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	637b      	str	r3, [r7, #52]	; 0x34
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc8:	4413      	add	r3, r2
 8002dca:	637b      	str	r3, [r7, #52]	; 0x34
 8002dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	00da      	lsls	r2, r3, #3
 8002dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dda:	633b      	str	r3, [r7, #48]	; 0x30
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dea:	801a      	strh	r2, [r3, #0]
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	801a      	strh	r2, [r3, #0]
 8002e00:	e017      	b.n	8002e32 <PCD_EP_ISR_Handler+0x6ac>
 8002e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e04:	785b      	ldrb	r3, [r3, #1]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d113      	bne.n	8002e32 <PCD_EP_ISR_Handler+0x6ac>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e18:	4413      	add	r3, r2
 8002e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	00da      	lsls	r2, r3, #3
 8002e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e24:	4413      	add	r3, r2
 8002e26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2e:	2200      	movs	r2, #0
 8002e30:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	4619      	mov	r1, r3
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f006 f8ec 	bl	8009016 <HAL_PCD_DataInStageCallback>
 8002e3e:	e051      	b.n	8002ee4 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002e40:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d144      	bne.n	8002ed6 <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	4413      	add	r3, r2
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	4413      	add	r3, r2
 8002e66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e70:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e76:	699a      	ldr	r2, [r3, #24]
 8002e78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d907      	bls.n	8002e90 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 8002e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e82:	699a      	ldr	r2, [r3, #24]
 8002e84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e88:	1ad2      	subs	r2, r2, r3
 8002e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e8c:	619a      	str	r2, [r3, #24]
 8002e8e:	e002      	b.n	8002e96 <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 8002e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e92:	2200      	movs	r2, #0
 8002e94:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d106      	bne.n	8002eac <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f006 f8b6 	bl	8009016 <HAL_PCD_DataInStageCallback>
 8002eaa:	e01b      	b.n	8002ee4 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eae:	695a      	ldr	r2, [r3, #20]
 8002eb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002eb4:	441a      	add	r2, r3
 8002eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ebc:	69da      	ldr	r2, [r3, #28]
 8002ebe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ec2:	441a      	add	r2, r3
 8002ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f002 fcd1 	bl	8005876 <USB_EPStartXfer>
 8002ed4:	e006      	b.n	8002ee4 <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002ed6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002eda:	461a      	mov	r2, r3
 8002edc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f917 	bl	8003112 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	b21b      	sxth	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f6ff ac4d 	blt.w	8002790 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3758      	adds	r7, #88	; 0x58
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d07c      	beq.n	8003012 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	461a      	mov	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	4413      	add	r3, r2
 8002f32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f3c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	8b7b      	ldrh	r3, [r7, #26]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d306      	bcc.n	8002f56 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	699a      	ldr	r2, [r3, #24]
 8002f4c:	8b7b      	ldrh	r3, [r7, #26]
 8002f4e:	1ad2      	subs	r2, r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	619a      	str	r2, [r3, #24]
 8002f54:	e002      	b.n	8002f5c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d123      	bne.n	8002fac <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f7e:	833b      	strh	r3, [r7, #24]
 8002f80:	8b3b      	ldrh	r3, [r7, #24]
 8002f82:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f86:	833b      	strh	r3, [r7, #24]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	441a      	add	r2, r3
 8002f96:	8b3b      	ldrh	r3, [r7, #24]
 8002f98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d01f      	beq.n	8002ff6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd0:	82fb      	strh	r3, [r7, #22]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	441a      	add	r2, r3
 8002fe0:	8afb      	ldrh	r3, [r7, #22]
 8002fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ff6:	8b7b      	ldrh	r3, [r7, #26]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 8085 	beq.w	8003108 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	6959      	ldr	r1, [r3, #20]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	891a      	ldrh	r2, [r3, #8]
 800300a:	8b7b      	ldrh	r3, [r7, #26]
 800300c:	f004 f906 	bl	800721c <USB_ReadPMA>
 8003010:	e07a      	b.n	8003108 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800301a:	b29b      	uxth	r3, r3
 800301c:	461a      	mov	r2, r3
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4413      	add	r3, r2
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	4413      	add	r3, r2
 800302c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003036:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	699a      	ldr	r2, [r3, #24]
 800303c:	8b7b      	ldrh	r3, [r7, #26]
 800303e:	429a      	cmp	r2, r3
 8003040:	d306      	bcc.n	8003050 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	699a      	ldr	r2, [r3, #24]
 8003046:	8b7b      	ldrh	r3, [r7, #26]
 8003048:	1ad2      	subs	r2, r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	619a      	str	r2, [r3, #24]
 800304e:	e002      	b.n	8003056 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2200      	movs	r2, #0
 8003054:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d123      	bne.n	80030a6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	b29b      	uxth	r3, r3
 8003070:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003078:	83fb      	strh	r3, [r7, #30]
 800307a:	8bfb      	ldrh	r3, [r7, #30]
 800307c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003080:	83fb      	strh	r3, [r7, #30]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	441a      	add	r2, r3
 8003090:	8bfb      	ldrh	r3, [r7, #30]
 8003092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800309a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800309e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d11f      	bne.n	80030f0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ca:	83bb      	strh	r3, [r7, #28]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	441a      	add	r2, r3
 80030da:	8bbb      	ldrh	r3, [r7, #28]
 80030dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80030f0:	8b7b      	ldrh	r3, [r7, #26]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	6959      	ldr	r1, [r3, #20]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	895a      	ldrh	r2, [r3, #10]
 8003102:	8b7b      	ldrh	r3, [r7, #26]
 8003104:	f004 f88a 	bl	800721c <USB_ReadPMA>
    }
  }

  return count;
 8003108:	8b7b      	ldrh	r3, [r7, #26]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3720      	adds	r7, #32
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b0a2      	sub	sp, #136	; 0x88
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	4613      	mov	r3, r2
 800311e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003120:	88fb      	ldrh	r3, [r7, #6]
 8003122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 81c5 	beq.w	80034b6 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003134:	b29b      	uxth	r3, r3
 8003136:	461a      	mov	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4413      	add	r3, r2
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	4413      	add	r3, r2
 8003146:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003150:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	699a      	ldr	r2, [r3, #24]
 8003158:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800315c:	429a      	cmp	r2, r3
 800315e:	d907      	bls.n	8003170 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	699a      	ldr	r2, [r3, #24]
 8003164:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003168:	1ad2      	subs	r2, r2, r3
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	619a      	str	r2, [r3, #24]
 800316e:	e002      	b.n	8003176 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2200      	movs	r2, #0
 8003174:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	f040 80b9 	bne.w	80032f2 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	785b      	ldrb	r3, [r3, #1]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d126      	bne.n	80031d6 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	62bb      	str	r3, [r7, #40]	; 0x28
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003196:	b29b      	uxth	r3, r3
 8003198:	461a      	mov	r2, r3
 800319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319c:	4413      	add	r3, r2
 800319e:	62bb      	str	r3, [r7, #40]	; 0x28
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	00da      	lsls	r2, r3, #3
 80031a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a8:	4413      	add	r3, r2
 80031aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	801a      	strh	r2, [r3, #0]
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	801a      	strh	r2, [r3, #0]
 80031d4:	e01a      	b.n	800320c <HAL_PCD_EP_DB_Transmit+0xfa>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	785b      	ldrb	r3, [r3, #1]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d116      	bne.n	800320c <HAL_PCD_EP_DB_Transmit+0xfa>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	633b      	str	r3, [r7, #48]	; 0x30
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	461a      	mov	r2, r3
 80031f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f2:	4413      	add	r3, r2
 80031f4:	633b      	str	r3, [r7, #48]	; 0x30
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	00da      	lsls	r2, r3, #3
 80031fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fe:	4413      	add	r3, r2
 8003200:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003208:	2200      	movs	r2, #0
 800320a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	623b      	str	r3, [r7, #32]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	785b      	ldrb	r3, [r3, #1]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d126      	bne.n	8003268 <HAL_PCD_EP_DB_Transmit+0x156>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	61bb      	str	r3, [r7, #24]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003228:	b29b      	uxth	r3, r3
 800322a:	461a      	mov	r2, r3
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	4413      	add	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	00da      	lsls	r2, r3, #3
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	4413      	add	r3, r2
 800323c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800324c:	b29a      	uxth	r2, r3
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	801a      	strh	r2, [r3, #0]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	b29b      	uxth	r3, r3
 8003258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800325c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003260:	b29a      	uxth	r2, r3
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	801a      	strh	r2, [r3, #0]
 8003266:	e017      	b.n	8003298 <HAL_PCD_EP_DB_Transmit+0x186>
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	785b      	ldrb	r3, [r3, #1]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d113      	bne.n	8003298 <HAL_PCD_EP_DB_Transmit+0x186>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003278:	b29b      	uxth	r3, r3
 800327a:	461a      	mov	r2, r3
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	4413      	add	r3, r2
 8003280:	623b      	str	r3, [r7, #32]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	00da      	lsls	r2, r3, #3
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	4413      	add	r3, r2
 800328c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	2200      	movs	r2, #0
 8003296:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	4619      	mov	r1, r3
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f005 feb9 	bl	8009016 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 82d2 	beq.w	8003854 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ca:	827b      	strh	r3, [r7, #18]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	461a      	mov	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	441a      	add	r2, r3
 80032da:	8a7b      	ldrh	r3, [r7, #18]
 80032dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	8013      	strh	r3, [r2, #0]
 80032f0:	e2b0      	b.n	8003854 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d021      	beq.n	8003340 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	461a      	mov	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	b29b      	uxth	r3, r3
 800330e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003316:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	441a      	add	r2, r3
 8003328:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800332c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003334:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800333c:	b29b      	uxth	r3, r3
 800333e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003346:	2b01      	cmp	r3, #1
 8003348:	f040 8284 	bne.w	8003854 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003354:	441a      	add	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	69da      	ldr	r2, [r3, #28]
 800335e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003362:	441a      	add	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	6a1a      	ldr	r2, [r3, #32]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	429a      	cmp	r2, r3
 8003372:	d309      	bcc.n	8003388 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	6a1a      	ldr	r2, [r3, #32]
 800337e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003380:	1ad2      	subs	r2, r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	621a      	str	r2, [r3, #32]
 8003386:	e015      	b.n	80033b4 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d107      	bne.n	80033a0 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8003390:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003394:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800339e:	e009      	b.n	80033b4 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2200      	movs	r2, #0
 80033b2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	785b      	ldrb	r3, [r3, #1]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d155      	bne.n	8003468 <HAL_PCD_EP_DB_Transmit+0x356>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	461a      	mov	r2, r3
 80033ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d0:	4413      	add	r3, r2
 80033d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	00da      	lsls	r2, r3, #3
 80033da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033dc:	4413      	add	r3, r2
 80033de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033e2:	637b      	str	r3, [r7, #52]	; 0x34
 80033e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e6:	2b3e      	cmp	r3, #62	; 0x3e
 80033e8:	d916      	bls.n	8003418 <HAL_PCD_EP_DB_Transmit+0x306>
 80033ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ec:	095b      	lsrs	r3, r3, #5
 80033ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80033f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033f2:	f003 031f 	and.w	r3, r3, #31
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d102      	bne.n	8003400 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80033fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033fc:	3b01      	subs	r3, #1
 80033fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003402:	b29b      	uxth	r3, r3
 8003404:	029b      	lsls	r3, r3, #10
 8003406:	b29b      	uxth	r3, r3
 8003408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800340c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003410:	b29a      	uxth	r2, r3
 8003412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003414:	801a      	strh	r2, [r3, #0]
 8003416:	e043      	b.n	80034a0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800341a:	2b00      	cmp	r3, #0
 800341c:	d112      	bne.n	8003444 <HAL_PCD_EP_DB_Transmit+0x332>
 800341e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	b29b      	uxth	r3, r3
 8003424:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003428:	b29a      	uxth	r2, r3
 800342a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800342c:	801a      	strh	r2, [r3, #0]
 800342e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	b29b      	uxth	r3, r3
 8003434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800343c:	b29a      	uxth	r2, r3
 800343e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003440:	801a      	strh	r2, [r3, #0]
 8003442:	e02d      	b.n	80034a0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003446:	085b      	lsrs	r3, r3, #1
 8003448:	64bb      	str	r3, [r7, #72]	; 0x48
 800344a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_PCD_EP_DB_Transmit+0x348>
 8003454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003456:	3301      	adds	r3, #1
 8003458:	64bb      	str	r3, [r7, #72]	; 0x48
 800345a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800345c:	b29b      	uxth	r3, r3
 800345e:	029b      	lsls	r3, r3, #10
 8003460:	b29a      	uxth	r2, r3
 8003462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003464:	801a      	strh	r2, [r3, #0]
 8003466:	e01b      	b.n	80034a0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	785b      	ldrb	r3, [r3, #1]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d117      	bne.n	80034a0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	643b      	str	r3, [r7, #64]	; 0x40
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800347e:	b29b      	uxth	r3, r3
 8003480:	461a      	mov	r2, r3
 8003482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003484:	4413      	add	r3, r2
 8003486:	643b      	str	r3, [r7, #64]	; 0x40
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	00da      	lsls	r2, r3, #3
 800348e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003490:	4413      	add	r3, r2
 8003492:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800349a:	b29a      	uxth	r2, r3
 800349c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800349e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6818      	ldr	r0, [r3, #0]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	6959      	ldr	r1, [r3, #20]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	891a      	ldrh	r2, [r3, #8]
 80034ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	f003 fe72 	bl	8007198 <USB_WritePMA>
 80034b4:	e1ce      	b.n	8003854 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034be:	b29b      	uxth	r3, r3
 80034c0:	461a      	mov	r2, r3
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	4413      	add	r3, r2
 80034d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d307      	bcc.n	80034fa <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034f2:	1ad2      	subs	r2, r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	619a      	str	r2, [r3, #24]
 80034f8:	e002      	b.n	8003500 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2200      	movs	r2, #0
 80034fe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b00      	cmp	r3, #0
 8003506:	f040 80c4 	bne.w	8003692 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	785b      	ldrb	r3, [r3, #1]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d126      	bne.n	8003560 <HAL_PCD_EP_DB_Transmit+0x44e>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	66bb      	str	r3, [r7, #104]	; 0x68
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003520:	b29b      	uxth	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003526:	4413      	add	r3, r2
 8003528:	66bb      	str	r3, [r7, #104]	; 0x68
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	00da      	lsls	r2, r3, #3
 8003530:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003532:	4413      	add	r3, r2
 8003534:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003538:	667b      	str	r3, [r7, #100]	; 0x64
 800353a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003544:	b29a      	uxth	r2, r3
 8003546:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003548:	801a      	strh	r2, [r3, #0]
 800354a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	b29b      	uxth	r3, r3
 8003550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003558:	b29a      	uxth	r2, r3
 800355a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800355c:	801a      	strh	r2, [r3, #0]
 800355e:	e01a      	b.n	8003596 <HAL_PCD_EP_DB_Transmit+0x484>
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	785b      	ldrb	r3, [r3, #1]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d116      	bne.n	8003596 <HAL_PCD_EP_DB_Transmit+0x484>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	673b      	str	r3, [r7, #112]	; 0x70
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003576:	b29b      	uxth	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800357c:	4413      	add	r3, r2
 800357e:	673b      	str	r3, [r7, #112]	; 0x70
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	00da      	lsls	r2, r3, #3
 8003586:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003588:	4413      	add	r3, r2
 800358a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800358e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003592:	2200      	movs	r2, #0
 8003594:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	785b      	ldrb	r3, [r3, #1]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d12f      	bne.n	8003604 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	461a      	mov	r2, r3
 80035b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035bc:	4413      	add	r3, r2
 80035be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	00da      	lsls	r2, r3, #3
 80035c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035cc:	4413      	add	r3, r2
 80035ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035e8:	801a      	strh	r2, [r3, #0]
 80035ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003600:	801a      	strh	r2, [r3, #0]
 8003602:	e017      	b.n	8003634 <HAL_PCD_EP_DB_Transmit+0x522>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	785b      	ldrb	r3, [r3, #1]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d113      	bne.n	8003634 <HAL_PCD_EP_DB_Transmit+0x522>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003614:	b29b      	uxth	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800361a:	4413      	add	r3, r2
 800361c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	00da      	lsls	r2, r3, #3
 8003624:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003626:	4413      	add	r3, r2
 8003628:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800362c:	67bb      	str	r3, [r7, #120]	; 0x78
 800362e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003630:	2200      	movs	r2, #0
 8003632:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	4619      	mov	r1, r3
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f005 fceb 	bl	8009016 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003646:	2b00      	cmp	r3, #0
 8003648:	f040 8104 	bne.w	8003854 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	b29b      	uxth	r3, r3
 800365e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003666:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	441a      	add	r2, r3
 8003678:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800367c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003684:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800368c:	b29b      	uxth	r3, r3
 800368e:	8013      	strh	r3, [r2, #0]
 8003690:	e0e0      	b.n	8003854 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003692:	88fb      	ldrh	r3, [r7, #6]
 8003694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d121      	bne.n	80036e0 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	461a      	mov	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	441a      	add	r2, r3
 80036c8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80036cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036dc:	b29b      	uxth	r3, r3
 80036de:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	f040 80b4 	bne.w	8003854 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	695a      	ldr	r2, [r3, #20]
 80036f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036f4:	441a      	add	r2, r3
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	69da      	ldr	r2, [r3, #28]
 80036fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003702:	441a      	add	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	6a1a      	ldr	r2, [r3, #32]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	429a      	cmp	r2, r3
 8003712:	d309      	bcc.n	8003728 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	6a1a      	ldr	r2, [r3, #32]
 800371e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003720:	1ad2      	subs	r2, r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	621a      	str	r2, [r3, #32]
 8003726:	e015      	b.n	8003754 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d107      	bne.n	8003740 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8003730:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003734:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800373e:	e009      	b.n	8003754 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2200      	movs	r2, #0
 800374a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	663b      	str	r3, [r7, #96]	; 0x60
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	785b      	ldrb	r3, [r3, #1]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d155      	bne.n	800380e <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	65bb      	str	r3, [r7, #88]	; 0x58
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003770:	b29b      	uxth	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003776:	4413      	add	r3, r2
 8003778:	65bb      	str	r3, [r7, #88]	; 0x58
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	00da      	lsls	r2, r3, #3
 8003780:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003782:	4413      	add	r3, r2
 8003784:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003788:	657b      	str	r3, [r7, #84]	; 0x54
 800378a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800378c:	2b3e      	cmp	r3, #62	; 0x3e
 800378e:	d916      	bls.n	80037be <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	677b      	str	r3, [r7, #116]	; 0x74
 8003796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	2b00      	cmp	r3, #0
 800379e:	d102      	bne.n	80037a6 <HAL_PCD_EP_DB_Transmit+0x694>
 80037a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037a2:	3b01      	subs	r3, #1
 80037a4:	677b      	str	r3, [r7, #116]	; 0x74
 80037a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	029b      	lsls	r3, r3, #10
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ba:	801a      	strh	r2, [r3, #0]
 80037bc:	e040      	b.n	8003840 <HAL_PCD_EP_DB_Transmit+0x72e>
 80037be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d112      	bne.n	80037ea <HAL_PCD_EP_DB_Transmit+0x6d8>
 80037c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037d2:	801a      	strh	r2, [r3, #0]
 80037d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e6:	801a      	strh	r2, [r3, #0]
 80037e8:	e02a      	b.n	8003840 <HAL_PCD_EP_DB_Transmit+0x72e>
 80037ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ec:	085b      	lsrs	r3, r3, #1
 80037ee:	677b      	str	r3, [r7, #116]	; 0x74
 80037f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <HAL_PCD_EP_DB_Transmit+0x6ee>
 80037fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037fc:	3301      	adds	r3, #1
 80037fe:	677b      	str	r3, [r7, #116]	; 0x74
 8003800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003802:	b29b      	uxth	r3, r3
 8003804:	029b      	lsls	r3, r3, #10
 8003806:	b29a      	uxth	r2, r3
 8003808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800380a:	801a      	strh	r2, [r3, #0]
 800380c:	e018      	b.n	8003840 <HAL_PCD_EP_DB_Transmit+0x72e>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	785b      	ldrb	r3, [r3, #1]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d114      	bne.n	8003840 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800381e:	b29b      	uxth	r3, r3
 8003820:	461a      	mov	r2, r3
 8003822:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003824:	4413      	add	r3, r2
 8003826:	663b      	str	r3, [r7, #96]	; 0x60
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	00da      	lsls	r2, r3, #3
 800382e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003830:	4413      	add	r3, r2
 8003832:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003836:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800383a:	b29a      	uxth	r2, r3
 800383c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800383e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6818      	ldr	r0, [r3, #0]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	6959      	ldr	r1, [r3, #20]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	895a      	ldrh	r2, [r3, #10]
 800384c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800384e:	b29b      	uxth	r3, r3
 8003850:	f003 fca2 	bl	8007198 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	b29b      	uxth	r3, r3
 8003866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800386a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800386e:	823b      	strh	r3, [r7, #16]
 8003870:	8a3b      	ldrh	r3, [r7, #16]
 8003872:	f083 0310 	eor.w	r3, r3, #16
 8003876:	823b      	strh	r3, [r7, #16]
 8003878:	8a3b      	ldrh	r3, [r7, #16]
 800387a:	f083 0320 	eor.w	r3, r3, #32
 800387e:	823b      	strh	r3, [r7, #16]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	461a      	mov	r2, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	441a      	add	r2, r3
 800388e:	8a3b      	ldrh	r3, [r7, #16]
 8003890:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003894:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800389c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3788      	adds	r7, #136	; 0x88
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b087      	sub	sp, #28
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	607b      	str	r3, [r7, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	817b      	strh	r3, [r7, #10]
 80038bc:	4613      	mov	r3, r2
 80038be:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80038c0:	897b      	ldrh	r3, [r7, #10]
 80038c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00c      	beq.n	80038e6 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038cc:	897b      	ldrh	r3, [r7, #10]
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	4613      	mov	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4413      	add	r3, r2
 80038e0:	3304      	adds	r3, #4
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	e00a      	b.n	80038fc <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80038e6:	897a      	ldrh	r2, [r7, #10]
 80038e8:	4613      	mov	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4413      	add	r3, r2
 80038f8:	3304      	adds	r3, #4
 80038fa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80038fc:	893b      	ldrh	r3, [r7, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d107      	bne.n	8003912 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2200      	movs	r2, #0
 8003906:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	b29a      	uxth	r2, r3
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	80da      	strh	r2, [r3, #6]
 8003910:	e00b      	b.n	800392a <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2201      	movs	r2, #1
 8003916:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	b29a      	uxth	r2, r3
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	0c1b      	lsrs	r3, r3, #16
 8003924:	b29a      	uxth	r2, r3
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	371c      	adds	r7, #28
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800395c:	b29b      	uxth	r3, r3
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003970:	b29b      	uxth	r3, r3
 8003972:	f043 0302 	orr.w	r3, r3, #2
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003990:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003998:	4618      	mov	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40007000 	.word	0x40007000

080039a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b6:	d130      	bne.n	8003a1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80039b8:	4b23      	ldr	r3, [pc, #140]	; (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c4:	d038      	beq.n	8003a38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039c6:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039ce:	4a1e      	ldr	r2, [pc, #120]	; (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039d6:	4b1d      	ldr	r3, [pc, #116]	; (8003a4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2232      	movs	r2, #50	; 0x32
 80039dc:	fb02 f303 	mul.w	r3, r2, r3
 80039e0:	4a1b      	ldr	r2, [pc, #108]	; (8003a50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	0c9b      	lsrs	r3, r3, #18
 80039e8:	3301      	adds	r3, #1
 80039ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039ec:	e002      	b.n	80039f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	3b01      	subs	r3, #1
 80039f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039f4:	4b14      	ldr	r3, [pc, #80]	; (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a00:	d102      	bne.n	8003a08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1f2      	bne.n	80039ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a08:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a14:	d110      	bne.n	8003a38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e00f      	b.n	8003a3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a26:	d007      	beq.n	8003a38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a28:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a30:	4a05      	ldr	r2, [pc, #20]	; (8003a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40007000 	.word	0x40007000
 8003a4c:	20000000 	.word	0x20000000
 8003a50:	431bde83 	.word	0x431bde83

08003a54 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003a58:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	4a04      	ldr	r2, [pc, #16]	; (8003a70 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003a5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a62:	6053      	str	r3, [r2, #4]
}
 8003a64:	bf00      	nop
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40007000 	.word	0x40007000

08003a74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d102      	bne.n	8003a88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	f000 bc02 	b.w	800428c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a88:	4b96      	ldr	r3, [pc, #600]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 030c 	and.w	r3, r3, #12
 8003a90:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a92:	4b94      	ldr	r3, [pc, #592]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80e4 	beq.w	8003c72 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d007      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x4c>
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	2b0c      	cmp	r3, #12
 8003ab4:	f040 808b 	bne.w	8003bce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	f040 8087 	bne.w	8003bce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ac0:	4b88      	ldr	r3, [pc, #544]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x64>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e3d9      	b.n	800428c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a1a      	ldr	r2, [r3, #32]
 8003adc:	4b81      	ldr	r3, [pc, #516]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d004      	beq.n	8003af2 <HAL_RCC_OscConfig+0x7e>
 8003ae8:	4b7e      	ldr	r3, [pc, #504]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003af0:	e005      	b.n	8003afe <HAL_RCC_OscConfig+0x8a>
 8003af2:	4b7c      	ldr	r3, [pc, #496]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003af8:	091b      	lsrs	r3, r3, #4
 8003afa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d223      	bcs.n	8003b4a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fd54 	bl	80045b4 <RCC_SetFlashLatencyFromMSIRange>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e3ba      	b.n	800428c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b16:	4b73      	ldr	r3, [pc, #460]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a72      	ldr	r2, [pc, #456]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b1c:	f043 0308 	orr.w	r3, r3, #8
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	4b70      	ldr	r3, [pc, #448]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	496d      	ldr	r1, [pc, #436]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b34:	4b6b      	ldr	r3, [pc, #428]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	4968      	ldr	r1, [pc, #416]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	604b      	str	r3, [r1, #4]
 8003b48:	e025      	b.n	8003b96 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b4a:	4b66      	ldr	r3, [pc, #408]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a65      	ldr	r2, [pc, #404]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b50:	f043 0308 	orr.w	r3, r3, #8
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	4b63      	ldr	r3, [pc, #396]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	4960      	ldr	r1, [pc, #384]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b68:	4b5e      	ldr	r3, [pc, #376]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	021b      	lsls	r3, r3, #8
 8003b76:	495b      	ldr	r1, [pc, #364]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d109      	bne.n	8003b96 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fd14 	bl	80045b4 <RCC_SetFlashLatencyFromMSIRange>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e37a      	b.n	800428c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b96:	f000 fc81 	bl	800449c <HAL_RCC_GetSysClockFreq>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	4b51      	ldr	r3, [pc, #324]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	091b      	lsrs	r3, r3, #4
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	4950      	ldr	r1, [pc, #320]	; (8003ce8 <HAL_RCC_OscConfig+0x274>)
 8003ba8:	5ccb      	ldrb	r3, [r1, r3]
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb2:	4a4e      	ldr	r2, [pc, #312]	; (8003cec <HAL_RCC_OscConfig+0x278>)
 8003bb4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003bb6:	4b4e      	ldr	r3, [pc, #312]	; (8003cf0 <HAL_RCC_OscConfig+0x27c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fc fdd0 	bl	8000760 <HAL_InitTick>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d052      	beq.n	8003c70 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
 8003bcc:	e35e      	b.n	800428c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d032      	beq.n	8003c3c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003bd6:	4b43      	ldr	r3, [pc, #268]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a42      	ldr	r2, [pc, #264]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003be2:	f7fc fe0d 	bl	8000800 <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bea:	f7fc fe09 	bl	8000800 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e347      	b.n	800428c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bfc:	4b39      	ldr	r3, [pc, #228]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0f0      	beq.n	8003bea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c08:	4b36      	ldr	r3, [pc, #216]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a35      	ldr	r2, [pc, #212]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003c0e:	f043 0308 	orr.w	r3, r3, #8
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	4b33      	ldr	r3, [pc, #204]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	4930      	ldr	r1, [pc, #192]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c26:	4b2f      	ldr	r3, [pc, #188]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	021b      	lsls	r3, r3, #8
 8003c34:	492b      	ldr	r1, [pc, #172]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	604b      	str	r3, [r1, #4]
 8003c3a:	e01a      	b.n	8003c72 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c3c:	4b29      	ldr	r3, [pc, #164]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a28      	ldr	r2, [pc, #160]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003c42:	f023 0301 	bic.w	r3, r3, #1
 8003c46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c48:	f7fc fdda 	bl	8000800 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c50:	f7fc fdd6 	bl	8000800 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e314      	b.n	800428c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c62:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f0      	bne.n	8003c50 <HAL_RCC_OscConfig+0x1dc>
 8003c6e:	e000      	b.n	8003c72 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d073      	beq.n	8003d66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d005      	beq.n	8003c90 <HAL_RCC_OscConfig+0x21c>
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	2b0c      	cmp	r3, #12
 8003c88:	d10e      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2b03      	cmp	r3, #3
 8003c8e:	d10b      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c90:	4b14      	ldr	r3, [pc, #80]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d063      	beq.n	8003d64 <HAL_RCC_OscConfig+0x2f0>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d15f      	bne.n	8003d64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e2f1      	b.n	800428c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb0:	d106      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x24c>
 8003cb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a0b      	ldr	r2, [pc, #44]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	e025      	b.n	8003d0c <HAL_RCC_OscConfig+0x298>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cc8:	d114      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x280>
 8003cca:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a05      	ldr	r2, [pc, #20]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	4b03      	ldr	r3, [pc, #12]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a02      	ldr	r2, [pc, #8]	; (8003ce4 <HAL_RCC_OscConfig+0x270>)
 8003cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	e013      	b.n	8003d0c <HAL_RCC_OscConfig+0x298>
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	0800a018 	.word	0x0800a018
 8003cec:	20000000 	.word	0x20000000
 8003cf0:	20000004 	.word	0x20000004
 8003cf4:	4ba0      	ldr	r3, [pc, #640]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a9f      	ldr	r2, [pc, #636]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	4b9d      	ldr	r3, [pc, #628]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a9c      	ldr	r2, [pc, #624]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d013      	beq.n	8003d3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d14:	f7fc fd74 	bl	8000800 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d1c:	f7fc fd70 	bl	8000800 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b64      	cmp	r3, #100	; 0x64
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e2ae      	b.n	800428c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d2e:	4b92      	ldr	r3, [pc, #584]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x2a8>
 8003d3a:	e014      	b.n	8003d66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3c:	f7fc fd60 	bl	8000800 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d44:	f7fc fd5c 	bl	8000800 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b64      	cmp	r3, #100	; 0x64
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e29a      	b.n	800428c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d56:	4b88      	ldr	r3, [pc, #544]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x2d0>
 8003d62:	e000      	b.n	8003d66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d060      	beq.n	8003e34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d005      	beq.n	8003d84 <HAL_RCC_OscConfig+0x310>
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	2b0c      	cmp	r3, #12
 8003d7c:	d119      	bne.n	8003db2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d116      	bne.n	8003db2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d84:	4b7c      	ldr	r3, [pc, #496]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_RCC_OscConfig+0x328>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e277      	b.n	800428c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d9c:	4b76      	ldr	r3, [pc, #472]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	061b      	lsls	r3, r3, #24
 8003daa:	4973      	ldr	r1, [pc, #460]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003db0:	e040      	b.n	8003e34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d023      	beq.n	8003e02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dba:	4b6f      	ldr	r3, [pc, #444]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a6e      	ldr	r2, [pc, #440]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc6:	f7fc fd1b 	bl	8000800 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dce:	f7fc fd17 	bl	8000800 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e255      	b.n	800428c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003de0:	4b65      	ldr	r3, [pc, #404]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dec:	4b62      	ldr	r3, [pc, #392]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	061b      	lsls	r3, r3, #24
 8003dfa:	495f      	ldr	r1, [pc, #380]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	604b      	str	r3, [r1, #4]
 8003e00:	e018      	b.n	8003e34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e02:	4b5d      	ldr	r3, [pc, #372]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a5c      	ldr	r2, [pc, #368]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0e:	f7fc fcf7 	bl	8000800 <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e16:	f7fc fcf3 	bl	8000800 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e231      	b.n	800428c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e28:	4b53      	ldr	r3, [pc, #332]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f0      	bne.n	8003e16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d03c      	beq.n	8003eba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01c      	beq.n	8003e82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e48:	4b4b      	ldr	r3, [pc, #300]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e4e:	4a4a      	ldr	r2, [pc, #296]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e58:	f7fc fcd2 	bl	8000800 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e60:	f7fc fcce 	bl	8000800 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e20c      	b.n	800428c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e72:	4b41      	ldr	r3, [pc, #260]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0ef      	beq.n	8003e60 <HAL_RCC_OscConfig+0x3ec>
 8003e80:	e01b      	b.n	8003eba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e82:	4b3d      	ldr	r3, [pc, #244]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e88:	4a3b      	ldr	r2, [pc, #236]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003e8a:	f023 0301 	bic.w	r3, r3, #1
 8003e8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e92:	f7fc fcb5 	bl	8000800 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e9a:	f7fc fcb1 	bl	8000800 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e1ef      	b.n	800428c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003eac:	4b32      	ldr	r3, [pc, #200]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1ef      	bne.n	8003e9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 80a6 	beq.w	8004014 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ecc:	4b2a      	ldr	r3, [pc, #168]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10d      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ed8:	4b27      	ldr	r3, [pc, #156]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003edc:	4a26      	ldr	r2, [pc, #152]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ee4:	4b24      	ldr	r3, [pc, #144]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eec:	60bb      	str	r3, [r7, #8]
 8003eee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ef4:	4b21      	ldr	r3, [pc, #132]	; (8003f7c <HAL_RCC_OscConfig+0x508>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d118      	bne.n	8003f32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f00:	4b1e      	ldr	r3, [pc, #120]	; (8003f7c <HAL_RCC_OscConfig+0x508>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1d      	ldr	r2, [pc, #116]	; (8003f7c <HAL_RCC_OscConfig+0x508>)
 8003f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f0c:	f7fc fc78 	bl	8000800 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f14:	f7fc fc74 	bl	8000800 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e1b2      	b.n	800428c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f26:	4b15      	ldr	r3, [pc, #84]	; (8003f7c <HAL_RCC_OscConfig+0x508>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d108      	bne.n	8003f4c <HAL_RCC_OscConfig+0x4d8>
 8003f3a:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f40:	4a0d      	ldr	r2, [pc, #52]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f4a:	e029      	b.n	8003fa0 <HAL_RCC_OscConfig+0x52c>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b05      	cmp	r3, #5
 8003f52:	d115      	bne.n	8003f80 <HAL_RCC_OscConfig+0x50c>
 8003f54:	4b08      	ldr	r3, [pc, #32]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	4a07      	ldr	r2, [pc, #28]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003f5c:	f043 0304 	orr.w	r3, r3, #4
 8003f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f64:	4b04      	ldr	r3, [pc, #16]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6a:	4a03      	ldr	r2, [pc, #12]	; (8003f78 <HAL_RCC_OscConfig+0x504>)
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f74:	e014      	b.n	8003fa0 <HAL_RCC_OscConfig+0x52c>
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40007000 	.word	0x40007000
 8003f80:	4b9a      	ldr	r3, [pc, #616]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8003f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f86:	4a99      	ldr	r2, [pc, #612]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8003f88:	f023 0301 	bic.w	r3, r3, #1
 8003f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f90:	4b96      	ldr	r3, [pc, #600]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8003f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f96:	4a95      	ldr	r2, [pc, #596]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8003f98:	f023 0304 	bic.w	r3, r3, #4
 8003f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d016      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa8:	f7fc fc2a 	bl	8000800 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fae:	e00a      	b.n	8003fc6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb0:	f7fc fc26 	bl	8000800 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e162      	b.n	800428c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fc6:	4b89      	ldr	r3, [pc, #548]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8003fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0ed      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x53c>
 8003fd4:	e015      	b.n	8004002 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd6:	f7fc fc13 	bl	8000800 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fdc:	e00a      	b.n	8003ff4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fde:	f7fc fc0f 	bl	8000800 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e14b      	b.n	800428c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ff4:	4b7d      	ldr	r3, [pc, #500]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1ed      	bne.n	8003fde <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004002:	7ffb      	ldrb	r3, [r7, #31]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d105      	bne.n	8004014 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004008:	4b78      	ldr	r3, [pc, #480]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 800400a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400c:	4a77      	ldr	r2, [pc, #476]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 800400e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004012:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b00      	cmp	r3, #0
 800401e:	d03c      	beq.n	800409a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01c      	beq.n	8004062 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004028:	4b70      	ldr	r3, [pc, #448]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 800402a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800402e:	4a6f      	ldr	r2, [pc, #444]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8004030:	f043 0301 	orr.w	r3, r3, #1
 8004034:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004038:	f7fc fbe2 	bl	8000800 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004040:	f7fc fbde 	bl	8000800 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e11c      	b.n	800428c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004052:	4b66      	ldr	r3, [pc, #408]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8004054:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0ef      	beq.n	8004040 <HAL_RCC_OscConfig+0x5cc>
 8004060:	e01b      	b.n	800409a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004062:	4b62      	ldr	r3, [pc, #392]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8004064:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004068:	4a60      	ldr	r2, [pc, #384]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 800406a:	f023 0301 	bic.w	r3, r3, #1
 800406e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004072:	f7fc fbc5 	bl	8000800 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800407a:	f7fc fbc1 	bl	8000800 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e0ff      	b.n	800428c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800408c:	4b57      	ldr	r3, [pc, #348]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 800408e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1ef      	bne.n	800407a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 80f3 	beq.w	800428a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	f040 80c9 	bne.w	8004240 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80040ae:	4b4f      	ldr	r3, [pc, #316]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f003 0203 	and.w	r2, r3, #3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040be:	429a      	cmp	r2, r3
 80040c0:	d12c      	bne.n	800411c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	3b01      	subs	r3, #1
 80040ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d123      	bne.n	800411c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d11b      	bne.n	800411c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d113      	bne.n	800411c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fe:	085b      	lsrs	r3, r3, #1
 8004100:	3b01      	subs	r3, #1
 8004102:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004104:	429a      	cmp	r2, r3
 8004106:	d109      	bne.n	800411c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	085b      	lsrs	r3, r3, #1
 8004114:	3b01      	subs	r3, #1
 8004116:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d06b      	beq.n	80041f4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	2b0c      	cmp	r3, #12
 8004120:	d062      	beq.n	80041e8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004122:	4b32      	ldr	r3, [pc, #200]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e0ac      	b.n	800428c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004132:	4b2e      	ldr	r3, [pc, #184]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a2d      	ldr	r2, [pc, #180]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8004138:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800413c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800413e:	f7fc fb5f 	bl	8000800 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004146:	f7fc fb5b 	bl	8000800 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e099      	b.n	800428c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004158:	4b24      	ldr	r3, [pc, #144]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1f0      	bne.n	8004146 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004164:	4b21      	ldr	r3, [pc, #132]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	4b21      	ldr	r3, [pc, #132]	; (80041f0 <HAL_RCC_OscConfig+0x77c>)
 800416a:	4013      	ands	r3, r2
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004174:	3a01      	subs	r2, #1
 8004176:	0112      	lsls	r2, r2, #4
 8004178:	4311      	orrs	r1, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800417e:	0212      	lsls	r2, r2, #8
 8004180:	4311      	orrs	r1, r2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004186:	0852      	lsrs	r2, r2, #1
 8004188:	3a01      	subs	r2, #1
 800418a:	0552      	lsls	r2, r2, #21
 800418c:	4311      	orrs	r1, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004192:	0852      	lsrs	r2, r2, #1
 8004194:	3a01      	subs	r2, #1
 8004196:	0652      	lsls	r2, r2, #25
 8004198:	4311      	orrs	r1, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800419e:	06d2      	lsls	r2, r2, #27
 80041a0:	430a      	orrs	r2, r1
 80041a2:	4912      	ldr	r1, [pc, #72]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80041a8:	4b10      	ldr	r3, [pc, #64]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a0f      	ldr	r2, [pc, #60]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 80041ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041b4:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4a0c      	ldr	r2, [pc, #48]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 80041ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041c0:	f7fc fb1e 	bl	8000800 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c8:	f7fc fb1a 	bl	8000800 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e058      	b.n	800428c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041da:	4b04      	ldr	r3, [pc, #16]	; (80041ec <HAL_RCC_OscConfig+0x778>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041e6:	e050      	b.n	800428a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e04f      	b.n	800428c <HAL_RCC_OscConfig+0x818>
 80041ec:	40021000 	.word	0x40021000
 80041f0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041f4:	4b27      	ldr	r3, [pc, #156]	; (8004294 <HAL_RCC_OscConfig+0x820>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d144      	bne.n	800428a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004200:	4b24      	ldr	r3, [pc, #144]	; (8004294 <HAL_RCC_OscConfig+0x820>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a23      	ldr	r2, [pc, #140]	; (8004294 <HAL_RCC_OscConfig+0x820>)
 8004206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800420a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800420c:	4b21      	ldr	r3, [pc, #132]	; (8004294 <HAL_RCC_OscConfig+0x820>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4a20      	ldr	r2, [pc, #128]	; (8004294 <HAL_RCC_OscConfig+0x820>)
 8004212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004216:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004218:	f7fc faf2 	bl	8000800 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004220:	f7fc faee 	bl	8000800 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e02c      	b.n	800428c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004232:	4b18      	ldr	r3, [pc, #96]	; (8004294 <HAL_RCC_OscConfig+0x820>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f0      	beq.n	8004220 <HAL_RCC_OscConfig+0x7ac>
 800423e:	e024      	b.n	800428a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	2b0c      	cmp	r3, #12
 8004244:	d01f      	beq.n	8004286 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004246:	4b13      	ldr	r3, [pc, #76]	; (8004294 <HAL_RCC_OscConfig+0x820>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a12      	ldr	r2, [pc, #72]	; (8004294 <HAL_RCC_OscConfig+0x820>)
 800424c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004250:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004252:	f7fc fad5 	bl	8000800 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425a:	f7fc fad1 	bl	8000800 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e00f      	b.n	800428c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800426c:	4b09      	ldr	r3, [pc, #36]	; (8004294 <HAL_RCC_OscConfig+0x820>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1f0      	bne.n	800425a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004278:	4b06      	ldr	r3, [pc, #24]	; (8004294 <HAL_RCC_OscConfig+0x820>)
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	4905      	ldr	r1, [pc, #20]	; (8004294 <HAL_RCC_OscConfig+0x820>)
 800427e:	4b06      	ldr	r3, [pc, #24]	; (8004298 <HAL_RCC_OscConfig+0x824>)
 8004280:	4013      	ands	r3, r2
 8004282:	60cb      	str	r3, [r1, #12]
 8004284:	e001      	b.n	800428a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3720      	adds	r7, #32
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40021000 	.word	0x40021000
 8004298:	feeefffc 	.word	0xfeeefffc

0800429c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0e7      	b.n	8004480 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042b0:	4b75      	ldr	r3, [pc, #468]	; (8004488 <HAL_RCC_ClockConfig+0x1ec>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d910      	bls.n	80042e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042be:	4b72      	ldr	r3, [pc, #456]	; (8004488 <HAL_RCC_ClockConfig+0x1ec>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 0207 	bic.w	r2, r3, #7
 80042c6:	4970      	ldr	r1, [pc, #448]	; (8004488 <HAL_RCC_ClockConfig+0x1ec>)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ce:	4b6e      	ldr	r3, [pc, #440]	; (8004488 <HAL_RCC_ClockConfig+0x1ec>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0cf      	b.n	8004480 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d010      	beq.n	800430e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	4b66      	ldr	r3, [pc, #408]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d908      	bls.n	800430e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042fc:	4b63      	ldr	r3, [pc, #396]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	4960      	ldr	r1, [pc, #384]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 800430a:	4313      	orrs	r3, r2
 800430c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d04c      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b03      	cmp	r3, #3
 8004320:	d107      	bne.n	8004332 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004322:	4b5a      	ldr	r3, [pc, #360]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d121      	bne.n	8004372 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e0a6      	b.n	8004480 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d107      	bne.n	800434a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800433a:	4b54      	ldr	r3, [pc, #336]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d115      	bne.n	8004372 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e09a      	b.n	8004480 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d107      	bne.n	8004362 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004352:	4b4e      	ldr	r3, [pc, #312]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d109      	bne.n	8004372 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e08e      	b.n	8004480 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004362:	4b4a      	ldr	r3, [pc, #296]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e086      	b.n	8004480 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004372:	4b46      	ldr	r3, [pc, #280]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f023 0203 	bic.w	r2, r3, #3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	4943      	ldr	r1, [pc, #268]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 8004380:	4313      	orrs	r3, r2
 8004382:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004384:	f7fc fa3c 	bl	8000800 <HAL_GetTick>
 8004388:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438a:	e00a      	b.n	80043a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800438c:	f7fc fa38 	bl	8000800 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	f241 3288 	movw	r2, #5000	; 0x1388
 800439a:	4293      	cmp	r3, r2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e06e      	b.n	8004480 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a2:	4b3a      	ldr	r3, [pc, #232]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 020c 	and.w	r2, r3, #12
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d1eb      	bne.n	800438c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d010      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	4b31      	ldr	r3, [pc, #196]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d208      	bcs.n	80043e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043d0:	4b2e      	ldr	r3, [pc, #184]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	492b      	ldr	r1, [pc, #172]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043e2:	4b29      	ldr	r3, [pc, #164]	; (8004488 <HAL_RCC_ClockConfig+0x1ec>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d210      	bcs.n	8004412 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f0:	4b25      	ldr	r3, [pc, #148]	; (8004488 <HAL_RCC_ClockConfig+0x1ec>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f023 0207 	bic.w	r2, r3, #7
 80043f8:	4923      	ldr	r1, [pc, #140]	; (8004488 <HAL_RCC_ClockConfig+0x1ec>)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004400:	4b21      	ldr	r3, [pc, #132]	; (8004488 <HAL_RCC_ClockConfig+0x1ec>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d001      	beq.n	8004412 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e036      	b.n	8004480 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	d008      	beq.n	8004430 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800441e:	4b1b      	ldr	r3, [pc, #108]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	4918      	ldr	r1, [pc, #96]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 800442c:	4313      	orrs	r3, r2
 800442e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d009      	beq.n	8004450 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800443c:	4b13      	ldr	r3, [pc, #76]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	4910      	ldr	r1, [pc, #64]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 800444c:	4313      	orrs	r3, r2
 800444e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004450:	f000 f824 	bl	800449c <HAL_RCC_GetSysClockFreq>
 8004454:	4602      	mov	r2, r0
 8004456:	4b0d      	ldr	r3, [pc, #52]	; (800448c <HAL_RCC_ClockConfig+0x1f0>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	490b      	ldr	r1, [pc, #44]	; (8004490 <HAL_RCC_ClockConfig+0x1f4>)
 8004462:	5ccb      	ldrb	r3, [r1, r3]
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	fa22 f303 	lsr.w	r3, r2, r3
 800446c:	4a09      	ldr	r2, [pc, #36]	; (8004494 <HAL_RCC_ClockConfig+0x1f8>)
 800446e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <HAL_RCC_ClockConfig+0x1fc>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f7fc f973 	bl	8000760 <HAL_InitTick>
 800447a:	4603      	mov	r3, r0
 800447c:	72fb      	strb	r3, [r7, #11]

  return status;
 800447e:	7afb      	ldrb	r3, [r7, #11]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40022000 	.word	0x40022000
 800448c:	40021000 	.word	0x40021000
 8004490:	0800a018 	.word	0x0800a018
 8004494:	20000000 	.word	0x20000000
 8004498:	20000004 	.word	0x20000004

0800449c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800449c:	b480      	push	{r7}
 800449e:	b089      	sub	sp, #36	; 0x24
 80044a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
 80044a6:	2300      	movs	r3, #0
 80044a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044aa:	4b3e      	ldr	r3, [pc, #248]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 030c 	and.w	r3, r3, #12
 80044b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044b4:	4b3b      	ldr	r3, [pc, #236]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f003 0303 	and.w	r3, r3, #3
 80044bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d005      	beq.n	80044d0 <HAL_RCC_GetSysClockFreq+0x34>
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	2b0c      	cmp	r3, #12
 80044c8:	d121      	bne.n	800450e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d11e      	bne.n	800450e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044d0:	4b34      	ldr	r3, [pc, #208]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0308 	and.w	r3, r3, #8
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d107      	bne.n	80044ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044dc:	4b31      	ldr	r3, [pc, #196]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80044de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044e2:	0a1b      	lsrs	r3, r3, #8
 80044e4:	f003 030f 	and.w	r3, r3, #15
 80044e8:	61fb      	str	r3, [r7, #28]
 80044ea:	e005      	b.n	80044f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044ec:	4b2d      	ldr	r3, [pc, #180]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	091b      	lsrs	r3, r3, #4
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044f8:	4a2b      	ldr	r2, [pc, #172]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004500:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10d      	bne.n	8004524 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800450c:	e00a      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	2b04      	cmp	r3, #4
 8004512:	d102      	bne.n	800451a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004514:	4b25      	ldr	r3, [pc, #148]	; (80045ac <HAL_RCC_GetSysClockFreq+0x110>)
 8004516:	61bb      	str	r3, [r7, #24]
 8004518:	e004      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	2b08      	cmp	r3, #8
 800451e:	d101      	bne.n	8004524 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004520:	4b23      	ldr	r3, [pc, #140]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004522:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	2b0c      	cmp	r3, #12
 8004528:	d134      	bne.n	8004594 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800452a:	4b1e      	ldr	r3, [pc, #120]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b02      	cmp	r3, #2
 8004538:	d003      	beq.n	8004542 <HAL_RCC_GetSysClockFreq+0xa6>
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b03      	cmp	r3, #3
 800453e:	d003      	beq.n	8004548 <HAL_RCC_GetSysClockFreq+0xac>
 8004540:	e005      	b.n	800454e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004542:	4b1a      	ldr	r3, [pc, #104]	; (80045ac <HAL_RCC_GetSysClockFreq+0x110>)
 8004544:	617b      	str	r3, [r7, #20]
      break;
 8004546:	e005      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004548:	4b19      	ldr	r3, [pc, #100]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800454a:	617b      	str	r3, [r7, #20]
      break;
 800454c:	e002      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	617b      	str	r3, [r7, #20]
      break;
 8004552:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004554:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	091b      	lsrs	r3, r3, #4
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	3301      	adds	r3, #1
 8004560:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004562:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	0a1b      	lsrs	r3, r3, #8
 8004568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	fb03 f202 	mul.w	r2, r3, r2
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	fbb2 f3f3 	udiv	r3, r2, r3
 8004578:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800457a:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	0e5b      	lsrs	r3, r3, #25
 8004580:	f003 0303 	and.w	r3, r3, #3
 8004584:	3301      	adds	r3, #1
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004592:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004594:	69bb      	ldr	r3, [r7, #24]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3724      	adds	r7, #36	; 0x24
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	40021000 	.word	0x40021000
 80045a8:	0800a028 	.word	0x0800a028
 80045ac:	00f42400 	.word	0x00f42400
 80045b0:	007a1200 	.word	0x007a1200

080045b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045bc:	2300      	movs	r3, #0
 80045be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045c0:	4b2a      	ldr	r3, [pc, #168]	; (800466c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045cc:	f7ff f9de 	bl	800398c <HAL_PWREx_GetVoltageRange>
 80045d0:	6178      	str	r0, [r7, #20]
 80045d2:	e014      	b.n	80045fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045d4:	4b25      	ldr	r3, [pc, #148]	; (800466c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d8:	4a24      	ldr	r2, [pc, #144]	; (800466c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045de:	6593      	str	r3, [r2, #88]	; 0x58
 80045e0:	4b22      	ldr	r3, [pc, #136]	; (800466c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045ec:	f7ff f9ce 	bl	800398c <HAL_PWREx_GetVoltageRange>
 80045f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045f2:	4b1e      	ldr	r3, [pc, #120]	; (800466c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f6:	4a1d      	ldr	r2, [pc, #116]	; (800466c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004604:	d10b      	bne.n	800461e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b80      	cmp	r3, #128	; 0x80
 800460a:	d919      	bls.n	8004640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2ba0      	cmp	r3, #160	; 0xa0
 8004610:	d902      	bls.n	8004618 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004612:	2302      	movs	r3, #2
 8004614:	613b      	str	r3, [r7, #16]
 8004616:	e013      	b.n	8004640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004618:	2301      	movs	r3, #1
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	e010      	b.n	8004640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b80      	cmp	r3, #128	; 0x80
 8004622:	d902      	bls.n	800462a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004624:	2303      	movs	r3, #3
 8004626:	613b      	str	r3, [r7, #16]
 8004628:	e00a      	b.n	8004640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b80      	cmp	r3, #128	; 0x80
 800462e:	d102      	bne.n	8004636 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004630:	2302      	movs	r3, #2
 8004632:	613b      	str	r3, [r7, #16]
 8004634:	e004      	b.n	8004640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b70      	cmp	r3, #112	; 0x70
 800463a:	d101      	bne.n	8004640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800463c:	2301      	movs	r3, #1
 800463e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004640:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f023 0207 	bic.w	r2, r3, #7
 8004648:	4909      	ldr	r1, [pc, #36]	; (8004670 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004650:	4b07      	ldr	r3, [pc, #28]	; (8004670 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	429a      	cmp	r2, r3
 800465c:	d001      	beq.n	8004662 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e000      	b.n	8004664 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40021000 	.word	0x40021000
 8004670:	40022000 	.word	0x40022000

08004674 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800467c:	2300      	movs	r3, #0
 800467e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004680:	2300      	movs	r3, #0
 8004682:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800468c:	2b00      	cmp	r3, #0
 800468e:	d031      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004694:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004698:	d01a      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800469a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800469e:	d814      	bhi.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d009      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80046a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046a8:	d10f      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80046aa:	4b5d      	ldr	r3, [pc, #372]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	4a5c      	ldr	r2, [pc, #368]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046b6:	e00c      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3304      	adds	r3, #4
 80046bc:	2100      	movs	r1, #0
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 f9ce 	bl	8004a60 <RCCEx_PLLSAI1_Config>
 80046c4:	4603      	mov	r3, r0
 80046c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046c8:	e003      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	74fb      	strb	r3, [r7, #19]
      break;
 80046ce:	e000      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80046d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046d2:	7cfb      	ldrb	r3, [r7, #19]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10b      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046d8:	4b51      	ldr	r3, [pc, #324]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e6:	494e      	ldr	r1, [pc, #312]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80046ee:	e001      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f0:	7cfb      	ldrb	r3, [r7, #19]
 80046f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 809e 	beq.w	800483e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004702:	2300      	movs	r3, #0
 8004704:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004706:	4b46      	ldr	r3, [pc, #280]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004716:	2300      	movs	r3, #0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00d      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800471c:	4b40      	ldr	r3, [pc, #256]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800471e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004720:	4a3f      	ldr	r2, [pc, #252]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004726:	6593      	str	r3, [r2, #88]	; 0x58
 8004728:	4b3d      	ldr	r3, [pc, #244]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800472a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004730:	60bb      	str	r3, [r7, #8]
 8004732:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004734:	2301      	movs	r3, #1
 8004736:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004738:	4b3a      	ldr	r3, [pc, #232]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a39      	ldr	r2, [pc, #228]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800473e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004742:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004744:	f7fc f85c 	bl	8000800 <HAL_GetTick>
 8004748:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800474a:	e009      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800474c:	f7fc f858 	bl	8000800 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d902      	bls.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	74fb      	strb	r3, [r7, #19]
        break;
 800475e:	e005      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004760:	4b30      	ldr	r3, [pc, #192]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0ef      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800476c:	7cfb      	ldrb	r3, [r7, #19]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d15a      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004772:	4b2b      	ldr	r3, [pc, #172]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004778:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800477c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01e      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	429a      	cmp	r2, r3
 800478c:	d019      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800478e:	4b24      	ldr	r3, [pc, #144]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004798:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800479a:	4b21      	ldr	r3, [pc, #132]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800479c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a0:	4a1f      	ldr	r2, [pc, #124]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047aa:	4b1d      	ldr	r3, [pc, #116]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b0:	4a1b      	ldr	r2, [pc, #108]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047ba:	4a19      	ldr	r2, [pc, #100]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d016      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047cc:	f7fc f818 	bl	8000800 <HAL_GetTick>
 80047d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047d2:	e00b      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d4:	f7fc f814 	bl	8000800 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d902      	bls.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	74fb      	strb	r3, [r7, #19]
            break;
 80047ea:	e006      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ec:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0ec      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80047fa:	7cfb      	ldrb	r3, [r7, #19]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10b      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004800:	4b07      	ldr	r3, [pc, #28]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004806:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800480e:	4904      	ldr	r1, [pc, #16]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004816:	e009      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004818:	7cfb      	ldrb	r3, [r7, #19]
 800481a:	74bb      	strb	r3, [r7, #18]
 800481c:	e006      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800481e:	bf00      	nop
 8004820:	40021000 	.word	0x40021000
 8004824:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004828:	7cfb      	ldrb	r3, [r7, #19]
 800482a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800482c:	7c7b      	ldrb	r3, [r7, #17]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d105      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004832:	4b8a      	ldr	r3, [pc, #552]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004836:	4a89      	ldr	r2, [pc, #548]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800483c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800484a:	4b84      	ldr	r3, [pc, #528]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800484c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004850:	f023 0203 	bic.w	r2, r3, #3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	4980      	ldr	r1, [pc, #512]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00a      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800486c:	4b7b      	ldr	r3, [pc, #492]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004872:	f023 020c 	bic.w	r2, r3, #12
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	4978      	ldr	r1, [pc, #480]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800488e:	4b73      	ldr	r3, [pc, #460]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004894:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489c:	496f      	ldr	r1, [pc, #444]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048b0:	4b6a      	ldr	r3, [pc, #424]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048be:	4967      	ldr	r1, [pc, #412]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048d2:	4b62      	ldr	r3, [pc, #392]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e0:	495e      	ldr	r1, [pc, #376]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048f4:	4b59      	ldr	r3, [pc, #356]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004902:	4956      	ldr	r1, [pc, #344]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004904:	4313      	orrs	r3, r2
 8004906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004916:	4b51      	ldr	r3, [pc, #324]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	494d      	ldr	r1, [pc, #308]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d028      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004938:	4b48      	ldr	r3, [pc, #288]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800493a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	4945      	ldr	r1, [pc, #276]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004956:	d106      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004958:	4b40      	ldr	r3, [pc, #256]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	4a3f      	ldr	r2, [pc, #252]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800495e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004962:	60d3      	str	r3, [r2, #12]
 8004964:	e011      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800496e:	d10c      	bne.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3304      	adds	r3, #4
 8004974:	2101      	movs	r1, #1
 8004976:	4618      	mov	r0, r3
 8004978:	f000 f872 	bl	8004a60 <RCCEx_PLLSAI1_Config>
 800497c:	4603      	mov	r3, r0
 800497e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004980:	7cfb      	ldrb	r3, [r7, #19]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004986:	7cfb      	ldrb	r3, [r7, #19]
 8004988:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d028      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004996:	4b31      	ldr	r3, [pc, #196]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a4:	492d      	ldr	r1, [pc, #180]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b4:	d106      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049b6:	4b29      	ldr	r3, [pc, #164]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	4a28      	ldr	r2, [pc, #160]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049c0:	60d3      	str	r3, [r2, #12]
 80049c2:	e011      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049cc:	d10c      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	3304      	adds	r3, #4
 80049d2:	2101      	movs	r1, #1
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 f843 	bl	8004a60 <RCCEx_PLLSAI1_Config>
 80049da:	4603      	mov	r3, r0
 80049dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049de:	7cfb      	ldrb	r3, [r7, #19]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80049e4:	7cfb      	ldrb	r3, [r7, #19]
 80049e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d01c      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049f4:	4b19      	ldr	r3, [pc, #100]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a02:	4916      	ldr	r1, [pc, #88]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a12:	d10c      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3304      	adds	r3, #4
 8004a18:	2102      	movs	r1, #2
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 f820 	bl	8004a60 <RCCEx_PLLSAI1_Config>
 8004a20:	4603      	mov	r3, r0
 8004a22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a24:	7cfb      	ldrb	r3, [r7, #19]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004a2a:	7cfb      	ldrb	r3, [r7, #19]
 8004a2c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a3a:	4b08      	ldr	r3, [pc, #32]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a40:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a48:	4904      	ldr	r1, [pc, #16]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a50:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40021000 	.word	0x40021000

08004a60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a6e:	4b74      	ldr	r3, [pc, #464]	; (8004c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f003 0303 	and.w	r3, r3, #3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d018      	beq.n	8004aac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a7a:	4b71      	ldr	r3, [pc, #452]	; (8004c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f003 0203 	and.w	r2, r3, #3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d10d      	bne.n	8004aa6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
       ||
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d009      	beq.n	8004aa6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a92:	4b6b      	ldr	r3, [pc, #428]	; (8004c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	091b      	lsrs	r3, r3, #4
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
       ||
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d047      	beq.n	8004b36 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	73fb      	strb	r3, [r7, #15]
 8004aaa:	e044      	b.n	8004b36 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b03      	cmp	r3, #3
 8004ab2:	d018      	beq.n	8004ae6 <RCCEx_PLLSAI1_Config+0x86>
 8004ab4:	2b03      	cmp	r3, #3
 8004ab6:	d825      	bhi.n	8004b04 <RCCEx_PLLSAI1_Config+0xa4>
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d002      	beq.n	8004ac2 <RCCEx_PLLSAI1_Config+0x62>
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d009      	beq.n	8004ad4 <RCCEx_PLLSAI1_Config+0x74>
 8004ac0:	e020      	b.n	8004b04 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ac2:	4b5f      	ldr	r3, [pc, #380]	; (8004c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d11d      	bne.n	8004b0a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ad2:	e01a      	b.n	8004b0a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ad4:	4b5a      	ldr	r3, [pc, #360]	; (8004c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d116      	bne.n	8004b0e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ae4:	e013      	b.n	8004b0e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ae6:	4b56      	ldr	r3, [pc, #344]	; (8004c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10f      	bne.n	8004b12 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004af2:	4b53      	ldr	r3, [pc, #332]	; (8004c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b02:	e006      	b.n	8004b12 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	73fb      	strb	r3, [r7, #15]
      break;
 8004b08:	e004      	b.n	8004b14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b0a:	bf00      	nop
 8004b0c:	e002      	b.n	8004b14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b0e:	bf00      	nop
 8004b10:	e000      	b.n	8004b14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b12:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10d      	bne.n	8004b36 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b1a:	4b49      	ldr	r3, [pc, #292]	; (8004c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6819      	ldr	r1, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	430b      	orrs	r3, r1
 8004b30:	4943      	ldr	r1, [pc, #268]	; (8004c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d17c      	bne.n	8004c36 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b3c:	4b40      	ldr	r3, [pc, #256]	; (8004c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a3f      	ldr	r2, [pc, #252]	; (8004c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b48:	f7fb fe5a 	bl	8000800 <HAL_GetTick>
 8004b4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b4e:	e009      	b.n	8004b64 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b50:	f7fb fe56 	bl	8000800 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d902      	bls.n	8004b64 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	73fb      	strb	r3, [r7, #15]
        break;
 8004b62:	e005      	b.n	8004b70 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b64:	4b36      	ldr	r3, [pc, #216]	; (8004c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1ef      	bne.n	8004b50 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d15f      	bne.n	8004c36 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d110      	bne.n	8004b9e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b7c:	4b30      	ldr	r3, [pc, #192]	; (8004c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004b84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6892      	ldr	r2, [r2, #8]
 8004b8c:	0211      	lsls	r1, r2, #8
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	68d2      	ldr	r2, [r2, #12]
 8004b92:	06d2      	lsls	r2, r2, #27
 8004b94:	430a      	orrs	r2, r1
 8004b96:	492a      	ldr	r1, [pc, #168]	; (8004c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	610b      	str	r3, [r1, #16]
 8004b9c:	e027      	b.n	8004bee <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d112      	bne.n	8004bca <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ba4:	4b26      	ldr	r3, [pc, #152]	; (8004c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004bac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6892      	ldr	r2, [r2, #8]
 8004bb4:	0211      	lsls	r1, r2, #8
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6912      	ldr	r2, [r2, #16]
 8004bba:	0852      	lsrs	r2, r2, #1
 8004bbc:	3a01      	subs	r2, #1
 8004bbe:	0552      	lsls	r2, r2, #21
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	491f      	ldr	r1, [pc, #124]	; (8004c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	610b      	str	r3, [r1, #16]
 8004bc8:	e011      	b.n	8004bee <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bca:	4b1d      	ldr	r3, [pc, #116]	; (8004c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004bd2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6892      	ldr	r2, [r2, #8]
 8004bda:	0211      	lsls	r1, r2, #8
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6952      	ldr	r2, [r2, #20]
 8004be0:	0852      	lsrs	r2, r2, #1
 8004be2:	3a01      	subs	r2, #1
 8004be4:	0652      	lsls	r2, r2, #25
 8004be6:	430a      	orrs	r2, r1
 8004be8:	4915      	ldr	r1, [pc, #84]	; (8004c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004bee:	4b14      	ldr	r3, [pc, #80]	; (8004c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a13      	ldr	r2, [pc, #76]	; (8004c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bf4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bf8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bfa:	f7fb fe01 	bl	8000800 <HAL_GetTick>
 8004bfe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c00:	e009      	b.n	8004c16 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c02:	f7fb fdfd 	bl	8000800 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d902      	bls.n	8004c16 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	73fb      	strb	r3, [r7, #15]
          break;
 8004c14:	e005      	b.n	8004c22 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c16:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0ef      	beq.n	8004c02 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d106      	bne.n	8004c36 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c28:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	4903      	ldr	r1, [pc, #12]	; (8004c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40021000 	.word	0x40021000

08004c44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c44:	b084      	sub	sp, #16
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	f107 0014 	add.w	r0, r7, #20
 8004c52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	b004      	add	sp, #16
 8004c64:	4770      	bx	lr

08004c66 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b085      	sub	sp, #20
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c76:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004c7a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c9c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004ca0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	43db      	mvns	r3, r3
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	f107 0014 	add.w	r0, r7, #20
 8004cf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	b004      	add	sp, #16
 8004d24:	4770      	bx	lr
	...

08004d28 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b09d      	sub	sp, #116	; 0x74
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	78db      	ldrb	r3, [r3, #3]
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d81f      	bhi.n	8004d9a <USB_ActivateEndpoint+0x72>
 8004d5a:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <USB_ActivateEndpoint+0x38>)
 8004d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d60:	08004d71 	.word	0x08004d71
 8004d64:	08004d8d 	.word	0x08004d8d
 8004d68:	08004da3 	.word	0x08004da3
 8004d6c:	08004d7f 	.word	0x08004d7f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004d70:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d78:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d7c:	e012      	b.n	8004da4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004d7e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d82:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004d86:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d8a:	e00b      	b.n	8004da4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d94:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d98:	e004      	b.n	8004da4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004da0:	e000      	b.n	8004da4 <USB_ActivateEndpoint+0x7c>
      break;
 8004da2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	441a      	add	r2, r3
 8004dae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	b21b      	sxth	r3, r3
 8004dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dde:	b21a      	sxth	r2, r3
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	b21b      	sxth	r3, r3
 8004de6:	4313      	orrs	r3, r2
 8004de8:	b21b      	sxth	r3, r3
 8004dea:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	441a      	add	r2, r3
 8004df8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	7b1b      	ldrb	r3, [r3, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f040 816e 	bne.w	80050f6 <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	785b      	ldrb	r3, [r3, #1]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 8084 	beq.w	8004f2c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	61bb      	str	r3, [r7, #24]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	461a      	mov	r2, r3
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	4413      	add	r3, r2
 8004e36:	61bb      	str	r3, [r7, #24]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	00da      	lsls	r2, r3, #3
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	88db      	ldrh	r3, [r3, #6]
 8004e4c:	085b      	lsrs	r3, r3, #1
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	827b      	strh	r3, [r7, #18]
 8004e66:	8a7b      	ldrh	r3, [r7, #18]
 8004e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d01b      	beq.n	8004ea8 <USB_ActivateEndpoint+0x180>
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e86:	823b      	strh	r3, [r7, #16]
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	441a      	add	r2, r3
 8004e92:	8a3b      	ldrh	r3, [r7, #16]
 8004e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ea0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	78db      	ldrb	r3, [r3, #3]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d020      	beq.n	8004ef2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec6:	81bb      	strh	r3, [r7, #12]
 8004ec8:	89bb      	ldrh	r3, [r7, #12]
 8004eca:	f083 0320 	eor.w	r3, r3, #32
 8004ece:	81bb      	strh	r3, [r7, #12]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	441a      	add	r2, r3
 8004eda:	89bb      	ldrh	r3, [r7, #12]
 8004edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	8013      	strh	r3, [r2, #0]
 8004ef0:	e2cb      	b.n	800548a <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f08:	81fb      	strh	r3, [r7, #14]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	441a      	add	r2, r3
 8004f14:	89fb      	ldrh	r3, [r7, #14]
 8004f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	8013      	strh	r3, [r2, #0]
 8004f2a:	e2ae      	b.n	800548a <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	461a      	mov	r2, r3
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	4413      	add	r3, r2
 8004f3e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	00da      	lsls	r2, r3, #3
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	4413      	add	r3, r2
 8004f4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	88db      	ldrh	r3, [r3, #6]
 8004f54:	085b      	lsrs	r3, r3, #1
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f70:	4413      	add	r3, r2
 8004f72:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	00da      	lsls	r2, r3, #3
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f82:	627b      	str	r3, [r7, #36]	; 0x24
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	2b3e      	cmp	r3, #62	; 0x3e
 8004f8a:	d918      	bls.n	8004fbe <USB_ActivateEndpoint+0x296>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	095b      	lsrs	r3, r3, #5
 8004f92:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	f003 031f 	and.w	r3, r3, #31
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d102      	bne.n	8004fa6 <USB_ActivateEndpoint+0x27e>
 8004fa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	029b      	lsls	r3, r3, #10
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	801a      	strh	r2, [r3, #0]
 8004fbc:	e029      	b.n	8005012 <USB_ActivateEndpoint+0x2ea>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d112      	bne.n	8004fec <USB_ActivateEndpoint+0x2c4>
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	801a      	strh	r2, [r3, #0]
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	801a      	strh	r2, [r3, #0]
 8004fea:	e012      	b.n	8005012 <USB_ActivateEndpoint+0x2ea>
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	085b      	lsrs	r3, r3, #1
 8004ff2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <USB_ActivateEndpoint+0x2de>
 8005000:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005002:	3301      	adds	r3, #1
 8005004:	66bb      	str	r3, [r7, #104]	; 0x68
 8005006:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005008:	b29b      	uxth	r3, r3
 800500a:	029b      	lsls	r3, r3, #10
 800500c:	b29a      	uxth	r2, r3
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005020:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d01b      	beq.n	8005062 <USB_ActivateEndpoint+0x33a>
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	b29b      	uxth	r3, r3
 8005038:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800503c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005040:	843b      	strh	r3, [r7, #32]
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	441a      	add	r2, r3
 800504c:	8c3b      	ldrh	r3, [r7, #32]
 800504e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005056:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800505a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800505e:	b29b      	uxth	r3, r3
 8005060:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d124      	bne.n	80050b4 <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	b29b      	uxth	r3, r3
 8005078:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800507c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005080:	83bb      	strh	r3, [r7, #28]
 8005082:	8bbb      	ldrh	r3, [r7, #28]
 8005084:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005088:	83bb      	strh	r3, [r7, #28]
 800508a:	8bbb      	ldrh	r3, [r7, #28]
 800508c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005090:	83bb      	strh	r3, [r7, #28]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	441a      	add	r2, r3
 800509c:	8bbb      	ldrh	r3, [r7, #28]
 800509e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	8013      	strh	r3, [r2, #0]
 80050b2:	e1ea      	b.n	800548a <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ca:	83fb      	strh	r3, [r7, #30]
 80050cc:	8bfb      	ldrh	r3, [r7, #30]
 80050ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050d2:	83fb      	strh	r3, [r7, #30]
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	441a      	add	r2, r3
 80050de:	8bfb      	ldrh	r3, [r7, #30]
 80050e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	8013      	strh	r3, [r2, #0]
 80050f4:	e1c9      	b.n	800548a <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	78db      	ldrb	r3, [r3, #3]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d11e      	bne.n	800513c <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	b29b      	uxth	r3, r3
 800510c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005114:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	441a      	add	r2, r3
 8005122:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800512a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800512e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005136:	b29b      	uxth	r3, r3
 8005138:	8013      	strh	r3, [r2, #0]
 800513a:	e01d      	b.n	8005178 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b29b      	uxth	r3, r3
 800514a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800514e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005152:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	441a      	add	r2, r3
 8005160:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800516c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005174:	b29b      	uxth	r3, r3
 8005176:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005182:	b29b      	uxth	r3, r3
 8005184:	461a      	mov	r2, r3
 8005186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005188:	4413      	add	r3, r2
 800518a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	00da      	lsls	r2, r3, #3
 8005192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005194:	4413      	add	r3, r2
 8005196:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800519a:	65bb      	str	r3, [r7, #88]	; 0x58
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	891b      	ldrh	r3, [r3, #8]
 80051a0:	085b      	lsrs	r3, r3, #1
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051aa:	801a      	strh	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	657b      	str	r3, [r7, #84]	; 0x54
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	461a      	mov	r2, r3
 80051ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051bc:	4413      	add	r3, r2
 80051be:	657b      	str	r3, [r7, #84]	; 0x54
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	00da      	lsls	r2, r3, #3
 80051c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051c8:	4413      	add	r3, r2
 80051ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051ce:	653b      	str	r3, [r7, #80]	; 0x50
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	895b      	ldrh	r3, [r3, #10]
 80051d4:	085b      	lsrs	r3, r3, #1
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051de:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	785b      	ldrb	r3, [r3, #1]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f040 8093 	bne.w	8005310 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80051fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d01b      	beq.n	800523e <USB_ActivateEndpoint+0x516>
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	b29b      	uxth	r3, r3
 8005214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	441a      	add	r2, r3
 8005228:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800522a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800522e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005232:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800523a:	b29b      	uxth	r3, r3
 800523c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800524c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800524e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005252:	2b00      	cmp	r3, #0
 8005254:	d01b      	beq.n	800528e <USB_ActivateEndpoint+0x566>
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	b29b      	uxth	r3, r3
 8005264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	441a      	add	r2, r3
 8005278:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800527a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800527e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005286:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800528a:	b29b      	uxth	r3, r3
 800528c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	b29b      	uxth	r3, r3
 800529c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a4:	873b      	strh	r3, [r7, #56]	; 0x38
 80052a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80052a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80052ac:	873b      	strh	r3, [r7, #56]	; 0x38
 80052ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80052b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052b4:	873b      	strh	r3, [r7, #56]	; 0x38
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	441a      	add	r2, r3
 80052c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80052c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ec:	86fb      	strh	r3, [r7, #54]	; 0x36
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	441a      	add	r2, r3
 80052f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80052fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800530a:	b29b      	uxth	r3, r3
 800530c:	8013      	strh	r3, [r2, #0]
 800530e:	e0bc      	b.n	800548a <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005320:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01d      	beq.n	8005368 <USB_ActivateEndpoint+0x640>
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	b29b      	uxth	r3, r3
 800533a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800533e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005342:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	441a      	add	r2, r3
 8005350:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800535c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005364:	b29b      	uxth	r3, r3
 8005366:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005378:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800537c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005380:	2b00      	cmp	r3, #0
 8005382:	d01d      	beq.n	80053c0 <USB_ActivateEndpoint+0x698>
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	b29b      	uxth	r3, r3
 8005392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	441a      	add	r2, r3
 80053a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80053ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053bc:	b29b      	uxth	r3, r3
 80053be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	78db      	ldrb	r3, [r3, #3]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d024      	beq.n	8005412 <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80053e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80053e6:	f083 0320 	eor.w	r3, r3, #32
 80053ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	441a      	add	r2, r3
 80053f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80053fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800540c:	b29b      	uxth	r3, r3
 800540e:	8013      	strh	r3, [r2, #0]
 8005410:	e01d      	b.n	800544e <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	b29b      	uxth	r3, r3
 8005420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005428:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	441a      	add	r2, r3
 8005436:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800543a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800543e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800544a:	b29b      	uxth	r3, r3
 800544c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	b29b      	uxth	r3, r3
 800545c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005464:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	441a      	add	r2, r3
 8005472:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800547a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800547e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005486:	b29b      	uxth	r3, r3
 8005488:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800548a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800548e:	4618      	mov	r0, r3
 8005490:	3774      	adds	r7, #116	; 0x74
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop

0800549c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800549c:	b480      	push	{r7}
 800549e:	b08d      	sub	sp, #52	; 0x34
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	7b1b      	ldrb	r3, [r3, #12]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f040 808e 	bne.w	80055cc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	785b      	ldrb	r3, [r3, #1]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d044      	beq.n	8005542 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	81bb      	strh	r3, [r7, #12]
 80054c6:	89bb      	ldrh	r3, [r7, #12]
 80054c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01b      	beq.n	8005508 <USB_DeactivateEndpoint+0x6c>
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e6:	817b      	strh	r3, [r7, #10]
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	441a      	add	r2, r3
 80054f2:	897b      	ldrh	r3, [r7, #10]
 80054f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005500:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005504:	b29b      	uxth	r3, r3
 8005506:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	b29b      	uxth	r3, r3
 8005516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800551e:	813b      	strh	r3, [r7, #8]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	441a      	add	r2, r3
 800552a:	893b      	ldrh	r3, [r7, #8]
 800552c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800553c:	b29b      	uxth	r3, r3
 800553e:	8013      	strh	r3, [r2, #0]
 8005540:	e192      	b.n	8005868 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	827b      	strh	r3, [r7, #18]
 8005550:	8a7b      	ldrh	r3, [r7, #18]
 8005552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d01b      	beq.n	8005592 <USB_DeactivateEndpoint+0xf6>
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	881b      	ldrh	r3, [r3, #0]
 8005566:	b29b      	uxth	r3, r3
 8005568:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005570:	823b      	strh	r3, [r7, #16]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	441a      	add	r2, r3
 800557c:	8a3b      	ldrh	r3, [r7, #16]
 800557e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005586:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800558a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800558e:	b29b      	uxth	r3, r3
 8005590:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a8:	81fb      	strh	r3, [r7, #14]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	441a      	add	r2, r3
 80055b4:	89fb      	ldrh	r3, [r7, #14]
 80055b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	8013      	strh	r3, [r2, #0]
 80055ca:	e14d      	b.n	8005868 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	785b      	ldrb	r3, [r3, #1]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f040 80a5 	bne.w	8005720 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	843b      	strh	r3, [r7, #32]
 80055e4:	8c3b      	ldrh	r3, [r7, #32]
 80055e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d01b      	beq.n	8005626 <USB_DeactivateEndpoint+0x18a>
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005604:	83fb      	strh	r3, [r7, #30]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	441a      	add	r2, r3
 8005610:	8bfb      	ldrh	r3, [r7, #30]
 8005612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800561a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800561e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005622:	b29b      	uxth	r3, r3
 8005624:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	83bb      	strh	r3, [r7, #28]
 8005634:	8bbb      	ldrh	r3, [r7, #28]
 8005636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	d01b      	beq.n	8005676 <USB_DeactivateEndpoint+0x1da>
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	b29b      	uxth	r3, r3
 800564c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005654:	837b      	strh	r3, [r7, #26]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	441a      	add	r2, r3
 8005660:	8b7b      	ldrh	r3, [r7, #26]
 8005662:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005666:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800566a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800566e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005672:	b29b      	uxth	r3, r3
 8005674:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	b29b      	uxth	r3, r3
 8005684:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568c:	833b      	strh	r3, [r7, #24]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	441a      	add	r2, r3
 8005698:	8b3b      	ldrh	r3, [r7, #24]
 800569a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800569e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c4:	82fb      	strh	r3, [r7, #22]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	441a      	add	r2, r3
 80056d0:	8afb      	ldrh	r3, [r7, #22]
 80056d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4413      	add	r3, r2
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056fc:	82bb      	strh	r3, [r7, #20]
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	441a      	add	r2, r3
 8005708:	8abb      	ldrh	r3, [r7, #20]
 800570a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800570e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800571a:	b29b      	uxth	r3, r3
 800571c:	8013      	strh	r3, [r2, #0]
 800571e:	e0a3      	b.n	8005868 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800572e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d01b      	beq.n	8005770 <USB_DeactivateEndpoint+0x2d4>
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	b29b      	uxth	r3, r3
 8005746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800574a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	441a      	add	r2, r3
 800575a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800575c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005764:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800576c:	b29b      	uxth	r3, r3
 800576e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800577e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005784:	2b00      	cmp	r3, #0
 8005786:	d01b      	beq.n	80057c0 <USB_DeactivateEndpoint+0x324>
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	b29b      	uxth	r3, r3
 8005796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579e:	853b      	strh	r3, [r7, #40]	; 0x28
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	441a      	add	r2, r3
 80057aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80057ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057bc:	b29b      	uxth	r3, r3
 80057be:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	441a      	add	r2, r3
 80057e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	b29b      	uxth	r3, r3
 8005806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800580a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800580e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	441a      	add	r2, r3
 800581a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800581c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800582c:	b29b      	uxth	r3, r3
 800582e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	b29b      	uxth	r3, r3
 800583e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005846:	847b      	strh	r3, [r7, #34]	; 0x22
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	441a      	add	r2, r3
 8005852:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005854:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005858:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800585c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005864:	b29b      	uxth	r3, r3
 8005866:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3734      	adds	r7, #52	; 0x34
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b0c2      	sub	sp, #264	; 0x108
 800587a:	af00      	add	r7, sp, #0
 800587c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005880:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005884:	6018      	str	r0, [r3, #0]
 8005886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800588a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800588e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	785b      	ldrb	r3, [r3, #1]
 800589c:	2b01      	cmp	r3, #1
 800589e:	f040 867b 	bne.w	8006598 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80058a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d908      	bls.n	80058d0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80058be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058ce:	e007      	b.n	80058e0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80058d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80058e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	7b1b      	ldrb	r3, [r3, #12]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d13a      	bne.n	8005966 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80058f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6959      	ldr	r1, [r3, #20]
 80058fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	88da      	ldrh	r2, [r3, #6]
 8005908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800590c:	b29b      	uxth	r3, r3
 800590e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005912:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005916:	6800      	ldr	r0, [r0, #0]
 8005918:	f001 fc3e 	bl	8007198 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800591c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005920:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	613b      	str	r3, [r7, #16]
 8005928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800592c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005936:	b29b      	uxth	r3, r3
 8005938:	461a      	mov	r2, r3
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	4413      	add	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
 8005940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	00da      	lsls	r2, r3, #3
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	4413      	add	r3, r2
 8005952:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	801a      	strh	r2, [r3, #0]
 8005962:	f000 bde3 	b.w	800652c <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800596a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	78db      	ldrb	r3, [r3, #3]
 8005972:	2b02      	cmp	r3, #2
 8005974:	f040 843a 	bne.w	80061ec <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800597c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6a1a      	ldr	r2, [r3, #32]
 8005984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	429a      	cmp	r2, r3
 8005992:	f240 83b7 	bls.w	8006104 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800599a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80059c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	441a      	add	r2, r3
 80059da:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80059de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059e6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80059ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80059f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6a1a      	ldr	r2, [r3, #32]
 80059fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a02:	1ad2      	subs	r2, r2, r3
 8005a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 81b3 	beq.w	8005d9e <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	633b      	str	r3, [r7, #48]	; 0x30
 8005a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	785b      	ldrb	r3, [r3, #1]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d16d      	bne.n	8005b30 <USB_EPStartXfer+0x2ba>
 8005a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	461a      	mov	r2, r3
 8005a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a74:	4413      	add	r3, r2
 8005a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	00da      	lsls	r2, r3, #3
 8005a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a88:	4413      	add	r3, r2
 8005a8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a94:	2b3e      	cmp	r3, #62	; 0x3e
 8005a96:	d91c      	bls.n	8005ad2 <USB_EPStartXfer+0x25c>
 8005a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a9c:	095b      	lsrs	r3, r3, #5
 8005a9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa6:	f003 031f 	and.w	r3, r3, #31
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d104      	bne.n	8005ab8 <USB_EPStartXfer+0x242>
 8005aae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ab8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	029b      	lsls	r3, r3, #10
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	801a      	strh	r2, [r3, #0]
 8005ad0:	e053      	b.n	8005b7a <USB_EPStartXfer+0x304>
 8005ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d112      	bne.n	8005b00 <USB_EPStartXfer+0x28a>
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	801a      	strh	r2, [r3, #0]
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	801a      	strh	r2, [r3, #0]
 8005afe:	e03c      	b.n	8005b7a <USB_EPStartXfer+0x304>
 8005b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b04:	085b      	lsrs	r3, r3, #1
 8005b06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d004      	beq.n	8005b20 <USB_EPStartXfer+0x2aa>
 8005b16:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b20:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	029b      	lsls	r3, r3, #10
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	801a      	strh	r2, [r3, #0]
 8005b2e:	e024      	b.n	8005b7a <USB_EPStartXfer+0x304>
 8005b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	785b      	ldrb	r3, [r3, #1]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d11c      	bne.n	8005b7a <USB_EPStartXfer+0x304>
 8005b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	4413      	add	r3, r2
 8005b56:	633b      	str	r3, [r7, #48]	; 0x30
 8005b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	00da      	lsls	r2, r3, #3
 8005b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b68:	4413      	add	r3, r2
 8005b6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	895b      	ldrh	r3, [r3, #10]
 8005b86:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6959      	ldr	r1, [r3, #20]
 8005b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ba0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ba4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ba8:	6800      	ldr	r0, [r0, #0]
 8005baa:	f001 faf5 	bl	8007198 <USB_WritePMA>
            ep->xfer_buff += len;
 8005bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695a      	ldr	r2, [r3, #20]
 8005bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bbe:	441a      	add	r2, r3
 8005bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6a1a      	ldr	r2, [r3, #32]
 8005bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d90f      	bls.n	8005c08 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8005be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6a1a      	ldr	r2, [r3, #32]
 8005bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bf8:	1ad2      	subs	r2, r2, r3
 8005bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	621a      	str	r2, [r3, #32]
 8005c06:	e00e      	b.n	8005c26 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2200      	movs	r2, #0
 8005c24:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	785b      	ldrb	r3, [r3, #1]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d16d      	bne.n	8005d12 <USB_EPStartXfer+0x49c>
 8005c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	61bb      	str	r3, [r7, #24]
 8005c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	461a      	mov	r2, r3
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	4413      	add	r3, r2
 8005c58:	61bb      	str	r3, [r7, #24]
 8005c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	00da      	lsls	r2, r3, #3
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c76:	2b3e      	cmp	r3, #62	; 0x3e
 8005c78:	d91c      	bls.n	8005cb4 <USB_EPStartXfer+0x43e>
 8005c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c7e:	095b      	lsrs	r3, r3, #5
 8005c80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c88:	f003 031f 	and.w	r3, r3, #31
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d104      	bne.n	8005c9a <USB_EPStartXfer+0x424>
 8005c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c94:	3b01      	subs	r3, #1
 8005c96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	029b      	lsls	r3, r3, #10
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	801a      	strh	r2, [r3, #0]
 8005cb2:	e059      	b.n	8005d68 <USB_EPStartXfer+0x4f2>
 8005cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d112      	bne.n	8005ce2 <USB_EPStartXfer+0x46c>
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	801a      	strh	r2, [r3, #0]
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	801a      	strh	r2, [r3, #0]
 8005ce0:	e042      	b.n	8005d68 <USB_EPStartXfer+0x4f2>
 8005ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ce6:	085b      	lsrs	r3, r3, #1
 8005ce8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d004      	beq.n	8005d02 <USB_EPStartXfer+0x48c>
 8005cf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	029b      	lsls	r3, r3, #10
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	801a      	strh	r2, [r3, #0]
 8005d10:	e02a      	b.n	8005d68 <USB_EPStartXfer+0x4f2>
 8005d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	785b      	ldrb	r3, [r3, #1]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d122      	bne.n	8005d68 <USB_EPStartXfer+0x4f2>
 8005d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	623b      	str	r3, [r7, #32]
 8005d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	461a      	mov	r2, r3
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	4413      	add	r3, r2
 8005d44:	623b      	str	r3, [r7, #32]
 8005d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	00da      	lsls	r2, r3, #3
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	4413      	add	r3, r2
 8005d58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d5c:	61fb      	str	r3, [r7, #28]
 8005d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	891b      	ldrh	r3, [r3, #8]
 8005d74:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6959      	ldr	r1, [r3, #20]
 8005d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d8e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d92:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d96:	6800      	ldr	r0, [r0, #0]
 8005d98:	f001 f9fe 	bl	8007198 <USB_WritePMA>
 8005d9c:	e3c6      	b.n	800652c <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	785b      	ldrb	r3, [r3, #1]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d16d      	bne.n	8005e8a <USB_EPStartXfer+0x614>
 8005dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	461a      	mov	r2, r3
 8005dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dce:	4413      	add	r3, r2
 8005dd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	00da      	lsls	r2, r3, #3
 8005de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005de2:	4413      	add	r3, r2
 8005de4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005de8:	647b      	str	r3, [r7, #68]	; 0x44
 8005dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dee:	2b3e      	cmp	r3, #62	; 0x3e
 8005df0:	d91c      	bls.n	8005e2c <USB_EPStartXfer+0x5b6>
 8005df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005df6:	095b      	lsrs	r3, r3, #5
 8005df8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e00:	f003 031f 	and.w	r3, r3, #31
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d104      	bne.n	8005e12 <USB_EPStartXfer+0x59c>
 8005e08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	029b      	lsls	r3, r3, #10
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e28:	801a      	strh	r2, [r3, #0]
 8005e2a:	e059      	b.n	8005ee0 <USB_EPStartXfer+0x66a>
 8005e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d112      	bne.n	8005e5a <USB_EPStartXfer+0x5e4>
 8005e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e42:	801a      	strh	r2, [r3, #0]
 8005e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e56:	801a      	strh	r2, [r3, #0]
 8005e58:	e042      	b.n	8005ee0 <USB_EPStartXfer+0x66a>
 8005e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e5e:	085b      	lsrs	r3, r3, #1
 8005e60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d004      	beq.n	8005e7a <USB_EPStartXfer+0x604>
 8005e70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e74:	3301      	adds	r3, #1
 8005e76:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	029b      	lsls	r3, r3, #10
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e86:	801a      	strh	r2, [r3, #0]
 8005e88:	e02a      	b.n	8005ee0 <USB_EPStartXfer+0x66a>
 8005e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	785b      	ldrb	r3, [r3, #1]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d122      	bne.n	8005ee0 <USB_EPStartXfer+0x66a>
 8005e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	653b      	str	r3, [r7, #80]	; 0x50
 8005ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eba:	4413      	add	r3, r2
 8005ebc:	653b      	str	r3, [r7, #80]	; 0x50
 8005ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	00da      	lsls	r2, r3, #3
 8005ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ece:	4413      	add	r3, r2
 8005ed0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ede:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	891b      	ldrh	r3, [r3, #8]
 8005eec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6959      	ldr	r1, [r3, #20]
 8005efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f06:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f0a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f0e:	6800      	ldr	r0, [r0, #0]
 8005f10:	f001 f942 	bl	8007198 <USB_WritePMA>
            ep->xfer_buff += len;
 8005f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	695a      	ldr	r2, [r3, #20]
 8005f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f24:	441a      	add	r2, r3
 8005f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6a1a      	ldr	r2, [r3, #32]
 8005f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d90f      	bls.n	8005f6e <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8005f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6a1a      	ldr	r2, [r3, #32]
 8005f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f5e:	1ad2      	subs	r2, r2, r3
 8005f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	621a      	str	r2, [r3, #32]
 8005f6c:	e00e      	b.n	8005f8c <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8005f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	643b      	str	r3, [r7, #64]	; 0x40
 8005f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	785b      	ldrb	r3, [r3, #1]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d16d      	bne.n	8006084 <USB_EPStartXfer+0x80e>
 8005fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc8:	4413      	add	r3, r2
 8005fca:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	00da      	lsls	r2, r3, #3
 8005fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fdc:	4413      	add	r3, r2
 8005fde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8005fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fe8:	2b3e      	cmp	r3, #62	; 0x3e
 8005fea:	d91c      	bls.n	8006026 <USB_EPStartXfer+0x7b0>
 8005fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff0:	095b      	lsrs	r3, r3, #5
 8005ff2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ffa:	f003 031f 	and.w	r3, r3, #31
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d104      	bne.n	800600c <USB_EPStartXfer+0x796>
 8006002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006006:	3b01      	subs	r3, #1
 8006008:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800600c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006010:	b29b      	uxth	r3, r3
 8006012:	029b      	lsls	r3, r3, #10
 8006014:	b29b      	uxth	r3, r3
 8006016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800601a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800601e:	b29a      	uxth	r2, r3
 8006020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006022:	801a      	strh	r2, [r3, #0]
 8006024:	e053      	b.n	80060ce <USB_EPStartXfer+0x858>
 8006026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800602a:	2b00      	cmp	r3, #0
 800602c:	d112      	bne.n	8006054 <USB_EPStartXfer+0x7de>
 800602e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b29b      	uxth	r3, r3
 8006034:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006038:	b29a      	uxth	r2, r3
 800603a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603c:	801a      	strh	r2, [r3, #0]
 800603e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	b29b      	uxth	r3, r3
 8006044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800604c:	b29a      	uxth	r2, r3
 800604e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006050:	801a      	strh	r2, [r3, #0]
 8006052:	e03c      	b.n	80060ce <USB_EPStartXfer+0x858>
 8006054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006058:	085b      	lsrs	r3, r3, #1
 800605a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800605e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d004      	beq.n	8006074 <USB_EPStartXfer+0x7fe>
 800606a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606e:	3301      	adds	r3, #1
 8006070:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006078:	b29b      	uxth	r3, r3
 800607a:	029b      	lsls	r3, r3, #10
 800607c:	b29a      	uxth	r2, r3
 800607e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006080:	801a      	strh	r2, [r3, #0]
 8006082:	e024      	b.n	80060ce <USB_EPStartXfer+0x858>
 8006084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	785b      	ldrb	r3, [r3, #1]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d11c      	bne.n	80060ce <USB_EPStartXfer+0x858>
 8006094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006098:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	461a      	mov	r2, r3
 80060a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060a8:	4413      	add	r3, r2
 80060aa:	643b      	str	r3, [r7, #64]	; 0x40
 80060ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	00da      	lsls	r2, r3, #3
 80060ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060bc:	4413      	add	r3, r2
 80060be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80060ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	895b      	ldrh	r3, [r3, #10]
 80060da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6959      	ldr	r1, [r3, #20]
 80060ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80060f4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80060f8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80060fc:	6800      	ldr	r0, [r0, #0]
 80060fe:	f001 f84b 	bl	8007198 <USB_WritePMA>
 8006102:	e213      	b.n	800652c <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006118:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	b29b      	uxth	r3, r3
 8006132:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800613e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006142:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800614c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	441a      	add	r2, r3
 8006158:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800615c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616c:	b29b      	uxth	r3, r3
 800616e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006174:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800617c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006180:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800618a:	b29b      	uxth	r3, r3
 800618c:	461a      	mov	r2, r3
 800618e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006190:	4413      	add	r3, r2
 8006192:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	00da      	lsls	r2, r3, #3
 80061a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061a4:	4413      	add	r3, r2
 80061a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80061ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80061b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	891b      	ldrh	r3, [r3, #8]
 80061c2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6959      	ldr	r1, [r3, #20]
 80061d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80061dc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80061e0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80061e4:	6800      	ldr	r0, [r0, #0]
 80061e6:	f000 ffd7 	bl	8007198 <USB_WritePMA>
 80061ea:	e19f      	b.n	800652c <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80061ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6a1a      	ldr	r2, [r3, #32]
 80061f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061fc:	1ad2      	subs	r2, r2, r3
 80061fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800620a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800620e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	b29b      	uxth	r3, r3
 8006228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 80bc 	beq.w	80063aa <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006236:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	673b      	str	r3, [r7, #112]	; 0x70
 800623e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	785b      	ldrb	r3, [r3, #1]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d16d      	bne.n	800632a <USB_EPStartXfer+0xab4>
 800624e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	66bb      	str	r3, [r7, #104]	; 0x68
 800625a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006268:	b29b      	uxth	r3, r3
 800626a:	461a      	mov	r2, r3
 800626c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800626e:	4413      	add	r3, r2
 8006270:	66bb      	str	r3, [r7, #104]	; 0x68
 8006272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	00da      	lsls	r2, r3, #3
 8006280:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006282:	4413      	add	r3, r2
 8006284:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006288:	667b      	str	r3, [r7, #100]	; 0x64
 800628a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800628e:	2b3e      	cmp	r3, #62	; 0x3e
 8006290:	d91c      	bls.n	80062cc <USB_EPStartXfer+0xa56>
 8006292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006296:	095b      	lsrs	r3, r3, #5
 8006298:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800629c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062a0:	f003 031f 	and.w	r3, r3, #31
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d104      	bne.n	80062b2 <USB_EPStartXfer+0xa3c>
 80062a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80062ac:	3b01      	subs	r3, #1
 80062ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80062b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	029b      	lsls	r3, r3, #10
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062c8:	801a      	strh	r2, [r3, #0]
 80062ca:	e053      	b.n	8006374 <USB_EPStartXfer+0xafe>
 80062cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d112      	bne.n	80062fa <USB_EPStartXfer+0xa84>
 80062d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062d6:	881b      	ldrh	r3, [r3, #0]
 80062d8:	b29b      	uxth	r3, r3
 80062da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062de:	b29a      	uxth	r2, r3
 80062e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062e2:	801a      	strh	r2, [r3, #0]
 80062e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062f6:	801a      	strh	r2, [r3, #0]
 80062f8:	e03c      	b.n	8006374 <USB_EPStartXfer+0xafe>
 80062fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062fe:	085b      	lsrs	r3, r3, #1
 8006300:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	2b00      	cmp	r3, #0
 800630e:	d004      	beq.n	800631a <USB_EPStartXfer+0xaa4>
 8006310:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006314:	3301      	adds	r3, #1
 8006316:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800631a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800631e:	b29b      	uxth	r3, r3
 8006320:	029b      	lsls	r3, r3, #10
 8006322:	b29a      	uxth	r2, r3
 8006324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006326:	801a      	strh	r2, [r3, #0]
 8006328:	e024      	b.n	8006374 <USB_EPStartXfer+0xafe>
 800632a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800632e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	785b      	ldrb	r3, [r3, #1]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d11c      	bne.n	8006374 <USB_EPStartXfer+0xafe>
 800633a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800633e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006348:	b29b      	uxth	r3, r3
 800634a:	461a      	mov	r2, r3
 800634c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800634e:	4413      	add	r3, r2
 8006350:	673b      	str	r3, [r7, #112]	; 0x70
 8006352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	00da      	lsls	r2, r3, #3
 8006360:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006362:	4413      	add	r3, r2
 8006364:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006368:	66fb      	str	r3, [r7, #108]	; 0x6c
 800636a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800636e:	b29a      	uxth	r2, r3
 8006370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006372:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	895b      	ldrh	r3, [r3, #10]
 8006380:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6959      	ldr	r1, [r3, #20]
 8006390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006394:	b29b      	uxth	r3, r3
 8006396:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800639a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800639e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80063a2:	6800      	ldr	r0, [r0, #0]
 80063a4:	f000 fef8 	bl	8007198 <USB_WritePMA>
 80063a8:	e0c0      	b.n	800652c <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	785b      	ldrb	r3, [r3, #1]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d16d      	bne.n	8006496 <USB_EPStartXfer+0xc20>
 80063ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	461a      	mov	r2, r3
 80063d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063da:	4413      	add	r3, r2
 80063dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	00da      	lsls	r2, r3, #3
 80063ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063ee:	4413      	add	r3, r2
 80063f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80063f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063fa:	2b3e      	cmp	r3, #62	; 0x3e
 80063fc:	d91c      	bls.n	8006438 <USB_EPStartXfer+0xbc2>
 80063fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006402:	095b      	lsrs	r3, r3, #5
 8006404:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800640c:	f003 031f 	and.w	r3, r3, #31
 8006410:	2b00      	cmp	r3, #0
 8006412:	d104      	bne.n	800641e <USB_EPStartXfer+0xba8>
 8006414:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006418:	3b01      	subs	r3, #1
 800641a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800641e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006422:	b29b      	uxth	r3, r3
 8006424:	029b      	lsls	r3, r3, #10
 8006426:	b29b      	uxth	r3, r3
 8006428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800642c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006430:	b29a      	uxth	r2, r3
 8006432:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006434:	801a      	strh	r2, [r3, #0]
 8006436:	e05f      	b.n	80064f8 <USB_EPStartXfer+0xc82>
 8006438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800643c:	2b00      	cmp	r3, #0
 800643e:	d112      	bne.n	8006466 <USB_EPStartXfer+0xbf0>
 8006440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	b29b      	uxth	r3, r3
 8006446:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800644a:	b29a      	uxth	r2, r3
 800644c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800644e:	801a      	strh	r2, [r3, #0]
 8006450:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	b29b      	uxth	r3, r3
 8006456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800645a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800645e:	b29a      	uxth	r2, r3
 8006460:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006462:	801a      	strh	r2, [r3, #0]
 8006464:	e048      	b.n	80064f8 <USB_EPStartXfer+0xc82>
 8006466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800646a:	085b      	lsrs	r3, r3, #1
 800646c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d004      	beq.n	8006486 <USB_EPStartXfer+0xc10>
 800647c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006480:	3301      	adds	r3, #1
 8006482:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006486:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800648a:	b29b      	uxth	r3, r3
 800648c:	029b      	lsls	r3, r3, #10
 800648e:	b29a      	uxth	r2, r3
 8006490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006492:	801a      	strh	r2, [r3, #0]
 8006494:	e030      	b.n	80064f8 <USB_EPStartXfer+0xc82>
 8006496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800649a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	785b      	ldrb	r3, [r3, #1]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d128      	bne.n	80064f8 <USB_EPStartXfer+0xc82>
 80064a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	461a      	mov	r2, r3
 80064c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064ca:	4413      	add	r3, r2
 80064cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	00da      	lsls	r2, r3, #3
 80064de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064e2:	4413      	add	r3, r2
 80064e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80064f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80064f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	891b      	ldrh	r3, [r3, #8]
 8006504:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800650c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6959      	ldr	r1, [r3, #20]
 8006514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006518:	b29b      	uxth	r3, r3
 800651a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800651e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006522:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006526:	6800      	ldr	r0, [r0, #0]
 8006528:	f000 fe36 	bl	8007198 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800652c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006530:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800653a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800654e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006552:	817b      	strh	r3, [r7, #10]
 8006554:	897b      	ldrh	r3, [r7, #10]
 8006556:	f083 0310 	eor.w	r3, r3, #16
 800655a:	817b      	strh	r3, [r7, #10]
 800655c:	897b      	ldrh	r3, [r7, #10]
 800655e:	f083 0320 	eor.w	r3, r3, #32
 8006562:	817b      	strh	r3, [r7, #10]
 8006564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006568:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	441a      	add	r2, r3
 800657e:	897b      	ldrh	r3, [r7, #10]
 8006580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800658c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006590:	b29b      	uxth	r3, r3
 8006592:	8013      	strh	r3, [r2, #0]
 8006594:	f000 bc9f 	b.w	8006ed6 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800659c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	7b1b      	ldrb	r3, [r3, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f040 80ae 	bne.w	8006706 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80065aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d917      	bls.n	80065f6 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 80065c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80065d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	699a      	ldr	r2, [r3, #24]
 80065e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065e6:	1ad2      	subs	r2, r2, r3
 80065e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	619a      	str	r2, [r3, #24]
 80065f4:	e00e      	b.n	8006614 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 80065f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2200      	movs	r2, #0
 8006612:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006618:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006630:	b29b      	uxth	r3, r3
 8006632:	461a      	mov	r2, r3
 8006634:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006638:	4413      	add	r3, r2
 800663a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800663e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	00da      	lsls	r2, r3, #3
 800664c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006650:	4413      	add	r3, r2
 8006652:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006656:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800665a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800665e:	2b3e      	cmp	r3, #62	; 0x3e
 8006660:	d91d      	bls.n	800669e <USB_EPStartXfer+0xe28>
 8006662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006666:	095b      	lsrs	r3, r3, #5
 8006668:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800666c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006670:	f003 031f 	and.w	r3, r3, #31
 8006674:	2b00      	cmp	r3, #0
 8006676:	d104      	bne.n	8006682 <USB_EPStartXfer+0xe0c>
 8006678:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800667c:	3b01      	subs	r3, #1
 800667e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006682:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006686:	b29b      	uxth	r3, r3
 8006688:	029b      	lsls	r3, r3, #10
 800668a:	b29b      	uxth	r3, r3
 800668c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006694:	b29a      	uxth	r2, r3
 8006696:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800669a:	801a      	strh	r2, [r3, #0]
 800669c:	e3e1      	b.n	8006e62 <USB_EPStartXfer+0x15ec>
 800669e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d116      	bne.n	80066d4 <USB_EPStartXfer+0xe5e>
 80066a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066b8:	801a      	strh	r2, [r3, #0]
 80066ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066d0:	801a      	strh	r2, [r3, #0]
 80066d2:	e3c6      	b.n	8006e62 <USB_EPStartXfer+0x15ec>
 80066d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d8:	085b      	lsrs	r3, r3, #1
 80066da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d004      	beq.n	80066f4 <USB_EPStartXfer+0xe7e>
 80066ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066ee:	3301      	adds	r3, #1
 80066f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	029b      	lsls	r3, r3, #10
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006702:	801a      	strh	r2, [r3, #0]
 8006704:	e3ad      	b.n	8006e62 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800670a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	78db      	ldrb	r3, [r3, #3]
 8006712:	2b02      	cmp	r3, #2
 8006714:	f040 8200 	bne.w	8006b18 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800671c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	785b      	ldrb	r3, [r3, #1]
 8006724:	2b00      	cmp	r3, #0
 8006726:	f040 8091 	bne.w	800684c <USB_EPStartXfer+0xfd6>
 800672a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800672e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800673c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006746:	b29b      	uxth	r3, r3
 8006748:	461a      	mov	r2, r3
 800674a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800674e:	4413      	add	r3, r2
 8006750:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	00da      	lsls	r2, r3, #3
 8006762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006766:	4413      	add	r3, r2
 8006768:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800676c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	2b3e      	cmp	r3, #62	; 0x3e
 800677e:	d925      	bls.n	80067cc <USB_EPStartXfer+0xf56>
 8006780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	095b      	lsrs	r3, r3, #5
 800678e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	f003 031f 	and.w	r3, r3, #31
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d104      	bne.n	80067b0 <USB_EPStartXfer+0xf3a>
 80067a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067aa:	3b01      	subs	r3, #1
 80067ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	029b      	lsls	r3, r3, #10
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067c8:	801a      	strh	r2, [r3, #0]
 80067ca:	e074      	b.n	80068b6 <USB_EPStartXfer+0x1040>
 80067cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d116      	bne.n	800680a <USB_EPStartXfer+0xf94>
 80067dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067ee:	801a      	strh	r2, [r3, #0]
 80067f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006800:	b29a      	uxth	r2, r3
 8006802:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006806:	801a      	strh	r2, [r3, #0]
 8006808:	e055      	b.n	80068b6 <USB_EPStartXfer+0x1040>
 800680a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800680e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	085b      	lsrs	r3, r3, #1
 8006818:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800681c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b00      	cmp	r3, #0
 800682e:	d004      	beq.n	800683a <USB_EPStartXfer+0xfc4>
 8006830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006834:	3301      	adds	r3, #1
 8006836:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800683a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800683e:	b29b      	uxth	r3, r3
 8006840:	029b      	lsls	r3, r3, #10
 8006842:	b29a      	uxth	r2, r3
 8006844:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006848:	801a      	strh	r2, [r3, #0]
 800684a:	e034      	b.n	80068b6 <USB_EPStartXfer+0x1040>
 800684c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	785b      	ldrb	r3, [r3, #1]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d12c      	bne.n	80068b6 <USB_EPStartXfer+0x1040>
 800685c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006860:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800686a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800686e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006878:	b29b      	uxth	r3, r3
 800687a:	461a      	mov	r2, r3
 800687c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006880:	4413      	add	r3, r2
 8006882:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	00da      	lsls	r2, r3, #3
 8006894:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006898:	4413      	add	r3, r2
 800689a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800689e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80068b4:	801a      	strh	r2, [r3, #0]
 80068b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80068c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	785b      	ldrb	r3, [r3, #1]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f040 8091 	bne.w	80069f8 <USB_EPStartXfer+0x1182>
 80068d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	461a      	mov	r2, r3
 80068f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068fa:	4413      	add	r3, r2
 80068fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	00da      	lsls	r2, r3, #3
 800690e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006912:	4413      	add	r3, r2
 8006914:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006918:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800691c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	2b3e      	cmp	r3, #62	; 0x3e
 800692a:	d925      	bls.n	8006978 <USB_EPStartXfer+0x1102>
 800692c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	095b      	lsrs	r3, r3, #5
 800693a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800693e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f003 031f 	and.w	r3, r3, #31
 800694e:	2b00      	cmp	r3, #0
 8006950:	d104      	bne.n	800695c <USB_EPStartXfer+0x10e6>
 8006952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006956:	3b01      	subs	r3, #1
 8006958:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800695c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006960:	b29b      	uxth	r3, r3
 8006962:	029b      	lsls	r3, r3, #10
 8006964:	b29b      	uxth	r3, r3
 8006966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800696a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800696e:	b29a      	uxth	r2, r3
 8006970:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006974:	801a      	strh	r2, [r3, #0]
 8006976:	e06d      	b.n	8006a54 <USB_EPStartXfer+0x11de>
 8006978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800697c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d116      	bne.n	80069b6 <USB_EPStartXfer+0x1140>
 8006988:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	b29b      	uxth	r3, r3
 8006990:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006994:	b29a      	uxth	r2, r3
 8006996:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800699a:	801a      	strh	r2, [r3, #0]
 800699c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069b2:	801a      	strh	r2, [r3, #0]
 80069b4:	e04e      	b.n	8006a54 <USB_EPStartXfer+0x11de>
 80069b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	085b      	lsrs	r3, r3, #1
 80069c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d004      	beq.n	80069e6 <USB_EPStartXfer+0x1170>
 80069dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e0:	3301      	adds	r3, #1
 80069e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	029b      	lsls	r3, r3, #10
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069f4:	801a      	strh	r2, [r3, #0]
 80069f6:	e02d      	b.n	8006a54 <USB_EPStartXfer+0x11de>
 80069f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	785b      	ldrb	r3, [r3, #1]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d125      	bne.n	8006a54 <USB_EPStartXfer+0x11de>
 8006a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	461a      	mov	r2, r3
 8006a1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a1e:	4413      	add	r3, r2
 8006a20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	00da      	lsls	r2, r3, #3
 8006a32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a36:	4413      	add	r3, r2
 8006a38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a52:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	69db      	ldr	r3, [r3, #28]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 81fe 	beq.w	8006e62 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4413      	add	r3, r2
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006a86:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d005      	beq.n	8006a9e <USB_EPStartXfer+0x1228>
 8006a92:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10d      	bne.n	8006aba <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006a9e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f040 81db 	bne.w	8006e62 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006aac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f040 81d4 	bne.w	8006e62 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006aba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006abe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	441a      	add	r2, r3
 8006afe:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	8013      	strh	r3, [r2, #0]
 8006b16:	e1a4      	b.n	8006e62 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	78db      	ldrb	r3, [r3, #3]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	f040 819a 	bne.w	8006e5e <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699a      	ldr	r2, [r3, #24]
 8006b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d917      	bls.n	8006b76 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8006b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699a      	ldr	r2, [r3, #24]
 8006b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b66:	1ad2      	subs	r2, r2, r3
 8006b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	619a      	str	r2, [r3, #24]
 8006b74:	e00e      	b.n	8006b94 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8006b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2200      	movs	r2, #0
 8006b92:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	785b      	ldrb	r3, [r3, #1]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d178      	bne.n	8006c96 <USB_EPStartXfer+0x1420>
 8006ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006bc8:	4413      	add	r3, r2
 8006bca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	00da      	lsls	r2, r3, #3
 8006bdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006be0:	4413      	add	r3, r2
 8006be2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006be6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bee:	2b3e      	cmp	r3, #62	; 0x3e
 8006bf0:	d91d      	bls.n	8006c2e <USB_EPStartXfer+0x13b8>
 8006bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf6:	095b      	lsrs	r3, r3, #5
 8006bf8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c00:	f003 031f 	and.w	r3, r3, #31
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d104      	bne.n	8006c12 <USB_EPStartXfer+0x139c>
 8006c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	029b      	lsls	r3, r3, #10
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c2a:	801a      	strh	r2, [r3, #0]
 8006c2c:	e064      	b.n	8006cf8 <USB_EPStartXfer+0x1482>
 8006c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d116      	bne.n	8006c64 <USB_EPStartXfer+0x13ee>
 8006c36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c48:	801a      	strh	r2, [r3, #0]
 8006c4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c60:	801a      	strh	r2, [r3, #0]
 8006c62:	e049      	b.n	8006cf8 <USB_EPStartXfer+0x1482>
 8006c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c68:	085b      	lsrs	r3, r3, #1
 8006c6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d004      	beq.n	8006c84 <USB_EPStartXfer+0x140e>
 8006c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c7e:	3301      	adds	r3, #1
 8006c80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	029b      	lsls	r3, r3, #10
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c92:	801a      	strh	r2, [r3, #0]
 8006c94:	e030      	b.n	8006cf8 <USB_EPStartXfer+0x1482>
 8006c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	785b      	ldrb	r3, [r3, #1]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d128      	bne.n	8006cf8 <USB_EPStartXfer+0x1482>
 8006ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006caa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cca:	4413      	add	r3, r2
 8006ccc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	00da      	lsls	r2, r3, #3
 8006cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006cf6:	801a      	strh	r2, [r3, #0]
 8006cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	785b      	ldrb	r3, [r3, #1]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d178      	bne.n	8006e08 <USB_EPStartXfer+0x1592>
 8006d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	461a      	mov	r2, r3
 8006d36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	00da      	lsls	r2, r3, #3
 8006d4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d52:	4413      	add	r3, r2
 8006d54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d60:	2b3e      	cmp	r3, #62	; 0x3e
 8006d62:	d91d      	bls.n	8006da0 <USB_EPStartXfer+0x152a>
 8006d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d68:	095b      	lsrs	r3, r3, #5
 8006d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d72:	f003 031f 	and.w	r3, r3, #31
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d104      	bne.n	8006d84 <USB_EPStartXfer+0x150e>
 8006d7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	029b      	lsls	r3, r3, #10
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d9c:	801a      	strh	r2, [r3, #0]
 8006d9e:	e060      	b.n	8006e62 <USB_EPStartXfer+0x15ec>
 8006da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d116      	bne.n	8006dd6 <USB_EPStartXfer+0x1560>
 8006da8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006dba:	801a      	strh	r2, [r3, #0]
 8006dbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006dd2:	801a      	strh	r2, [r3, #0]
 8006dd4:	e045      	b.n	8006e62 <USB_EPStartXfer+0x15ec>
 8006dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dda:	085b      	lsrs	r3, r3, #1
 8006ddc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d004      	beq.n	8006df6 <USB_EPStartXfer+0x1580>
 8006dec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006df0:	3301      	adds	r3, #1
 8006df2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006df6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	029b      	lsls	r3, r3, #10
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e04:	801a      	strh	r2, [r3, #0]
 8006e06:	e02c      	b.n	8006e62 <USB_EPStartXfer+0x15ec>
 8006e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	785b      	ldrb	r3, [r3, #1]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d124      	bne.n	8006e62 <USB_EPStartXfer+0x15ec>
 8006e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	461a      	mov	r2, r3
 8006e2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e2e:	4413      	add	r3, r2
 8006e30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	00da      	lsls	r2, r3, #3
 8006e42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e46:	4413      	add	r3, r2
 8006e48:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e5a:	801a      	strh	r2, [r3, #0]
 8006e5c:	e001      	b.n	8006e62 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e03a      	b.n	8006ed8 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	881b      	ldrh	r3, [r3, #0]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e88:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006e8c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006e90:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e94:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006e98:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006e9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ea0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	441a      	add	r2, r3
 8006ebe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b085      	sub	sp, #20
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	785b      	ldrb	r3, [r3, #1]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d020      	beq.n	8006f36 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f0a:	81bb      	strh	r3, [r7, #12]
 8006f0c:	89bb      	ldrh	r3, [r7, #12]
 8006f0e:	f083 0310 	eor.w	r3, r3, #16
 8006f12:	81bb      	strh	r3, [r7, #12]
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	441a      	add	r2, r3
 8006f1e:	89bb      	ldrh	r3, [r7, #12]
 8006f20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	8013      	strh	r3, [r2, #0]
 8006f34:	e01f      	b.n	8006f76 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f4c:	81fb      	strh	r3, [r7, #14]
 8006f4e:	89fb      	ldrh	r3, [r7, #14]
 8006f50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f54:	81fb      	strh	r3, [r7, #14]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	441a      	add	r2, r3
 8006f60:	89fb      	ldrh	r3, [r7, #14]
 8006f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3714      	adds	r7, #20
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	7b1b      	ldrb	r3, [r3, #12]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f040 809d 	bne.w	80070d2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	785b      	ldrb	r3, [r3, #1]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d04c      	beq.n	800703a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4413      	add	r3, r2
 8006faa:	881b      	ldrh	r3, [r3, #0]
 8006fac:	823b      	strh	r3, [r7, #16]
 8006fae:	8a3b      	ldrh	r3, [r7, #16]
 8006fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d01b      	beq.n	8006ff0 <USB_EPClearStall+0x6c>
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fce:	81fb      	strh	r3, [r7, #14]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	441a      	add	r2, r3
 8006fda:	89fb      	ldrh	r3, [r7, #14]
 8006fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fe8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	78db      	ldrb	r3, [r3, #3]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d06c      	beq.n	80070d2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	881b      	ldrh	r3, [r3, #0]
 8007004:	b29b      	uxth	r3, r3
 8007006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800700a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800700e:	81bb      	strh	r3, [r7, #12]
 8007010:	89bb      	ldrh	r3, [r7, #12]
 8007012:	f083 0320 	eor.w	r3, r3, #32
 8007016:	81bb      	strh	r3, [r7, #12]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	441a      	add	r2, r3
 8007022:	89bb      	ldrh	r3, [r7, #12]
 8007024:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007028:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800702c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007034:	b29b      	uxth	r3, r3
 8007036:	8013      	strh	r3, [r2, #0]
 8007038:	e04b      	b.n	80070d2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	4413      	add	r3, r2
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	82fb      	strh	r3, [r7, #22]
 8007048:	8afb      	ldrh	r3, [r7, #22]
 800704a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d01b      	beq.n	800708a <USB_EPClearStall+0x106>
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4413      	add	r3, r2
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	b29b      	uxth	r3, r3
 8007060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007068:	82bb      	strh	r3, [r7, #20]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	441a      	add	r2, r3
 8007074:	8abb      	ldrh	r3, [r7, #20]
 8007076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800707a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800707e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007086:	b29b      	uxth	r3, r3
 8007088:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	881b      	ldrh	r3, [r3, #0]
 8007096:	b29b      	uxth	r3, r3
 8007098:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800709c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a0:	827b      	strh	r3, [r7, #18]
 80070a2:	8a7b      	ldrh	r3, [r7, #18]
 80070a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80070a8:	827b      	strh	r3, [r7, #18]
 80070aa:	8a7b      	ldrh	r3, [r7, #18]
 80070ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80070b0:	827b      	strh	r3, [r7, #18]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	441a      	add	r2, r3
 80070bc:	8a7b      	ldrh	r3, [r7, #18]
 80070be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	371c      	adds	r7, #28
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80070ec:	78fb      	ldrb	r3, [r7, #3]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d103      	bne.n	80070fa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2280      	movs	r2, #128	; 0x80
 80070f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007116:	b29b      	uxth	r3, r3
 8007118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800711c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007120:	b29a      	uxth	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007144:	b29b      	uxth	r3, r3
 8007146:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800714a:	b29a      	uxth	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800716e:	b29b      	uxth	r3, r3
 8007170:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007172:	68fb      	ldr	r3, [r7, #12]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007198:	b480      	push	{r7}
 800719a:	b08b      	sub	sp, #44	; 0x2c
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	4611      	mov	r1, r2
 80071a4:	461a      	mov	r2, r3
 80071a6:	460b      	mov	r3, r1
 80071a8:	80fb      	strh	r3, [r7, #6]
 80071aa:	4613      	mov	r3, r2
 80071ac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80071ae:	88bb      	ldrh	r3, [r7, #4]
 80071b0:	3301      	adds	r3, #1
 80071b2:	085b      	lsrs	r3, r3, #1
 80071b4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80071be:	88fa      	ldrh	r2, [r7, #6]
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071c8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	627b      	str	r3, [r7, #36]	; 0x24
 80071ce:	e01b      	b.n	8007208 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	3301      	adds	r3, #1
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	021b      	lsls	r3, r3, #8
 80071de:	b21a      	sxth	r2, r3
 80071e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	b21b      	sxth	r3, r3
 80071e8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	8a7a      	ldrh	r2, [r7, #18]
 80071ee:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80071f0:	6a3b      	ldr	r3, [r7, #32]
 80071f2:	3302      	adds	r3, #2
 80071f4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	3301      	adds	r3, #1
 80071fa:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	3301      	adds	r3, #1
 8007200:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	3b01      	subs	r3, #1
 8007206:	627b      	str	r3, [r7, #36]	; 0x24
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e0      	bne.n	80071d0 <USB_WritePMA+0x38>
  }
}
 800720e:	bf00      	nop
 8007210:	bf00      	nop
 8007212:	372c      	adds	r7, #44	; 0x2c
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800721c:	b480      	push	{r7}
 800721e:	b08b      	sub	sp, #44	; 0x2c
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	4611      	mov	r1, r2
 8007228:	461a      	mov	r2, r3
 800722a:	460b      	mov	r3, r1
 800722c:	80fb      	strh	r3, [r7, #6]
 800722e:	4613      	mov	r3, r2
 8007230:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007232:	88bb      	ldrh	r3, [r7, #4]
 8007234:	085b      	lsrs	r3, r3, #1
 8007236:	b29b      	uxth	r3, r3
 8007238:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007242:	88fa      	ldrh	r2, [r7, #6]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	4413      	add	r3, r2
 8007248:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800724c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	627b      	str	r3, [r7, #36]	; 0x24
 8007252:	e018      	b.n	8007286 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	b29b      	uxth	r3, r3
 800725a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800725c:	6a3b      	ldr	r3, [r7, #32]
 800725e:	3302      	adds	r3, #2
 8007260:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	b2da      	uxtb	r2, r3
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	3301      	adds	r3, #1
 800726e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	0a1b      	lsrs	r3, r3, #8
 8007274:	b2da      	uxtb	r2, r3
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	3301      	adds	r3, #1
 800727e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	3b01      	subs	r3, #1
 8007284:	627b      	str	r3, [r7, #36]	; 0x24
 8007286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1e3      	bne.n	8007254 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800728c:	88bb      	ldrh	r3, [r7, #4]
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	b29b      	uxth	r3, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	d007      	beq.n	80072a8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	881b      	ldrh	r3, [r3, #0]
 800729c:	b29b      	uxth	r3, r3
 800729e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	701a      	strb	r2, [r3, #0]
  }
}
 80072a8:	bf00      	nop
 80072aa:	372c      	adds	r7, #44	; 0x2c
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80072c0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80072c4:	f002 f9b6 	bl	8009634 <USBD_static_malloc>
 80072c8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d105      	bne.n	80072dc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80072d8:	2302      	movs	r3, #2
 80072da:	e066      	b.n	80073aa <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	7c1b      	ldrb	r3, [r3, #16]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d119      	bne.n	8007320 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80072ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072f0:	2202      	movs	r2, #2
 80072f2:	2181      	movs	r1, #129	; 0x81
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f001 ff9f 	bl	8009238 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007304:	2202      	movs	r2, #2
 8007306:	2101      	movs	r1, #1
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f001 ff95 	bl	8009238 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2210      	movs	r2, #16
 800731a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800731e:	e016      	b.n	800734e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007320:	2340      	movs	r3, #64	; 0x40
 8007322:	2202      	movs	r2, #2
 8007324:	2181      	movs	r1, #129	; 0x81
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f001 ff86 	bl	8009238 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007332:	2340      	movs	r3, #64	; 0x40
 8007334:	2202      	movs	r2, #2
 8007336:	2101      	movs	r1, #1
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f001 ff7d 	bl	8009238 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2210      	movs	r2, #16
 800734a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800734e:	2308      	movs	r3, #8
 8007350:	2203      	movs	r2, #3
 8007352:	2182      	movs	r1, #130	; 0x82
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f001 ff6f 	bl	8009238 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	7c1b      	ldrb	r3, [r3, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d109      	bne.n	8007398 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800738a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800738e:	2101      	movs	r1, #1
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f002 f8cd 	bl	8009530 <USBD_LL_PrepareReceive>
 8007396:	e007      	b.n	80073a8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800739e:	2340      	movs	r3, #64	; 0x40
 80073a0:	2101      	movs	r1, #1
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f002 f8c4 	bl	8009530 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b082      	sub	sp, #8
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	460b      	mov	r3, r1
 80073bc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80073be:	2181      	movs	r1, #129	; 0x81
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f001 ff77 	bl	80092b4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80073cc:	2101      	movs	r1, #1
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f001 ff70 	bl	80092b4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80073dc:	2182      	movs	r1, #130	; 0x82
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f001 ff68 	bl	80092b4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00e      	beq.n	800741c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800740e:	4618      	mov	r0, r3
 8007410:	f002 f91e 	bl	8009650 <USBD_static_free>
    pdev->pClassData = NULL;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
	...

08007428 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007438:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d101      	bne.n	8007450 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800744c:	2303      	movs	r3, #3
 800744e:	e0af      	b.n	80075b0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007458:	2b00      	cmp	r3, #0
 800745a:	d03f      	beq.n	80074dc <USBD_CDC_Setup+0xb4>
 800745c:	2b20      	cmp	r3, #32
 800745e:	f040 809f 	bne.w	80075a0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	88db      	ldrh	r3, [r3, #6]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d02e      	beq.n	80074c8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	b25b      	sxtb	r3, r3
 8007470:	2b00      	cmp	r3, #0
 8007472:	da16      	bge.n	80074a2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	683a      	ldr	r2, [r7, #0]
 800747e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007480:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	88d2      	ldrh	r2, [r2, #6]
 8007486:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	88db      	ldrh	r3, [r3, #6]
 800748c:	2b07      	cmp	r3, #7
 800748e:	bf28      	it	cs
 8007490:	2307      	movcs	r3, #7
 8007492:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	89fa      	ldrh	r2, [r7, #14]
 8007498:	4619      	mov	r1, r3
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f001 facf 	bl	8008a3e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80074a0:	e085      	b.n	80075ae <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	785a      	ldrb	r2, [r3, #1]
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	88db      	ldrh	r3, [r3, #6]
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80074b8:	6939      	ldr	r1, [r7, #16]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	88db      	ldrh	r3, [r3, #6]
 80074be:	461a      	mov	r2, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 fae8 	bl	8008a96 <USBD_CtlPrepareRx>
      break;
 80074c6:	e072      	b.n	80075ae <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	7850      	ldrb	r0, [r2, #1]
 80074d4:	2200      	movs	r2, #0
 80074d6:	6839      	ldr	r1, [r7, #0]
 80074d8:	4798      	blx	r3
      break;
 80074da:	e068      	b.n	80075ae <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	785b      	ldrb	r3, [r3, #1]
 80074e0:	2b0b      	cmp	r3, #11
 80074e2:	d852      	bhi.n	800758a <USBD_CDC_Setup+0x162>
 80074e4:	a201      	add	r2, pc, #4	; (adr r2, 80074ec <USBD_CDC_Setup+0xc4>)
 80074e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ea:	bf00      	nop
 80074ec:	0800751d 	.word	0x0800751d
 80074f0:	08007599 	.word	0x08007599
 80074f4:	0800758b 	.word	0x0800758b
 80074f8:	0800758b 	.word	0x0800758b
 80074fc:	0800758b 	.word	0x0800758b
 8007500:	0800758b 	.word	0x0800758b
 8007504:	0800758b 	.word	0x0800758b
 8007508:	0800758b 	.word	0x0800758b
 800750c:	0800758b 	.word	0x0800758b
 8007510:	0800758b 	.word	0x0800758b
 8007514:	08007547 	.word	0x08007547
 8007518:	08007571 	.word	0x08007571
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b03      	cmp	r3, #3
 8007526:	d107      	bne.n	8007538 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007528:	f107 030a 	add.w	r3, r7, #10
 800752c:	2202      	movs	r2, #2
 800752e:	4619      	mov	r1, r3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f001 fa84 	bl	8008a3e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007536:	e032      	b.n	800759e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f001 fa0e 	bl	800895c <USBD_CtlError>
            ret = USBD_FAIL;
 8007540:	2303      	movs	r3, #3
 8007542:	75fb      	strb	r3, [r7, #23]
          break;
 8007544:	e02b      	b.n	800759e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b03      	cmp	r3, #3
 8007550:	d107      	bne.n	8007562 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007552:	f107 030d 	add.w	r3, r7, #13
 8007556:	2201      	movs	r2, #1
 8007558:	4619      	mov	r1, r3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f001 fa6f 	bl	8008a3e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007560:	e01d      	b.n	800759e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007562:	6839      	ldr	r1, [r7, #0]
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f001 f9f9 	bl	800895c <USBD_CtlError>
            ret = USBD_FAIL;
 800756a:	2303      	movs	r3, #3
 800756c:	75fb      	strb	r3, [r7, #23]
          break;
 800756e:	e016      	b.n	800759e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b03      	cmp	r3, #3
 800757a:	d00f      	beq.n	800759c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f001 f9ec 	bl	800895c <USBD_CtlError>
            ret = USBD_FAIL;
 8007584:	2303      	movs	r3, #3
 8007586:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007588:	e008      	b.n	800759c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f001 f9e5 	bl	800895c <USBD_CtlError>
          ret = USBD_FAIL;
 8007592:	2303      	movs	r3, #3
 8007594:	75fb      	strb	r3, [r7, #23]
          break;
 8007596:	e002      	b.n	800759e <USBD_CDC_Setup+0x176>
          break;
 8007598:	bf00      	nop
 800759a:	e008      	b.n	80075ae <USBD_CDC_Setup+0x186>
          break;
 800759c:	bf00      	nop
      }
      break;
 800759e:	e006      	b.n	80075ae <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f001 f9da 	bl	800895c <USBD_CtlError>
      ret = USBD_FAIL;
 80075a8:	2303      	movs	r3, #3
 80075aa:	75fb      	strb	r3, [r7, #23]
      break;
 80075ac:	bf00      	nop
  }

  return (uint8_t)ret;
 80075ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3718      	adds	r7, #24
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	460b      	mov	r3, r1
 80075c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e04f      	b.n	800767a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80075e2:	78fa      	ldrb	r2, [r7, #3]
 80075e4:	6879      	ldr	r1, [r7, #4]
 80075e6:	4613      	mov	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	440b      	add	r3, r1
 80075f0:	3318      	adds	r3, #24
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d029      	beq.n	800764c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80075f8:	78fa      	ldrb	r2, [r7, #3]
 80075fa:	6879      	ldr	r1, [r7, #4]
 80075fc:	4613      	mov	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	440b      	add	r3, r1
 8007606:	3318      	adds	r3, #24
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	78f9      	ldrb	r1, [r7, #3]
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	460b      	mov	r3, r1
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	440b      	add	r3, r1
 8007614:	00db      	lsls	r3, r3, #3
 8007616:	4403      	add	r3, r0
 8007618:	333c      	adds	r3, #60	; 0x3c
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007620:	fb01 f303 	mul.w	r3, r1, r3
 8007624:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007626:	2b00      	cmp	r3, #0
 8007628:	d110      	bne.n	800764c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800762a:	78fa      	ldrb	r2, [r7, #3]
 800762c:	6879      	ldr	r1, [r7, #4]
 800762e:	4613      	mov	r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4413      	add	r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	440b      	add	r3, r1
 8007638:	3318      	adds	r3, #24
 800763a:	2200      	movs	r2, #0
 800763c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800763e:	78f9      	ldrb	r1, [r7, #3]
 8007640:	2300      	movs	r3, #0
 8007642:	2200      	movs	r2, #0
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f001 ff3b 	bl	80094c0 <USBD_LL_Transmit>
 800764a:	e015      	b.n	8007678 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2200      	movs	r2, #0
 8007650:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00b      	beq.n	8007678 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007674:	78fa      	ldrb	r2, [r7, #3]
 8007676:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b084      	sub	sp, #16
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	460b      	mov	r3, r1
 800768c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007694:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e015      	b.n	80076d0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80076a4:	78fb      	ldrb	r3, [r7, #3]
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f001 ff79 	bl	80095a0 <USBD_LL_GetRxDataSize>
 80076ae:	4602      	mov	r2, r0
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80076ca:	4611      	mov	r1, r2
 80076cc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e01b      	b.n	800772a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d015      	beq.n	8007728 <USBD_CDC_EP0_RxReady+0x50>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007702:	2bff      	cmp	r3, #255	; 0xff
 8007704:	d010      	beq.n	8007728 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007714:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800771c:	b292      	uxth	r2, r2
 800771e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	22ff      	movs	r2, #255	; 0xff
 8007724:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
	...

08007734 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2243      	movs	r2, #67	; 0x43
 8007740:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007742:	4b03      	ldr	r3, [pc, #12]	; (8007750 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007744:	4618      	mov	r0, r3
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr
 8007750:	20000094 	.word	0x20000094

08007754 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2243      	movs	r2, #67	; 0x43
 8007760:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007762:	4b03      	ldr	r3, [pc, #12]	; (8007770 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007764:	4618      	mov	r0, r3
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	20000050 	.word	0x20000050

08007774 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2243      	movs	r2, #67	; 0x43
 8007780:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007782:	4b03      	ldr	r3, [pc, #12]	; (8007790 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007784:	4618      	mov	r0, r3
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	200000d8 	.word	0x200000d8

08007794 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	220a      	movs	r2, #10
 80077a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80077a2:	4b03      	ldr	r3, [pc, #12]	; (80077b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	2000000c 	.word	0x2000000c

080077b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e004      	b.n	80077d2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80077de:	b480      	push	{r7}
 80077e0:	b087      	sub	sp, #28
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	60b9      	str	r1, [r7, #8]
 80077e8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077f0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e008      	b.n	800780e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	371c      	adds	r7, #28
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800781a:	b480      	push	{r7}
 800781c:	b085      	sub	sp, #20
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800782a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d101      	bne.n	8007836 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007832:	2303      	movs	r3, #3
 8007834:	e004      	b.n	8007840 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800785a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800785c:	2301      	movs	r3, #1
 800785e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800786a:	2303      	movs	r3, #3
 800786c:	e01a      	b.n	80078a4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007874:	2b00      	cmp	r3, #0
 8007876:	d114      	bne.n	80078a2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	2201      	movs	r2, #1
 800787c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007896:	2181      	movs	r1, #129	; 0x81
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f001 fe11 	bl	80094c0 <USBD_LL_Transmit>

    ret = USBD_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e016      	b.n	80078f8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	7c1b      	ldrb	r3, [r3, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d109      	bne.n	80078e6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078dc:	2101      	movs	r1, #1
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f001 fe26 	bl	8009530 <USBD_LL_PrepareReceive>
 80078e4:	e007      	b.n	80078f6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078ec:	2340      	movs	r3, #64	; 0x40
 80078ee:	2101      	movs	r1, #1
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f001 fe1d 	bl	8009530 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	4613      	mov	r3, r2
 800790c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007914:	2303      	movs	r3, #3
 8007916:	e01f      	b.n	8007958 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2200      	movs	r2, #0
 800791c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d003      	beq.n	800793e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	79fa      	ldrb	r2, [r7, #7]
 800794a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f001 fbdf 	bl	8009110 <USBD_LL_Init>
 8007952:	4603      	mov	r3, r0
 8007954:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007956:	7dfb      	ldrb	r3, [r7, #23]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3718      	adds	r7, #24
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800796a:	2300      	movs	r3, #0
 800796c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d101      	bne.n	8007978 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007974:	2303      	movs	r3, #3
 8007976:	e016      	b.n	80079a6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00b      	beq.n	80079a4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007994:	f107 020e 	add.w	r2, r7, #14
 8007998:	4610      	mov	r0, r2
 800799a:	4798      	blx	r3
 800799c:	4602      	mov	r2, r0
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b082      	sub	sp, #8
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f001 fc0c 	bl	80091d4 <USBD_LL_Start>
 80079bc:	4603      	mov	r3, r0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b083      	sub	sp, #12
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	460b      	mov	r3, r1
 80079e6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80079e8:	2303      	movs	r3, #3
 80079ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d009      	beq.n	8007a0a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	78fa      	ldrb	r2, [r7, #3]
 8007a00:	4611      	mov	r1, r2
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	4798      	blx	r3
 8007a06:	4603      	mov	r3, r0
 8007a08:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d007      	beq.n	8007a3a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	78fa      	ldrb	r2, [r7, #3]
 8007a34:	4611      	mov	r1, r2
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	4798      	blx	r3
  }

  return USBD_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a54:	6839      	ldr	r1, [r7, #0]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 ff46 	bl	80088e8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a78:	f003 031f 	and.w	r3, r3, #31
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d01a      	beq.n	8007ab6 <USBD_LL_SetupStage+0x72>
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d822      	bhi.n	8007aca <USBD_LL_SetupStage+0x86>
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d002      	beq.n	8007a8e <USBD_LL_SetupStage+0x4a>
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d00a      	beq.n	8007aa2 <USBD_LL_SetupStage+0x5e>
 8007a8c:	e01d      	b.n	8007aca <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a94:	4619      	mov	r1, r3
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f9ee 	bl	8007e78 <USBD_StdDevReq>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa0:	e020      	b.n	8007ae4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fa52 	bl	8007f54 <USBD_StdItfReq>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ab4:	e016      	b.n	8007ae4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fa91 	bl	8007fe6 <USBD_StdEPReq>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ac8:	e00c      	b.n	8007ae4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ad0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f001 fc21 	bl	8009320 <USBD_LL_StallEP>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ae2:	bf00      	nop
  }

  return ret;
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b086      	sub	sp, #24
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	60f8      	str	r0, [r7, #12]
 8007af6:	460b      	mov	r3, r1
 8007af8:	607a      	str	r2, [r7, #4]
 8007afa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007afc:	7afb      	ldrb	r3, [r7, #11]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d138      	bne.n	8007b74 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007b08:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b10:	2b03      	cmp	r3, #3
 8007b12:	d14a      	bne.n	8007baa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	689a      	ldr	r2, [r3, #8]
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d913      	bls.n	8007b48 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	1ad2      	subs	r2, r2, r3
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	68da      	ldr	r2, [r3, #12]
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	4293      	cmp	r3, r2
 8007b38:	bf28      	it	cs
 8007b3a:	4613      	movcs	r3, r2
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	6879      	ldr	r1, [r7, #4]
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 ffc5 	bl	8008ad0 <USBD_CtlContinueRx>
 8007b46:	e030      	b.n	8007baa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	2b03      	cmp	r3, #3
 8007b52:	d10b      	bne.n	8007b6c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d005      	beq.n	8007b6c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 ffc0 	bl	8008af2 <USBD_CtlSendStatus>
 8007b72:	e01a      	b.n	8007baa <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b03      	cmp	r3, #3
 8007b7e:	d114      	bne.n	8007baa <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00e      	beq.n	8007baa <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	7afa      	ldrb	r2, [r7, #11]
 8007b96:	4611      	mov	r1, r2
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	4798      	blx	r3
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007ba0:	7dfb      	ldrb	r3, [r7, #23]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d001      	beq.n	8007baa <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007ba6:	7dfb      	ldrb	r3, [r7, #23]
 8007ba8:	e000      	b.n	8007bac <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3718      	adds	r7, #24
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	607a      	str	r2, [r7, #4]
 8007bc0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007bc2:	7afb      	ldrb	r3, [r7, #11]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d16b      	bne.n	8007ca0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	3314      	adds	r3, #20
 8007bcc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d156      	bne.n	8007c86 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	689a      	ldr	r2, [r3, #8]
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d914      	bls.n	8007c0e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	689a      	ldr	r2, [r3, #8]
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	1ad2      	subs	r2, r2, r3
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	6879      	ldr	r1, [r7, #4]
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 ff3a 	bl	8008a74 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c00:	2300      	movs	r3, #0
 8007c02:	2200      	movs	r2, #0
 8007c04:	2100      	movs	r1, #0
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f001 fc92 	bl	8009530 <USBD_LL_PrepareReceive>
 8007c0c:	e03b      	b.n	8007c86 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	68da      	ldr	r2, [r3, #12]
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d11c      	bne.n	8007c54 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d316      	bcc.n	8007c54 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d20f      	bcs.n	8007c54 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c34:	2200      	movs	r2, #0
 8007c36:	2100      	movs	r1, #0
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f000 ff1b 	bl	8008a74 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c46:	2300      	movs	r3, #0
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f001 fc6f 	bl	8009530 <USBD_LL_PrepareReceive>
 8007c52:	e018      	b.n	8007c86 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b03      	cmp	r3, #3
 8007c5e:	d10b      	bne.n	8007c78 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d005      	beq.n	8007c78 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c78:	2180      	movs	r1, #128	; 0x80
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f001 fb50 	bl	8009320 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f000 ff49 	bl	8008b18 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d122      	bne.n	8007cd6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f7ff fe98 	bl	80079c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c9e:	e01a      	b.n	8007cd6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d114      	bne.n	8007cd6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00e      	beq.n	8007cd6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cbe:	695b      	ldr	r3, [r3, #20]
 8007cc0:	7afa      	ldrb	r2, [r7, #11]
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	4798      	blx	r3
 8007cc8:	4603      	mov	r3, r0
 8007cca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007ccc:	7dfb      	ldrb	r3, [r7, #23]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007cd2:	7dfb      	ldrb	r3, [r7, #23]
 8007cd4:	e000      	b.n	8007cd8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3718      	adds	r7, #24
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e02f      	b.n	8007d74 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00f      	beq.n	8007d3e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d009      	beq.n	8007d3e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	6852      	ldr	r2, [r2, #4]
 8007d36:	b2d2      	uxtb	r2, r2
 8007d38:	4611      	mov	r1, r2
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d3e:	2340      	movs	r3, #64	; 0x40
 8007d40:	2200      	movs	r2, #0
 8007d42:	2100      	movs	r1, #0
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f001 fa77 	bl	8009238 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2240      	movs	r2, #64	; 0x40
 8007d56:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d5a:	2340      	movs	r3, #64	; 0x40
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	2180      	movs	r1, #128	; 0x80
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f001 fa69 	bl	8009238 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2240      	movs	r2, #64	; 0x40
 8007d70:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	78fa      	ldrb	r2, [r7, #3]
 8007d8c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2204      	movs	r2, #4
 8007db6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b04      	cmp	r3, #4
 8007dda:	d106      	bne.n	8007dea <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007de2:	b2da      	uxtb	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e012      	b.n	8007e34 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	d10b      	bne.n	8007e32 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e20:	69db      	ldr	r3, [r3, #28]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d005      	beq.n	8007e32 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e2c:	69db      	ldr	r3, [r3, #28]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b087      	sub	sp, #28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	3301      	adds	r3, #1
 8007e52:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007e5a:	8a3b      	ldrh	r3, [r7, #16]
 8007e5c:	021b      	lsls	r3, r3, #8
 8007e5e:	b21a      	sxth	r2, r3
 8007e60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	b21b      	sxth	r3, r3
 8007e68:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007e6a:	89fb      	ldrh	r3, [r7, #14]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	371c      	adds	r7, #28
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e8e:	2b40      	cmp	r3, #64	; 0x40
 8007e90:	d005      	beq.n	8007e9e <USBD_StdDevReq+0x26>
 8007e92:	2b40      	cmp	r3, #64	; 0x40
 8007e94:	d853      	bhi.n	8007f3e <USBD_StdDevReq+0xc6>
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00b      	beq.n	8007eb2 <USBD_StdDevReq+0x3a>
 8007e9a:	2b20      	cmp	r3, #32
 8007e9c:	d14f      	bne.n	8007f3e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	4798      	blx	r3
 8007eac:	4603      	mov	r3, r0
 8007eae:	73fb      	strb	r3, [r7, #15]
      break;
 8007eb0:	e04a      	b.n	8007f48 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	785b      	ldrb	r3, [r3, #1]
 8007eb6:	2b09      	cmp	r3, #9
 8007eb8:	d83b      	bhi.n	8007f32 <USBD_StdDevReq+0xba>
 8007eba:	a201      	add	r2, pc, #4	; (adr r2, 8007ec0 <USBD_StdDevReq+0x48>)
 8007ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec0:	08007f15 	.word	0x08007f15
 8007ec4:	08007f29 	.word	0x08007f29
 8007ec8:	08007f33 	.word	0x08007f33
 8007ecc:	08007f1f 	.word	0x08007f1f
 8007ed0:	08007f33 	.word	0x08007f33
 8007ed4:	08007ef3 	.word	0x08007ef3
 8007ed8:	08007ee9 	.word	0x08007ee9
 8007edc:	08007f33 	.word	0x08007f33
 8007ee0:	08007f0b 	.word	0x08007f0b
 8007ee4:	08007efd 	.word	0x08007efd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f9de 	bl	80082ac <USBD_GetDescriptor>
          break;
 8007ef0:	e024      	b.n	8007f3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fb6d 	bl	80085d4 <USBD_SetAddress>
          break;
 8007efa:	e01f      	b.n	8007f3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fbac 	bl	800865c <USBD_SetConfig>
 8007f04:	4603      	mov	r3, r0
 8007f06:	73fb      	strb	r3, [r7, #15]
          break;
 8007f08:	e018      	b.n	8007f3c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fc4b 	bl	80087a8 <USBD_GetConfig>
          break;
 8007f12:	e013      	b.n	8007f3c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007f14:	6839      	ldr	r1, [r7, #0]
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fc7c 	bl	8008814 <USBD_GetStatus>
          break;
 8007f1c:	e00e      	b.n	8007f3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fcab 	bl	800887c <USBD_SetFeature>
          break;
 8007f26:	e009      	b.n	8007f3c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fcba 	bl	80088a4 <USBD_ClrFeature>
          break;
 8007f30:	e004      	b.n	8007f3c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fd11 	bl	800895c <USBD_CtlError>
          break;
 8007f3a:	bf00      	nop
      }
      break;
 8007f3c:	e004      	b.n	8007f48 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007f3e:	6839      	ldr	r1, [r7, #0]
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 fd0b 	bl	800895c <USBD_CtlError>
      break;
 8007f46:	bf00      	nop
  }

  return ret;
 8007f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop

08007f54 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f6a:	2b40      	cmp	r3, #64	; 0x40
 8007f6c:	d005      	beq.n	8007f7a <USBD_StdItfReq+0x26>
 8007f6e:	2b40      	cmp	r3, #64	; 0x40
 8007f70:	d82f      	bhi.n	8007fd2 <USBD_StdItfReq+0x7e>
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d001      	beq.n	8007f7a <USBD_StdItfReq+0x26>
 8007f76:	2b20      	cmp	r3, #32
 8007f78:	d12b      	bne.n	8007fd2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	3b01      	subs	r3, #1
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d81d      	bhi.n	8007fc4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	889b      	ldrh	r3, [r3, #4]
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d813      	bhi.n	8007fba <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	4798      	blx	r3
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	88db      	ldrh	r3, [r3, #6]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d110      	bne.n	8007fce <USBD_StdItfReq+0x7a>
 8007fac:	7bfb      	ldrb	r3, [r7, #15]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d10d      	bne.n	8007fce <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fd9d 	bl	8008af2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007fb8:	e009      	b.n	8007fce <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fccd 	bl	800895c <USBD_CtlError>
          break;
 8007fc2:	e004      	b.n	8007fce <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007fc4:	6839      	ldr	r1, [r7, #0]
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fcc8 	bl	800895c <USBD_CtlError>
          break;
 8007fcc:	e000      	b.n	8007fd0 <USBD_StdItfReq+0x7c>
          break;
 8007fce:	bf00      	nop
      }
      break;
 8007fd0:	e004      	b.n	8007fdc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fcc1 	bl	800895c <USBD_CtlError>
      break;
 8007fda:	bf00      	nop
  }

  return ret;
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	889b      	ldrh	r3, [r3, #4]
 8007ff8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008002:	2b40      	cmp	r3, #64	; 0x40
 8008004:	d007      	beq.n	8008016 <USBD_StdEPReq+0x30>
 8008006:	2b40      	cmp	r3, #64	; 0x40
 8008008:	f200 8145 	bhi.w	8008296 <USBD_StdEPReq+0x2b0>
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00c      	beq.n	800802a <USBD_StdEPReq+0x44>
 8008010:	2b20      	cmp	r3, #32
 8008012:	f040 8140 	bne.w	8008296 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	6839      	ldr	r1, [r7, #0]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	4798      	blx	r3
 8008024:	4603      	mov	r3, r0
 8008026:	73fb      	strb	r3, [r7, #15]
      break;
 8008028:	e13a      	b.n	80082a0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	785b      	ldrb	r3, [r3, #1]
 800802e:	2b03      	cmp	r3, #3
 8008030:	d007      	beq.n	8008042 <USBD_StdEPReq+0x5c>
 8008032:	2b03      	cmp	r3, #3
 8008034:	f300 8129 	bgt.w	800828a <USBD_StdEPReq+0x2a4>
 8008038:	2b00      	cmp	r3, #0
 800803a:	d07f      	beq.n	800813c <USBD_StdEPReq+0x156>
 800803c:	2b01      	cmp	r3, #1
 800803e:	d03c      	beq.n	80080ba <USBD_StdEPReq+0xd4>
 8008040:	e123      	b.n	800828a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b02      	cmp	r3, #2
 800804c:	d002      	beq.n	8008054 <USBD_StdEPReq+0x6e>
 800804e:	2b03      	cmp	r3, #3
 8008050:	d016      	beq.n	8008080 <USBD_StdEPReq+0x9a>
 8008052:	e02c      	b.n	80080ae <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008054:	7bbb      	ldrb	r3, [r7, #14]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00d      	beq.n	8008076 <USBD_StdEPReq+0x90>
 800805a:	7bbb      	ldrb	r3, [r7, #14]
 800805c:	2b80      	cmp	r3, #128	; 0x80
 800805e:	d00a      	beq.n	8008076 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008060:	7bbb      	ldrb	r3, [r7, #14]
 8008062:	4619      	mov	r1, r3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f001 f95b 	bl	8009320 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800806a:	2180      	movs	r1, #128	; 0x80
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f001 f957 	bl	8009320 <USBD_LL_StallEP>
 8008072:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008074:	e020      	b.n	80080b8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008076:	6839      	ldr	r1, [r7, #0]
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fc6f 	bl	800895c <USBD_CtlError>
              break;
 800807e:	e01b      	b.n	80080b8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	885b      	ldrh	r3, [r3, #2]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10e      	bne.n	80080a6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008088:	7bbb      	ldrb	r3, [r7, #14]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00b      	beq.n	80080a6 <USBD_StdEPReq+0xc0>
 800808e:	7bbb      	ldrb	r3, [r7, #14]
 8008090:	2b80      	cmp	r3, #128	; 0x80
 8008092:	d008      	beq.n	80080a6 <USBD_StdEPReq+0xc0>
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	88db      	ldrh	r3, [r3, #6]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d104      	bne.n	80080a6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800809c:	7bbb      	ldrb	r3, [r7, #14]
 800809e:	4619      	mov	r1, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f001 f93d 	bl	8009320 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fd23 	bl	8008af2 <USBD_CtlSendStatus>

              break;
 80080ac:	e004      	b.n	80080b8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fc53 	bl	800895c <USBD_CtlError>
              break;
 80080b6:	bf00      	nop
          }
          break;
 80080b8:	e0ec      	b.n	8008294 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d002      	beq.n	80080cc <USBD_StdEPReq+0xe6>
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d016      	beq.n	80080f8 <USBD_StdEPReq+0x112>
 80080ca:	e030      	b.n	800812e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00d      	beq.n	80080ee <USBD_StdEPReq+0x108>
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
 80080d4:	2b80      	cmp	r3, #128	; 0x80
 80080d6:	d00a      	beq.n	80080ee <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80080d8:	7bbb      	ldrb	r3, [r7, #14]
 80080da:	4619      	mov	r1, r3
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f001 f91f 	bl	8009320 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80080e2:	2180      	movs	r1, #128	; 0x80
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f001 f91b 	bl	8009320 <USBD_LL_StallEP>
 80080ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080ec:	e025      	b.n	800813a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fc33 	bl	800895c <USBD_CtlError>
              break;
 80080f6:	e020      	b.n	800813a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	885b      	ldrh	r3, [r3, #2]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d11b      	bne.n	8008138 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008100:	7bbb      	ldrb	r3, [r7, #14]
 8008102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008106:	2b00      	cmp	r3, #0
 8008108:	d004      	beq.n	8008114 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	4619      	mov	r1, r3
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f001 f93c 	bl	800938c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fcec 	bl	8008af2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	4798      	blx	r3
 8008128:	4603      	mov	r3, r0
 800812a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800812c:	e004      	b.n	8008138 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800812e:	6839      	ldr	r1, [r7, #0]
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fc13 	bl	800895c <USBD_CtlError>
              break;
 8008136:	e000      	b.n	800813a <USBD_StdEPReq+0x154>
              break;
 8008138:	bf00      	nop
          }
          break;
 800813a:	e0ab      	b.n	8008294 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008142:	b2db      	uxtb	r3, r3
 8008144:	2b02      	cmp	r3, #2
 8008146:	d002      	beq.n	800814e <USBD_StdEPReq+0x168>
 8008148:	2b03      	cmp	r3, #3
 800814a:	d032      	beq.n	80081b2 <USBD_StdEPReq+0x1cc>
 800814c:	e097      	b.n	800827e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800814e:	7bbb      	ldrb	r3, [r7, #14]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d007      	beq.n	8008164 <USBD_StdEPReq+0x17e>
 8008154:	7bbb      	ldrb	r3, [r7, #14]
 8008156:	2b80      	cmp	r3, #128	; 0x80
 8008158:	d004      	beq.n	8008164 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800815a:	6839      	ldr	r1, [r7, #0]
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fbfd 	bl	800895c <USBD_CtlError>
                break;
 8008162:	e091      	b.n	8008288 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008164:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008168:	2b00      	cmp	r3, #0
 800816a:	da0b      	bge.n	8008184 <USBD_StdEPReq+0x19e>
 800816c:	7bbb      	ldrb	r3, [r7, #14]
 800816e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008172:	4613      	mov	r3, r2
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	4413      	add	r3, r2
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	3310      	adds	r3, #16
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	4413      	add	r3, r2
 8008180:	3304      	adds	r3, #4
 8008182:	e00b      	b.n	800819c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008184:	7bbb      	ldrb	r3, [r7, #14]
 8008186:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800818a:	4613      	mov	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4413      	add	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	4413      	add	r3, r2
 800819a:	3304      	adds	r3, #4
 800819c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	2200      	movs	r2, #0
 80081a2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	2202      	movs	r2, #2
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fc47 	bl	8008a3e <USBD_CtlSendData>
              break;
 80081b0:	e06a      	b.n	8008288 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80081b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	da11      	bge.n	80081de <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081ba:	7bbb      	ldrb	r3, [r7, #14]
 80081bc:	f003 020f 	and.w	r2, r3, #15
 80081c0:	6879      	ldr	r1, [r7, #4]
 80081c2:	4613      	mov	r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4413      	add	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	440b      	add	r3, r1
 80081cc:	3324      	adds	r3, #36	; 0x24
 80081ce:	881b      	ldrh	r3, [r3, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d117      	bne.n	8008204 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fbc0 	bl	800895c <USBD_CtlError>
                  break;
 80081dc:	e054      	b.n	8008288 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081de:	7bbb      	ldrb	r3, [r7, #14]
 80081e0:	f003 020f 	and.w	r2, r3, #15
 80081e4:	6879      	ldr	r1, [r7, #4]
 80081e6:	4613      	mov	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	4413      	add	r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	440b      	add	r3, r1
 80081f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80081f4:	881b      	ldrh	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d104      	bne.n	8008204 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80081fa:	6839      	ldr	r1, [r7, #0]
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 fbad 	bl	800895c <USBD_CtlError>
                  break;
 8008202:	e041      	b.n	8008288 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008204:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008208:	2b00      	cmp	r3, #0
 800820a:	da0b      	bge.n	8008224 <USBD_StdEPReq+0x23e>
 800820c:	7bbb      	ldrb	r3, [r7, #14]
 800820e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008212:	4613      	mov	r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	4413      	add	r3, r2
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	3310      	adds	r3, #16
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	4413      	add	r3, r2
 8008220:	3304      	adds	r3, #4
 8008222:	e00b      	b.n	800823c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008224:	7bbb      	ldrb	r3, [r7, #14]
 8008226:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800822a:	4613      	mov	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	4413      	add	r3, r2
 800823a:	3304      	adds	r3, #4
 800823c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800823e:	7bbb      	ldrb	r3, [r7, #14]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d002      	beq.n	800824a <USBD_StdEPReq+0x264>
 8008244:	7bbb      	ldrb	r3, [r7, #14]
 8008246:	2b80      	cmp	r3, #128	; 0x80
 8008248:	d103      	bne.n	8008252 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	2200      	movs	r2, #0
 800824e:	601a      	str	r2, [r3, #0]
 8008250:	e00e      	b.n	8008270 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008252:	7bbb      	ldrb	r3, [r7, #14]
 8008254:	4619      	mov	r1, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f001 f8ce 	bl	80093f8 <USBD_LL_IsStallEP>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	2201      	movs	r2, #1
 8008266:	601a      	str	r2, [r3, #0]
 8008268:	e002      	b.n	8008270 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	2200      	movs	r2, #0
 800826e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2202      	movs	r2, #2
 8008274:	4619      	mov	r1, r3
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fbe1 	bl	8008a3e <USBD_CtlSendData>
              break;
 800827c:	e004      	b.n	8008288 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fb6b 	bl	800895c <USBD_CtlError>
              break;
 8008286:	bf00      	nop
          }
          break;
 8008288:	e004      	b.n	8008294 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800828a:	6839      	ldr	r1, [r7, #0]
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fb65 	bl	800895c <USBD_CtlError>
          break;
 8008292:	bf00      	nop
      }
      break;
 8008294:	e004      	b.n	80082a0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008296:	6839      	ldr	r1, [r7, #0]
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fb5f 	bl	800895c <USBD_CtlError>
      break;
 800829e:	bf00      	nop
  }

  return ret;
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
	...

080082ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082b6:	2300      	movs	r3, #0
 80082b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80082ba:	2300      	movs	r3, #0
 80082bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80082be:	2300      	movs	r3, #0
 80082c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	885b      	ldrh	r3, [r3, #2]
 80082c6:	0a1b      	lsrs	r3, r3, #8
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	3b01      	subs	r3, #1
 80082cc:	2b0e      	cmp	r3, #14
 80082ce:	f200 8152 	bhi.w	8008576 <USBD_GetDescriptor+0x2ca>
 80082d2:	a201      	add	r2, pc, #4	; (adr r2, 80082d8 <USBD_GetDescriptor+0x2c>)
 80082d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d8:	08008349 	.word	0x08008349
 80082dc:	08008361 	.word	0x08008361
 80082e0:	080083a1 	.word	0x080083a1
 80082e4:	08008577 	.word	0x08008577
 80082e8:	08008577 	.word	0x08008577
 80082ec:	08008517 	.word	0x08008517
 80082f0:	08008543 	.word	0x08008543
 80082f4:	08008577 	.word	0x08008577
 80082f8:	08008577 	.word	0x08008577
 80082fc:	08008577 	.word	0x08008577
 8008300:	08008577 	.word	0x08008577
 8008304:	08008577 	.word	0x08008577
 8008308:	08008577 	.word	0x08008577
 800830c:	08008577 	.word	0x08008577
 8008310:	08008315 	.word	0x08008315
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800831a:	69db      	ldr	r3, [r3, #28]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00b      	beq.n	8008338 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	7c12      	ldrb	r2, [r2, #16]
 800832c:	f107 0108 	add.w	r1, r7, #8
 8008330:	4610      	mov	r0, r2
 8008332:	4798      	blx	r3
 8008334:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008336:	e126      	b.n	8008586 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fb0e 	bl	800895c <USBD_CtlError>
        err++;
 8008340:	7afb      	ldrb	r3, [r7, #11]
 8008342:	3301      	adds	r3, #1
 8008344:	72fb      	strb	r3, [r7, #11]
      break;
 8008346:	e11e      	b.n	8008586 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	7c12      	ldrb	r2, [r2, #16]
 8008354:	f107 0108 	add.w	r1, r7, #8
 8008358:	4610      	mov	r0, r2
 800835a:	4798      	blx	r3
 800835c:	60f8      	str	r0, [r7, #12]
      break;
 800835e:	e112      	b.n	8008586 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	7c1b      	ldrb	r3, [r3, #16]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10d      	bne.n	8008384 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800836e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008370:	f107 0208 	add.w	r2, r7, #8
 8008374:	4610      	mov	r0, r2
 8008376:	4798      	blx	r3
 8008378:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	3301      	adds	r3, #1
 800837e:	2202      	movs	r2, #2
 8008380:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008382:	e100      	b.n	8008586 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800838a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838c:	f107 0208 	add.w	r2, r7, #8
 8008390:	4610      	mov	r0, r2
 8008392:	4798      	blx	r3
 8008394:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	3301      	adds	r3, #1
 800839a:	2202      	movs	r2, #2
 800839c:	701a      	strb	r2, [r3, #0]
      break;
 800839e:	e0f2      	b.n	8008586 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	885b      	ldrh	r3, [r3, #2]
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2b05      	cmp	r3, #5
 80083a8:	f200 80ac 	bhi.w	8008504 <USBD_GetDescriptor+0x258>
 80083ac:	a201      	add	r2, pc, #4	; (adr r2, 80083b4 <USBD_GetDescriptor+0x108>)
 80083ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b2:	bf00      	nop
 80083b4:	080083cd 	.word	0x080083cd
 80083b8:	08008401 	.word	0x08008401
 80083bc:	08008435 	.word	0x08008435
 80083c0:	08008469 	.word	0x08008469
 80083c4:	0800849d 	.word	0x0800849d
 80083c8:	080084d1 	.word	0x080084d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00b      	beq.n	80083f0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	7c12      	ldrb	r2, [r2, #16]
 80083e4:	f107 0108 	add.w	r1, r7, #8
 80083e8:	4610      	mov	r0, r2
 80083ea:	4798      	blx	r3
 80083ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ee:	e091      	b.n	8008514 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fab2 	bl	800895c <USBD_CtlError>
            err++;
 80083f8:	7afb      	ldrb	r3, [r7, #11]
 80083fa:	3301      	adds	r3, #1
 80083fc:	72fb      	strb	r3, [r7, #11]
          break;
 80083fe:	e089      	b.n	8008514 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00b      	beq.n	8008424 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	7c12      	ldrb	r2, [r2, #16]
 8008418:	f107 0108 	add.w	r1, r7, #8
 800841c:	4610      	mov	r0, r2
 800841e:	4798      	blx	r3
 8008420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008422:	e077      	b.n	8008514 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008424:	6839      	ldr	r1, [r7, #0]
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fa98 	bl	800895c <USBD_CtlError>
            err++;
 800842c:	7afb      	ldrb	r3, [r7, #11]
 800842e:	3301      	adds	r3, #1
 8008430:	72fb      	strb	r3, [r7, #11]
          break;
 8008432:	e06f      	b.n	8008514 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00b      	beq.n	8008458 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	7c12      	ldrb	r2, [r2, #16]
 800844c:	f107 0108 	add.w	r1, r7, #8
 8008450:	4610      	mov	r0, r2
 8008452:	4798      	blx	r3
 8008454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008456:	e05d      	b.n	8008514 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008458:	6839      	ldr	r1, [r7, #0]
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fa7e 	bl	800895c <USBD_CtlError>
            err++;
 8008460:	7afb      	ldrb	r3, [r7, #11]
 8008462:	3301      	adds	r3, #1
 8008464:	72fb      	strb	r3, [r7, #11]
          break;
 8008466:	e055      	b.n	8008514 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00b      	beq.n	800848c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	7c12      	ldrb	r2, [r2, #16]
 8008480:	f107 0108 	add.w	r1, r7, #8
 8008484:	4610      	mov	r0, r2
 8008486:	4798      	blx	r3
 8008488:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800848a:	e043      	b.n	8008514 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fa64 	bl	800895c <USBD_CtlError>
            err++;
 8008494:	7afb      	ldrb	r3, [r7, #11]
 8008496:	3301      	adds	r3, #1
 8008498:	72fb      	strb	r3, [r7, #11]
          break;
 800849a:	e03b      	b.n	8008514 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084a2:	695b      	ldr	r3, [r3, #20]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00b      	beq.n	80084c0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ae:	695b      	ldr	r3, [r3, #20]
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	7c12      	ldrb	r2, [r2, #16]
 80084b4:	f107 0108 	add.w	r1, r7, #8
 80084b8:	4610      	mov	r0, r2
 80084ba:	4798      	blx	r3
 80084bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084be:	e029      	b.n	8008514 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084c0:	6839      	ldr	r1, [r7, #0]
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fa4a 	bl	800895c <USBD_CtlError>
            err++;
 80084c8:	7afb      	ldrb	r3, [r7, #11]
 80084ca:	3301      	adds	r3, #1
 80084cc:	72fb      	strb	r3, [r7, #11]
          break;
 80084ce:	e021      	b.n	8008514 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00b      	beq.n	80084f4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	7c12      	ldrb	r2, [r2, #16]
 80084e8:	f107 0108 	add.w	r1, r7, #8
 80084ec:	4610      	mov	r0, r2
 80084ee:	4798      	blx	r3
 80084f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084f2:	e00f      	b.n	8008514 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fa30 	bl	800895c <USBD_CtlError>
            err++;
 80084fc:	7afb      	ldrb	r3, [r7, #11]
 80084fe:	3301      	adds	r3, #1
 8008500:	72fb      	strb	r3, [r7, #11]
          break;
 8008502:	e007      	b.n	8008514 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008504:	6839      	ldr	r1, [r7, #0]
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fa28 	bl	800895c <USBD_CtlError>
          err++;
 800850c:	7afb      	ldrb	r3, [r7, #11]
 800850e:	3301      	adds	r3, #1
 8008510:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008512:	bf00      	nop
      }
      break;
 8008514:	e037      	b.n	8008586 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	7c1b      	ldrb	r3, [r3, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d109      	bne.n	8008532 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008526:	f107 0208 	add.w	r2, r7, #8
 800852a:	4610      	mov	r0, r2
 800852c:	4798      	blx	r3
 800852e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008530:	e029      	b.n	8008586 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fa11 	bl	800895c <USBD_CtlError>
        err++;
 800853a:	7afb      	ldrb	r3, [r7, #11]
 800853c:	3301      	adds	r3, #1
 800853e:	72fb      	strb	r3, [r7, #11]
      break;
 8008540:	e021      	b.n	8008586 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	7c1b      	ldrb	r3, [r3, #16]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10d      	bne.n	8008566 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008552:	f107 0208 	add.w	r2, r7, #8
 8008556:	4610      	mov	r0, r2
 8008558:	4798      	blx	r3
 800855a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	3301      	adds	r3, #1
 8008560:	2207      	movs	r2, #7
 8008562:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008564:	e00f      	b.n	8008586 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f9f7 	bl	800895c <USBD_CtlError>
        err++;
 800856e:	7afb      	ldrb	r3, [r7, #11]
 8008570:	3301      	adds	r3, #1
 8008572:	72fb      	strb	r3, [r7, #11]
      break;
 8008574:	e007      	b.n	8008586 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f9ef 	bl	800895c <USBD_CtlError>
      err++;
 800857e:	7afb      	ldrb	r3, [r7, #11]
 8008580:	3301      	adds	r3, #1
 8008582:	72fb      	strb	r3, [r7, #11]
      break;
 8008584:	bf00      	nop
  }

  if (err != 0U)
 8008586:	7afb      	ldrb	r3, [r7, #11]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d11e      	bne.n	80085ca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	88db      	ldrh	r3, [r3, #6]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d016      	beq.n	80085c2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008594:	893b      	ldrh	r3, [r7, #8]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00e      	beq.n	80085b8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	88da      	ldrh	r2, [r3, #6]
 800859e:	893b      	ldrh	r3, [r7, #8]
 80085a0:	4293      	cmp	r3, r2
 80085a2:	bf28      	it	cs
 80085a4:	4613      	movcs	r3, r2
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80085aa:	893b      	ldrh	r3, [r7, #8]
 80085ac:	461a      	mov	r2, r3
 80085ae:	68f9      	ldr	r1, [r7, #12]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 fa44 	bl	8008a3e <USBD_CtlSendData>
 80085b6:	e009      	b.n	80085cc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f9ce 	bl	800895c <USBD_CtlError>
 80085c0:	e004      	b.n	80085cc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fa95 	bl	8008af2 <USBD_CtlSendStatus>
 80085c8:	e000      	b.n	80085cc <USBD_GetDescriptor+0x320>
    return;
 80085ca:	bf00      	nop
  }
}
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop

080085d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	889b      	ldrh	r3, [r3, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d131      	bne.n	800864a <USBD_SetAddress+0x76>
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	88db      	ldrh	r3, [r3, #6]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d12d      	bne.n	800864a <USBD_SetAddress+0x76>
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	885b      	ldrh	r3, [r3, #2]
 80085f2:	2b7f      	cmp	r3, #127	; 0x7f
 80085f4:	d829      	bhi.n	800864a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	885b      	ldrh	r3, [r3, #2]
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008600:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b03      	cmp	r3, #3
 800860c:	d104      	bne.n	8008618 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f9a3 	bl	800895c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008616:	e01d      	b.n	8008654 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	7bfa      	ldrb	r2, [r7, #15]
 800861c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008620:	7bfb      	ldrb	r3, [r7, #15]
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 ff15 	bl	8009454 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fa61 	bl	8008af2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008630:	7bfb      	ldrb	r3, [r7, #15]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d004      	beq.n	8008640 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2202      	movs	r2, #2
 800863a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800863e:	e009      	b.n	8008654 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008648:	e004      	b.n	8008654 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f985 	bl	800895c <USBD_CtlError>
  }
}
 8008652:	bf00      	nop
 8008654:	bf00      	nop
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008666:	2300      	movs	r3, #0
 8008668:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	885b      	ldrh	r3, [r3, #2]
 800866e:	b2da      	uxtb	r2, r3
 8008670:	4b4c      	ldr	r3, [pc, #304]	; (80087a4 <USBD_SetConfig+0x148>)
 8008672:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008674:	4b4b      	ldr	r3, [pc, #300]	; (80087a4 <USBD_SetConfig+0x148>)
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d905      	bls.n	8008688 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f96c 	bl	800895c <USBD_CtlError>
    return USBD_FAIL;
 8008684:	2303      	movs	r3, #3
 8008686:	e088      	b.n	800879a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800868e:	b2db      	uxtb	r3, r3
 8008690:	2b02      	cmp	r3, #2
 8008692:	d002      	beq.n	800869a <USBD_SetConfig+0x3e>
 8008694:	2b03      	cmp	r3, #3
 8008696:	d025      	beq.n	80086e4 <USBD_SetConfig+0x88>
 8008698:	e071      	b.n	800877e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800869a:	4b42      	ldr	r3, [pc, #264]	; (80087a4 <USBD_SetConfig+0x148>)
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d01c      	beq.n	80086dc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80086a2:	4b40      	ldr	r3, [pc, #256]	; (80087a4 <USBD_SetConfig+0x148>)
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	461a      	mov	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80086ac:	4b3d      	ldr	r3, [pc, #244]	; (80087a4 <USBD_SetConfig+0x148>)
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	4619      	mov	r1, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f7ff f992 	bl	80079dc <USBD_SetClassConfig>
 80086b8:	4603      	mov	r3, r0
 80086ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d004      	beq.n	80086cc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80086c2:	6839      	ldr	r1, [r7, #0]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f949 	bl	800895c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80086ca:	e065      	b.n	8008798 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 fa10 	bl	8008af2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2203      	movs	r2, #3
 80086d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80086da:	e05d      	b.n	8008798 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fa08 	bl	8008af2 <USBD_CtlSendStatus>
      break;
 80086e2:	e059      	b.n	8008798 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80086e4:	4b2f      	ldr	r3, [pc, #188]	; (80087a4 <USBD_SetConfig+0x148>)
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d112      	bne.n	8008712 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2202      	movs	r2, #2
 80086f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80086f4:	4b2b      	ldr	r3, [pc, #172]	; (80087a4 <USBD_SetConfig+0x148>)
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	461a      	mov	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086fe:	4b29      	ldr	r3, [pc, #164]	; (80087a4 <USBD_SetConfig+0x148>)
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7ff f985 	bl	8007a14 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f9f1 	bl	8008af2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008710:	e042      	b.n	8008798 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008712:	4b24      	ldr	r3, [pc, #144]	; (80087a4 <USBD_SetConfig+0x148>)
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	461a      	mov	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	429a      	cmp	r2, r3
 800871e:	d02a      	beq.n	8008776 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	b2db      	uxtb	r3, r3
 8008726:	4619      	mov	r1, r3
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f7ff f973 	bl	8007a14 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800872e:	4b1d      	ldr	r3, [pc, #116]	; (80087a4 <USBD_SetConfig+0x148>)
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	461a      	mov	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008738:	4b1a      	ldr	r3, [pc, #104]	; (80087a4 <USBD_SetConfig+0x148>)
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	4619      	mov	r1, r3
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7ff f94c 	bl	80079dc <USBD_SetClassConfig>
 8008744:	4603      	mov	r3, r0
 8008746:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008748:	7bfb      	ldrb	r3, [r7, #15]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00f      	beq.n	800876e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f903 	bl	800895c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	b2db      	uxtb	r3, r3
 800875c:	4619      	mov	r1, r3
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7ff f958 	bl	8007a14 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2202      	movs	r2, #2
 8008768:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800876c:	e014      	b.n	8008798 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f9bf 	bl	8008af2 <USBD_CtlSendStatus>
      break;
 8008774:	e010      	b.n	8008798 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f9bb 	bl	8008af2 <USBD_CtlSendStatus>
      break;
 800877c:	e00c      	b.n	8008798 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f8eb 	bl	800895c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008786:	4b07      	ldr	r3, [pc, #28]	; (80087a4 <USBD_SetConfig+0x148>)
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	4619      	mov	r1, r3
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7ff f941 	bl	8007a14 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008792:	2303      	movs	r3, #3
 8008794:	73fb      	strb	r3, [r7, #15]
      break;
 8008796:	bf00      	nop
  }

  return ret;
 8008798:	7bfb      	ldrb	r3, [r7, #15]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	2000027c 	.word	0x2000027c

080087a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	88db      	ldrh	r3, [r3, #6]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d004      	beq.n	80087c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80087ba:	6839      	ldr	r1, [r7, #0]
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 f8cd 	bl	800895c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80087c2:	e023      	b.n	800880c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	dc02      	bgt.n	80087d6 <USBD_GetConfig+0x2e>
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	dc03      	bgt.n	80087dc <USBD_GetConfig+0x34>
 80087d4:	e015      	b.n	8008802 <USBD_GetConfig+0x5a>
 80087d6:	2b03      	cmp	r3, #3
 80087d8:	d00b      	beq.n	80087f2 <USBD_GetConfig+0x4a>
 80087da:	e012      	b.n	8008802 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	3308      	adds	r3, #8
 80087e6:	2201      	movs	r2, #1
 80087e8:	4619      	mov	r1, r3
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f927 	bl	8008a3e <USBD_CtlSendData>
        break;
 80087f0:	e00c      	b.n	800880c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	3304      	adds	r3, #4
 80087f6:	2201      	movs	r2, #1
 80087f8:	4619      	mov	r1, r3
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f91f 	bl	8008a3e <USBD_CtlSendData>
        break;
 8008800:	e004      	b.n	800880c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f8a9 	bl	800895c <USBD_CtlError>
        break;
 800880a:	bf00      	nop
}
 800880c:	bf00      	nop
 800880e:	3708      	adds	r7, #8
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008824:	b2db      	uxtb	r3, r3
 8008826:	3b01      	subs	r3, #1
 8008828:	2b02      	cmp	r3, #2
 800882a:	d81e      	bhi.n	800886a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	88db      	ldrh	r3, [r3, #6]
 8008830:	2b02      	cmp	r3, #2
 8008832:	d004      	beq.n	800883e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008834:	6839      	ldr	r1, [r7, #0]
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f890 	bl	800895c <USBD_CtlError>
        break;
 800883c:	e01a      	b.n	8008874 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2201      	movs	r2, #1
 8008842:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800884a:	2b00      	cmp	r3, #0
 800884c:	d005      	beq.n	800885a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	f043 0202 	orr.w	r2, r3, #2
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	330c      	adds	r3, #12
 800885e:	2202      	movs	r2, #2
 8008860:	4619      	mov	r1, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f8eb 	bl	8008a3e <USBD_CtlSendData>
      break;
 8008868:	e004      	b.n	8008874 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800886a:	6839      	ldr	r1, [r7, #0]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f875 	bl	800895c <USBD_CtlError>
      break;
 8008872:	bf00      	nop
  }
}
 8008874:	bf00      	nop
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	885b      	ldrh	r3, [r3, #2]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d106      	bne.n	800889c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2201      	movs	r2, #1
 8008892:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f92b 	bl	8008af2 <USBD_CtlSendStatus>
  }
}
 800889c:	bf00      	nop
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	3b01      	subs	r3, #1
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d80b      	bhi.n	80088d4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	885b      	ldrh	r3, [r3, #2]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d10c      	bne.n	80088de <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f910 	bl	8008af2 <USBD_CtlSendStatus>
      }
      break;
 80088d2:	e004      	b.n	80088de <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f840 	bl	800895c <USBD_CtlError>
      break;
 80088dc:	e000      	b.n	80088e0 <USBD_ClrFeature+0x3c>
      break;
 80088de:	bf00      	nop
  }
}
 80088e0:	bf00      	nop
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	781a      	ldrb	r2, [r3, #0]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	3301      	adds	r3, #1
 8008902:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	781a      	ldrb	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	3301      	adds	r3, #1
 8008910:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f7ff fa92 	bl	8007e3c <SWAPBYTE>
 8008918:	4603      	mov	r3, r0
 800891a:	461a      	mov	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	3301      	adds	r3, #1
 8008924:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	3301      	adds	r3, #1
 800892a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f7ff fa85 	bl	8007e3c <SWAPBYTE>
 8008932:	4603      	mov	r3, r0
 8008934:	461a      	mov	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	3301      	adds	r3, #1
 800893e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	3301      	adds	r3, #1
 8008944:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f7ff fa78 	bl	8007e3c <SWAPBYTE>
 800894c:	4603      	mov	r3, r0
 800894e:	461a      	mov	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	80da      	strh	r2, [r3, #6]
}
 8008954:	bf00      	nop
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008966:	2180      	movs	r1, #128	; 0x80
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fcd9 	bl	8009320 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800896e:	2100      	movs	r1, #0
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 fcd5 	bl	8009320 <USBD_LL_StallEP>
}
 8008976:	bf00      	nop
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b086      	sub	sp, #24
 8008982:	af00      	add	r7, sp, #0
 8008984:	60f8      	str	r0, [r7, #12]
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d036      	beq.n	8008a02 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008998:	6938      	ldr	r0, [r7, #16]
 800899a:	f000 f836 	bl	8008a0a <USBD_GetLen>
 800899e:	4603      	mov	r3, r0
 80089a0:	3301      	adds	r3, #1
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	005b      	lsls	r3, r3, #1
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80089ac:	7dfb      	ldrb	r3, [r7, #23]
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	4413      	add	r3, r2
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	7812      	ldrb	r2, [r2, #0]
 80089b6:	701a      	strb	r2, [r3, #0]
  idx++;
 80089b8:	7dfb      	ldrb	r3, [r7, #23]
 80089ba:	3301      	adds	r3, #1
 80089bc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80089be:	7dfb      	ldrb	r3, [r7, #23]
 80089c0:	68ba      	ldr	r2, [r7, #8]
 80089c2:	4413      	add	r3, r2
 80089c4:	2203      	movs	r2, #3
 80089c6:	701a      	strb	r2, [r3, #0]
  idx++;
 80089c8:	7dfb      	ldrb	r3, [r7, #23]
 80089ca:	3301      	adds	r3, #1
 80089cc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80089ce:	e013      	b.n	80089f8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80089d0:	7dfb      	ldrb	r3, [r7, #23]
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	4413      	add	r3, r2
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	7812      	ldrb	r2, [r2, #0]
 80089da:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	3301      	adds	r3, #1
 80089e0:	613b      	str	r3, [r7, #16]
    idx++;
 80089e2:	7dfb      	ldrb	r3, [r7, #23]
 80089e4:	3301      	adds	r3, #1
 80089e6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80089e8:	7dfb      	ldrb	r3, [r7, #23]
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	4413      	add	r3, r2
 80089ee:	2200      	movs	r2, #0
 80089f0:	701a      	strb	r2, [r3, #0]
    idx++;
 80089f2:	7dfb      	ldrb	r3, [r7, #23]
 80089f4:	3301      	adds	r3, #1
 80089f6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1e7      	bne.n	80089d0 <USBD_GetString+0x52>
 8008a00:	e000      	b.n	8008a04 <USBD_GetString+0x86>
    return;
 8008a02:	bf00      	nop
  }
}
 8008a04:	3718      	adds	r7, #24
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a0a:	b480      	push	{r7}
 8008a0c:	b085      	sub	sp, #20
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008a1a:	e005      	b.n	8008a28 <USBD_GetLen+0x1e>
  {
    len++;
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	3301      	adds	r3, #1
 8008a26:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1f5      	bne.n	8008a1c <USBD_GetLen+0x12>
  }

  return len;
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3714      	adds	r7, #20
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b084      	sub	sp, #16
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2202      	movs	r2, #2
 8008a4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	68ba      	ldr	r2, [r7, #8]
 8008a62:	2100      	movs	r1, #0
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 fd2b 	bl	80094c0 <USBD_LL_Transmit>

  return USBD_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	2100      	movs	r1, #0
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f000 fd1a 	bl	80094c0 <USBD_LL_Transmit>

  return USBD_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b084      	sub	sp, #16
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	60f8      	str	r0, [r7, #12]
 8008a9e:	60b9      	str	r1, [r7, #8]
 8008aa0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2203      	movs	r2, #3
 8008aa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	2100      	movs	r1, #0
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f000 fd35 	bl	8009530 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f000 fd24 	bl	8009530 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b082      	sub	sp, #8
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2204      	movs	r2, #4
 8008afe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b02:	2300      	movs	r3, #0
 8008b04:	2200      	movs	r2, #0
 8008b06:	2100      	movs	r1, #0
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fcd9 	bl	80094c0 <USBD_LL_Transmit>

  return USBD_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2205      	movs	r2, #5
 8008b24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b28:	2300      	movs	r3, #0
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fcfe 	bl	8009530 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
	...

08008b40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008b44:	2200      	movs	r2, #0
 8008b46:	4912      	ldr	r1, [pc, #72]	; (8008b90 <MX_USB_DEVICE_Init+0x50>)
 8008b48:	4812      	ldr	r0, [pc, #72]	; (8008b94 <MX_USB_DEVICE_Init+0x54>)
 8008b4a:	f7fe fed9 	bl	8007900 <USBD_Init>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d001      	beq.n	8008b58 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008b54:	f7f7 fcde 	bl	8000514 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008b58:	490f      	ldr	r1, [pc, #60]	; (8008b98 <MX_USB_DEVICE_Init+0x58>)
 8008b5a:	480e      	ldr	r0, [pc, #56]	; (8008b94 <MX_USB_DEVICE_Init+0x54>)
 8008b5c:	f7fe ff00 	bl	8007960 <USBD_RegisterClass>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008b66:	f7f7 fcd5 	bl	8000514 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008b6a:	490c      	ldr	r1, [pc, #48]	; (8008b9c <MX_USB_DEVICE_Init+0x5c>)
 8008b6c:	4809      	ldr	r0, [pc, #36]	; (8008b94 <MX_USB_DEVICE_Init+0x54>)
 8008b6e:	f7fe fe21 	bl	80077b4 <USBD_CDC_RegisterInterface>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d001      	beq.n	8008b7c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008b78:	f7f7 fccc 	bl	8000514 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008b7c:	4805      	ldr	r0, [pc, #20]	; (8008b94 <MX_USB_DEVICE_Init+0x54>)
 8008b7e:	f7fe ff16 	bl	80079ae <USBD_Start>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d001      	beq.n	8008b8c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008b88:	f7f7 fcc4 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b8c:	bf00      	nop
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	20000130 	.word	0x20000130
 8008b94:	20000280 	.word	0x20000280
 8008b98:	20000018 	.word	0x20000018
 8008b9c:	2000011c 	.word	0x2000011c

08008ba0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	4905      	ldr	r1, [pc, #20]	; (8008bbc <CDC_Init_FS+0x1c>)
 8008ba8:	4805      	ldr	r0, [pc, #20]	; (8008bc0 <CDC_Init_FS+0x20>)
 8008baa:	f7fe fe18 	bl	80077de <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008bae:	4905      	ldr	r1, [pc, #20]	; (8008bc4 <CDC_Init_FS+0x24>)
 8008bb0:	4803      	ldr	r0, [pc, #12]	; (8008bc0 <CDC_Init_FS+0x20>)
 8008bb2:	f7fe fe32 	bl	800781a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008bb6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	20000938 	.word	0x20000938
 8008bc0:	20000280 	.word	0x20000280
 8008bc4:	20000550 	.word	0x20000550

08008bc8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008bcc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	4603      	mov	r3, r0
 8008be0:	6039      	str	r1, [r7, #0]
 8008be2:	71fb      	strb	r3, [r7, #7]
 8008be4:	4613      	mov	r3, r2
 8008be6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008be8:	79fb      	ldrb	r3, [r7, #7]
 8008bea:	2b23      	cmp	r3, #35	; 0x23
 8008bec:	d84a      	bhi.n	8008c84 <CDC_Control_FS+0xac>
 8008bee:	a201      	add	r2, pc, #4	; (adr r2, 8008bf4 <CDC_Control_FS+0x1c>)
 8008bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf4:	08008c85 	.word	0x08008c85
 8008bf8:	08008c85 	.word	0x08008c85
 8008bfc:	08008c85 	.word	0x08008c85
 8008c00:	08008c85 	.word	0x08008c85
 8008c04:	08008c85 	.word	0x08008c85
 8008c08:	08008c85 	.word	0x08008c85
 8008c0c:	08008c85 	.word	0x08008c85
 8008c10:	08008c85 	.word	0x08008c85
 8008c14:	08008c85 	.word	0x08008c85
 8008c18:	08008c85 	.word	0x08008c85
 8008c1c:	08008c85 	.word	0x08008c85
 8008c20:	08008c85 	.word	0x08008c85
 8008c24:	08008c85 	.word	0x08008c85
 8008c28:	08008c85 	.word	0x08008c85
 8008c2c:	08008c85 	.word	0x08008c85
 8008c30:	08008c85 	.word	0x08008c85
 8008c34:	08008c85 	.word	0x08008c85
 8008c38:	08008c85 	.word	0x08008c85
 8008c3c:	08008c85 	.word	0x08008c85
 8008c40:	08008c85 	.word	0x08008c85
 8008c44:	08008c85 	.word	0x08008c85
 8008c48:	08008c85 	.word	0x08008c85
 8008c4c:	08008c85 	.word	0x08008c85
 8008c50:	08008c85 	.word	0x08008c85
 8008c54:	08008c85 	.word	0x08008c85
 8008c58:	08008c85 	.word	0x08008c85
 8008c5c:	08008c85 	.word	0x08008c85
 8008c60:	08008c85 	.word	0x08008c85
 8008c64:	08008c85 	.word	0x08008c85
 8008c68:	08008c85 	.word	0x08008c85
 8008c6c:	08008c85 	.word	0x08008c85
 8008c70:	08008c85 	.word	0x08008c85
 8008c74:	08008c85 	.word	0x08008c85
 8008c78:	08008c85 	.word	0x08008c85
 8008c7c:	08008c85 	.word	0x08008c85
 8008c80:	08008c85 	.word	0x08008c85
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008c84:	bf00      	nop
  }

  return (USBD_OK);
 8008c86:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008c9e:	6879      	ldr	r1, [r7, #4]
 8008ca0:	4805      	ldr	r0, [pc, #20]	; (8008cb8 <CDC_Receive_FS+0x24>)
 8008ca2:	f7fe fdba 	bl	800781a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008ca6:	4804      	ldr	r0, [pc, #16]	; (8008cb8 <CDC_Receive_FS+0x24>)
 8008ca8:	f7fe fe00 	bl	80078ac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008cac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	20000280 	.word	0x20000280

08008cbc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008ccc:	4b0d      	ldr	r3, [pc, #52]	; (8008d04 <CDC_Transmit_FS+0x48>)
 8008cce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cd2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e00b      	b.n	8008cfa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008ce2:	887b      	ldrh	r3, [r7, #2]
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	6879      	ldr	r1, [r7, #4]
 8008ce8:	4806      	ldr	r0, [pc, #24]	; (8008d04 <CDC_Transmit_FS+0x48>)
 8008cea:	f7fe fd78 	bl	80077de <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008cee:	4805      	ldr	r0, [pc, #20]	; (8008d04 <CDC_Transmit_FS+0x48>)
 8008cf0:	f7fe fdac 	bl	800784c <USBD_CDC_TransmitPacket>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	20000280 	.word	0x20000280

08008d08 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b087      	sub	sp, #28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	4613      	mov	r3, r2
 8008d14:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008d1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	371c      	adds	r7, #28
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
	...

08008d2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	4603      	mov	r3, r0
 8008d34:	6039      	str	r1, [r7, #0]
 8008d36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	2212      	movs	r2, #18
 8008d3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008d3e:	4b03      	ldr	r3, [pc, #12]	; (8008d4c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	20000150 	.word	0x20000150

08008d50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	4603      	mov	r3, r0
 8008d58:	6039      	str	r1, [r7, #0]
 8008d5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	2204      	movs	r2, #4
 8008d60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d62:	4b03      	ldr	r3, [pc, #12]	; (8008d70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	20000170 	.word	0x20000170

08008d74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	6039      	str	r1, [r7, #0]
 8008d7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d80:	79fb      	ldrb	r3, [r7, #7]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d105      	bne.n	8008d92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	4907      	ldr	r1, [pc, #28]	; (8008da8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d8a:	4808      	ldr	r0, [pc, #32]	; (8008dac <USBD_FS_ProductStrDescriptor+0x38>)
 8008d8c:	f7ff fdf7 	bl	800897e <USBD_GetString>
 8008d90:	e004      	b.n	8008d9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	4904      	ldr	r1, [pc, #16]	; (8008da8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d96:	4805      	ldr	r0, [pc, #20]	; (8008dac <USBD_FS_ProductStrDescriptor+0x38>)
 8008d98:	f7ff fdf1 	bl	800897e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d9c:	4b02      	ldr	r3, [pc, #8]	; (8008da8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	20000d20 	.word	0x20000d20
 8008dac:	08009fd0 	.word	0x08009fd0

08008db0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	4603      	mov	r3, r0
 8008db8:	6039      	str	r1, [r7, #0]
 8008dba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	4904      	ldr	r1, [pc, #16]	; (8008dd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008dc0:	4804      	ldr	r0, [pc, #16]	; (8008dd4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008dc2:	f7ff fddc 	bl	800897e <USBD_GetString>
  return USBD_StrDesc;
 8008dc6:	4b02      	ldr	r3, [pc, #8]	; (8008dd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	20000d20 	.word	0x20000d20
 8008dd4:	08009fe8 	.word	0x08009fe8

08008dd8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	4603      	mov	r3, r0
 8008de0:	6039      	str	r1, [r7, #0]
 8008de2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	221a      	movs	r2, #26
 8008de8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008dea:	f000 f855 	bl	8008e98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008dee:	4b02      	ldr	r3, [pc, #8]	; (8008df8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	20000174 	.word	0x20000174

08008dfc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	4603      	mov	r3, r0
 8008e04:	6039      	str	r1, [r7, #0]
 8008e06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e08:	79fb      	ldrb	r3, [r7, #7]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d105      	bne.n	8008e1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	4907      	ldr	r1, [pc, #28]	; (8008e30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e12:	4808      	ldr	r0, [pc, #32]	; (8008e34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e14:	f7ff fdb3 	bl	800897e <USBD_GetString>
 8008e18:	e004      	b.n	8008e24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e1a:	683a      	ldr	r2, [r7, #0]
 8008e1c:	4904      	ldr	r1, [pc, #16]	; (8008e30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e1e:	4805      	ldr	r0, [pc, #20]	; (8008e34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e20:	f7ff fdad 	bl	800897e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e24:	4b02      	ldr	r3, [pc, #8]	; (8008e30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	20000d20 	.word	0x20000d20
 8008e34:	08009ffc 	.word	0x08009ffc

08008e38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	4603      	mov	r3, r0
 8008e40:	6039      	str	r1, [r7, #0]
 8008e42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e44:	79fb      	ldrb	r3, [r7, #7]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d105      	bne.n	8008e56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	4907      	ldr	r1, [pc, #28]	; (8008e6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e4e:	4808      	ldr	r0, [pc, #32]	; (8008e70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e50:	f7ff fd95 	bl	800897e <USBD_GetString>
 8008e54:	e004      	b.n	8008e60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e56:	683a      	ldr	r2, [r7, #0]
 8008e58:	4904      	ldr	r1, [pc, #16]	; (8008e6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e5a:	4805      	ldr	r0, [pc, #20]	; (8008e70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e5c:	f7ff fd8f 	bl	800897e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e60:	4b02      	ldr	r3, [pc, #8]	; (8008e6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	20000d20 	.word	0x20000d20
 8008e70:	0800a008 	.word	0x0800a008

08008e74 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	6039      	str	r1, [r7, #0]
 8008e7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	220c      	movs	r2, #12
 8008e84:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008e86:	4b03      	ldr	r3, [pc, #12]	; (8008e94 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	20000164 	.word	0x20000164

08008e98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e9e:	4b0f      	ldr	r3, [pc, #60]	; (8008edc <Get_SerialNum+0x44>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ea4:	4b0e      	ldr	r3, [pc, #56]	; (8008ee0 <Get_SerialNum+0x48>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008eaa:	4b0e      	ldr	r3, [pc, #56]	; (8008ee4 <Get_SerialNum+0x4c>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d009      	beq.n	8008ed2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008ebe:	2208      	movs	r2, #8
 8008ec0:	4909      	ldr	r1, [pc, #36]	; (8008ee8 <Get_SerialNum+0x50>)
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f000 f814 	bl	8008ef0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ec8:	2204      	movs	r2, #4
 8008eca:	4908      	ldr	r1, [pc, #32]	; (8008eec <Get_SerialNum+0x54>)
 8008ecc:	68b8      	ldr	r0, [r7, #8]
 8008ece:	f000 f80f 	bl	8008ef0 <IntToUnicode>
  }
}
 8008ed2:	bf00      	nop
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	1fff7590 	.word	0x1fff7590
 8008ee0:	1fff7594 	.word	0x1fff7594
 8008ee4:	1fff7598 	.word	0x1fff7598
 8008ee8:	20000176 	.word	0x20000176
 8008eec:	20000186 	.word	0x20000186

08008ef0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b087      	sub	sp, #28
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	4613      	mov	r3, r2
 8008efc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f02:	2300      	movs	r3, #0
 8008f04:	75fb      	strb	r3, [r7, #23]
 8008f06:	e027      	b.n	8008f58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	0f1b      	lsrs	r3, r3, #28
 8008f0c:	2b09      	cmp	r3, #9
 8008f0e:	d80b      	bhi.n	8008f28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	0f1b      	lsrs	r3, r3, #28
 8008f14:	b2da      	uxtb	r2, r3
 8008f16:	7dfb      	ldrb	r3, [r7, #23]
 8008f18:	005b      	lsls	r3, r3, #1
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	440b      	add	r3, r1
 8008f20:	3230      	adds	r2, #48	; 0x30
 8008f22:	b2d2      	uxtb	r2, r2
 8008f24:	701a      	strb	r2, [r3, #0]
 8008f26:	e00a      	b.n	8008f3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	0f1b      	lsrs	r3, r3, #28
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	7dfb      	ldrb	r3, [r7, #23]
 8008f30:	005b      	lsls	r3, r3, #1
 8008f32:	4619      	mov	r1, r3
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	440b      	add	r3, r1
 8008f38:	3237      	adds	r2, #55	; 0x37
 8008f3a:	b2d2      	uxtb	r2, r2
 8008f3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	011b      	lsls	r3, r3, #4
 8008f42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f44:	7dfb      	ldrb	r3, [r7, #23]
 8008f46:	005b      	lsls	r3, r3, #1
 8008f48:	3301      	adds	r3, #1
 8008f4a:	68ba      	ldr	r2, [r7, #8]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	2200      	movs	r2, #0
 8008f50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f52:	7dfb      	ldrb	r3, [r7, #23]
 8008f54:	3301      	adds	r3, #1
 8008f56:	75fb      	strb	r3, [r7, #23]
 8008f58:	7dfa      	ldrb	r2, [r7, #23]
 8008f5a:	79fb      	ldrb	r3, [r7, #7]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d3d3      	bcc.n	8008f08 <IntToUnicode+0x18>
  }
}
 8008f60:	bf00      	nop
 8008f62:	bf00      	nop
 8008f64:	371c      	adds	r7, #28
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
	...

08008f70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a0d      	ldr	r2, [pc, #52]	; (8008fb4 <HAL_PCD_MspInit+0x44>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d113      	bne.n	8008faa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008f82:	4b0d      	ldr	r3, [pc, #52]	; (8008fb8 <HAL_PCD_MspInit+0x48>)
 8008f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f86:	4a0c      	ldr	r2, [pc, #48]	; (8008fb8 <HAL_PCD_MspInit+0x48>)
 8008f88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f8c:	6593      	str	r3, [r2, #88]	; 0x58
 8008f8e:	4b0a      	ldr	r3, [pc, #40]	; (8008fb8 <HAL_PCD_MspInit+0x48>)
 8008f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f96:	60fb      	str	r3, [r7, #12]
 8008f98:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	2043      	movs	r0, #67	; 0x43
 8008fa0:	f7f8 fdaf 	bl	8001b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8008fa4:	2043      	movs	r0, #67	; 0x43
 8008fa6:	f7f8 fdc8 	bl	8001b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008faa:	bf00      	nop
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	40006800 	.word	0x40006800
 8008fb8:	40021000 	.word	0x40021000

08008fbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	f7fe fd36 	bl	8007a44 <USBD_LL_SetupStage>
}
 8008fd8:	bf00      	nop
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 8008ff2:	78fa      	ldrb	r2, [r7, #3]
 8008ff4:	6879      	ldr	r1, [r7, #4]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4413      	add	r3, r2
 8008ffc:	00db      	lsls	r3, r3, #3
 8008ffe:	440b      	add	r3, r1
 8009000:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	78fb      	ldrb	r3, [r7, #3]
 8009008:	4619      	mov	r1, r3
 800900a:	f7fe fd70 	bl	8007aee <USBD_LL_DataOutStage>
}
 800900e:	bf00      	nop
 8009010:	3708      	adds	r7, #8
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b082      	sub	sp, #8
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	460b      	mov	r3, r1
 8009020:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 8009028:	78fa      	ldrb	r2, [r7, #3]
 800902a:	6879      	ldr	r1, [r7, #4]
 800902c:	4613      	mov	r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4413      	add	r3, r2
 8009032:	00db      	lsls	r3, r3, #3
 8009034:	440b      	add	r3, r1
 8009036:	3340      	adds	r3, #64	; 0x40
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	78fb      	ldrb	r3, [r7, #3]
 800903c:	4619      	mov	r1, r3
 800903e:	f7fe fdb9 	bl	8007bb4 <USBD_LL_DataInStage>
}
 8009042:	bf00      	nop
 8009044:	3708      	adds	r7, #8
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b082      	sub	sp, #8
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8009058:	4618      	mov	r0, r3
 800905a:	f7fe fecd 	bl	8007df8 <USBD_LL_SOF>
}
 800905e:	bf00      	nop
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b084      	sub	sp, #16
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800906e:	2301      	movs	r3, #1
 8009070:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	2b02      	cmp	r3, #2
 8009078:	d001      	beq.n	800907e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800907a:	f7f7 fa4b 	bl	8000514 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8009084:	7bfa      	ldrb	r2, [r7, #15]
 8009086:	4611      	mov	r1, r2
 8009088:	4618      	mov	r0, r3
 800908a:	f7fe fe77 	bl	8007d7c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8009094:	4618      	mov	r0, r3
 8009096:	f7fe fe23 	bl	8007ce0 <USBD_LL_Reset>
}
 800909a:	bf00      	nop
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
	...

080090a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fe fe72 	bl	8007d9c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d005      	beq.n	80090cc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090c0:	4b04      	ldr	r3, [pc, #16]	; (80090d4 <HAL_PCD_SuspendCallback+0x30>)
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	4a03      	ldr	r2, [pc, #12]	; (80090d4 <HAL_PCD_SuspendCallback+0x30>)
 80090c6:	f043 0306 	orr.w	r3, r3, #6
 80090ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80090cc:	bf00      	nop
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	e000ed00 	.word	0xe000ed00

080090d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d007      	beq.n	80090f8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090e8:	4b08      	ldr	r3, [pc, #32]	; (800910c <HAL_PCD_ResumeCallback+0x34>)
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	4a07      	ldr	r2, [pc, #28]	; (800910c <HAL_PCD_ResumeCallback+0x34>)
 80090ee:	f023 0306 	bic.w	r3, r3, #6
 80090f2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80090f4:	f000 fab6 	bl	8009664 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe fe62 	bl	8007dc8 <USBD_LL_Resume>
}
 8009104:	bf00      	nop
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	e000ed00 	.word	0xe000ed00

08009110 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009118:	f7fa fc9c 	bl	8003a54 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800911c:	4a2b      	ldr	r2, [pc, #172]	; (80091cc <USBD_LL_Init+0xbc>)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a29      	ldr	r2, [pc, #164]	; (80091cc <USBD_LL_Init+0xbc>)
 8009128:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800912c:	4b27      	ldr	r3, [pc, #156]	; (80091cc <USBD_LL_Init+0xbc>)
 800912e:	4a28      	ldr	r2, [pc, #160]	; (80091d0 <USBD_LL_Init+0xc0>)
 8009130:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009132:	4b26      	ldr	r3, [pc, #152]	; (80091cc <USBD_LL_Init+0xbc>)
 8009134:	2208      	movs	r2, #8
 8009136:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009138:	4b24      	ldr	r3, [pc, #144]	; (80091cc <USBD_LL_Init+0xbc>)
 800913a:	2202      	movs	r2, #2
 800913c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800913e:	4b23      	ldr	r3, [pc, #140]	; (80091cc <USBD_LL_Init+0xbc>)
 8009140:	2202      	movs	r2, #2
 8009142:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009144:	4b21      	ldr	r3, [pc, #132]	; (80091cc <USBD_LL_Init+0xbc>)
 8009146:	2200      	movs	r2, #0
 8009148:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800914a:	4b20      	ldr	r3, [pc, #128]	; (80091cc <USBD_LL_Init+0xbc>)
 800914c:	2200      	movs	r2, #0
 800914e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009150:	4b1e      	ldr	r3, [pc, #120]	; (80091cc <USBD_LL_Init+0xbc>)
 8009152:	2200      	movs	r2, #0
 8009154:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009156:	4b1d      	ldr	r3, [pc, #116]	; (80091cc <USBD_LL_Init+0xbc>)
 8009158:	2200      	movs	r2, #0
 800915a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800915c:	481b      	ldr	r0, [pc, #108]	; (80091cc <USBD_LL_Init+0xbc>)
 800915e:	f7f8 fe89 	bl	8001e74 <HAL_PCD_Init>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d001      	beq.n	800916c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8009168:	f7f7 f9d4 	bl	8000514 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009172:	2318      	movs	r3, #24
 8009174:	2200      	movs	r2, #0
 8009176:	2100      	movs	r1, #0
 8009178:	f7fa fb99 	bl	80038ae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009182:	2358      	movs	r3, #88	; 0x58
 8009184:	2200      	movs	r2, #0
 8009186:	2180      	movs	r1, #128	; 0x80
 8009188:	f7fa fb91 	bl	80038ae <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009192:	23c0      	movs	r3, #192	; 0xc0
 8009194:	2200      	movs	r2, #0
 8009196:	2181      	movs	r1, #129	; 0x81
 8009198:	f7fa fb89 	bl	80038ae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80091a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80091a6:	2200      	movs	r2, #0
 80091a8:	2101      	movs	r1, #1
 80091aa:	f7fa fb80 	bl	80038ae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80091b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091b8:	2200      	movs	r2, #0
 80091ba:	2182      	movs	r1, #130	; 0x82
 80091bc:	f7fa fb77 	bl	80038ae <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	20000f20 	.word	0x20000f20
 80091d0:	40006800 	.word	0x40006800

080091d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091dc:	2300      	movs	r3, #0
 80091de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091e0:	2300      	movs	r3, #0
 80091e2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7f8 ff59 	bl	80020a2 <HAL_PCD_Start>
 80091f0:	4603      	mov	r3, r0
 80091f2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80091f4:	7bbb      	ldrb	r3, [r7, #14]
 80091f6:	2b03      	cmp	r3, #3
 80091f8:	d816      	bhi.n	8009228 <USBD_LL_Start+0x54>
 80091fa:	a201      	add	r2, pc, #4	; (adr r2, 8009200 <USBD_LL_Start+0x2c>)
 80091fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009200:	08009211 	.word	0x08009211
 8009204:	08009217 	.word	0x08009217
 8009208:	0800921d 	.word	0x0800921d
 800920c:	08009223 	.word	0x08009223
    case HAL_OK :
      usb_status = USBD_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	73fb      	strb	r3, [r7, #15]
    break;
 8009214:	e00b      	b.n	800922e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009216:	2303      	movs	r3, #3
 8009218:	73fb      	strb	r3, [r7, #15]
    break;
 800921a:	e008      	b.n	800922e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800921c:	2301      	movs	r3, #1
 800921e:	73fb      	strb	r3, [r7, #15]
    break;
 8009220:	e005      	b.n	800922e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009222:	2303      	movs	r3, #3
 8009224:	73fb      	strb	r3, [r7, #15]
    break;
 8009226:	e002      	b.n	800922e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8009228:	2303      	movs	r3, #3
 800922a:	73fb      	strb	r3, [r7, #15]
    break;
 800922c:	bf00      	nop
  }
  return usb_status;
 800922e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	4608      	mov	r0, r1
 8009242:	4611      	mov	r1, r2
 8009244:	461a      	mov	r2, r3
 8009246:	4603      	mov	r3, r0
 8009248:	70fb      	strb	r3, [r7, #3]
 800924a:	460b      	mov	r3, r1
 800924c:	70bb      	strb	r3, [r7, #2]
 800924e:	4613      	mov	r3, r2
 8009250:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009252:	2300      	movs	r3, #0
 8009254:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009256:	2300      	movs	r3, #0
 8009258:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009260:	78bb      	ldrb	r3, [r7, #2]
 8009262:	883a      	ldrh	r2, [r7, #0]
 8009264:	78f9      	ldrb	r1, [r7, #3]
 8009266:	f7f9 f88a 	bl	800237e <HAL_PCD_EP_Open>
 800926a:	4603      	mov	r3, r0
 800926c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800926e:	7bbb      	ldrb	r3, [r7, #14]
 8009270:	2b03      	cmp	r3, #3
 8009272:	d817      	bhi.n	80092a4 <USBD_LL_OpenEP+0x6c>
 8009274:	a201      	add	r2, pc, #4	; (adr r2, 800927c <USBD_LL_OpenEP+0x44>)
 8009276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927a:	bf00      	nop
 800927c:	0800928d 	.word	0x0800928d
 8009280:	08009293 	.word	0x08009293
 8009284:	08009299 	.word	0x08009299
 8009288:	0800929f 	.word	0x0800929f
    case HAL_OK :
      usb_status = USBD_OK;
 800928c:	2300      	movs	r3, #0
 800928e:	73fb      	strb	r3, [r7, #15]
    break;
 8009290:	e00b      	b.n	80092aa <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009292:	2303      	movs	r3, #3
 8009294:	73fb      	strb	r3, [r7, #15]
    break;
 8009296:	e008      	b.n	80092aa <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009298:	2301      	movs	r3, #1
 800929a:	73fb      	strb	r3, [r7, #15]
    break;
 800929c:	e005      	b.n	80092aa <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800929e:	2303      	movs	r3, #3
 80092a0:	73fb      	strb	r3, [r7, #15]
    break;
 80092a2:	e002      	b.n	80092aa <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80092a4:	2303      	movs	r3, #3
 80092a6:	73fb      	strb	r3, [r7, #15]
    break;
 80092a8:	bf00      	nop
  }
  return usb_status;
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	460b      	mov	r3, r1
 80092be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092c0:	2300      	movs	r3, #0
 80092c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092ce:	78fa      	ldrb	r2, [r7, #3]
 80092d0:	4611      	mov	r1, r2
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7f9 f8bb 	bl	800244e <HAL_PCD_EP_Close>
 80092d8:	4603      	mov	r3, r0
 80092da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80092dc:	7bbb      	ldrb	r3, [r7, #14]
 80092de:	2b03      	cmp	r3, #3
 80092e0:	d816      	bhi.n	8009310 <USBD_LL_CloseEP+0x5c>
 80092e2:	a201      	add	r2, pc, #4	; (adr r2, 80092e8 <USBD_LL_CloseEP+0x34>)
 80092e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e8:	080092f9 	.word	0x080092f9
 80092ec:	080092ff 	.word	0x080092ff
 80092f0:	08009305 	.word	0x08009305
 80092f4:	0800930b 	.word	0x0800930b
    case HAL_OK :
      usb_status = USBD_OK;
 80092f8:	2300      	movs	r3, #0
 80092fa:	73fb      	strb	r3, [r7, #15]
    break;
 80092fc:	e00b      	b.n	8009316 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092fe:	2303      	movs	r3, #3
 8009300:	73fb      	strb	r3, [r7, #15]
    break;
 8009302:	e008      	b.n	8009316 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009304:	2301      	movs	r3, #1
 8009306:	73fb      	strb	r3, [r7, #15]
    break;
 8009308:	e005      	b.n	8009316 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800930a:	2303      	movs	r3, #3
 800930c:	73fb      	strb	r3, [r7, #15]
    break;
 800930e:	e002      	b.n	8009316 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009310:	2303      	movs	r3, #3
 8009312:	73fb      	strb	r3, [r7, #15]
    break;
 8009314:	bf00      	nop
  }
  return usb_status;
 8009316:	7bfb      	ldrb	r3, [r7, #15]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009330:	2300      	movs	r3, #0
 8009332:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800933a:	78fa      	ldrb	r2, [r7, #3]
 800933c:	4611      	mov	r1, r2
 800933e:	4618      	mov	r0, r3
 8009340:	f7f9 f969 	bl	8002616 <HAL_PCD_EP_SetStall>
 8009344:	4603      	mov	r3, r0
 8009346:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009348:	7bbb      	ldrb	r3, [r7, #14]
 800934a:	2b03      	cmp	r3, #3
 800934c:	d816      	bhi.n	800937c <USBD_LL_StallEP+0x5c>
 800934e:	a201      	add	r2, pc, #4	; (adr r2, 8009354 <USBD_LL_StallEP+0x34>)
 8009350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009354:	08009365 	.word	0x08009365
 8009358:	0800936b 	.word	0x0800936b
 800935c:	08009371 	.word	0x08009371
 8009360:	08009377 	.word	0x08009377
    case HAL_OK :
      usb_status = USBD_OK;
 8009364:	2300      	movs	r3, #0
 8009366:	73fb      	strb	r3, [r7, #15]
    break;
 8009368:	e00b      	b.n	8009382 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800936a:	2303      	movs	r3, #3
 800936c:	73fb      	strb	r3, [r7, #15]
    break;
 800936e:	e008      	b.n	8009382 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009370:	2301      	movs	r3, #1
 8009372:	73fb      	strb	r3, [r7, #15]
    break;
 8009374:	e005      	b.n	8009382 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009376:	2303      	movs	r3, #3
 8009378:	73fb      	strb	r3, [r7, #15]
    break;
 800937a:	e002      	b.n	8009382 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800937c:	2303      	movs	r3, #3
 800937e:	73fb      	strb	r3, [r7, #15]
    break;
 8009380:	bf00      	nop
  }
  return usb_status;
 8009382:	7bfb      	ldrb	r3, [r7, #15]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	460b      	mov	r3, r1
 8009396:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009398:	2300      	movs	r3, #0
 800939a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800939c:	2300      	movs	r3, #0
 800939e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093a6:	78fa      	ldrb	r2, [r7, #3]
 80093a8:	4611      	mov	r1, r2
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7f9 f995 	bl	80026da <HAL_PCD_EP_ClrStall>
 80093b0:	4603      	mov	r3, r0
 80093b2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80093b4:	7bbb      	ldrb	r3, [r7, #14]
 80093b6:	2b03      	cmp	r3, #3
 80093b8:	d816      	bhi.n	80093e8 <USBD_LL_ClearStallEP+0x5c>
 80093ba:	a201      	add	r2, pc, #4	; (adr r2, 80093c0 <USBD_LL_ClearStallEP+0x34>)
 80093bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c0:	080093d1 	.word	0x080093d1
 80093c4:	080093d7 	.word	0x080093d7
 80093c8:	080093dd 	.word	0x080093dd
 80093cc:	080093e3 	.word	0x080093e3
    case HAL_OK :
      usb_status = USBD_OK;
 80093d0:	2300      	movs	r3, #0
 80093d2:	73fb      	strb	r3, [r7, #15]
    break;
 80093d4:	e00b      	b.n	80093ee <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093d6:	2303      	movs	r3, #3
 80093d8:	73fb      	strb	r3, [r7, #15]
    break;
 80093da:	e008      	b.n	80093ee <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093dc:	2301      	movs	r3, #1
 80093de:	73fb      	strb	r3, [r7, #15]
    break;
 80093e0:	e005      	b.n	80093ee <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093e2:	2303      	movs	r3, #3
 80093e4:	73fb      	strb	r3, [r7, #15]
    break;
 80093e6:	e002      	b.n	80093ee <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80093e8:	2303      	movs	r3, #3
 80093ea:	73fb      	strb	r3, [r7, #15]
    break;
 80093ec:	bf00      	nop
  }
  return usb_status;
 80093ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3710      	adds	r7, #16
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	460b      	mov	r3, r1
 8009402:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800940a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800940c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009410:	2b00      	cmp	r3, #0
 8009412:	da0c      	bge.n	800942e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009414:	78fb      	ldrb	r3, [r7, #3]
 8009416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800941a:	68f9      	ldr	r1, [r7, #12]
 800941c:	1c5a      	adds	r2, r3, #1
 800941e:	4613      	mov	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	00db      	lsls	r3, r3, #3
 8009426:	440b      	add	r3, r1
 8009428:	3306      	adds	r3, #6
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	e00b      	b.n	8009446 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800942e:	78fb      	ldrb	r3, [r7, #3]
 8009430:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009434:	68f9      	ldr	r1, [r7, #12]
 8009436:	4613      	mov	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4413      	add	r3, r2
 800943c:	00db      	lsls	r3, r3, #3
 800943e:	440b      	add	r3, r1
 8009440:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 8009444:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009446:	4618      	mov	r0, r3
 8009448:	3714      	adds	r7, #20
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
	...

08009454 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	460b      	mov	r3, r1
 800945e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009460:	2300      	movs	r3, #0
 8009462:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009464:	2300      	movs	r3, #0
 8009466:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800946e:	78fa      	ldrb	r2, [r7, #3]
 8009470:	4611      	mov	r1, r2
 8009472:	4618      	mov	r0, r3
 8009474:	f7f8 ff5e 	bl	8002334 <HAL_PCD_SetAddress>
 8009478:	4603      	mov	r3, r0
 800947a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800947c:	7bbb      	ldrb	r3, [r7, #14]
 800947e:	2b03      	cmp	r3, #3
 8009480:	d816      	bhi.n	80094b0 <USBD_LL_SetUSBAddress+0x5c>
 8009482:	a201      	add	r2, pc, #4	; (adr r2, 8009488 <USBD_LL_SetUSBAddress+0x34>)
 8009484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009488:	08009499 	.word	0x08009499
 800948c:	0800949f 	.word	0x0800949f
 8009490:	080094a5 	.word	0x080094a5
 8009494:	080094ab 	.word	0x080094ab
    case HAL_OK :
      usb_status = USBD_OK;
 8009498:	2300      	movs	r3, #0
 800949a:	73fb      	strb	r3, [r7, #15]
    break;
 800949c:	e00b      	b.n	80094b6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800949e:	2303      	movs	r3, #3
 80094a0:	73fb      	strb	r3, [r7, #15]
    break;
 80094a2:	e008      	b.n	80094b6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094a4:	2301      	movs	r3, #1
 80094a6:	73fb      	strb	r3, [r7, #15]
    break;
 80094a8:	e005      	b.n	80094b6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094aa:	2303      	movs	r3, #3
 80094ac:	73fb      	strb	r3, [r7, #15]
    break;
 80094ae:	e002      	b.n	80094b6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80094b0:	2303      	movs	r3, #3
 80094b2:	73fb      	strb	r3, [r7, #15]
    break;
 80094b4:	bf00      	nop
  }
  return usb_status;
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b086      	sub	sp, #24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	607a      	str	r2, [r7, #4]
 80094ca:	603b      	str	r3, [r7, #0]
 80094cc:	460b      	mov	r3, r1
 80094ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094d0:	2300      	movs	r3, #0
 80094d2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80094de:	7af9      	ldrb	r1, [r7, #11]
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	f7f9 f853 	bl	800258e <HAL_PCD_EP_Transmit>
 80094e8:	4603      	mov	r3, r0
 80094ea:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80094ec:	7dbb      	ldrb	r3, [r7, #22]
 80094ee:	2b03      	cmp	r3, #3
 80094f0:	d816      	bhi.n	8009520 <USBD_LL_Transmit+0x60>
 80094f2:	a201      	add	r2, pc, #4	; (adr r2, 80094f8 <USBD_LL_Transmit+0x38>)
 80094f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f8:	08009509 	.word	0x08009509
 80094fc:	0800950f 	.word	0x0800950f
 8009500:	08009515 	.word	0x08009515
 8009504:	0800951b 	.word	0x0800951b
    case HAL_OK :
      usb_status = USBD_OK;
 8009508:	2300      	movs	r3, #0
 800950a:	75fb      	strb	r3, [r7, #23]
    break;
 800950c:	e00b      	b.n	8009526 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800950e:	2303      	movs	r3, #3
 8009510:	75fb      	strb	r3, [r7, #23]
    break;
 8009512:	e008      	b.n	8009526 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009514:	2301      	movs	r3, #1
 8009516:	75fb      	strb	r3, [r7, #23]
    break;
 8009518:	e005      	b.n	8009526 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800951a:	2303      	movs	r3, #3
 800951c:	75fb      	strb	r3, [r7, #23]
    break;
 800951e:	e002      	b.n	8009526 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8009520:	2303      	movs	r3, #3
 8009522:	75fb      	strb	r3, [r7, #23]
    break;
 8009524:	bf00      	nop
  }
  return usb_status;
 8009526:	7dfb      	ldrb	r3, [r7, #23]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3718      	adds	r7, #24
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	607a      	str	r2, [r7, #4]
 800953a:	603b      	str	r3, [r7, #0]
 800953c:	460b      	mov	r3, r1
 800953e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009540:	2300      	movs	r3, #0
 8009542:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800954e:	7af9      	ldrb	r1, [r7, #11]
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	f7f8 ffc5 	bl	80024e2 <HAL_PCD_EP_Receive>
 8009558:	4603      	mov	r3, r0
 800955a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800955c:	7dbb      	ldrb	r3, [r7, #22]
 800955e:	2b03      	cmp	r3, #3
 8009560:	d816      	bhi.n	8009590 <USBD_LL_PrepareReceive+0x60>
 8009562:	a201      	add	r2, pc, #4	; (adr r2, 8009568 <USBD_LL_PrepareReceive+0x38>)
 8009564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009568:	08009579 	.word	0x08009579
 800956c:	0800957f 	.word	0x0800957f
 8009570:	08009585 	.word	0x08009585
 8009574:	0800958b 	.word	0x0800958b
    case HAL_OK :
      usb_status = USBD_OK;
 8009578:	2300      	movs	r3, #0
 800957a:	75fb      	strb	r3, [r7, #23]
    break;
 800957c:	e00b      	b.n	8009596 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800957e:	2303      	movs	r3, #3
 8009580:	75fb      	strb	r3, [r7, #23]
    break;
 8009582:	e008      	b.n	8009596 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009584:	2301      	movs	r3, #1
 8009586:	75fb      	strb	r3, [r7, #23]
    break;
 8009588:	e005      	b.n	8009596 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800958a:	2303      	movs	r3, #3
 800958c:	75fb      	strb	r3, [r7, #23]
    break;
 800958e:	e002      	b.n	8009596 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8009590:	2303      	movs	r3, #3
 8009592:	75fb      	strb	r3, [r7, #23]
    break;
 8009594:	bf00      	nop
  }
  return usb_status;
 8009596:	7dfb      	ldrb	r3, [r7, #23]
}
 8009598:	4618      	mov	r0, r3
 800959a:	3718      	adds	r7, #24
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	460b      	mov	r3, r1
 80095aa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095b2:	78fa      	ldrb	r2, [r7, #3]
 80095b4:	4611      	mov	r1, r2
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7f8 ffd1 	bl	800255e <HAL_PCD_EP_GetRxCount>
 80095bc:	4603      	mov	r3, r0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
	...

080095c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	460b      	mov	r3, r1
 80095d2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80095d4:	78fb      	ldrb	r3, [r7, #3]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d002      	beq.n	80095e0 <HAL_PCDEx_LPM_Callback+0x18>
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d013      	beq.n	8009606 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80095de:	e023      	b.n	8009628 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d007      	beq.n	80095f8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80095e8:	f000 f83c 	bl	8009664 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095ec:	4b10      	ldr	r3, [pc, #64]	; (8009630 <HAL_PCDEx_LPM_Callback+0x68>)
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	4a0f      	ldr	r2, [pc, #60]	; (8009630 <HAL_PCDEx_LPM_Callback+0x68>)
 80095f2:	f023 0306 	bic.w	r3, r3, #6
 80095f6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fe fbe2 	bl	8007dc8 <USBD_LL_Resume>
    break;
 8009604:	e010      	b.n	8009628 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800960c:	4618      	mov	r0, r3
 800960e:	f7fe fbc5 	bl	8007d9c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d005      	beq.n	8009626 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800961a:	4b05      	ldr	r3, [pc, #20]	; (8009630 <HAL_PCDEx_LPM_Callback+0x68>)
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	4a04      	ldr	r2, [pc, #16]	; (8009630 <HAL_PCDEx_LPM_Callback+0x68>)
 8009620:	f043 0306 	orr.w	r3, r3, #6
 8009624:	6113      	str	r3, [r2, #16]
    break;
 8009626:	bf00      	nop
}
 8009628:	bf00      	nop
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	e000ed00 	.word	0xe000ed00

08009634 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800963c:	4b03      	ldr	r3, [pc, #12]	; (800964c <USBD_static_malloc+0x18>)
}
 800963e:	4618      	mov	r0, r3
 8009640:	370c      	adds	r7, #12
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	2000121c 	.word	0x2000121c

08009650 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]

}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009668:	f7f6 fe40 	bl	80002ec <SystemClock_Config>
}
 800966c:	bf00      	nop
 800966e:	bd80      	pop	{r7, pc}

08009670 <__errno>:
 8009670:	4b01      	ldr	r3, [pc, #4]	; (8009678 <__errno+0x8>)
 8009672:	6818      	ldr	r0, [r3, #0]
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	20000190 	.word	0x20000190

0800967c <__libc_init_array>:
 800967c:	b570      	push	{r4, r5, r6, lr}
 800967e:	4d0d      	ldr	r5, [pc, #52]	; (80096b4 <__libc_init_array+0x38>)
 8009680:	4c0d      	ldr	r4, [pc, #52]	; (80096b8 <__libc_init_array+0x3c>)
 8009682:	1b64      	subs	r4, r4, r5
 8009684:	10a4      	asrs	r4, r4, #2
 8009686:	2600      	movs	r6, #0
 8009688:	42a6      	cmp	r6, r4
 800968a:	d109      	bne.n	80096a0 <__libc_init_array+0x24>
 800968c:	4d0b      	ldr	r5, [pc, #44]	; (80096bc <__libc_init_array+0x40>)
 800968e:	4c0c      	ldr	r4, [pc, #48]	; (80096c0 <__libc_init_array+0x44>)
 8009690:	f000 fc8e 	bl	8009fb0 <_init>
 8009694:	1b64      	subs	r4, r4, r5
 8009696:	10a4      	asrs	r4, r4, #2
 8009698:	2600      	movs	r6, #0
 800969a:	42a6      	cmp	r6, r4
 800969c:	d105      	bne.n	80096aa <__libc_init_array+0x2e>
 800969e:	bd70      	pop	{r4, r5, r6, pc}
 80096a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80096a4:	4798      	blx	r3
 80096a6:	3601      	adds	r6, #1
 80096a8:	e7ee      	b.n	8009688 <__libc_init_array+0xc>
 80096aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ae:	4798      	blx	r3
 80096b0:	3601      	adds	r6, #1
 80096b2:	e7f2      	b.n	800969a <__libc_init_array+0x1e>
 80096b4:	0800a08c 	.word	0x0800a08c
 80096b8:	0800a08c 	.word	0x0800a08c
 80096bc:	0800a08c 	.word	0x0800a08c
 80096c0:	0800a090 	.word	0x0800a090

080096c4 <memset>:
 80096c4:	4402      	add	r2, r0
 80096c6:	4603      	mov	r3, r0
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d100      	bne.n	80096ce <memset+0xa>
 80096cc:	4770      	bx	lr
 80096ce:	f803 1b01 	strb.w	r1, [r3], #1
 80096d2:	e7f9      	b.n	80096c8 <memset+0x4>

080096d4 <siprintf>:
 80096d4:	b40e      	push	{r1, r2, r3}
 80096d6:	b500      	push	{lr}
 80096d8:	b09c      	sub	sp, #112	; 0x70
 80096da:	ab1d      	add	r3, sp, #116	; 0x74
 80096dc:	9002      	str	r0, [sp, #8]
 80096de:	9006      	str	r0, [sp, #24]
 80096e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096e4:	4809      	ldr	r0, [pc, #36]	; (800970c <siprintf+0x38>)
 80096e6:	9107      	str	r1, [sp, #28]
 80096e8:	9104      	str	r1, [sp, #16]
 80096ea:	4909      	ldr	r1, [pc, #36]	; (8009710 <siprintf+0x3c>)
 80096ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80096f0:	9105      	str	r1, [sp, #20]
 80096f2:	6800      	ldr	r0, [r0, #0]
 80096f4:	9301      	str	r3, [sp, #4]
 80096f6:	a902      	add	r1, sp, #8
 80096f8:	f000 f868 	bl	80097cc <_svfiprintf_r>
 80096fc:	9b02      	ldr	r3, [sp, #8]
 80096fe:	2200      	movs	r2, #0
 8009700:	701a      	strb	r2, [r3, #0]
 8009702:	b01c      	add	sp, #112	; 0x70
 8009704:	f85d eb04 	ldr.w	lr, [sp], #4
 8009708:	b003      	add	sp, #12
 800970a:	4770      	bx	lr
 800970c:	20000190 	.word	0x20000190
 8009710:	ffff0208 	.word	0xffff0208

08009714 <__ssputs_r>:
 8009714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009718:	688e      	ldr	r6, [r1, #8]
 800971a:	429e      	cmp	r6, r3
 800971c:	4682      	mov	sl, r0
 800971e:	460c      	mov	r4, r1
 8009720:	4690      	mov	r8, r2
 8009722:	461f      	mov	r7, r3
 8009724:	d838      	bhi.n	8009798 <__ssputs_r+0x84>
 8009726:	898a      	ldrh	r2, [r1, #12]
 8009728:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800972c:	d032      	beq.n	8009794 <__ssputs_r+0x80>
 800972e:	6825      	ldr	r5, [r4, #0]
 8009730:	6909      	ldr	r1, [r1, #16]
 8009732:	eba5 0901 	sub.w	r9, r5, r1
 8009736:	6965      	ldr	r5, [r4, #20]
 8009738:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800973c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009740:	3301      	adds	r3, #1
 8009742:	444b      	add	r3, r9
 8009744:	106d      	asrs	r5, r5, #1
 8009746:	429d      	cmp	r5, r3
 8009748:	bf38      	it	cc
 800974a:	461d      	movcc	r5, r3
 800974c:	0553      	lsls	r3, r2, #21
 800974e:	d531      	bpl.n	80097b4 <__ssputs_r+0xa0>
 8009750:	4629      	mov	r1, r5
 8009752:	f000 fb63 	bl	8009e1c <_malloc_r>
 8009756:	4606      	mov	r6, r0
 8009758:	b950      	cbnz	r0, 8009770 <__ssputs_r+0x5c>
 800975a:	230c      	movs	r3, #12
 800975c:	f8ca 3000 	str.w	r3, [sl]
 8009760:	89a3      	ldrh	r3, [r4, #12]
 8009762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009766:	81a3      	strh	r3, [r4, #12]
 8009768:	f04f 30ff 	mov.w	r0, #4294967295
 800976c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009770:	6921      	ldr	r1, [r4, #16]
 8009772:	464a      	mov	r2, r9
 8009774:	f000 fabe 	bl	8009cf4 <memcpy>
 8009778:	89a3      	ldrh	r3, [r4, #12]
 800977a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800977e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009782:	81a3      	strh	r3, [r4, #12]
 8009784:	6126      	str	r6, [r4, #16]
 8009786:	6165      	str	r5, [r4, #20]
 8009788:	444e      	add	r6, r9
 800978a:	eba5 0509 	sub.w	r5, r5, r9
 800978e:	6026      	str	r6, [r4, #0]
 8009790:	60a5      	str	r5, [r4, #8]
 8009792:	463e      	mov	r6, r7
 8009794:	42be      	cmp	r6, r7
 8009796:	d900      	bls.n	800979a <__ssputs_r+0x86>
 8009798:	463e      	mov	r6, r7
 800979a:	6820      	ldr	r0, [r4, #0]
 800979c:	4632      	mov	r2, r6
 800979e:	4641      	mov	r1, r8
 80097a0:	f000 fab6 	bl	8009d10 <memmove>
 80097a4:	68a3      	ldr	r3, [r4, #8]
 80097a6:	1b9b      	subs	r3, r3, r6
 80097a8:	60a3      	str	r3, [r4, #8]
 80097aa:	6823      	ldr	r3, [r4, #0]
 80097ac:	4433      	add	r3, r6
 80097ae:	6023      	str	r3, [r4, #0]
 80097b0:	2000      	movs	r0, #0
 80097b2:	e7db      	b.n	800976c <__ssputs_r+0x58>
 80097b4:	462a      	mov	r2, r5
 80097b6:	f000 fba5 	bl	8009f04 <_realloc_r>
 80097ba:	4606      	mov	r6, r0
 80097bc:	2800      	cmp	r0, #0
 80097be:	d1e1      	bne.n	8009784 <__ssputs_r+0x70>
 80097c0:	6921      	ldr	r1, [r4, #16]
 80097c2:	4650      	mov	r0, sl
 80097c4:	f000 fabe 	bl	8009d44 <_free_r>
 80097c8:	e7c7      	b.n	800975a <__ssputs_r+0x46>
	...

080097cc <_svfiprintf_r>:
 80097cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d0:	4698      	mov	r8, r3
 80097d2:	898b      	ldrh	r3, [r1, #12]
 80097d4:	061b      	lsls	r3, r3, #24
 80097d6:	b09d      	sub	sp, #116	; 0x74
 80097d8:	4607      	mov	r7, r0
 80097da:	460d      	mov	r5, r1
 80097dc:	4614      	mov	r4, r2
 80097de:	d50e      	bpl.n	80097fe <_svfiprintf_r+0x32>
 80097e0:	690b      	ldr	r3, [r1, #16]
 80097e2:	b963      	cbnz	r3, 80097fe <_svfiprintf_r+0x32>
 80097e4:	2140      	movs	r1, #64	; 0x40
 80097e6:	f000 fb19 	bl	8009e1c <_malloc_r>
 80097ea:	6028      	str	r0, [r5, #0]
 80097ec:	6128      	str	r0, [r5, #16]
 80097ee:	b920      	cbnz	r0, 80097fa <_svfiprintf_r+0x2e>
 80097f0:	230c      	movs	r3, #12
 80097f2:	603b      	str	r3, [r7, #0]
 80097f4:	f04f 30ff 	mov.w	r0, #4294967295
 80097f8:	e0d1      	b.n	800999e <_svfiprintf_r+0x1d2>
 80097fa:	2340      	movs	r3, #64	; 0x40
 80097fc:	616b      	str	r3, [r5, #20]
 80097fe:	2300      	movs	r3, #0
 8009800:	9309      	str	r3, [sp, #36]	; 0x24
 8009802:	2320      	movs	r3, #32
 8009804:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009808:	f8cd 800c 	str.w	r8, [sp, #12]
 800980c:	2330      	movs	r3, #48	; 0x30
 800980e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80099b8 <_svfiprintf_r+0x1ec>
 8009812:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009816:	f04f 0901 	mov.w	r9, #1
 800981a:	4623      	mov	r3, r4
 800981c:	469a      	mov	sl, r3
 800981e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009822:	b10a      	cbz	r2, 8009828 <_svfiprintf_r+0x5c>
 8009824:	2a25      	cmp	r2, #37	; 0x25
 8009826:	d1f9      	bne.n	800981c <_svfiprintf_r+0x50>
 8009828:	ebba 0b04 	subs.w	fp, sl, r4
 800982c:	d00b      	beq.n	8009846 <_svfiprintf_r+0x7a>
 800982e:	465b      	mov	r3, fp
 8009830:	4622      	mov	r2, r4
 8009832:	4629      	mov	r1, r5
 8009834:	4638      	mov	r0, r7
 8009836:	f7ff ff6d 	bl	8009714 <__ssputs_r>
 800983a:	3001      	adds	r0, #1
 800983c:	f000 80aa 	beq.w	8009994 <_svfiprintf_r+0x1c8>
 8009840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009842:	445a      	add	r2, fp
 8009844:	9209      	str	r2, [sp, #36]	; 0x24
 8009846:	f89a 3000 	ldrb.w	r3, [sl]
 800984a:	2b00      	cmp	r3, #0
 800984c:	f000 80a2 	beq.w	8009994 <_svfiprintf_r+0x1c8>
 8009850:	2300      	movs	r3, #0
 8009852:	f04f 32ff 	mov.w	r2, #4294967295
 8009856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800985a:	f10a 0a01 	add.w	sl, sl, #1
 800985e:	9304      	str	r3, [sp, #16]
 8009860:	9307      	str	r3, [sp, #28]
 8009862:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009866:	931a      	str	r3, [sp, #104]	; 0x68
 8009868:	4654      	mov	r4, sl
 800986a:	2205      	movs	r2, #5
 800986c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009870:	4851      	ldr	r0, [pc, #324]	; (80099b8 <_svfiprintf_r+0x1ec>)
 8009872:	f7f6 fcb5 	bl	80001e0 <memchr>
 8009876:	9a04      	ldr	r2, [sp, #16]
 8009878:	b9d8      	cbnz	r0, 80098b2 <_svfiprintf_r+0xe6>
 800987a:	06d0      	lsls	r0, r2, #27
 800987c:	bf44      	itt	mi
 800987e:	2320      	movmi	r3, #32
 8009880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009884:	0711      	lsls	r1, r2, #28
 8009886:	bf44      	itt	mi
 8009888:	232b      	movmi	r3, #43	; 0x2b
 800988a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800988e:	f89a 3000 	ldrb.w	r3, [sl]
 8009892:	2b2a      	cmp	r3, #42	; 0x2a
 8009894:	d015      	beq.n	80098c2 <_svfiprintf_r+0xf6>
 8009896:	9a07      	ldr	r2, [sp, #28]
 8009898:	4654      	mov	r4, sl
 800989a:	2000      	movs	r0, #0
 800989c:	f04f 0c0a 	mov.w	ip, #10
 80098a0:	4621      	mov	r1, r4
 80098a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098a6:	3b30      	subs	r3, #48	; 0x30
 80098a8:	2b09      	cmp	r3, #9
 80098aa:	d94e      	bls.n	800994a <_svfiprintf_r+0x17e>
 80098ac:	b1b0      	cbz	r0, 80098dc <_svfiprintf_r+0x110>
 80098ae:	9207      	str	r2, [sp, #28]
 80098b0:	e014      	b.n	80098dc <_svfiprintf_r+0x110>
 80098b2:	eba0 0308 	sub.w	r3, r0, r8
 80098b6:	fa09 f303 	lsl.w	r3, r9, r3
 80098ba:	4313      	orrs	r3, r2
 80098bc:	9304      	str	r3, [sp, #16]
 80098be:	46a2      	mov	sl, r4
 80098c0:	e7d2      	b.n	8009868 <_svfiprintf_r+0x9c>
 80098c2:	9b03      	ldr	r3, [sp, #12]
 80098c4:	1d19      	adds	r1, r3, #4
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	9103      	str	r1, [sp, #12]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	bfbb      	ittet	lt
 80098ce:	425b      	neglt	r3, r3
 80098d0:	f042 0202 	orrlt.w	r2, r2, #2
 80098d4:	9307      	strge	r3, [sp, #28]
 80098d6:	9307      	strlt	r3, [sp, #28]
 80098d8:	bfb8      	it	lt
 80098da:	9204      	strlt	r2, [sp, #16]
 80098dc:	7823      	ldrb	r3, [r4, #0]
 80098de:	2b2e      	cmp	r3, #46	; 0x2e
 80098e0:	d10c      	bne.n	80098fc <_svfiprintf_r+0x130>
 80098e2:	7863      	ldrb	r3, [r4, #1]
 80098e4:	2b2a      	cmp	r3, #42	; 0x2a
 80098e6:	d135      	bne.n	8009954 <_svfiprintf_r+0x188>
 80098e8:	9b03      	ldr	r3, [sp, #12]
 80098ea:	1d1a      	adds	r2, r3, #4
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	9203      	str	r2, [sp, #12]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	bfb8      	it	lt
 80098f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80098f8:	3402      	adds	r4, #2
 80098fa:	9305      	str	r3, [sp, #20]
 80098fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80099c8 <_svfiprintf_r+0x1fc>
 8009900:	7821      	ldrb	r1, [r4, #0]
 8009902:	2203      	movs	r2, #3
 8009904:	4650      	mov	r0, sl
 8009906:	f7f6 fc6b 	bl	80001e0 <memchr>
 800990a:	b140      	cbz	r0, 800991e <_svfiprintf_r+0x152>
 800990c:	2340      	movs	r3, #64	; 0x40
 800990e:	eba0 000a 	sub.w	r0, r0, sl
 8009912:	fa03 f000 	lsl.w	r0, r3, r0
 8009916:	9b04      	ldr	r3, [sp, #16]
 8009918:	4303      	orrs	r3, r0
 800991a:	3401      	adds	r4, #1
 800991c:	9304      	str	r3, [sp, #16]
 800991e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009922:	4826      	ldr	r0, [pc, #152]	; (80099bc <_svfiprintf_r+0x1f0>)
 8009924:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009928:	2206      	movs	r2, #6
 800992a:	f7f6 fc59 	bl	80001e0 <memchr>
 800992e:	2800      	cmp	r0, #0
 8009930:	d038      	beq.n	80099a4 <_svfiprintf_r+0x1d8>
 8009932:	4b23      	ldr	r3, [pc, #140]	; (80099c0 <_svfiprintf_r+0x1f4>)
 8009934:	bb1b      	cbnz	r3, 800997e <_svfiprintf_r+0x1b2>
 8009936:	9b03      	ldr	r3, [sp, #12]
 8009938:	3307      	adds	r3, #7
 800993a:	f023 0307 	bic.w	r3, r3, #7
 800993e:	3308      	adds	r3, #8
 8009940:	9303      	str	r3, [sp, #12]
 8009942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009944:	4433      	add	r3, r6
 8009946:	9309      	str	r3, [sp, #36]	; 0x24
 8009948:	e767      	b.n	800981a <_svfiprintf_r+0x4e>
 800994a:	fb0c 3202 	mla	r2, ip, r2, r3
 800994e:	460c      	mov	r4, r1
 8009950:	2001      	movs	r0, #1
 8009952:	e7a5      	b.n	80098a0 <_svfiprintf_r+0xd4>
 8009954:	2300      	movs	r3, #0
 8009956:	3401      	adds	r4, #1
 8009958:	9305      	str	r3, [sp, #20]
 800995a:	4619      	mov	r1, r3
 800995c:	f04f 0c0a 	mov.w	ip, #10
 8009960:	4620      	mov	r0, r4
 8009962:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009966:	3a30      	subs	r2, #48	; 0x30
 8009968:	2a09      	cmp	r2, #9
 800996a:	d903      	bls.n	8009974 <_svfiprintf_r+0x1a8>
 800996c:	2b00      	cmp	r3, #0
 800996e:	d0c5      	beq.n	80098fc <_svfiprintf_r+0x130>
 8009970:	9105      	str	r1, [sp, #20]
 8009972:	e7c3      	b.n	80098fc <_svfiprintf_r+0x130>
 8009974:	fb0c 2101 	mla	r1, ip, r1, r2
 8009978:	4604      	mov	r4, r0
 800997a:	2301      	movs	r3, #1
 800997c:	e7f0      	b.n	8009960 <_svfiprintf_r+0x194>
 800997e:	ab03      	add	r3, sp, #12
 8009980:	9300      	str	r3, [sp, #0]
 8009982:	462a      	mov	r2, r5
 8009984:	4b0f      	ldr	r3, [pc, #60]	; (80099c4 <_svfiprintf_r+0x1f8>)
 8009986:	a904      	add	r1, sp, #16
 8009988:	4638      	mov	r0, r7
 800998a:	f3af 8000 	nop.w
 800998e:	1c42      	adds	r2, r0, #1
 8009990:	4606      	mov	r6, r0
 8009992:	d1d6      	bne.n	8009942 <_svfiprintf_r+0x176>
 8009994:	89ab      	ldrh	r3, [r5, #12]
 8009996:	065b      	lsls	r3, r3, #25
 8009998:	f53f af2c 	bmi.w	80097f4 <_svfiprintf_r+0x28>
 800999c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800999e:	b01d      	add	sp, #116	; 0x74
 80099a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a4:	ab03      	add	r3, sp, #12
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	462a      	mov	r2, r5
 80099aa:	4b06      	ldr	r3, [pc, #24]	; (80099c4 <_svfiprintf_r+0x1f8>)
 80099ac:	a904      	add	r1, sp, #16
 80099ae:	4638      	mov	r0, r7
 80099b0:	f000 f87a 	bl	8009aa8 <_printf_i>
 80099b4:	e7eb      	b.n	800998e <_svfiprintf_r+0x1c2>
 80099b6:	bf00      	nop
 80099b8:	0800a058 	.word	0x0800a058
 80099bc:	0800a062 	.word	0x0800a062
 80099c0:	00000000 	.word	0x00000000
 80099c4:	08009715 	.word	0x08009715
 80099c8:	0800a05e 	.word	0x0800a05e

080099cc <_printf_common>:
 80099cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099d0:	4616      	mov	r6, r2
 80099d2:	4699      	mov	r9, r3
 80099d4:	688a      	ldr	r2, [r1, #8]
 80099d6:	690b      	ldr	r3, [r1, #16]
 80099d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099dc:	4293      	cmp	r3, r2
 80099de:	bfb8      	it	lt
 80099e0:	4613      	movlt	r3, r2
 80099e2:	6033      	str	r3, [r6, #0]
 80099e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099e8:	4607      	mov	r7, r0
 80099ea:	460c      	mov	r4, r1
 80099ec:	b10a      	cbz	r2, 80099f2 <_printf_common+0x26>
 80099ee:	3301      	adds	r3, #1
 80099f0:	6033      	str	r3, [r6, #0]
 80099f2:	6823      	ldr	r3, [r4, #0]
 80099f4:	0699      	lsls	r1, r3, #26
 80099f6:	bf42      	ittt	mi
 80099f8:	6833      	ldrmi	r3, [r6, #0]
 80099fa:	3302      	addmi	r3, #2
 80099fc:	6033      	strmi	r3, [r6, #0]
 80099fe:	6825      	ldr	r5, [r4, #0]
 8009a00:	f015 0506 	ands.w	r5, r5, #6
 8009a04:	d106      	bne.n	8009a14 <_printf_common+0x48>
 8009a06:	f104 0a19 	add.w	sl, r4, #25
 8009a0a:	68e3      	ldr	r3, [r4, #12]
 8009a0c:	6832      	ldr	r2, [r6, #0]
 8009a0e:	1a9b      	subs	r3, r3, r2
 8009a10:	42ab      	cmp	r3, r5
 8009a12:	dc26      	bgt.n	8009a62 <_printf_common+0x96>
 8009a14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a18:	1e13      	subs	r3, r2, #0
 8009a1a:	6822      	ldr	r2, [r4, #0]
 8009a1c:	bf18      	it	ne
 8009a1e:	2301      	movne	r3, #1
 8009a20:	0692      	lsls	r2, r2, #26
 8009a22:	d42b      	bmi.n	8009a7c <_printf_common+0xb0>
 8009a24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a28:	4649      	mov	r1, r9
 8009a2a:	4638      	mov	r0, r7
 8009a2c:	47c0      	blx	r8
 8009a2e:	3001      	adds	r0, #1
 8009a30:	d01e      	beq.n	8009a70 <_printf_common+0xa4>
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	68e5      	ldr	r5, [r4, #12]
 8009a36:	6832      	ldr	r2, [r6, #0]
 8009a38:	f003 0306 	and.w	r3, r3, #6
 8009a3c:	2b04      	cmp	r3, #4
 8009a3e:	bf08      	it	eq
 8009a40:	1aad      	subeq	r5, r5, r2
 8009a42:	68a3      	ldr	r3, [r4, #8]
 8009a44:	6922      	ldr	r2, [r4, #16]
 8009a46:	bf0c      	ite	eq
 8009a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a4c:	2500      	movne	r5, #0
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	bfc4      	itt	gt
 8009a52:	1a9b      	subgt	r3, r3, r2
 8009a54:	18ed      	addgt	r5, r5, r3
 8009a56:	2600      	movs	r6, #0
 8009a58:	341a      	adds	r4, #26
 8009a5a:	42b5      	cmp	r5, r6
 8009a5c:	d11a      	bne.n	8009a94 <_printf_common+0xc8>
 8009a5e:	2000      	movs	r0, #0
 8009a60:	e008      	b.n	8009a74 <_printf_common+0xa8>
 8009a62:	2301      	movs	r3, #1
 8009a64:	4652      	mov	r2, sl
 8009a66:	4649      	mov	r1, r9
 8009a68:	4638      	mov	r0, r7
 8009a6a:	47c0      	blx	r8
 8009a6c:	3001      	adds	r0, #1
 8009a6e:	d103      	bne.n	8009a78 <_printf_common+0xac>
 8009a70:	f04f 30ff 	mov.w	r0, #4294967295
 8009a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a78:	3501      	adds	r5, #1
 8009a7a:	e7c6      	b.n	8009a0a <_printf_common+0x3e>
 8009a7c:	18e1      	adds	r1, r4, r3
 8009a7e:	1c5a      	adds	r2, r3, #1
 8009a80:	2030      	movs	r0, #48	; 0x30
 8009a82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a86:	4422      	add	r2, r4
 8009a88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a90:	3302      	adds	r3, #2
 8009a92:	e7c7      	b.n	8009a24 <_printf_common+0x58>
 8009a94:	2301      	movs	r3, #1
 8009a96:	4622      	mov	r2, r4
 8009a98:	4649      	mov	r1, r9
 8009a9a:	4638      	mov	r0, r7
 8009a9c:	47c0      	blx	r8
 8009a9e:	3001      	adds	r0, #1
 8009aa0:	d0e6      	beq.n	8009a70 <_printf_common+0xa4>
 8009aa2:	3601      	adds	r6, #1
 8009aa4:	e7d9      	b.n	8009a5a <_printf_common+0x8e>
	...

08009aa8 <_printf_i>:
 8009aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009aac:	7e0f      	ldrb	r7, [r1, #24]
 8009aae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ab0:	2f78      	cmp	r7, #120	; 0x78
 8009ab2:	4691      	mov	r9, r2
 8009ab4:	4680      	mov	r8, r0
 8009ab6:	460c      	mov	r4, r1
 8009ab8:	469a      	mov	sl, r3
 8009aba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009abe:	d807      	bhi.n	8009ad0 <_printf_i+0x28>
 8009ac0:	2f62      	cmp	r7, #98	; 0x62
 8009ac2:	d80a      	bhi.n	8009ada <_printf_i+0x32>
 8009ac4:	2f00      	cmp	r7, #0
 8009ac6:	f000 80d8 	beq.w	8009c7a <_printf_i+0x1d2>
 8009aca:	2f58      	cmp	r7, #88	; 0x58
 8009acc:	f000 80a3 	beq.w	8009c16 <_printf_i+0x16e>
 8009ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ad4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ad8:	e03a      	b.n	8009b50 <_printf_i+0xa8>
 8009ada:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ade:	2b15      	cmp	r3, #21
 8009ae0:	d8f6      	bhi.n	8009ad0 <_printf_i+0x28>
 8009ae2:	a101      	add	r1, pc, #4	; (adr r1, 8009ae8 <_printf_i+0x40>)
 8009ae4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ae8:	08009b41 	.word	0x08009b41
 8009aec:	08009b55 	.word	0x08009b55
 8009af0:	08009ad1 	.word	0x08009ad1
 8009af4:	08009ad1 	.word	0x08009ad1
 8009af8:	08009ad1 	.word	0x08009ad1
 8009afc:	08009ad1 	.word	0x08009ad1
 8009b00:	08009b55 	.word	0x08009b55
 8009b04:	08009ad1 	.word	0x08009ad1
 8009b08:	08009ad1 	.word	0x08009ad1
 8009b0c:	08009ad1 	.word	0x08009ad1
 8009b10:	08009ad1 	.word	0x08009ad1
 8009b14:	08009c61 	.word	0x08009c61
 8009b18:	08009b85 	.word	0x08009b85
 8009b1c:	08009c43 	.word	0x08009c43
 8009b20:	08009ad1 	.word	0x08009ad1
 8009b24:	08009ad1 	.word	0x08009ad1
 8009b28:	08009c83 	.word	0x08009c83
 8009b2c:	08009ad1 	.word	0x08009ad1
 8009b30:	08009b85 	.word	0x08009b85
 8009b34:	08009ad1 	.word	0x08009ad1
 8009b38:	08009ad1 	.word	0x08009ad1
 8009b3c:	08009c4b 	.word	0x08009c4b
 8009b40:	682b      	ldr	r3, [r5, #0]
 8009b42:	1d1a      	adds	r2, r3, #4
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	602a      	str	r2, [r5, #0]
 8009b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b50:	2301      	movs	r3, #1
 8009b52:	e0a3      	b.n	8009c9c <_printf_i+0x1f4>
 8009b54:	6820      	ldr	r0, [r4, #0]
 8009b56:	6829      	ldr	r1, [r5, #0]
 8009b58:	0606      	lsls	r6, r0, #24
 8009b5a:	f101 0304 	add.w	r3, r1, #4
 8009b5e:	d50a      	bpl.n	8009b76 <_printf_i+0xce>
 8009b60:	680e      	ldr	r6, [r1, #0]
 8009b62:	602b      	str	r3, [r5, #0]
 8009b64:	2e00      	cmp	r6, #0
 8009b66:	da03      	bge.n	8009b70 <_printf_i+0xc8>
 8009b68:	232d      	movs	r3, #45	; 0x2d
 8009b6a:	4276      	negs	r6, r6
 8009b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b70:	485e      	ldr	r0, [pc, #376]	; (8009cec <_printf_i+0x244>)
 8009b72:	230a      	movs	r3, #10
 8009b74:	e019      	b.n	8009baa <_printf_i+0x102>
 8009b76:	680e      	ldr	r6, [r1, #0]
 8009b78:	602b      	str	r3, [r5, #0]
 8009b7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b7e:	bf18      	it	ne
 8009b80:	b236      	sxthne	r6, r6
 8009b82:	e7ef      	b.n	8009b64 <_printf_i+0xbc>
 8009b84:	682b      	ldr	r3, [r5, #0]
 8009b86:	6820      	ldr	r0, [r4, #0]
 8009b88:	1d19      	adds	r1, r3, #4
 8009b8a:	6029      	str	r1, [r5, #0]
 8009b8c:	0601      	lsls	r1, r0, #24
 8009b8e:	d501      	bpl.n	8009b94 <_printf_i+0xec>
 8009b90:	681e      	ldr	r6, [r3, #0]
 8009b92:	e002      	b.n	8009b9a <_printf_i+0xf2>
 8009b94:	0646      	lsls	r6, r0, #25
 8009b96:	d5fb      	bpl.n	8009b90 <_printf_i+0xe8>
 8009b98:	881e      	ldrh	r6, [r3, #0]
 8009b9a:	4854      	ldr	r0, [pc, #336]	; (8009cec <_printf_i+0x244>)
 8009b9c:	2f6f      	cmp	r7, #111	; 0x6f
 8009b9e:	bf0c      	ite	eq
 8009ba0:	2308      	moveq	r3, #8
 8009ba2:	230a      	movne	r3, #10
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009baa:	6865      	ldr	r5, [r4, #4]
 8009bac:	60a5      	str	r5, [r4, #8]
 8009bae:	2d00      	cmp	r5, #0
 8009bb0:	bfa2      	ittt	ge
 8009bb2:	6821      	ldrge	r1, [r4, #0]
 8009bb4:	f021 0104 	bicge.w	r1, r1, #4
 8009bb8:	6021      	strge	r1, [r4, #0]
 8009bba:	b90e      	cbnz	r6, 8009bc0 <_printf_i+0x118>
 8009bbc:	2d00      	cmp	r5, #0
 8009bbe:	d04d      	beq.n	8009c5c <_printf_i+0x1b4>
 8009bc0:	4615      	mov	r5, r2
 8009bc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009bc6:	fb03 6711 	mls	r7, r3, r1, r6
 8009bca:	5dc7      	ldrb	r7, [r0, r7]
 8009bcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009bd0:	4637      	mov	r7, r6
 8009bd2:	42bb      	cmp	r3, r7
 8009bd4:	460e      	mov	r6, r1
 8009bd6:	d9f4      	bls.n	8009bc2 <_printf_i+0x11a>
 8009bd8:	2b08      	cmp	r3, #8
 8009bda:	d10b      	bne.n	8009bf4 <_printf_i+0x14c>
 8009bdc:	6823      	ldr	r3, [r4, #0]
 8009bde:	07de      	lsls	r6, r3, #31
 8009be0:	d508      	bpl.n	8009bf4 <_printf_i+0x14c>
 8009be2:	6923      	ldr	r3, [r4, #16]
 8009be4:	6861      	ldr	r1, [r4, #4]
 8009be6:	4299      	cmp	r1, r3
 8009be8:	bfde      	ittt	le
 8009bea:	2330      	movle	r3, #48	; 0x30
 8009bec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009bf0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009bf4:	1b52      	subs	r2, r2, r5
 8009bf6:	6122      	str	r2, [r4, #16]
 8009bf8:	f8cd a000 	str.w	sl, [sp]
 8009bfc:	464b      	mov	r3, r9
 8009bfe:	aa03      	add	r2, sp, #12
 8009c00:	4621      	mov	r1, r4
 8009c02:	4640      	mov	r0, r8
 8009c04:	f7ff fee2 	bl	80099cc <_printf_common>
 8009c08:	3001      	adds	r0, #1
 8009c0a:	d14c      	bne.n	8009ca6 <_printf_i+0x1fe>
 8009c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c10:	b004      	add	sp, #16
 8009c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c16:	4835      	ldr	r0, [pc, #212]	; (8009cec <_printf_i+0x244>)
 8009c18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009c1c:	6829      	ldr	r1, [r5, #0]
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c24:	6029      	str	r1, [r5, #0]
 8009c26:	061d      	lsls	r5, r3, #24
 8009c28:	d514      	bpl.n	8009c54 <_printf_i+0x1ac>
 8009c2a:	07df      	lsls	r7, r3, #31
 8009c2c:	bf44      	itt	mi
 8009c2e:	f043 0320 	orrmi.w	r3, r3, #32
 8009c32:	6023      	strmi	r3, [r4, #0]
 8009c34:	b91e      	cbnz	r6, 8009c3e <_printf_i+0x196>
 8009c36:	6823      	ldr	r3, [r4, #0]
 8009c38:	f023 0320 	bic.w	r3, r3, #32
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	2310      	movs	r3, #16
 8009c40:	e7b0      	b.n	8009ba4 <_printf_i+0xfc>
 8009c42:	6823      	ldr	r3, [r4, #0]
 8009c44:	f043 0320 	orr.w	r3, r3, #32
 8009c48:	6023      	str	r3, [r4, #0]
 8009c4a:	2378      	movs	r3, #120	; 0x78
 8009c4c:	4828      	ldr	r0, [pc, #160]	; (8009cf0 <_printf_i+0x248>)
 8009c4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c52:	e7e3      	b.n	8009c1c <_printf_i+0x174>
 8009c54:	0659      	lsls	r1, r3, #25
 8009c56:	bf48      	it	mi
 8009c58:	b2b6      	uxthmi	r6, r6
 8009c5a:	e7e6      	b.n	8009c2a <_printf_i+0x182>
 8009c5c:	4615      	mov	r5, r2
 8009c5e:	e7bb      	b.n	8009bd8 <_printf_i+0x130>
 8009c60:	682b      	ldr	r3, [r5, #0]
 8009c62:	6826      	ldr	r6, [r4, #0]
 8009c64:	6961      	ldr	r1, [r4, #20]
 8009c66:	1d18      	adds	r0, r3, #4
 8009c68:	6028      	str	r0, [r5, #0]
 8009c6a:	0635      	lsls	r5, r6, #24
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	d501      	bpl.n	8009c74 <_printf_i+0x1cc>
 8009c70:	6019      	str	r1, [r3, #0]
 8009c72:	e002      	b.n	8009c7a <_printf_i+0x1d2>
 8009c74:	0670      	lsls	r0, r6, #25
 8009c76:	d5fb      	bpl.n	8009c70 <_printf_i+0x1c8>
 8009c78:	8019      	strh	r1, [r3, #0]
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	6123      	str	r3, [r4, #16]
 8009c7e:	4615      	mov	r5, r2
 8009c80:	e7ba      	b.n	8009bf8 <_printf_i+0x150>
 8009c82:	682b      	ldr	r3, [r5, #0]
 8009c84:	1d1a      	adds	r2, r3, #4
 8009c86:	602a      	str	r2, [r5, #0]
 8009c88:	681d      	ldr	r5, [r3, #0]
 8009c8a:	6862      	ldr	r2, [r4, #4]
 8009c8c:	2100      	movs	r1, #0
 8009c8e:	4628      	mov	r0, r5
 8009c90:	f7f6 faa6 	bl	80001e0 <memchr>
 8009c94:	b108      	cbz	r0, 8009c9a <_printf_i+0x1f2>
 8009c96:	1b40      	subs	r0, r0, r5
 8009c98:	6060      	str	r0, [r4, #4]
 8009c9a:	6863      	ldr	r3, [r4, #4]
 8009c9c:	6123      	str	r3, [r4, #16]
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ca4:	e7a8      	b.n	8009bf8 <_printf_i+0x150>
 8009ca6:	6923      	ldr	r3, [r4, #16]
 8009ca8:	462a      	mov	r2, r5
 8009caa:	4649      	mov	r1, r9
 8009cac:	4640      	mov	r0, r8
 8009cae:	47d0      	blx	sl
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	d0ab      	beq.n	8009c0c <_printf_i+0x164>
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	079b      	lsls	r3, r3, #30
 8009cb8:	d413      	bmi.n	8009ce2 <_printf_i+0x23a>
 8009cba:	68e0      	ldr	r0, [r4, #12]
 8009cbc:	9b03      	ldr	r3, [sp, #12]
 8009cbe:	4298      	cmp	r0, r3
 8009cc0:	bfb8      	it	lt
 8009cc2:	4618      	movlt	r0, r3
 8009cc4:	e7a4      	b.n	8009c10 <_printf_i+0x168>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	4632      	mov	r2, r6
 8009cca:	4649      	mov	r1, r9
 8009ccc:	4640      	mov	r0, r8
 8009cce:	47d0      	blx	sl
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	d09b      	beq.n	8009c0c <_printf_i+0x164>
 8009cd4:	3501      	adds	r5, #1
 8009cd6:	68e3      	ldr	r3, [r4, #12]
 8009cd8:	9903      	ldr	r1, [sp, #12]
 8009cda:	1a5b      	subs	r3, r3, r1
 8009cdc:	42ab      	cmp	r3, r5
 8009cde:	dcf2      	bgt.n	8009cc6 <_printf_i+0x21e>
 8009ce0:	e7eb      	b.n	8009cba <_printf_i+0x212>
 8009ce2:	2500      	movs	r5, #0
 8009ce4:	f104 0619 	add.w	r6, r4, #25
 8009ce8:	e7f5      	b.n	8009cd6 <_printf_i+0x22e>
 8009cea:	bf00      	nop
 8009cec:	0800a069 	.word	0x0800a069
 8009cf0:	0800a07a 	.word	0x0800a07a

08009cf4 <memcpy>:
 8009cf4:	440a      	add	r2, r1
 8009cf6:	4291      	cmp	r1, r2
 8009cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cfc:	d100      	bne.n	8009d00 <memcpy+0xc>
 8009cfe:	4770      	bx	lr
 8009d00:	b510      	push	{r4, lr}
 8009d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d0a:	4291      	cmp	r1, r2
 8009d0c:	d1f9      	bne.n	8009d02 <memcpy+0xe>
 8009d0e:	bd10      	pop	{r4, pc}

08009d10 <memmove>:
 8009d10:	4288      	cmp	r0, r1
 8009d12:	b510      	push	{r4, lr}
 8009d14:	eb01 0402 	add.w	r4, r1, r2
 8009d18:	d902      	bls.n	8009d20 <memmove+0x10>
 8009d1a:	4284      	cmp	r4, r0
 8009d1c:	4623      	mov	r3, r4
 8009d1e:	d807      	bhi.n	8009d30 <memmove+0x20>
 8009d20:	1e43      	subs	r3, r0, #1
 8009d22:	42a1      	cmp	r1, r4
 8009d24:	d008      	beq.n	8009d38 <memmove+0x28>
 8009d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d2e:	e7f8      	b.n	8009d22 <memmove+0x12>
 8009d30:	4402      	add	r2, r0
 8009d32:	4601      	mov	r1, r0
 8009d34:	428a      	cmp	r2, r1
 8009d36:	d100      	bne.n	8009d3a <memmove+0x2a>
 8009d38:	bd10      	pop	{r4, pc}
 8009d3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d42:	e7f7      	b.n	8009d34 <memmove+0x24>

08009d44 <_free_r>:
 8009d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d46:	2900      	cmp	r1, #0
 8009d48:	d044      	beq.n	8009dd4 <_free_r+0x90>
 8009d4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d4e:	9001      	str	r0, [sp, #4]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	f1a1 0404 	sub.w	r4, r1, #4
 8009d56:	bfb8      	it	lt
 8009d58:	18e4      	addlt	r4, r4, r3
 8009d5a:	f000 f913 	bl	8009f84 <__malloc_lock>
 8009d5e:	4a1e      	ldr	r2, [pc, #120]	; (8009dd8 <_free_r+0x94>)
 8009d60:	9801      	ldr	r0, [sp, #4]
 8009d62:	6813      	ldr	r3, [r2, #0]
 8009d64:	b933      	cbnz	r3, 8009d74 <_free_r+0x30>
 8009d66:	6063      	str	r3, [r4, #4]
 8009d68:	6014      	str	r4, [r2, #0]
 8009d6a:	b003      	add	sp, #12
 8009d6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d70:	f000 b90e 	b.w	8009f90 <__malloc_unlock>
 8009d74:	42a3      	cmp	r3, r4
 8009d76:	d908      	bls.n	8009d8a <_free_r+0x46>
 8009d78:	6825      	ldr	r5, [r4, #0]
 8009d7a:	1961      	adds	r1, r4, r5
 8009d7c:	428b      	cmp	r3, r1
 8009d7e:	bf01      	itttt	eq
 8009d80:	6819      	ldreq	r1, [r3, #0]
 8009d82:	685b      	ldreq	r3, [r3, #4]
 8009d84:	1949      	addeq	r1, r1, r5
 8009d86:	6021      	streq	r1, [r4, #0]
 8009d88:	e7ed      	b.n	8009d66 <_free_r+0x22>
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	b10b      	cbz	r3, 8009d94 <_free_r+0x50>
 8009d90:	42a3      	cmp	r3, r4
 8009d92:	d9fa      	bls.n	8009d8a <_free_r+0x46>
 8009d94:	6811      	ldr	r1, [r2, #0]
 8009d96:	1855      	adds	r5, r2, r1
 8009d98:	42a5      	cmp	r5, r4
 8009d9a:	d10b      	bne.n	8009db4 <_free_r+0x70>
 8009d9c:	6824      	ldr	r4, [r4, #0]
 8009d9e:	4421      	add	r1, r4
 8009da0:	1854      	adds	r4, r2, r1
 8009da2:	42a3      	cmp	r3, r4
 8009da4:	6011      	str	r1, [r2, #0]
 8009da6:	d1e0      	bne.n	8009d6a <_free_r+0x26>
 8009da8:	681c      	ldr	r4, [r3, #0]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	6053      	str	r3, [r2, #4]
 8009dae:	4421      	add	r1, r4
 8009db0:	6011      	str	r1, [r2, #0]
 8009db2:	e7da      	b.n	8009d6a <_free_r+0x26>
 8009db4:	d902      	bls.n	8009dbc <_free_r+0x78>
 8009db6:	230c      	movs	r3, #12
 8009db8:	6003      	str	r3, [r0, #0]
 8009dba:	e7d6      	b.n	8009d6a <_free_r+0x26>
 8009dbc:	6825      	ldr	r5, [r4, #0]
 8009dbe:	1961      	adds	r1, r4, r5
 8009dc0:	428b      	cmp	r3, r1
 8009dc2:	bf04      	itt	eq
 8009dc4:	6819      	ldreq	r1, [r3, #0]
 8009dc6:	685b      	ldreq	r3, [r3, #4]
 8009dc8:	6063      	str	r3, [r4, #4]
 8009dca:	bf04      	itt	eq
 8009dcc:	1949      	addeq	r1, r1, r5
 8009dce:	6021      	streq	r1, [r4, #0]
 8009dd0:	6054      	str	r4, [r2, #4]
 8009dd2:	e7ca      	b.n	8009d6a <_free_r+0x26>
 8009dd4:	b003      	add	sp, #12
 8009dd6:	bd30      	pop	{r4, r5, pc}
 8009dd8:	2000143c 	.word	0x2000143c

08009ddc <sbrk_aligned>:
 8009ddc:	b570      	push	{r4, r5, r6, lr}
 8009dde:	4e0e      	ldr	r6, [pc, #56]	; (8009e18 <sbrk_aligned+0x3c>)
 8009de0:	460c      	mov	r4, r1
 8009de2:	6831      	ldr	r1, [r6, #0]
 8009de4:	4605      	mov	r5, r0
 8009de6:	b911      	cbnz	r1, 8009dee <sbrk_aligned+0x12>
 8009de8:	f000 f8bc 	bl	8009f64 <_sbrk_r>
 8009dec:	6030      	str	r0, [r6, #0]
 8009dee:	4621      	mov	r1, r4
 8009df0:	4628      	mov	r0, r5
 8009df2:	f000 f8b7 	bl	8009f64 <_sbrk_r>
 8009df6:	1c43      	adds	r3, r0, #1
 8009df8:	d00a      	beq.n	8009e10 <sbrk_aligned+0x34>
 8009dfa:	1cc4      	adds	r4, r0, #3
 8009dfc:	f024 0403 	bic.w	r4, r4, #3
 8009e00:	42a0      	cmp	r0, r4
 8009e02:	d007      	beq.n	8009e14 <sbrk_aligned+0x38>
 8009e04:	1a21      	subs	r1, r4, r0
 8009e06:	4628      	mov	r0, r5
 8009e08:	f000 f8ac 	bl	8009f64 <_sbrk_r>
 8009e0c:	3001      	adds	r0, #1
 8009e0e:	d101      	bne.n	8009e14 <sbrk_aligned+0x38>
 8009e10:	f04f 34ff 	mov.w	r4, #4294967295
 8009e14:	4620      	mov	r0, r4
 8009e16:	bd70      	pop	{r4, r5, r6, pc}
 8009e18:	20001440 	.word	0x20001440

08009e1c <_malloc_r>:
 8009e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e20:	1ccd      	adds	r5, r1, #3
 8009e22:	f025 0503 	bic.w	r5, r5, #3
 8009e26:	3508      	adds	r5, #8
 8009e28:	2d0c      	cmp	r5, #12
 8009e2a:	bf38      	it	cc
 8009e2c:	250c      	movcc	r5, #12
 8009e2e:	2d00      	cmp	r5, #0
 8009e30:	4607      	mov	r7, r0
 8009e32:	db01      	blt.n	8009e38 <_malloc_r+0x1c>
 8009e34:	42a9      	cmp	r1, r5
 8009e36:	d905      	bls.n	8009e44 <_malloc_r+0x28>
 8009e38:	230c      	movs	r3, #12
 8009e3a:	603b      	str	r3, [r7, #0]
 8009e3c:	2600      	movs	r6, #0
 8009e3e:	4630      	mov	r0, r6
 8009e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e44:	4e2e      	ldr	r6, [pc, #184]	; (8009f00 <_malloc_r+0xe4>)
 8009e46:	f000 f89d 	bl	8009f84 <__malloc_lock>
 8009e4a:	6833      	ldr	r3, [r6, #0]
 8009e4c:	461c      	mov	r4, r3
 8009e4e:	bb34      	cbnz	r4, 8009e9e <_malloc_r+0x82>
 8009e50:	4629      	mov	r1, r5
 8009e52:	4638      	mov	r0, r7
 8009e54:	f7ff ffc2 	bl	8009ddc <sbrk_aligned>
 8009e58:	1c43      	adds	r3, r0, #1
 8009e5a:	4604      	mov	r4, r0
 8009e5c:	d14d      	bne.n	8009efa <_malloc_r+0xde>
 8009e5e:	6834      	ldr	r4, [r6, #0]
 8009e60:	4626      	mov	r6, r4
 8009e62:	2e00      	cmp	r6, #0
 8009e64:	d140      	bne.n	8009ee8 <_malloc_r+0xcc>
 8009e66:	6823      	ldr	r3, [r4, #0]
 8009e68:	4631      	mov	r1, r6
 8009e6a:	4638      	mov	r0, r7
 8009e6c:	eb04 0803 	add.w	r8, r4, r3
 8009e70:	f000 f878 	bl	8009f64 <_sbrk_r>
 8009e74:	4580      	cmp	r8, r0
 8009e76:	d13a      	bne.n	8009eee <_malloc_r+0xd2>
 8009e78:	6821      	ldr	r1, [r4, #0]
 8009e7a:	3503      	adds	r5, #3
 8009e7c:	1a6d      	subs	r5, r5, r1
 8009e7e:	f025 0503 	bic.w	r5, r5, #3
 8009e82:	3508      	adds	r5, #8
 8009e84:	2d0c      	cmp	r5, #12
 8009e86:	bf38      	it	cc
 8009e88:	250c      	movcc	r5, #12
 8009e8a:	4629      	mov	r1, r5
 8009e8c:	4638      	mov	r0, r7
 8009e8e:	f7ff ffa5 	bl	8009ddc <sbrk_aligned>
 8009e92:	3001      	adds	r0, #1
 8009e94:	d02b      	beq.n	8009eee <_malloc_r+0xd2>
 8009e96:	6823      	ldr	r3, [r4, #0]
 8009e98:	442b      	add	r3, r5
 8009e9a:	6023      	str	r3, [r4, #0]
 8009e9c:	e00e      	b.n	8009ebc <_malloc_r+0xa0>
 8009e9e:	6822      	ldr	r2, [r4, #0]
 8009ea0:	1b52      	subs	r2, r2, r5
 8009ea2:	d41e      	bmi.n	8009ee2 <_malloc_r+0xc6>
 8009ea4:	2a0b      	cmp	r2, #11
 8009ea6:	d916      	bls.n	8009ed6 <_malloc_r+0xba>
 8009ea8:	1961      	adds	r1, r4, r5
 8009eaa:	42a3      	cmp	r3, r4
 8009eac:	6025      	str	r5, [r4, #0]
 8009eae:	bf18      	it	ne
 8009eb0:	6059      	strne	r1, [r3, #4]
 8009eb2:	6863      	ldr	r3, [r4, #4]
 8009eb4:	bf08      	it	eq
 8009eb6:	6031      	streq	r1, [r6, #0]
 8009eb8:	5162      	str	r2, [r4, r5]
 8009eba:	604b      	str	r3, [r1, #4]
 8009ebc:	4638      	mov	r0, r7
 8009ebe:	f104 060b 	add.w	r6, r4, #11
 8009ec2:	f000 f865 	bl	8009f90 <__malloc_unlock>
 8009ec6:	f026 0607 	bic.w	r6, r6, #7
 8009eca:	1d23      	adds	r3, r4, #4
 8009ecc:	1af2      	subs	r2, r6, r3
 8009ece:	d0b6      	beq.n	8009e3e <_malloc_r+0x22>
 8009ed0:	1b9b      	subs	r3, r3, r6
 8009ed2:	50a3      	str	r3, [r4, r2]
 8009ed4:	e7b3      	b.n	8009e3e <_malloc_r+0x22>
 8009ed6:	6862      	ldr	r2, [r4, #4]
 8009ed8:	42a3      	cmp	r3, r4
 8009eda:	bf0c      	ite	eq
 8009edc:	6032      	streq	r2, [r6, #0]
 8009ede:	605a      	strne	r2, [r3, #4]
 8009ee0:	e7ec      	b.n	8009ebc <_malloc_r+0xa0>
 8009ee2:	4623      	mov	r3, r4
 8009ee4:	6864      	ldr	r4, [r4, #4]
 8009ee6:	e7b2      	b.n	8009e4e <_malloc_r+0x32>
 8009ee8:	4634      	mov	r4, r6
 8009eea:	6876      	ldr	r6, [r6, #4]
 8009eec:	e7b9      	b.n	8009e62 <_malloc_r+0x46>
 8009eee:	230c      	movs	r3, #12
 8009ef0:	603b      	str	r3, [r7, #0]
 8009ef2:	4638      	mov	r0, r7
 8009ef4:	f000 f84c 	bl	8009f90 <__malloc_unlock>
 8009ef8:	e7a1      	b.n	8009e3e <_malloc_r+0x22>
 8009efa:	6025      	str	r5, [r4, #0]
 8009efc:	e7de      	b.n	8009ebc <_malloc_r+0xa0>
 8009efe:	bf00      	nop
 8009f00:	2000143c 	.word	0x2000143c

08009f04 <_realloc_r>:
 8009f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f08:	4680      	mov	r8, r0
 8009f0a:	4614      	mov	r4, r2
 8009f0c:	460e      	mov	r6, r1
 8009f0e:	b921      	cbnz	r1, 8009f1a <_realloc_r+0x16>
 8009f10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f14:	4611      	mov	r1, r2
 8009f16:	f7ff bf81 	b.w	8009e1c <_malloc_r>
 8009f1a:	b92a      	cbnz	r2, 8009f28 <_realloc_r+0x24>
 8009f1c:	f7ff ff12 	bl	8009d44 <_free_r>
 8009f20:	4625      	mov	r5, r4
 8009f22:	4628      	mov	r0, r5
 8009f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f28:	f000 f838 	bl	8009f9c <_malloc_usable_size_r>
 8009f2c:	4284      	cmp	r4, r0
 8009f2e:	4607      	mov	r7, r0
 8009f30:	d802      	bhi.n	8009f38 <_realloc_r+0x34>
 8009f32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f36:	d812      	bhi.n	8009f5e <_realloc_r+0x5a>
 8009f38:	4621      	mov	r1, r4
 8009f3a:	4640      	mov	r0, r8
 8009f3c:	f7ff ff6e 	bl	8009e1c <_malloc_r>
 8009f40:	4605      	mov	r5, r0
 8009f42:	2800      	cmp	r0, #0
 8009f44:	d0ed      	beq.n	8009f22 <_realloc_r+0x1e>
 8009f46:	42bc      	cmp	r4, r7
 8009f48:	4622      	mov	r2, r4
 8009f4a:	4631      	mov	r1, r6
 8009f4c:	bf28      	it	cs
 8009f4e:	463a      	movcs	r2, r7
 8009f50:	f7ff fed0 	bl	8009cf4 <memcpy>
 8009f54:	4631      	mov	r1, r6
 8009f56:	4640      	mov	r0, r8
 8009f58:	f7ff fef4 	bl	8009d44 <_free_r>
 8009f5c:	e7e1      	b.n	8009f22 <_realloc_r+0x1e>
 8009f5e:	4635      	mov	r5, r6
 8009f60:	e7df      	b.n	8009f22 <_realloc_r+0x1e>
	...

08009f64 <_sbrk_r>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	4d06      	ldr	r5, [pc, #24]	; (8009f80 <_sbrk_r+0x1c>)
 8009f68:	2300      	movs	r3, #0
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	4608      	mov	r0, r1
 8009f6e:	602b      	str	r3, [r5, #0]
 8009f70:	f7f6 fb6c 	bl	800064c <_sbrk>
 8009f74:	1c43      	adds	r3, r0, #1
 8009f76:	d102      	bne.n	8009f7e <_sbrk_r+0x1a>
 8009f78:	682b      	ldr	r3, [r5, #0]
 8009f7a:	b103      	cbz	r3, 8009f7e <_sbrk_r+0x1a>
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	bd38      	pop	{r3, r4, r5, pc}
 8009f80:	20001444 	.word	0x20001444

08009f84 <__malloc_lock>:
 8009f84:	4801      	ldr	r0, [pc, #4]	; (8009f8c <__malloc_lock+0x8>)
 8009f86:	f000 b811 	b.w	8009fac <__retarget_lock_acquire_recursive>
 8009f8a:	bf00      	nop
 8009f8c:	20001448 	.word	0x20001448

08009f90 <__malloc_unlock>:
 8009f90:	4801      	ldr	r0, [pc, #4]	; (8009f98 <__malloc_unlock+0x8>)
 8009f92:	f000 b80c 	b.w	8009fae <__retarget_lock_release_recursive>
 8009f96:	bf00      	nop
 8009f98:	20001448 	.word	0x20001448

08009f9c <_malloc_usable_size_r>:
 8009f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fa0:	1f18      	subs	r0, r3, #4
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	bfbc      	itt	lt
 8009fa6:	580b      	ldrlt	r3, [r1, r0]
 8009fa8:	18c0      	addlt	r0, r0, r3
 8009faa:	4770      	bx	lr

08009fac <__retarget_lock_acquire_recursive>:
 8009fac:	4770      	bx	lr

08009fae <__retarget_lock_release_recursive>:
 8009fae:	4770      	bx	lr

08009fb0 <_init>:
 8009fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb2:	bf00      	nop
 8009fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fb6:	bc08      	pop	{r3}
 8009fb8:	469e      	mov	lr, r3
 8009fba:	4770      	bx	lr

08009fbc <_fini>:
 8009fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fbe:	bf00      	nop
 8009fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fc2:	bc08      	pop	{r3}
 8009fc4:	469e      	mov	lr, r3
 8009fc6:	4770      	bx	lr
