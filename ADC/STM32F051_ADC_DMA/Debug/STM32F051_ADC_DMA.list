
STM32F051_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ba0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003c60  08003c60  00013c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c98  08003c98  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c98  08003c98  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c98  08003c98  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c98  08003c98  00013c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c9c  08003c9c  00013c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000000c  08003cac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08003cac  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0ff  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d79  00000000  00000000  0002e133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  0002feb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00030b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012d32  00000000  00000000  00031798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f28f  00000000  00000000  000444ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073fda  00000000  00000000  00053759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c7733  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e40  00000000  00000000  000c7784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c48 	.word	0x08003c48

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003c48 	.word	0x08003c48

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fc1c 	bl	8000a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f830 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f9f6 	bl	800061c <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 f9d6 	bl	80005e0 <MX_DMA_Init>
  MX_ADC_Init();
 8000234:	f000 f892 	bl	800035c <MX_ADC_Init>
  MX_USART1_UART_Init();
 8000238:	f000 f9a2 	bl	8000580 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800023c:	f000 f8ea 	bl	8000414 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000240:	4b0d      	ldr	r3, [pc, #52]	; (8000278 <main+0x58>)
 8000242:	0018      	movs	r0, r3
 8000244:	f002 f9fa 	bl	800263c <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8000248:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <main+0x58>)
 800024a:	2100      	movs	r1, #0
 800024c:	0018      	movs	r0, r3
 800024e:	f002 fa97 	bl	8002780 <HAL_TIM_OC_Start>
  HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000252:	490a      	ldr	r1, [pc, #40]	; (800027c <main+0x5c>)
 8000254:	4b0a      	ldr	r3, [pc, #40]	; (8000280 <main+0x60>)
 8000256:	220a      	movs	r2, #10
 8000258:	0018      	movs	r0, r3
 800025a:	f000 fda5 	bl	8000da8 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(uartTest == HAL_OK)
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <main+0x64>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d1fb      	bne.n	800025e <main+0x3e>
	  {
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000266:	2380      	movs	r3, #128	; 0x80
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	4a07      	ldr	r2, [pc, #28]	; (8000288 <main+0x68>)
 800026c:	0019      	movs	r1, r3
 800026e:	0010      	movs	r0, r2
 8000270:	f001 fc3d 	bl	8001aee <HAL_GPIO_TogglePin>
	  if(uartTest == HAL_OK)
 8000274:	e7f3      	b.n	800025e <main+0x3e>
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	200000ac 	.word	0x200000ac
 800027c:	2000017c 	.word	0x2000017c
 8000280:	20000028 	.word	0x20000028
 8000284:	20000190 	.word	0x20000190
 8000288:	48000800 	.word	0x48000800

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b590      	push	{r4, r7, lr}
 800028e:	b097      	sub	sp, #92	; 0x5c
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	2428      	movs	r4, #40	; 0x28
 8000294:	193b      	adds	r3, r7, r4
 8000296:	0018      	movs	r0, r3
 8000298:	2330      	movs	r3, #48	; 0x30
 800029a:	001a      	movs	r2, r3
 800029c:	2100      	movs	r1, #0
 800029e:	f003 fccb 	bl	8003c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a2:	2318      	movs	r3, #24
 80002a4:	18fb      	adds	r3, r7, r3
 80002a6:	0018      	movs	r0, r3
 80002a8:	2310      	movs	r3, #16
 80002aa:	001a      	movs	r2, r3
 80002ac:	2100      	movs	r1, #0
 80002ae:	f003 fcc3 	bl	8003c38 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	0018      	movs	r0, r3
 80002b6:	2314      	movs	r3, #20
 80002b8:	001a      	movs	r2, r3
 80002ba:	2100      	movs	r1, #0
 80002bc:	f003 fcbc 	bl	8003c38 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80002c0:	0021      	movs	r1, r4
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2212      	movs	r2, #18
 80002c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2201      	movs	r2, #1
 80002cc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2201      	movs	r2, #1
 80002d2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2210      	movs	r2, #16
 80002d8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2210      	movs	r2, #16
 80002de:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2202      	movs	r2, #2
 80002e4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2200      	movs	r2, #0
 80002ea:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2280      	movs	r2, #128	; 0x80
 80002f0:	0392      	lsls	r2, r2, #14
 80002f2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2200      	movs	r2, #0
 80002f8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	0018      	movs	r0, r3
 80002fe:	f001 fc11 	bl	8001b24 <HAL_RCC_OscConfig>
 8000302:	1e03      	subs	r3, r0, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000306:	f000 fa0d 	bl	8000724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030a:	2118      	movs	r1, #24
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2207      	movs	r2, #7
 8000310:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2202      	movs	r2, #2
 8000316:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2200      	movs	r2, #0
 800031c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2200      	movs	r2, #0
 8000322:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2101      	movs	r1, #1
 8000328:	0018      	movs	r0, r3
 800032a:	f001 ff15 	bl	8002158 <HAL_RCC_ClockConfig>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000332:	f000 f9f7 	bl	8000724 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	2201      	movs	r2, #1
 800033a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	0018      	movs	r0, r3
 8000346:	f002 f84b 	bl	80023e0 <HAL_RCCEx_PeriphCLKConfig>
 800034a:	1e03      	subs	r3, r0, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800034e:	f000 f9e9 	bl	8000724 <Error_Handler>
  }
}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	46bd      	mov	sp, r7
 8000356:	b017      	add	sp, #92	; 0x5c
 8000358:	bd90      	pop	{r4, r7, pc}
	...

0800035c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	0018      	movs	r0, r3
 8000366:	230c      	movs	r3, #12
 8000368:	001a      	movs	r2, r3
 800036a:	2100      	movs	r1, #0
 800036c:	f003 fc64 	bl	8003c38 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000370:	4b26      	ldr	r3, [pc, #152]	; (800040c <MX_ADC_Init+0xb0>)
 8000372:	4a27      	ldr	r2, [pc, #156]	; (8000410 <MX_ADC_Init+0xb4>)
 8000374:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000376:	4b25      	ldr	r3, [pc, #148]	; (800040c <MX_ADC_Init+0xb0>)
 8000378:	2200      	movs	r2, #0
 800037a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800037c:	4b23      	ldr	r3, [pc, #140]	; (800040c <MX_ADC_Init+0xb0>)
 800037e:	2200      	movs	r2, #0
 8000380:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000382:	4b22      	ldr	r3, [pc, #136]	; (800040c <MX_ADC_Init+0xb0>)
 8000384:	2200      	movs	r2, #0
 8000386:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000388:	4b20      	ldr	r3, [pc, #128]	; (800040c <MX_ADC_Init+0xb0>)
 800038a:	2201      	movs	r2, #1
 800038c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800038e:	4b1f      	ldr	r3, [pc, #124]	; (800040c <MX_ADC_Init+0xb0>)
 8000390:	2204      	movs	r2, #4
 8000392:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000394:	4b1d      	ldr	r3, [pc, #116]	; (800040c <MX_ADC_Init+0xb0>)
 8000396:	2200      	movs	r2, #0
 8000398:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800039a:	4b1c      	ldr	r3, [pc, #112]	; (800040c <MX_ADC_Init+0xb0>)
 800039c:	2200      	movs	r2, #0
 800039e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80003a0:	4b1a      	ldr	r3, [pc, #104]	; (800040c <MX_ADC_Init+0xb0>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80003a6:	4b19      	ldr	r3, [pc, #100]	; (800040c <MX_ADC_Init+0xb0>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80003ac:	4b17      	ldr	r3, [pc, #92]	; (800040c <MX_ADC_Init+0xb0>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80003b2:	4b16      	ldr	r3, [pc, #88]	; (800040c <MX_ADC_Init+0xb0>)
 80003b4:	22c0      	movs	r2, #192	; 0xc0
 80003b6:	0112      	lsls	r2, r2, #4
 80003b8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80003ba:	4b14      	ldr	r3, [pc, #80]	; (800040c <MX_ADC_Init+0xb0>)
 80003bc:	2224      	movs	r2, #36	; 0x24
 80003be:	2101      	movs	r1, #1
 80003c0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003c2:	4b12      	ldr	r3, [pc, #72]	; (800040c <MX_ADC_Init+0xb0>)
 80003c4:	2201      	movs	r2, #1
 80003c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003c8:	4b10      	ldr	r3, [pc, #64]	; (800040c <MX_ADC_Init+0xb0>)
 80003ca:	0018      	movs	r0, r3
 80003cc:	f000 fbac 	bl	8000b28 <HAL_ADC_Init>
 80003d0:	1e03      	subs	r3, r0, #0
 80003d2:	d001      	beq.n	80003d8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003d4:	f000 f9a6 	bl	8000724 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2201      	movs	r2, #1
 80003dc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2280      	movs	r2, #128	; 0x80
 80003e2:	0152      	lsls	r2, r2, #5
 80003e4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2280      	movs	r2, #128	; 0x80
 80003ea:	0552      	lsls	r2, r2, #21
 80003ec:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003ee:	1d3a      	adds	r2, r7, #4
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <MX_ADC_Init+0xb0>)
 80003f2:	0011      	movs	r1, r2
 80003f4:	0018      	movs	r0, r3
 80003f6:	f000 fd61 	bl	8000ebc <HAL_ADC_ConfigChannel>
 80003fa:	1e03      	subs	r3, r0, #0
 80003fc:	d001      	beq.n	8000402 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80003fe:	f000 f991 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	b004      	add	sp, #16
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	20000028 	.word	0x20000028
 8000410:	40012400 	.word	0x40012400

08000414 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b096      	sub	sp, #88	; 0x58
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800041a:	2348      	movs	r3, #72	; 0x48
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	0018      	movs	r0, r3
 8000420:	2310      	movs	r3, #16
 8000422:	001a      	movs	r2, r3
 8000424:	2100      	movs	r1, #0
 8000426:	f003 fc07 	bl	8003c38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800042a:	2340      	movs	r3, #64	; 0x40
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	0018      	movs	r0, r3
 8000430:	2308      	movs	r3, #8
 8000432:	001a      	movs	r2, r3
 8000434:	2100      	movs	r1, #0
 8000436:	f003 fbff 	bl	8003c38 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800043a:	2324      	movs	r3, #36	; 0x24
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	0018      	movs	r0, r3
 8000440:	231c      	movs	r3, #28
 8000442:	001a      	movs	r2, r3
 8000444:	2100      	movs	r1, #0
 8000446:	f003 fbf7 	bl	8003c38 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	0018      	movs	r0, r3
 800044e:	2320      	movs	r3, #32
 8000450:	001a      	movs	r2, r3
 8000452:	2100      	movs	r1, #0
 8000454:	f003 fbf0 	bl	8003c38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000458:	4b46      	ldr	r3, [pc, #280]	; (8000574 <MX_TIM1_Init+0x160>)
 800045a:	4a47      	ldr	r2, [pc, #284]	; (8000578 <MX_TIM1_Init+0x164>)
 800045c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800045e:	4b45      	ldr	r3, [pc, #276]	; (8000574 <MX_TIM1_Init+0x160>)
 8000460:	2200      	movs	r2, #0
 8000462:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000464:	4b43      	ldr	r3, [pc, #268]	; (8000574 <MX_TIM1_Init+0x160>)
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1333-1;
 800046a:	4b42      	ldr	r3, [pc, #264]	; (8000574 <MX_TIM1_Init+0x160>)
 800046c:	4a43      	ldr	r2, [pc, #268]	; (800057c <MX_TIM1_Init+0x168>)
 800046e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000470:	4b40      	ldr	r3, [pc, #256]	; (8000574 <MX_TIM1_Init+0x160>)
 8000472:	2200      	movs	r2, #0
 8000474:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000476:	4b3f      	ldr	r3, [pc, #252]	; (8000574 <MX_TIM1_Init+0x160>)
 8000478:	2200      	movs	r2, #0
 800047a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800047c:	4b3d      	ldr	r3, [pc, #244]	; (8000574 <MX_TIM1_Init+0x160>)
 800047e:	2200      	movs	r2, #0
 8000480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000482:	4b3c      	ldr	r3, [pc, #240]	; (8000574 <MX_TIM1_Init+0x160>)
 8000484:	0018      	movs	r0, r3
 8000486:	f002 f889 	bl	800259c <HAL_TIM_Base_Init>
 800048a:	1e03      	subs	r3, r0, #0
 800048c:	d001      	beq.n	8000492 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800048e:	f000 f949 	bl	8000724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000492:	2148      	movs	r1, #72	; 0x48
 8000494:	187b      	adds	r3, r7, r1
 8000496:	2280      	movs	r2, #128	; 0x80
 8000498:	0152      	lsls	r2, r2, #5
 800049a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800049c:	187a      	adds	r2, r7, r1
 800049e:	4b35      	ldr	r3, [pc, #212]	; (8000574 <MX_TIM1_Init+0x160>)
 80004a0:	0011      	movs	r1, r2
 80004a2:	0018      	movs	r0, r3
 80004a4:	f002 fa7c 	bl	80029a0 <HAL_TIM_ConfigClockSource>
 80004a8:	1e03      	subs	r3, r0, #0
 80004aa:	d001      	beq.n	80004b0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80004ac:	f000 f93a 	bl	8000724 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80004b0:	4b30      	ldr	r3, [pc, #192]	; (8000574 <MX_TIM1_Init+0x160>)
 80004b2:	0018      	movs	r0, r3
 80004b4:	f002 f90c 	bl	80026d0 <HAL_TIM_OC_Init>
 80004b8:	1e03      	subs	r3, r0, #0
 80004ba:	d001      	beq.n	80004c0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80004bc:	f000 f932 	bl	8000724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80004c0:	2140      	movs	r1, #64	; 0x40
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	2220      	movs	r2, #32
 80004c6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	2200      	movs	r2, #0
 80004cc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004ce:	187a      	adds	r2, r7, r1
 80004d0:	4b28      	ldr	r3, [pc, #160]	; (8000574 <MX_TIM1_Init+0x160>)
 80004d2:	0011      	movs	r1, r2
 80004d4:	0018      	movs	r0, r3
 80004d6:	f002 fe71 	bl	80031bc <HAL_TIMEx_MasterConfigSynchronization>
 80004da:	1e03      	subs	r3, r0, #0
 80004dc:	d001      	beq.n	80004e2 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80004de:	f000 f921 	bl	8000724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80004e2:	2124      	movs	r1, #36	; 0x24
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2230      	movs	r2, #48	; 0x30
 80004e8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2200      	movs	r2, #0
 80004ee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2200      	movs	r2, #0
 8000506:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2200      	movs	r2, #0
 800050c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800050e:	1879      	adds	r1, r7, r1
 8000510:	4b18      	ldr	r3, [pc, #96]	; (8000574 <MX_TIM1_Init+0x160>)
 8000512:	2200      	movs	r2, #0
 8000514:	0018      	movs	r0, r3
 8000516:	f002 f9eb 	bl	80028f0 <HAL_TIM_OC_ConfigChannel>
 800051a:	1e03      	subs	r3, r0, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800051e:	f000 f901 	bl	8000724 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	0192      	lsls	r2, r2, #6
 8000546:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2200      	movs	r2, #0
 800054c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800054e:	1d3a      	adds	r2, r7, #4
 8000550:	4b08      	ldr	r3, [pc, #32]	; (8000574 <MX_TIM1_Init+0x160>)
 8000552:	0011      	movs	r1, r2
 8000554:	0018      	movs	r0, r3
 8000556:	f002 fe8f 	bl	8003278 <HAL_TIMEx_ConfigBreakDeadTime>
 800055a:	1e03      	subs	r3, r0, #0
 800055c:	d001      	beq.n	8000562 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 800055e:	f000 f8e1 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000562:	4b04      	ldr	r3, [pc, #16]	; (8000574 <MX_TIM1_Init+0x160>)
 8000564:	0018      	movs	r0, r3
 8000566:	f000 f999 	bl	800089c <HAL_TIM_MspPostInit>

}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b016      	add	sp, #88	; 0x58
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	200000ac 	.word	0x200000ac
 8000578:	40012c00 	.word	0x40012c00
 800057c:	00000534 	.word	0x00000534

08000580 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000584:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 8000586:	4a15      	ldr	r2, [pc, #84]	; (80005dc <MX_USART1_UART_Init+0x5c>)
 8000588:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800058a:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 800058c:	22e1      	movs	r2, #225	; 0xe1
 800058e:	0252      	lsls	r2, r2, #9
 8000590:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000598:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 80005a6:	220c      	movs	r2, #12
 80005a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005b6:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 80005be:	2200      	movs	r2, #0
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <MX_USART1_UART_Init+0x58>)
 80005c4:	0018      	movs	r0, r3
 80005c6:	f002 feb5 	bl	8003334 <HAL_UART_Init>
 80005ca:	1e03      	subs	r3, r0, #0
 80005cc:	d001      	beq.n	80005d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005ce:	f000 f8a9 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200000f4 	.word	0x200000f4
 80005dc:	40013800 	.word	0x40013800

080005e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_DMA_Init+0x38>)
 80005e8:	695a      	ldr	r2, [r3, #20]
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <MX_DMA_Init+0x38>)
 80005ec:	2101      	movs	r1, #1
 80005ee:	430a      	orrs	r2, r1
 80005f0:	615a      	str	r2, [r3, #20]
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_DMA_Init+0x38>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	2201      	movs	r2, #1
 80005f8:	4013      	ands	r3, r2
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005fe:	2200      	movs	r2, #0
 8000600:	2100      	movs	r1, #0
 8000602:	2009      	movs	r0, #9
 8000604:	f000 ff1c 	bl	8001440 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000608:	2009      	movs	r0, #9
 800060a:	f000 ff2e 	bl	800146a <HAL_NVIC_EnableIRQ>

}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	b002      	add	sp, #8
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	40021000 	.word	0x40021000

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b089      	sub	sp, #36	; 0x24
 8000620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	240c      	movs	r4, #12
 8000624:	193b      	adds	r3, r7, r4
 8000626:	0018      	movs	r0, r3
 8000628:	2314      	movs	r3, #20
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f003 fb03 	bl	8003c38 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	4b26      	ldr	r3, [pc, #152]	; (80006cc <MX_GPIO_Init+0xb0>)
 8000634:	695a      	ldr	r2, [r3, #20]
 8000636:	4b25      	ldr	r3, [pc, #148]	; (80006cc <MX_GPIO_Init+0xb0>)
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	0289      	lsls	r1, r1, #10
 800063c:	430a      	orrs	r2, r1
 800063e:	615a      	str	r2, [r3, #20]
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <MX_GPIO_Init+0xb0>)
 8000642:	695a      	ldr	r2, [r3, #20]
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	029b      	lsls	r3, r3, #10
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <MX_GPIO_Init+0xb0>)
 8000650:	695a      	ldr	r2, [r3, #20]
 8000652:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <MX_GPIO_Init+0xb0>)
 8000654:	2180      	movs	r1, #128	; 0x80
 8000656:	0309      	lsls	r1, r1, #12
 8000658:	430a      	orrs	r2, r1
 800065a:	615a      	str	r2, [r3, #20]
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_GPIO_Init+0xb0>)
 800065e:	695a      	ldr	r2, [r3, #20]
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	031b      	lsls	r3, r3, #12
 8000664:	4013      	ands	r3, r2
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DMA_GPIO_Pin|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800066a:	23e0      	movs	r3, #224	; 0xe0
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4818      	ldr	r0, [pc, #96]	; (80006d0 <MX_GPIO_Init+0xb4>)
 8000670:	2200      	movs	r2, #0
 8000672:	0019      	movs	r1, r3
 8000674:	f001 fa1e 	bl	8001ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000678:	193b      	adds	r3, r7, r4
 800067a:	2201      	movs	r2, #1
 800067c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800067e:	193b      	adds	r3, r7, r4
 8000680:	2290      	movs	r2, #144	; 0x90
 8000682:	0352      	lsls	r2, r2, #13
 8000684:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	193b      	adds	r3, r7, r4
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800068c:	193a      	adds	r2, r7, r4
 800068e:	2390      	movs	r3, #144	; 0x90
 8000690:	05db      	lsls	r3, r3, #23
 8000692:	0011      	movs	r1, r2
 8000694:	0018      	movs	r0, r3
 8000696:	f001 f89d 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DMA_GPIO_Pin LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = DMA_GPIO_Pin|LD4_Pin|LD3_Pin;
 800069a:	0021      	movs	r1, r4
 800069c:	187b      	adds	r3, r7, r1
 800069e:	22e0      	movs	r2, #224	; 0xe0
 80006a0:	0092      	lsls	r2, r2, #2
 80006a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2201      	movs	r2, #1
 80006a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	4a05      	ldr	r2, [pc, #20]	; (80006d0 <MX_GPIO_Init+0xb4>)
 80006ba:	0019      	movs	r1, r3
 80006bc:	0010      	movs	r0, r2
 80006be:	f001 f889 	bl	80017d4 <HAL_GPIO_Init>

}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b009      	add	sp, #36	; 0x24
 80006c8:	bd90      	pop	{r4, r7, pc}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	40021000 	.word	0x40021000
 80006d0:	48000800 	.word	0x48000800

080006d4 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)adc_buf, sizeof(adc_buf) / 2, HAL_MAX_DELAY);
 80006dc:	2301      	movs	r3, #1
 80006de:	425b      	negs	r3, r3
 80006e0:	4904      	ldr	r1, [pc, #16]	; (80006f4 <HAL_ADC_ConvHalfCpltCallback+0x20>)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 80006e4:	220a      	movs	r2, #10
 80006e6:	f002 fe79 	bl	80033dc <HAL_UART_Transmit>

}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b002      	add	sp, #8
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	2000017c 	.word	0x2000017c
 80006f8:	200000f4 	.word	0x200000f4

080006fc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)&adc_buf[ADC_BUF_LEN / 2], sizeof(adc_buf) / 2, HAL_MAX_DELAY);
 8000704:	2301      	movs	r3, #1
 8000706:	425b      	negs	r3, r3
 8000708:	4904      	ldr	r1, [pc, #16]	; (800071c <HAL_ADC_ConvCpltCallback+0x20>)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <HAL_ADC_ConvCpltCallback+0x24>)
 800070c:	220a      	movs	r2, #10
 800070e:	f002 fe65 	bl	80033dc <HAL_UART_Transmit>
}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b002      	add	sp, #8
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	20000186 	.word	0x20000186
 8000720:	200000f4 	.word	0x200000f4

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	e7fe      	b.n	800072c <Error_Handler+0x8>
	...

08000730 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <HAL_MspInit+0x44>)
 8000738:	699a      	ldr	r2, [r3, #24]
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <HAL_MspInit+0x44>)
 800073c:	2101      	movs	r1, #1
 800073e:	430a      	orrs	r2, r1
 8000740:	619a      	str	r2, [r3, #24]
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <HAL_MspInit+0x44>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	2201      	movs	r2, #1
 8000748:	4013      	ands	r3, r2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <HAL_MspInit+0x44>)
 8000750:	69da      	ldr	r2, [r3, #28]
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HAL_MspInit+0x44>)
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	0549      	lsls	r1, r1, #21
 8000758:	430a      	orrs	r2, r1
 800075a:	61da      	str	r2, [r3, #28]
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_MspInit+0x44>)
 800075e:	69da      	ldr	r2, [r3, #28]
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	055b      	lsls	r3, r3, #21
 8000764:	4013      	ands	r3, r2
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b002      	add	sp, #8
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	40021000 	.word	0x40021000

08000778 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b08b      	sub	sp, #44	; 0x2c
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	2414      	movs	r4, #20
 8000782:	193b      	adds	r3, r7, r4
 8000784:	0018      	movs	r0, r3
 8000786:	2314      	movs	r3, #20
 8000788:	001a      	movs	r2, r3
 800078a:	2100      	movs	r1, #0
 800078c:	f003 fa54 	bl	8003c38 <memset>
  if(hadc->Instance==ADC1)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a2d      	ldr	r2, [pc, #180]	; (800084c <HAL_ADC_MspInit+0xd4>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d153      	bne.n	8000842 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800079a:	4b2d      	ldr	r3, [pc, #180]	; (8000850 <HAL_ADC_MspInit+0xd8>)
 800079c:	699a      	ldr	r2, [r3, #24]
 800079e:	4b2c      	ldr	r3, [pc, #176]	; (8000850 <HAL_ADC_MspInit+0xd8>)
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	0089      	lsls	r1, r1, #2
 80007a4:	430a      	orrs	r2, r1
 80007a6:	619a      	str	r2, [r3, #24]
 80007a8:	4b29      	ldr	r3, [pc, #164]	; (8000850 <HAL_ADC_MspInit+0xd8>)
 80007aa:	699a      	ldr	r2, [r3, #24]
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	4013      	ands	r3, r2
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b26      	ldr	r3, [pc, #152]	; (8000850 <HAL_ADC_MspInit+0xd8>)
 80007b8:	695a      	ldr	r2, [r3, #20]
 80007ba:	4b25      	ldr	r3, [pc, #148]	; (8000850 <HAL_ADC_MspInit+0xd8>)
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	0289      	lsls	r1, r1, #10
 80007c0:	430a      	orrs	r2, r1
 80007c2:	615a      	str	r2, [r3, #20]
 80007c4:	4b22      	ldr	r3, [pc, #136]	; (8000850 <HAL_ADC_MspInit+0xd8>)
 80007c6:	695a      	ldr	r2, [r3, #20]
 80007c8:	2380      	movs	r3, #128	; 0x80
 80007ca:	029b      	lsls	r3, r3, #10
 80007cc:	4013      	ands	r3, r2
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007d2:	193b      	adds	r3, r7, r4
 80007d4:	2202      	movs	r2, #2
 80007d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	2203      	movs	r2, #3
 80007dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	193a      	adds	r2, r7, r4
 80007e6:	2390      	movs	r3, #144	; 0x90
 80007e8:	05db      	lsls	r3, r3, #23
 80007ea:	0011      	movs	r1, r2
 80007ec:	0018      	movs	r0, r3
 80007ee:	f000 fff1 	bl	80017d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <HAL_ADC_MspInit+0xdc>)
 80007f4:	4a18      	ldr	r2, [pc, #96]	; (8000858 <HAL_ADC_MspInit+0xe0>)
 80007f6:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007f8:	4b16      	ldr	r3, [pc, #88]	; (8000854 <HAL_ADC_MspInit+0xdc>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_ADC_MspInit+0xdc>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <HAL_ADC_MspInit+0xdc>)
 8000806:	2280      	movs	r2, #128	; 0x80
 8000808:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_ADC_MspInit+0xdc>)
 800080c:	2280      	movs	r2, #128	; 0x80
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <HAL_ADC_MspInit+0xdc>)
 8000814:	2280      	movs	r2, #128	; 0x80
 8000816:	00d2      	lsls	r2, r2, #3
 8000818:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <HAL_ADC_MspInit+0xdc>)
 800081c:	2220      	movs	r2, #32
 800081e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <HAL_ADC_MspInit+0xdc>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <HAL_ADC_MspInit+0xdc>)
 8000828:	0018      	movs	r0, r3
 800082a:	f000 fe3b 	bl	80014a4 <HAL_DMA_Init>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d001      	beq.n	8000836 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000832:	f7ff ff77 	bl	8000724 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a06      	ldr	r2, [pc, #24]	; (8000854 <HAL_ADC_MspInit+0xdc>)
 800083a:	631a      	str	r2, [r3, #48]	; 0x30
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <HAL_ADC_MspInit+0xdc>)
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	b00b      	add	sp, #44	; 0x2c
 8000848:	bd90      	pop	{r4, r7, pc}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	40012400 	.word	0x40012400
 8000850:	40021000 	.word	0x40021000
 8000854:	20000068 	.word	0x20000068
 8000858:	40020008 	.word	0x40020008

0800085c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <HAL_TIM_Base_MspInit+0x38>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d10d      	bne.n	800088a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <HAL_TIM_Base_MspInit+0x3c>)
 8000870:	699a      	ldr	r2, [r3, #24]
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <HAL_TIM_Base_MspInit+0x3c>)
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	0109      	lsls	r1, r1, #4
 8000878:	430a      	orrs	r2, r1
 800087a:	619a      	str	r2, [r3, #24]
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_TIM_Base_MspInit+0x3c>)
 800087e:	699a      	ldr	r2, [r3, #24]
 8000880:	2380      	movs	r3, #128	; 0x80
 8000882:	011b      	lsls	r3, r3, #4
 8000884:	4013      	ands	r3, r2
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b004      	add	sp, #16
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	40012c00 	.word	0x40012c00
 8000898:	40021000 	.word	0x40021000

0800089c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b089      	sub	sp, #36	; 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	240c      	movs	r4, #12
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	0018      	movs	r0, r3
 80008aa:	2314      	movs	r3, #20
 80008ac:	001a      	movs	r2, r3
 80008ae:	2100      	movs	r1, #0
 80008b0:	f003 f9c2 	bl	8003c38 <memset>
  if(htim->Instance==TIM1)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a16      	ldr	r2, [pc, #88]	; (8000914 <HAL_TIM_MspPostInit+0x78>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d125      	bne.n	800090a <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <HAL_TIM_MspPostInit+0x7c>)
 80008c0:	695a      	ldr	r2, [r3, #20]
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <HAL_TIM_MspPostInit+0x7c>)
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	0289      	lsls	r1, r1, #10
 80008c8:	430a      	orrs	r2, r1
 80008ca:	615a      	str	r2, [r3, #20]
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_TIM_MspPostInit+0x7c>)
 80008ce:	695a      	ldr	r2, [r3, #20]
 80008d0:	2380      	movs	r3, #128	; 0x80
 80008d2:	029b      	lsls	r3, r3, #10
 80008d4:	4013      	ands	r3, r2
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	2280      	movs	r2, #128	; 0x80
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	0021      	movs	r1, r4
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2202      	movs	r2, #2
 80008e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2202      	movs	r2, #2
 80008fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	187a      	adds	r2, r7, r1
 80008fe:	2390      	movs	r3, #144	; 0x90
 8000900:	05db      	lsls	r3, r3, #23
 8000902:	0011      	movs	r1, r2
 8000904:	0018      	movs	r0, r3
 8000906:	f000 ff65 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	b009      	add	sp, #36	; 0x24
 8000910:	bd90      	pop	{r4, r7, pc}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	40012c00 	.word	0x40012c00
 8000918:	40021000 	.word	0x40021000

0800091c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b08b      	sub	sp, #44	; 0x2c
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	2414      	movs	r4, #20
 8000926:	193b      	adds	r3, r7, r4
 8000928:	0018      	movs	r0, r3
 800092a:	2314      	movs	r3, #20
 800092c:	001a      	movs	r2, r3
 800092e:	2100      	movs	r1, #0
 8000930:	f003 f982 	bl	8003c38 <memset>
  if(huart->Instance==USART1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a1d      	ldr	r2, [pc, #116]	; (80009b0 <HAL_UART_MspInit+0x94>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d133      	bne.n	80009a6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <HAL_UART_MspInit+0x98>)
 8000940:	699a      	ldr	r2, [r3, #24]
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <HAL_UART_MspInit+0x98>)
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	01c9      	lsls	r1, r1, #7
 8000948:	430a      	orrs	r2, r1
 800094a:	619a      	str	r2, [r3, #24]
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <HAL_UART_MspInit+0x98>)
 800094e:	699a      	ldr	r2, [r3, #24]
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	01db      	lsls	r3, r3, #7
 8000954:	4013      	ands	r3, r2
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <HAL_UART_MspInit+0x98>)
 800095c:	695a      	ldr	r2, [r3, #20]
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <HAL_UART_MspInit+0x98>)
 8000960:	2180      	movs	r1, #128	; 0x80
 8000962:	0289      	lsls	r1, r1, #10
 8000964:	430a      	orrs	r2, r1
 8000966:	615a      	str	r2, [r3, #20]
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_UART_MspInit+0x98>)
 800096a:	695a      	ldr	r2, [r3, #20]
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	029b      	lsls	r3, r3, #10
 8000970:	4013      	ands	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000976:	193b      	adds	r3, r7, r4
 8000978:	22c0      	movs	r2, #192	; 0xc0
 800097a:	00d2      	lsls	r2, r2, #3
 800097c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	0021      	movs	r1, r4
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2202      	movs	r2, #2
 8000984:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2203      	movs	r2, #3
 8000990:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2201      	movs	r2, #1
 8000996:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	187a      	adds	r2, r7, r1
 800099a:	2390      	movs	r3, #144	; 0x90
 800099c:	05db      	lsls	r3, r3, #23
 800099e:	0011      	movs	r1, r2
 80009a0:	0018      	movs	r0, r3
 80009a2:	f000 ff17 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b00b      	add	sp, #44	; 0x2c
 80009ac:	bd90      	pop	{r4, r7, pc}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	40013800 	.word	0x40013800
 80009b4:	40021000 	.word	0x40021000

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <NMI_Handler+0x4>

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009dc:	f000 f888 	bl	8000af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <DMA1_Channel1_IRQHandler+0x14>)
 80009ee:	0018      	movs	r0, r3
 80009f0:	f000 fe06 	bl	8001600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	20000068 	.word	0x20000068

08000a00 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a0c:	480d      	ldr	r0, [pc, #52]	; (8000a44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a0e:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000a10:	f7ff fff6 	bl	8000a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a16:	490d      	ldr	r1, [pc, #52]	; (8000a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <LoopForever+0xe>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a2c:	4c0a      	ldr	r4, [pc, #40]	; (8000a58 <LoopForever+0x16>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a3a:	f003 f8d9 	bl	8003bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a3e:	f7ff fbef 	bl	8000220 <main>

08000a42 <LoopForever>:

LoopForever:
    b LoopForever
 8000a42:	e7fe      	b.n	8000a42 <LoopForever>
  ldr   r0, =_estack
 8000a44:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a50:	08003ca0 	.word	0x08003ca0
  ldr r2, =_sbss
 8000a54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a58:	20000198 	.word	0x20000198

08000a5c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC1_COMP_IRQHandler>
	...

08000a60 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <HAL_Init+0x24>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_Init+0x24>)
 8000a6a:	2110      	movs	r1, #16
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a70:	2000      	movs	r0, #0
 8000a72:	f000 f809 	bl	8000a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a76:	f7ff fe5b 	bl	8000730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
}
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	40022000 	.word	0x40022000

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <HAL_InitTick+0x5c>)
 8000a92:	681c      	ldr	r4, [r3, #0]
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <HAL_InitTick+0x60>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	0019      	movs	r1, r3
 8000a9a:	23fa      	movs	r3, #250	; 0xfa
 8000a9c:	0098      	lsls	r0, r3, #2
 8000a9e:	f7ff fb33 	bl	8000108 <__udivsi3>
 8000aa2:	0003      	movs	r3, r0
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	0020      	movs	r0, r4
 8000aa8:	f7ff fb2e 	bl	8000108 <__udivsi3>
 8000aac:	0003      	movs	r3, r0
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f000 fceb 	bl	800148a <HAL_SYSTICK_Config>
 8000ab4:	1e03      	subs	r3, r0, #0
 8000ab6:	d001      	beq.n	8000abc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e00f      	b.n	8000adc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	d80b      	bhi.n	8000ada <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	425b      	negs	r3, r3
 8000ac8:	2200      	movs	r2, #0
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 fcb8 	bl	8001440 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_InitTick+0x64>)
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e000      	b.n	8000adc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	0018      	movs	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b003      	add	sp, #12
 8000ae2:	bd90      	pop	{r4, r7, pc}
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000004 	.word	0x20000004

08000af0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_IncTick+0x1c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	001a      	movs	r2, r3
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_IncTick+0x20>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	18d2      	adds	r2, r2, r3
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <HAL_IncTick+0x20>)
 8000b02:	601a      	str	r2, [r3, #0]
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	20000194 	.word	0x20000194

08000b14 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  return uwTick;
 8000b18:	4b02      	ldr	r3, [pc, #8]	; (8000b24 <HAL_GetTick+0x10>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	20000194 	.word	0x20000194

08000b28 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b30:	230f      	movs	r3, #15
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d101      	bne.n	8000b46 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e125      	b.n	8000d92 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d10a      	bne.n	8000b64 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2234      	movs	r2, #52	; 0x34
 8000b58:	2100      	movs	r1, #0
 8000b5a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f7ff fe0a 	bl	8000778 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b68:	2210      	movs	r2, #16
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	d000      	beq.n	8000b70 <HAL_ADC_Init+0x48>
 8000b6e:	e103      	b.n	8000d78 <HAL_ADC_Init+0x250>
 8000b70:	230f      	movs	r3, #15
 8000b72:	18fb      	adds	r3, r7, r3
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d000      	beq.n	8000b7c <HAL_ADC_Init+0x54>
 8000b7a:	e0fd      	b.n	8000d78 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	2204      	movs	r2, #4
 8000b84:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000b86:	d000      	beq.n	8000b8a <HAL_ADC_Init+0x62>
 8000b88:	e0f6      	b.n	8000d78 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b8e:	4a83      	ldr	r2, [pc, #524]	; (8000d9c <HAL_ADC_Init+0x274>)
 8000b90:	4013      	ands	r3, r2
 8000b92:	2202      	movs	r2, #2
 8000b94:	431a      	orrs	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d112      	bne.n	8000bce <HAL_ADC_Init+0xa6>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d009      	beq.n	8000bca <HAL_ADC_Init+0xa2>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	68da      	ldr	r2, [r3, #12]
 8000bbc:	2380      	movs	r3, #128	; 0x80
 8000bbe:	021b      	lsls	r3, r3, #8
 8000bc0:	401a      	ands	r2, r3
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	021b      	lsls	r3, r3, #8
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d101      	bne.n	8000bce <HAL_ADC_Init+0xa6>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e000      	b.n	8000bd0 <HAL_ADC_Init+0xa8>
 8000bce:	2300      	movs	r3, #0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d116      	bne.n	8000c02 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	2218      	movs	r2, #24
 8000bdc:	4393      	bics	r3, r2
 8000bde:	0019      	movs	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	689a      	ldr	r2, [r3, #8]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	430a      	orrs	r2, r1
 8000bea:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	691b      	ldr	r3, [r3, #16]
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	0899      	lsrs	r1, r3, #2
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	68da      	ldr	r2, [r3, #12]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4964      	ldr	r1, [pc, #400]	; (8000da0 <HAL_ADC_Init+0x278>)
 8000c0e:	400a      	ands	r2, r1
 8000c10:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	7e1b      	ldrb	r3, [r3, #24]
 8000c16:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	7e5b      	ldrb	r3, [r3, #25]
 8000c1c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c1e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	7e9b      	ldrb	r3, [r3, #26]
 8000c24:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c26:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d002      	beq.n	8000c36 <HAL_ADC_Init+0x10e>
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	015b      	lsls	r3, r3, #5
 8000c34:	e000      	b.n	8000c38 <HAL_ADC_Init+0x110>
 8000c36:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c38:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000c3e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	691b      	ldr	r3, [r3, #16]
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d101      	bne.n	8000c4c <HAL_ADC_Init+0x124>
 8000c48:	2304      	movs	r3, #4
 8000c4a:	e000      	b.n	8000c4e <HAL_ADC_Init+0x126>
 8000c4c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000c4e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2124      	movs	r1, #36	; 0x24
 8000c54:	5c5b      	ldrb	r3, [r3, r1]
 8000c56:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000c58:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	7edb      	ldrb	r3, [r3, #27]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d115      	bne.n	8000c94 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	7e9b      	ldrb	r3, [r3, #26]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d105      	bne.n	8000c7c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2280      	movs	r2, #128	; 0x80
 8000c74:	0252      	lsls	r2, r2, #9
 8000c76:	4313      	orrs	r3, r2
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	e00b      	b.n	8000c94 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c80:	2220      	movs	r2, #32
 8000c82:	431a      	orrs	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	69da      	ldr	r2, [r3, #28]
 8000c98:	23c2      	movs	r3, #194	; 0xc2
 8000c9a:	33ff      	adds	r3, #255	; 0xff
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d007      	beq.n	8000cb0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	68d9      	ldr	r1, [r3, #12]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	055b      	lsls	r3, r3, #21
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d01b      	beq.n	8000d04 <HAL_ADC_Init+0x1dc>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d017      	beq.n	8000d04 <HAL_ADC_Init+0x1dc>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d013      	beq.n	8000d04 <HAL_ADC_Init+0x1dc>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce0:	2b03      	cmp	r3, #3
 8000ce2:	d00f      	beq.n	8000d04 <HAL_ADC_Init+0x1dc>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce8:	2b04      	cmp	r3, #4
 8000cea:	d00b      	beq.n	8000d04 <HAL_ADC_Init+0x1dc>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf0:	2b05      	cmp	r3, #5
 8000cf2:	d007      	beq.n	8000d04 <HAL_ADC_Init+0x1dc>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf8:	2b06      	cmp	r3, #6
 8000cfa:	d003      	beq.n	8000d04 <HAL_ADC_Init+0x1dc>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d00:	2b07      	cmp	r3, #7
 8000d02:	d112      	bne.n	8000d2a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	695a      	ldr	r2, [r3, #20]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2107      	movs	r1, #7
 8000d10:	438a      	bics	r2, r1
 8000d12:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	6959      	ldr	r1, [r3, #20]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1e:	2207      	movs	r2, #7
 8000d20:	401a      	ands	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	430a      	orrs	r2, r1
 8000d28:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	4a1c      	ldr	r2, [pc, #112]	; (8000da4 <HAL_ADC_Init+0x27c>)
 8000d32:	4013      	ands	r3, r2
 8000d34:	68ba      	ldr	r2, [r7, #8]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d10b      	bne.n	8000d52 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d44:	2203      	movs	r2, #3
 8000d46:	4393      	bics	r3, r2
 8000d48:	2201      	movs	r2, #1
 8000d4a:	431a      	orrs	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d50:	e01c      	b.n	8000d8c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d56:	2212      	movs	r2, #18
 8000d58:	4393      	bics	r3, r2
 8000d5a:	2210      	movs	r2, #16
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d66:	2201      	movs	r2, #1
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000d6e:	230f      	movs	r3, #15
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	2201      	movs	r2, #1
 8000d74:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d76:	e009      	b.n	8000d8c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d7c:	2210      	movs	r2, #16
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000d84:	230f      	movs	r3, #15
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	2201      	movs	r2, #1
 8000d8a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	18fb      	adds	r3, r7, r3
 8000d90:	781b      	ldrb	r3, [r3, #0]
}
 8000d92:	0018      	movs	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b004      	add	sp, #16
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	fffffefd 	.word	0xfffffefd
 8000da0:	fffe0219 	.word	0xfffe0219
 8000da4:	833fffe7 	.word	0x833fffe7

08000da8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000db4:	2317      	movs	r3, #23
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	d15e      	bne.n	8000e86 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2234      	movs	r2, #52	; 0x34
 8000dcc:	5c9b      	ldrb	r3, [r3, r2]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d101      	bne.n	8000dd6 <HAL_ADC_Start_DMA+0x2e>
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	e05e      	b.n	8000e94 <HAL_ADC_Start_DMA+0xec>
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2234      	movs	r2, #52	; 0x34
 8000dda:	2101      	movs	r1, #1
 8000ddc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	7e5b      	ldrb	r3, [r3, #25]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d007      	beq.n	8000df6 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000de6:	2317      	movs	r3, #23
 8000de8:	18fc      	adds	r4, r7, r3
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	0018      	movs	r0, r3
 8000dee:	f000 f973 	bl	80010d8 <ADC_Enable>
 8000df2:	0003      	movs	r3, r0
 8000df4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000df6:	2317      	movs	r3, #23
 8000df8:	18fb      	adds	r3, r7, r3
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d146      	bne.n	8000e8e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e04:	4a25      	ldr	r2, [pc, #148]	; (8000e9c <HAL_ADC_Start_DMA+0xf4>)
 8000e06:	4013      	ands	r3, r2
 8000e08:	2280      	movs	r2, #128	; 0x80
 8000e0a:	0052      	lsls	r2, r2, #1
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2200      	movs	r2, #0
 8000e16:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2234      	movs	r2, #52	; 0x34
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	4a1e      	ldr	r2, [pc, #120]	; (8000ea0 <HAL_ADC_Start_DMA+0xf8>)
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ea4 <HAL_ADC_Start_DMA+0xfc>)
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	4a1c      	ldr	r2, [pc, #112]	; (8000ea8 <HAL_ADC_Start_DMA+0x100>)
 8000e36:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	221c      	movs	r2, #28
 8000e3e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	68da      	ldr	r2, [r3, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	3340      	adds	r3, #64	; 0x40
 8000e6a:	0019      	movs	r1, r3
 8000e6c:	68ba      	ldr	r2, [r7, #8]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f000 fb60 	bl	8001534 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	689a      	ldr	r2, [r3, #8]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2104      	movs	r1, #4
 8000e80:	430a      	orrs	r2, r1
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	e003      	b.n	8000e8e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e86:	2317      	movs	r3, #23
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e8e:	2317      	movs	r3, #23
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	781b      	ldrb	r3, [r3, #0]
}
 8000e94:	0018      	movs	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b007      	add	sp, #28
 8000e9a:	bd90      	pop	{r4, r7, pc}
 8000e9c:	fffff0fe 	.word	0xfffff0fe
 8000ea0:	080011e1 	.word	0x080011e1
 8000ea4:	08001295 	.word	0x08001295
 8000ea8:	080012b3 	.word	0x080012b3

08000eac <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b002      	add	sp, #8
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ec6:	230f      	movs	r3, #15
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	055b      	lsls	r3, r3, #21
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d011      	beq.n	8000f02 <HAL_ADC_ConfigChannel+0x46>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d00d      	beq.n	8000f02 <HAL_ADC_ConfigChannel+0x46>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d009      	beq.n	8000f02 <HAL_ADC_ConfigChannel+0x46>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	d005      	beq.n	8000f02 <HAL_ADC_ConfigChannel+0x46>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	d001      	beq.n	8000f02 <HAL_ADC_ConfigChannel+0x46>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2234      	movs	r2, #52	; 0x34
 8000f06:	5c9b      	ldrb	r3, [r3, r2]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d101      	bne.n	8000f10 <HAL_ADC_ConfigChannel+0x54>
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	e0d0      	b.n	80010b2 <HAL_ADC_ConfigChannel+0x1f6>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2234      	movs	r2, #52	; 0x34
 8000f14:	2101      	movs	r1, #1
 8000f16:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	2204      	movs	r2, #4
 8000f20:	4013      	ands	r3, r2
 8000f22:	d000      	beq.n	8000f26 <HAL_ADC_ConfigChannel+0x6a>
 8000f24:	e0b4      	b.n	8001090 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	4a64      	ldr	r2, [pc, #400]	; (80010bc <HAL_ADC_ConfigChannel+0x200>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d100      	bne.n	8000f32 <HAL_ADC_ConfigChannel+0x76>
 8000f30:	e082      	b.n	8001038 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	430a      	orrs	r2, r1
 8000f46:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	055b      	lsls	r3, r3, #21
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d037      	beq.n	8000fc4 <HAL_ADC_ConfigChannel+0x108>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d033      	beq.n	8000fc4 <HAL_ADC_ConfigChannel+0x108>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d02f      	beq.n	8000fc4 <HAL_ADC_ConfigChannel+0x108>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f68:	2b03      	cmp	r3, #3
 8000f6a:	d02b      	beq.n	8000fc4 <HAL_ADC_ConfigChannel+0x108>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f70:	2b04      	cmp	r3, #4
 8000f72:	d027      	beq.n	8000fc4 <HAL_ADC_ConfigChannel+0x108>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f78:	2b05      	cmp	r3, #5
 8000f7a:	d023      	beq.n	8000fc4 <HAL_ADC_ConfigChannel+0x108>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f80:	2b06      	cmp	r3, #6
 8000f82:	d01f      	beq.n	8000fc4 <HAL_ADC_ConfigChannel+0x108>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f88:	2b07      	cmp	r3, #7
 8000f8a:	d01b      	beq.n	8000fc4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	2107      	movs	r1, #7
 8000f98:	400b      	ands	r3, r1
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d012      	beq.n	8000fc4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	695a      	ldr	r2, [r3, #20]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2107      	movs	r1, #7
 8000faa:	438a      	bics	r2, r1
 8000fac:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6959      	ldr	r1, [r3, #20]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	2207      	movs	r2, #7
 8000fba:	401a      	ands	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b10      	cmp	r3, #16
 8000fca:	d007      	beq.n	8000fdc <HAL_ADC_ConfigChannel+0x120>
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b11      	cmp	r3, #17
 8000fd2:	d003      	beq.n	8000fdc <HAL_ADC_ConfigChannel+0x120>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b12      	cmp	r3, #18
 8000fda:	d163      	bne.n	80010a4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000fdc:	4b38      	ldr	r3, [pc, #224]	; (80010c0 <HAL_ADC_ConfigChannel+0x204>)
 8000fde:	6819      	ldr	r1, [r3, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b10      	cmp	r3, #16
 8000fe6:	d009      	beq.n	8000ffc <HAL_ADC_ConfigChannel+0x140>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b11      	cmp	r3, #17
 8000fee:	d102      	bne.n	8000ff6 <HAL_ADC_ConfigChannel+0x13a>
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	03db      	lsls	r3, r3, #15
 8000ff4:	e004      	b.n	8001000 <HAL_ADC_ConfigChannel+0x144>
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	045b      	lsls	r3, r3, #17
 8000ffa:	e001      	b.n	8001000 <HAL_ADC_ConfigChannel+0x144>
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	041b      	lsls	r3, r3, #16
 8001000:	4a2f      	ldr	r2, [pc, #188]	; (80010c0 <HAL_ADC_ConfigChannel+0x204>)
 8001002:	430b      	orrs	r3, r1
 8001004:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b10      	cmp	r3, #16
 800100c:	d14a      	bne.n	80010a4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800100e:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <HAL_ADC_ConfigChannel+0x208>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	492d      	ldr	r1, [pc, #180]	; (80010c8 <HAL_ADC_ConfigChannel+0x20c>)
 8001014:	0018      	movs	r0, r3
 8001016:	f7ff f877 	bl	8000108 <__udivsi3>
 800101a:	0003      	movs	r3, r0
 800101c:	001a      	movs	r2, r3
 800101e:	0013      	movs	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	189b      	adds	r3, r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001028:	e002      	b.n	8001030 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	3b01      	subs	r3, #1
 800102e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f9      	bne.n	800102a <HAL_ADC_ConfigChannel+0x16e>
 8001036:	e035      	b.n	80010a4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2101      	movs	r1, #1
 8001044:	4099      	lsls	r1, r3
 8001046:	000b      	movs	r3, r1
 8001048:	43d9      	mvns	r1, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	400a      	ands	r2, r1
 8001050:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b10      	cmp	r3, #16
 8001058:	d007      	beq.n	800106a <HAL_ADC_ConfigChannel+0x1ae>
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b11      	cmp	r3, #17
 8001060:	d003      	beq.n	800106a <HAL_ADC_ConfigChannel+0x1ae>
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b12      	cmp	r3, #18
 8001068:	d11c      	bne.n	80010a4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <HAL_ADC_ConfigChannel+0x204>)
 800106c:	6819      	ldr	r1, [r3, #0]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b10      	cmp	r3, #16
 8001074:	d007      	beq.n	8001086 <HAL_ADC_ConfigChannel+0x1ca>
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b11      	cmp	r3, #17
 800107c:	d101      	bne.n	8001082 <HAL_ADC_ConfigChannel+0x1c6>
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <HAL_ADC_ConfigChannel+0x210>)
 8001080:	e002      	b.n	8001088 <HAL_ADC_ConfigChannel+0x1cc>
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <HAL_ADC_ConfigChannel+0x214>)
 8001084:	e000      	b.n	8001088 <HAL_ADC_ConfigChannel+0x1cc>
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <HAL_ADC_ConfigChannel+0x218>)
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <HAL_ADC_ConfigChannel+0x204>)
 800108a:	400b      	ands	r3, r1
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	e009      	b.n	80010a4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001094:	2220      	movs	r2, #32
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800109c:	230f      	movs	r3, #15
 800109e:	18fb      	adds	r3, r7, r3
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2234      	movs	r2, #52	; 0x34
 80010a8:	2100      	movs	r1, #0
 80010aa:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80010ac:	230f      	movs	r3, #15
 80010ae:	18fb      	adds	r3, r7, r3
 80010b0:	781b      	ldrb	r3, [r3, #0]
}
 80010b2:	0018      	movs	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b004      	add	sp, #16
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	00001001 	.word	0x00001001
 80010c0:	40012708 	.word	0x40012708
 80010c4:	20000000 	.word	0x20000000
 80010c8:	000f4240 	.word	0x000f4240
 80010cc:	ffbfffff 	.word	0xffbfffff
 80010d0:	feffffff 	.word	0xfeffffff
 80010d4:	ff7fffff 	.word	0xff7fffff

080010d8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2203      	movs	r2, #3
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d112      	bne.n	800111c <ADC_Enable+0x44>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2201      	movs	r2, #1
 80010fe:	4013      	ands	r3, r2
 8001100:	2b01      	cmp	r3, #1
 8001102:	d009      	beq.n	8001118 <ADC_Enable+0x40>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	401a      	ands	r2, r3
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	429a      	cmp	r2, r3
 8001116:	d101      	bne.n	800111c <ADC_Enable+0x44>
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <ADC_Enable+0x46>
 800111c:	2300      	movs	r3, #0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d152      	bne.n	80011c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	4a2a      	ldr	r2, [pc, #168]	; (80011d4 <ADC_Enable+0xfc>)
 800112a:	4013      	ands	r3, r2
 800112c:	d00d      	beq.n	800114a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001132:	2210      	movs	r2, #16
 8001134:	431a      	orrs	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800113e:	2201      	movs	r2, #1
 8001140:	431a      	orrs	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e03f      	b.n	80011ca <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2101      	movs	r1, #1
 8001156:	430a      	orrs	r2, r1
 8001158:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800115a:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <ADC_Enable+0x100>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	491f      	ldr	r1, [pc, #124]	; (80011dc <ADC_Enable+0x104>)
 8001160:	0018      	movs	r0, r3
 8001162:	f7fe ffd1 	bl	8000108 <__udivsi3>
 8001166:	0003      	movs	r3, r0
 8001168:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800116a:	e002      	b.n	8001172 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	3b01      	subs	r3, #1
 8001170:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1f9      	bne.n	800116c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001178:	f7ff fccc 	bl	8000b14 <HAL_GetTick>
 800117c:	0003      	movs	r3, r0
 800117e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001180:	e01b      	b.n	80011ba <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001182:	f7ff fcc7 	bl	8000b14 <HAL_GetTick>
 8001186:	0002      	movs	r2, r0
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d914      	bls.n	80011ba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2201      	movs	r2, #1
 8001198:	4013      	ands	r3, r2
 800119a:	2b01      	cmp	r3, #1
 800119c:	d00d      	beq.n	80011ba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a2:	2210      	movs	r2, #16
 80011a4:	431a      	orrs	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ae:	2201      	movs	r2, #1
 80011b0:	431a      	orrs	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e007      	b.n	80011ca <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2201      	movs	r2, #1
 80011c2:	4013      	ands	r3, r2
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d1dc      	bne.n	8001182 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	0018      	movs	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b004      	add	sp, #16
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	80000017 	.word	0x80000017
 80011d8:	20000000 	.word	0x20000000
 80011dc:	000f4240 	.word	0x000f4240

080011e0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f2:	2250      	movs	r2, #80	; 0x50
 80011f4:	4013      	ands	r3, r2
 80011f6:	d140      	bne.n	800127a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fc:	2280      	movs	r2, #128	; 0x80
 80011fe:	0092      	lsls	r2, r2, #2
 8001200:	431a      	orrs	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68da      	ldr	r2, [r3, #12]
 800120c:	23c0      	movs	r3, #192	; 0xc0
 800120e:	011b      	lsls	r3, r3, #4
 8001210:	4013      	ands	r3, r2
 8001212:	d12d      	bne.n	8001270 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001218:	2b00      	cmp	r3, #0
 800121a:	d129      	bne.n	8001270 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2208      	movs	r2, #8
 8001224:	4013      	ands	r3, r2
 8001226:	2b08      	cmp	r3, #8
 8001228:	d122      	bne.n	8001270 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	2204      	movs	r2, #4
 8001232:	4013      	ands	r3, r2
 8001234:	d110      	bne.n	8001258 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	210c      	movs	r1, #12
 8001242:	438a      	bics	r2, r1
 8001244:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800124a:	4a11      	ldr	r2, [pc, #68]	; (8001290 <ADC_DMAConvCplt+0xb0>)
 800124c:	4013      	ands	r3, r2
 800124e:	2201      	movs	r2, #1
 8001250:	431a      	orrs	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	639a      	str	r2, [r3, #56]	; 0x38
 8001256:	e00b      	b.n	8001270 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125c:	2220      	movs	r2, #32
 800125e:	431a      	orrs	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001268:	2201      	movs	r2, #1
 800126a:	431a      	orrs	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	0018      	movs	r0, r3
 8001274:	f7ff fa42 	bl	80006fc <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001278:	e005      	b.n	8001286 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	0010      	movs	r0, r2
 8001284:	4798      	blx	r3
}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	46bd      	mov	sp, r7
 800128a:	b004      	add	sp, #16
 800128c:	bd80      	pop	{r7, pc}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	fffffefe 	.word	0xfffffefe

08001294 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7ff fa15 	bl	80006d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b004      	add	sp, #16
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012c4:	2240      	movs	r2, #64	; 0x40
 80012c6:	431a      	orrs	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d0:	2204      	movs	r2, #4
 80012d2:	431a      	orrs	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	0018      	movs	r0, r3
 80012dc:	f7ff fde6 	bl	8000eac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012e0:	46c0      	nop			; (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	b004      	add	sp, #16
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	0002      	movs	r2, r0
 80012f0:	1dfb      	adds	r3, r7, #7
 80012f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012f4:	1dfb      	adds	r3, r7, #7
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b7f      	cmp	r3, #127	; 0x7f
 80012fa:	d809      	bhi.n	8001310 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fc:	1dfb      	adds	r3, r7, #7
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	001a      	movs	r2, r3
 8001302:	231f      	movs	r3, #31
 8001304:	401a      	ands	r2, r3
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <__NVIC_EnableIRQ+0x30>)
 8001308:	2101      	movs	r1, #1
 800130a:	4091      	lsls	r1, r2
 800130c:	000a      	movs	r2, r1
 800130e:	601a      	str	r2, [r3, #0]
  }
}
 8001310:	46c0      	nop			; (mov r8, r8)
 8001312:	46bd      	mov	sp, r7
 8001314:	b002      	add	sp, #8
 8001316:	bd80      	pop	{r7, pc}
 8001318:	e000e100 	.word	0xe000e100

0800131c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800131c:	b590      	push	{r4, r7, lr}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	0002      	movs	r2, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	1dfb      	adds	r3, r7, #7
 8001328:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800132a:	1dfb      	adds	r3, r7, #7
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b7f      	cmp	r3, #127	; 0x7f
 8001330:	d828      	bhi.n	8001384 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001332:	4a2f      	ldr	r2, [pc, #188]	; (80013f0 <__NVIC_SetPriority+0xd4>)
 8001334:	1dfb      	adds	r3, r7, #7
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b25b      	sxtb	r3, r3
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	33c0      	adds	r3, #192	; 0xc0
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	589b      	ldr	r3, [r3, r2]
 8001342:	1dfa      	adds	r2, r7, #7
 8001344:	7812      	ldrb	r2, [r2, #0]
 8001346:	0011      	movs	r1, r2
 8001348:	2203      	movs	r2, #3
 800134a:	400a      	ands	r2, r1
 800134c:	00d2      	lsls	r2, r2, #3
 800134e:	21ff      	movs	r1, #255	; 0xff
 8001350:	4091      	lsls	r1, r2
 8001352:	000a      	movs	r2, r1
 8001354:	43d2      	mvns	r2, r2
 8001356:	401a      	ands	r2, r3
 8001358:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	019b      	lsls	r3, r3, #6
 800135e:	22ff      	movs	r2, #255	; 0xff
 8001360:	401a      	ands	r2, r3
 8001362:	1dfb      	adds	r3, r7, #7
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	0018      	movs	r0, r3
 8001368:	2303      	movs	r3, #3
 800136a:	4003      	ands	r3, r0
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001370:	481f      	ldr	r0, [pc, #124]	; (80013f0 <__NVIC_SetPriority+0xd4>)
 8001372:	1dfb      	adds	r3, r7, #7
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	b25b      	sxtb	r3, r3
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	430a      	orrs	r2, r1
 800137c:	33c0      	adds	r3, #192	; 0xc0
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001382:	e031      	b.n	80013e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001384:	4a1b      	ldr	r2, [pc, #108]	; (80013f4 <__NVIC_SetPriority+0xd8>)
 8001386:	1dfb      	adds	r3, r7, #7
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	0019      	movs	r1, r3
 800138c:	230f      	movs	r3, #15
 800138e:	400b      	ands	r3, r1
 8001390:	3b08      	subs	r3, #8
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	3306      	adds	r3, #6
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	18d3      	adds	r3, r2, r3
 800139a:	3304      	adds	r3, #4
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	1dfa      	adds	r2, r7, #7
 80013a0:	7812      	ldrb	r2, [r2, #0]
 80013a2:	0011      	movs	r1, r2
 80013a4:	2203      	movs	r2, #3
 80013a6:	400a      	ands	r2, r1
 80013a8:	00d2      	lsls	r2, r2, #3
 80013aa:	21ff      	movs	r1, #255	; 0xff
 80013ac:	4091      	lsls	r1, r2
 80013ae:	000a      	movs	r2, r1
 80013b0:	43d2      	mvns	r2, r2
 80013b2:	401a      	ands	r2, r3
 80013b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	019b      	lsls	r3, r3, #6
 80013ba:	22ff      	movs	r2, #255	; 0xff
 80013bc:	401a      	ands	r2, r3
 80013be:	1dfb      	adds	r3, r7, #7
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	0018      	movs	r0, r3
 80013c4:	2303      	movs	r3, #3
 80013c6:	4003      	ands	r3, r0
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013cc:	4809      	ldr	r0, [pc, #36]	; (80013f4 <__NVIC_SetPriority+0xd8>)
 80013ce:	1dfb      	adds	r3, r7, #7
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	001c      	movs	r4, r3
 80013d4:	230f      	movs	r3, #15
 80013d6:	4023      	ands	r3, r4
 80013d8:	3b08      	subs	r3, #8
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	430a      	orrs	r2, r1
 80013de:	3306      	adds	r3, #6
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	18c3      	adds	r3, r0, r3
 80013e4:	3304      	adds	r3, #4
 80013e6:	601a      	str	r2, [r3, #0]
}
 80013e8:	46c0      	nop			; (mov r8, r8)
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b003      	add	sp, #12
 80013ee:	bd90      	pop	{r4, r7, pc}
 80013f0:	e000e100 	.word	0xe000e100
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	1e5a      	subs	r2, r3, #1
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	045b      	lsls	r3, r3, #17
 8001408:	429a      	cmp	r2, r3
 800140a:	d301      	bcc.n	8001410 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140c:	2301      	movs	r3, #1
 800140e:	e010      	b.n	8001432 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <SysTick_Config+0x44>)
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	3a01      	subs	r2, #1
 8001416:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001418:	2301      	movs	r3, #1
 800141a:	425b      	negs	r3, r3
 800141c:	2103      	movs	r1, #3
 800141e:	0018      	movs	r0, r3
 8001420:	f7ff ff7c 	bl	800131c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <SysTick_Config+0x44>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142a:	4b04      	ldr	r3, [pc, #16]	; (800143c <SysTick_Config+0x44>)
 800142c:	2207      	movs	r2, #7
 800142e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001430:	2300      	movs	r3, #0
}
 8001432:	0018      	movs	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	b002      	add	sp, #8
 8001438:	bd80      	pop	{r7, pc}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	e000e010 	.word	0xe000e010

08001440 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	210f      	movs	r1, #15
 800144c:	187b      	adds	r3, r7, r1
 800144e:	1c02      	adds	r2, r0, #0
 8001450:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	187b      	adds	r3, r7, r1
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	b25b      	sxtb	r3, r3
 800145a:	0011      	movs	r1, r2
 800145c:	0018      	movs	r0, r3
 800145e:	f7ff ff5d 	bl	800131c <__NVIC_SetPriority>
}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	46bd      	mov	sp, r7
 8001466:	b004      	add	sp, #16
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	0002      	movs	r2, r0
 8001472:	1dfb      	adds	r3, r7, #7
 8001474:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001476:	1dfb      	adds	r3, r7, #7
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b25b      	sxtb	r3, r3
 800147c:	0018      	movs	r0, r3
 800147e:	f7ff ff33 	bl	80012e8 <__NVIC_EnableIRQ>
}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	46bd      	mov	sp, r7
 8001486:	b002      	add	sp, #8
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	0018      	movs	r0, r3
 8001496:	f7ff ffaf 	bl	80013f8 <SysTick_Config>
 800149a:	0003      	movs	r3, r0
}
 800149c:	0018      	movs	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	b002      	add	sp, #8
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e036      	b.n	8001528 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2221      	movs	r2, #33	; 0x21
 80014be:	2102      	movs	r1, #2
 80014c0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4a18      	ldr	r2, [pc, #96]	; (8001530 <HAL_DMA_Init+0x8c>)
 80014ce:	4013      	ands	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80014da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	0018      	movs	r0, r3
 800150c:	f000 f946 	bl	800179c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2221      	movs	r2, #33	; 0x21
 800151a:	2101      	movs	r1, #1
 800151c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2220      	movs	r2, #32
 8001522:	2100      	movs	r1, #0
 8001524:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	0018      	movs	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	b004      	add	sp, #16
 800152e:	bd80      	pop	{r7, pc}
 8001530:	ffffc00f 	.word	0xffffc00f

08001534 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001542:	2317      	movs	r3, #23
 8001544:	18fb      	adds	r3, r7, r3
 8001546:	2200      	movs	r2, #0
 8001548:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2220      	movs	r2, #32
 800154e:	5c9b      	ldrb	r3, [r3, r2]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <HAL_DMA_Start_IT+0x24>
 8001554:	2302      	movs	r3, #2
 8001556:	e04f      	b.n	80015f8 <HAL_DMA_Start_IT+0xc4>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2220      	movs	r2, #32
 800155c:	2101      	movs	r1, #1
 800155e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2221      	movs	r2, #33	; 0x21
 8001564:	5c9b      	ldrb	r3, [r3, r2]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b01      	cmp	r3, #1
 800156a:	d13a      	bne.n	80015e2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2221      	movs	r2, #33	; 0x21
 8001570:	2102      	movs	r1, #2
 8001572:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2200      	movs	r2, #0
 8001578:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2101      	movs	r1, #1
 8001586:	438a      	bics	r2, r1
 8001588:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	68b9      	ldr	r1, [r7, #8]
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f000 f8d7 	bl	8001744 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159a:	2b00      	cmp	r3, #0
 800159c:	d008      	beq.n	80015b0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	210e      	movs	r1, #14
 80015aa:	430a      	orrs	r2, r1
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	e00f      	b.n	80015d0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	210a      	movs	r1, #10
 80015bc:	430a      	orrs	r2, r1
 80015be:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2104      	movs	r1, #4
 80015cc:	438a      	bics	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2101      	movs	r1, #1
 80015dc:	430a      	orrs	r2, r1
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	e007      	b.n	80015f2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2220      	movs	r2, #32
 80015e6:	2100      	movs	r1, #0
 80015e8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80015ea:	2317      	movs	r3, #23
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	2202      	movs	r2, #2
 80015f0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80015f2:	2317      	movs	r3, #23
 80015f4:	18fb      	adds	r3, r7, r3
 80015f6:	781b      	ldrb	r3, [r3, #0]
}
 80015f8:	0018      	movs	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b006      	add	sp, #24
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	2204      	movs	r2, #4
 800161e:	409a      	lsls	r2, r3
 8001620:	0013      	movs	r3, r2
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	4013      	ands	r3, r2
 8001626:	d024      	beq.n	8001672 <HAL_DMA_IRQHandler+0x72>
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2204      	movs	r2, #4
 800162c:	4013      	ands	r3, r2
 800162e:	d020      	beq.n	8001672 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2220      	movs	r2, #32
 8001638:	4013      	ands	r3, r2
 800163a:	d107      	bne.n	800164c <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2104      	movs	r1, #4
 8001648:	438a      	bics	r2, r1
 800164a:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001654:	2104      	movs	r1, #4
 8001656:	4091      	lsls	r1, r2
 8001658:	000a      	movs	r2, r1
 800165a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	2b00      	cmp	r3, #0
 8001662:	d100      	bne.n	8001666 <HAL_DMA_IRQHandler+0x66>
 8001664:	e06a      	b.n	800173c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	0010      	movs	r0, r2
 800166e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001670:	e064      	b.n	800173c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	2202      	movs	r2, #2
 8001678:	409a      	lsls	r2, r3
 800167a:	0013      	movs	r3, r2
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	4013      	ands	r3, r2
 8001680:	d02b      	beq.n	80016da <HAL_DMA_IRQHandler+0xda>
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	2202      	movs	r2, #2
 8001686:	4013      	ands	r3, r2
 8001688:	d027      	beq.n	80016da <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2220      	movs	r2, #32
 8001692:	4013      	ands	r3, r2
 8001694:	d10b      	bne.n	80016ae <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	210a      	movs	r1, #10
 80016a2:	438a      	bics	r2, r1
 80016a4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2221      	movs	r2, #33	; 0x21
 80016aa:	2101      	movs	r1, #1
 80016ac:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b6:	2102      	movs	r1, #2
 80016b8:	4091      	lsls	r1, r2
 80016ba:	000a      	movs	r2, r1
 80016bc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2220      	movs	r2, #32
 80016c2:	2100      	movs	r1, #0
 80016c4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d036      	beq.n	800173c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	0010      	movs	r0, r2
 80016d6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80016d8:	e030      	b.n	800173c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	2208      	movs	r2, #8
 80016e0:	409a      	lsls	r2, r3
 80016e2:	0013      	movs	r3, r2
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	4013      	ands	r3, r2
 80016e8:	d028      	beq.n	800173c <HAL_DMA_IRQHandler+0x13c>
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	2208      	movs	r2, #8
 80016ee:	4013      	ands	r3, r2
 80016f0:	d024      	beq.n	800173c <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	210e      	movs	r1, #14
 80016fe:	438a      	bics	r2, r1
 8001700:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170a:	2101      	movs	r1, #1
 800170c:	4091      	lsls	r1, r2
 800170e:	000a      	movs	r2, r1
 8001710:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2221      	movs	r2, #33	; 0x21
 800171c:	2101      	movs	r1, #1
 800171e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2220      	movs	r2, #32
 8001724:	2100      	movs	r1, #0
 8001726:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	0010      	movs	r0, r2
 8001738:	4798      	blx	r3
    }
  }
}
 800173a:	e7ff      	b.n	800173c <HAL_DMA_IRQHandler+0x13c>
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	b004      	add	sp, #16
 8001742:	bd80      	pop	{r7, pc}

08001744 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800175a:	2101      	movs	r1, #1
 800175c:	4091      	lsls	r1, r2
 800175e:	000a      	movs	r2, r1
 8001760:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b10      	cmp	r3, #16
 8001770:	d108      	bne.n	8001784 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001782:	e007      	b.n	8001794 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	60da      	str	r2, [r3, #12]
}
 8001794:	46c0      	nop			; (mov r8, r8)
 8001796:	46bd      	mov	sp, r7
 8001798:	b004      	add	sp, #16
 800179a:	bd80      	pop	{r7, pc}

0800179c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a08      	ldr	r2, [pc, #32]	; (80017cc <DMA_CalcBaseAndBitshift+0x30>)
 80017aa:	4694      	mov	ip, r2
 80017ac:	4463      	add	r3, ip
 80017ae:	2114      	movs	r1, #20
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7fe fca9 	bl	8000108 <__udivsi3>
 80017b6:	0003      	movs	r3, r0
 80017b8:	009a      	lsls	r2, r3, #2
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a03      	ldr	r2, [pc, #12]	; (80017d0 <DMA_CalcBaseAndBitshift+0x34>)
 80017c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80017c4:	46c0      	nop			; (mov r8, r8)
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b002      	add	sp, #8
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	bffdfff8 	.word	0xbffdfff8
 80017d0:	40020000 	.word	0x40020000

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e2:	e14f      	b.n	8001a84 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2101      	movs	r1, #1
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	4091      	lsls	r1, r2
 80017ee:	000a      	movs	r2, r1
 80017f0:	4013      	ands	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d100      	bne.n	80017fc <HAL_GPIO_Init+0x28>
 80017fa:	e140      	b.n	8001a7e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2203      	movs	r2, #3
 8001802:	4013      	ands	r3, r2
 8001804:	2b01      	cmp	r3, #1
 8001806:	d005      	beq.n	8001814 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2203      	movs	r2, #3
 800180e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001810:	2b02      	cmp	r3, #2
 8001812:	d130      	bne.n	8001876 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	2203      	movs	r2, #3
 8001820:	409a      	lsls	r2, r3
 8001822:	0013      	movs	r3, r2
 8001824:	43da      	mvns	r2, r3
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	409a      	lsls	r2, r3
 8001836:	0013      	movs	r3, r2
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4313      	orrs	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800184a:	2201      	movs	r2, #1
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	409a      	lsls	r2, r3
 8001850:	0013      	movs	r3, r2
 8001852:	43da      	mvns	r2, r3
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	091b      	lsrs	r3, r3, #4
 8001860:	2201      	movs	r2, #1
 8001862:	401a      	ands	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	409a      	lsls	r2, r3
 8001868:	0013      	movs	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2203      	movs	r2, #3
 800187c:	4013      	ands	r3, r2
 800187e:	2b03      	cmp	r3, #3
 8001880:	d017      	beq.n	80018b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	2203      	movs	r2, #3
 800188e:	409a      	lsls	r2, r3
 8001890:	0013      	movs	r3, r2
 8001892:	43da      	mvns	r2, r3
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	409a      	lsls	r2, r3
 80018a4:	0013      	movs	r3, r2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2203      	movs	r2, #3
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d123      	bne.n	8001906 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	08da      	lsrs	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3208      	adds	r2, #8
 80018c6:	0092      	lsls	r2, r2, #2
 80018c8:	58d3      	ldr	r3, [r2, r3]
 80018ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	2207      	movs	r2, #7
 80018d0:	4013      	ands	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	409a      	lsls	r2, r3
 80018d8:	0013      	movs	r3, r2
 80018da:	43da      	mvns	r2, r3
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	691a      	ldr	r2, [r3, #16]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	2107      	movs	r1, #7
 80018ea:	400b      	ands	r3, r1
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	409a      	lsls	r2, r3
 80018f0:	0013      	movs	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	08da      	lsrs	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3208      	adds	r2, #8
 8001900:	0092      	lsls	r2, r2, #2
 8001902:	6939      	ldr	r1, [r7, #16]
 8001904:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2203      	movs	r2, #3
 8001912:	409a      	lsls	r2, r3
 8001914:	0013      	movs	r3, r2
 8001916:	43da      	mvns	r2, r3
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2203      	movs	r2, #3
 8001924:	401a      	ands	r2, r3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	409a      	lsls	r2, r3
 800192c:	0013      	movs	r3, r2
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	23c0      	movs	r3, #192	; 0xc0
 8001940:	029b      	lsls	r3, r3, #10
 8001942:	4013      	ands	r3, r2
 8001944:	d100      	bne.n	8001948 <HAL_GPIO_Init+0x174>
 8001946:	e09a      	b.n	8001a7e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001948:	4b54      	ldr	r3, [pc, #336]	; (8001a9c <HAL_GPIO_Init+0x2c8>)
 800194a:	699a      	ldr	r2, [r3, #24]
 800194c:	4b53      	ldr	r3, [pc, #332]	; (8001a9c <HAL_GPIO_Init+0x2c8>)
 800194e:	2101      	movs	r1, #1
 8001950:	430a      	orrs	r2, r1
 8001952:	619a      	str	r2, [r3, #24]
 8001954:	4b51      	ldr	r3, [pc, #324]	; (8001a9c <HAL_GPIO_Init+0x2c8>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	2201      	movs	r2, #1
 800195a:	4013      	ands	r3, r2
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001960:	4a4f      	ldr	r2, [pc, #316]	; (8001aa0 <HAL_GPIO_Init+0x2cc>)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	3302      	adds	r3, #2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	589b      	ldr	r3, [r3, r2]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2203      	movs	r2, #3
 8001972:	4013      	ands	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	220f      	movs	r2, #15
 8001978:	409a      	lsls	r2, r3
 800197a:	0013      	movs	r3, r2
 800197c:	43da      	mvns	r2, r3
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	2390      	movs	r3, #144	; 0x90
 8001988:	05db      	lsls	r3, r3, #23
 800198a:	429a      	cmp	r2, r3
 800198c:	d013      	beq.n	80019b6 <HAL_GPIO_Init+0x1e2>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a44      	ldr	r2, [pc, #272]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d00d      	beq.n	80019b2 <HAL_GPIO_Init+0x1de>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a43      	ldr	r2, [pc, #268]	; (8001aa8 <HAL_GPIO_Init+0x2d4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d007      	beq.n	80019ae <HAL_GPIO_Init+0x1da>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a42      	ldr	r2, [pc, #264]	; (8001aac <HAL_GPIO_Init+0x2d8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d101      	bne.n	80019aa <HAL_GPIO_Init+0x1d6>
 80019a6:	2303      	movs	r3, #3
 80019a8:	e006      	b.n	80019b8 <HAL_GPIO_Init+0x1e4>
 80019aa:	2305      	movs	r3, #5
 80019ac:	e004      	b.n	80019b8 <HAL_GPIO_Init+0x1e4>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e002      	b.n	80019b8 <HAL_GPIO_Init+0x1e4>
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <HAL_GPIO_Init+0x1e4>
 80019b6:	2300      	movs	r3, #0
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	2103      	movs	r1, #3
 80019bc:	400a      	ands	r2, r1
 80019be:	0092      	lsls	r2, r2, #2
 80019c0:	4093      	lsls	r3, r2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019c8:	4935      	ldr	r1, [pc, #212]	; (8001aa0 <HAL_GPIO_Init+0x2cc>)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	089b      	lsrs	r3, r3, #2
 80019ce:	3302      	adds	r3, #2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019d6:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <HAL_GPIO_Init+0x2dc>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	43da      	mvns	r2, r3
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	035b      	lsls	r3, r3, #13
 80019ee:	4013      	ands	r3, r2
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019fa:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <HAL_GPIO_Init+0x2dc>)
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a00:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <HAL_GPIO_Init+0x2dc>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	43da      	mvns	r2, r3
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	039b      	lsls	r3, r3, #14
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a24:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <HAL_GPIO_Init+0x2dc>)
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001a2a:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <HAL_GPIO_Init+0x2dc>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	43da      	mvns	r2, r3
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	029b      	lsls	r3, r3, #10
 8001a42:	4013      	ands	r3, r2
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a4e:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <HAL_GPIO_Init+0x2dc>)
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001a54:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <HAL_GPIO_Init+0x2dc>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	43da      	mvns	r2, r3
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	025b      	lsls	r3, r3, #9
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a78:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <HAL_GPIO_Init+0x2dc>)
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3301      	adds	r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	40da      	lsrs	r2, r3
 8001a8c:	1e13      	subs	r3, r2, #0
 8001a8e:	d000      	beq.n	8001a92 <HAL_GPIO_Init+0x2be>
 8001a90:	e6a8      	b.n	80017e4 <HAL_GPIO_Init+0x10>
  } 
}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	46c0      	nop			; (mov r8, r8)
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b006      	add	sp, #24
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	48000400 	.word	0x48000400
 8001aa8:	48000800 	.word	0x48000800
 8001aac:	48000c00 	.word	0x48000c00
 8001ab0:	40010400 	.word	0x40010400

08001ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	0008      	movs	r0, r1
 8001abe:	0011      	movs	r1, r2
 8001ac0:	1cbb      	adds	r3, r7, #2
 8001ac2:	1c02      	adds	r2, r0, #0
 8001ac4:	801a      	strh	r2, [r3, #0]
 8001ac6:	1c7b      	adds	r3, r7, #1
 8001ac8:	1c0a      	adds	r2, r1, #0
 8001aca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001acc:	1c7b      	adds	r3, r7, #1
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d004      	beq.n	8001ade <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ad4:	1cbb      	adds	r3, r7, #2
 8001ad6:	881a      	ldrh	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001adc:	e003      	b.n	8001ae6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ade:	1cbb      	adds	r3, r7, #2
 8001ae0:	881a      	ldrh	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	b002      	add	sp, #8
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	000a      	movs	r2, r1
 8001af8:	1cbb      	adds	r3, r7, #2
 8001afa:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b02:	1cbb      	adds	r3, r7, #2
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	041a      	lsls	r2, r3, #16
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	1cb9      	adds	r1, r7, #2
 8001b12:	8809      	ldrh	r1, [r1, #0]
 8001b14:	400b      	ands	r3, r1
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	619a      	str	r2, [r3, #24]
}
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b004      	add	sp, #16
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e301      	b.n	800213a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d100      	bne.n	8001b42 <HAL_RCC_OscConfig+0x1e>
 8001b40:	e08d      	b.n	8001c5e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b42:	4bc3      	ldr	r3, [pc, #780]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	220c      	movs	r2, #12
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d00e      	beq.n	8001b6c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b4e:	4bc0      	ldr	r3, [pc, #768]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	220c      	movs	r2, #12
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d116      	bne.n	8001b88 <HAL_RCC_OscConfig+0x64>
 8001b5a:	4bbd      	ldr	r3, [pc, #756]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	025b      	lsls	r3, r3, #9
 8001b62:	401a      	ands	r2, r3
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	025b      	lsls	r3, r3, #9
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d10d      	bne.n	8001b88 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6c:	4bb8      	ldr	r3, [pc, #736]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	029b      	lsls	r3, r3, #10
 8001b74:	4013      	ands	r3, r2
 8001b76:	d100      	bne.n	8001b7a <HAL_RCC_OscConfig+0x56>
 8001b78:	e070      	b.n	8001c5c <HAL_RCC_OscConfig+0x138>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d000      	beq.n	8001b84 <HAL_RCC_OscConfig+0x60>
 8001b82:	e06b      	b.n	8001c5c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e2d8      	b.n	800213a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x7c>
 8001b90:	4baf      	ldr	r3, [pc, #700]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4bae      	ldr	r3, [pc, #696]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001b96:	2180      	movs	r1, #128	; 0x80
 8001b98:	0249      	lsls	r1, r1, #9
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	e02f      	b.n	8001c00 <HAL_RCC_OscConfig+0xdc>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10c      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x9e>
 8001ba8:	4ba9      	ldr	r3, [pc, #676]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4ba8      	ldr	r3, [pc, #672]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001bae:	49a9      	ldr	r1, [pc, #676]	; (8001e54 <HAL_RCC_OscConfig+0x330>)
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	4ba6      	ldr	r3, [pc, #664]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4ba5      	ldr	r3, [pc, #660]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001bba:	49a7      	ldr	r1, [pc, #668]	; (8001e58 <HAL_RCC_OscConfig+0x334>)
 8001bbc:	400a      	ands	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	e01e      	b.n	8001c00 <HAL_RCC_OscConfig+0xdc>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b05      	cmp	r3, #5
 8001bc8:	d10e      	bne.n	8001be8 <HAL_RCC_OscConfig+0xc4>
 8001bca:	4ba1      	ldr	r3, [pc, #644]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	4ba0      	ldr	r3, [pc, #640]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001bd0:	2180      	movs	r1, #128	; 0x80
 8001bd2:	02c9      	lsls	r1, r1, #11
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	4b9d      	ldr	r3, [pc, #628]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b9c      	ldr	r3, [pc, #624]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001bde:	2180      	movs	r1, #128	; 0x80
 8001be0:	0249      	lsls	r1, r1, #9
 8001be2:	430a      	orrs	r2, r1
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	e00b      	b.n	8001c00 <HAL_RCC_OscConfig+0xdc>
 8001be8:	4b99      	ldr	r3, [pc, #612]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4b98      	ldr	r3, [pc, #608]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001bee:	4999      	ldr	r1, [pc, #612]	; (8001e54 <HAL_RCC_OscConfig+0x330>)
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	4b96      	ldr	r3, [pc, #600]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b95      	ldr	r3, [pc, #596]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001bfa:	4997      	ldr	r1, [pc, #604]	; (8001e58 <HAL_RCC_OscConfig+0x334>)
 8001bfc:	400a      	ands	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d014      	beq.n	8001c32 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7fe ff84 	bl	8000b14 <HAL_GetTick>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c12:	f7fe ff7f 	bl	8000b14 <HAL_GetTick>
 8001c16:	0002      	movs	r2, r0
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b64      	cmp	r3, #100	; 0x64
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e28a      	b.n	800213a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c24:	4b8a      	ldr	r3, [pc, #552]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	029b      	lsls	r3, r3, #10
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0xee>
 8001c30:	e015      	b.n	8001c5e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c32:	f7fe ff6f 	bl	8000b14 <HAL_GetTick>
 8001c36:	0003      	movs	r3, r0
 8001c38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c3c:	f7fe ff6a 	bl	8000b14 <HAL_GetTick>
 8001c40:	0002      	movs	r2, r0
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	; 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e275      	b.n	800213a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4e:	4b80      	ldr	r3, [pc, #512]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	029b      	lsls	r3, r3, #10
 8001c56:	4013      	ands	r3, r2
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x118>
 8001c5a:	e000      	b.n	8001c5e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2202      	movs	r2, #2
 8001c64:	4013      	ands	r3, r2
 8001c66:	d100      	bne.n	8001c6a <HAL_RCC_OscConfig+0x146>
 8001c68:	e069      	b.n	8001d3e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c6a:	4b79      	ldr	r3, [pc, #484]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	220c      	movs	r2, #12
 8001c70:	4013      	ands	r3, r2
 8001c72:	d00b      	beq.n	8001c8c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c74:	4b76      	ldr	r3, [pc, #472]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	220c      	movs	r2, #12
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d11c      	bne.n	8001cba <HAL_RCC_OscConfig+0x196>
 8001c80:	4b73      	ldr	r3, [pc, #460]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	025b      	lsls	r3, r3, #9
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d116      	bne.n	8001cba <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8c:	4b70      	ldr	r3, [pc, #448]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2202      	movs	r2, #2
 8001c92:	4013      	ands	r3, r2
 8001c94:	d005      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x17e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d001      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e24b      	b.n	800213a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca2:	4b6b      	ldr	r3, [pc, #428]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	22f8      	movs	r2, #248	; 0xf8
 8001ca8:	4393      	bics	r3, r2
 8001caa:	0019      	movs	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	00da      	lsls	r2, r3, #3
 8001cb2:	4b67      	ldr	r3, [pc, #412]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb8:	e041      	b.n	8001d3e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d024      	beq.n	8001d0c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc2:	4b63      	ldr	r3, [pc, #396]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	4b62      	ldr	r3, [pc, #392]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001cc8:	2101      	movs	r1, #1
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cce:	f7fe ff21 	bl	8000b14 <HAL_GetTick>
 8001cd2:	0003      	movs	r3, r0
 8001cd4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd8:	f7fe ff1c 	bl	8000b14 <HAL_GetTick>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e227      	b.n	800213a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cea:	4b59      	ldr	r3, [pc, #356]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d0f1      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf4:	4b56      	ldr	r3, [pc, #344]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	22f8      	movs	r2, #248	; 0xf8
 8001cfa:	4393      	bics	r3, r2
 8001cfc:	0019      	movs	r1, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	00da      	lsls	r2, r3, #3
 8001d04:	4b52      	ldr	r3, [pc, #328]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001d06:	430a      	orrs	r2, r1
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	e018      	b.n	8001d3e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d0c:	4b50      	ldr	r3, [pc, #320]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b4f      	ldr	r3, [pc, #316]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001d12:	2101      	movs	r1, #1
 8001d14:	438a      	bics	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7fe fefc 	bl	8000b14 <HAL_GetTick>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d22:	f7fe fef7 	bl	8000b14 <HAL_GetTick>
 8001d26:	0002      	movs	r2, r0
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e202      	b.n	800213a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d34:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d1f1      	bne.n	8001d22 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2208      	movs	r2, #8
 8001d44:	4013      	ands	r3, r2
 8001d46:	d036      	beq.n	8001db6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d019      	beq.n	8001d84 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d50:	4b3f      	ldr	r3, [pc, #252]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001d52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d54:	4b3e      	ldr	r3, [pc, #248]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001d56:	2101      	movs	r1, #1
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5c:	f7fe feda 	bl	8000b14 <HAL_GetTick>
 8001d60:	0003      	movs	r3, r0
 8001d62:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d66:	f7fe fed5 	bl	8000b14 <HAL_GetTick>
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e1e0      	b.n	800213a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d78:	4b35      	ldr	r3, [pc, #212]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d0f1      	beq.n	8001d66 <HAL_RCC_OscConfig+0x242>
 8001d82:	e018      	b.n	8001db6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d84:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001d86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d88:	4b31      	ldr	r3, [pc, #196]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	438a      	bics	r2, r1
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d90:	f7fe fec0 	bl	8000b14 <HAL_GetTick>
 8001d94:	0003      	movs	r3, r0
 8001d96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d9a:	f7fe febb 	bl	8000b14 <HAL_GetTick>
 8001d9e:	0002      	movs	r2, r0
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e1c6      	b.n	800213a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dac:	4b28      	ldr	r3, [pc, #160]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	2202      	movs	r2, #2
 8001db2:	4013      	ands	r3, r2
 8001db4:	d1f1      	bne.n	8001d9a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2204      	movs	r2, #4
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d100      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x29e>
 8001dc0:	e0b4      	b.n	8001f2c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc2:	201f      	movs	r0, #31
 8001dc4:	183b      	adds	r3, r7, r0
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dca:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001dcc:	69da      	ldr	r2, [r3, #28]
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	055b      	lsls	r3, r3, #21
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d110      	bne.n	8001df8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001dd8:	69da      	ldr	r2, [r3, #28]
 8001dda:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001ddc:	2180      	movs	r1, #128	; 0x80
 8001dde:	0549      	lsls	r1, r1, #21
 8001de0:	430a      	orrs	r2, r1
 8001de2:	61da      	str	r2, [r3, #28]
 8001de4:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001de6:	69da      	ldr	r2, [r3, #28]
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	055b      	lsls	r3, r3, #21
 8001dec:	4013      	ands	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001df2:	183b      	adds	r3, r7, r0
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df8:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4013      	ands	r3, r2
 8001e02:	d11a      	bne.n	8001e3a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e04:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001e0a:	2180      	movs	r1, #128	; 0x80
 8001e0c:	0049      	lsls	r1, r1, #1
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e12:	f7fe fe7f 	bl	8000b14 <HAL_GetTick>
 8001e16:	0003      	movs	r3, r0
 8001e18:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1c:	f7fe fe7a 	bl	8000b14 <HAL_GetTick>
 8001e20:	0002      	movs	r2, r0
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	; 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e185      	b.n	800213a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_RCC_OscConfig+0x338>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4013      	ands	r3, r2
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d10e      	bne.n	8001e60 <HAL_RCC_OscConfig+0x33c>
 8001e42:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001e44:	6a1a      	ldr	r2, [r3, #32]
 8001e46:	4b02      	ldr	r3, [pc, #8]	; (8001e50 <HAL_RCC_OscConfig+0x32c>)
 8001e48:	2101      	movs	r1, #1
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	621a      	str	r2, [r3, #32]
 8001e4e:	e035      	b.n	8001ebc <HAL_RCC_OscConfig+0x398>
 8001e50:	40021000 	.word	0x40021000
 8001e54:	fffeffff 	.word	0xfffeffff
 8001e58:	fffbffff 	.word	0xfffbffff
 8001e5c:	40007000 	.word	0x40007000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10c      	bne.n	8001e82 <HAL_RCC_OscConfig+0x35e>
 8001e68:	4bb6      	ldr	r3, [pc, #728]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001e6a:	6a1a      	ldr	r2, [r3, #32]
 8001e6c:	4bb5      	ldr	r3, [pc, #724]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001e6e:	2101      	movs	r1, #1
 8001e70:	438a      	bics	r2, r1
 8001e72:	621a      	str	r2, [r3, #32]
 8001e74:	4bb3      	ldr	r3, [pc, #716]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001e76:	6a1a      	ldr	r2, [r3, #32]
 8001e78:	4bb2      	ldr	r3, [pc, #712]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001e7a:	2104      	movs	r1, #4
 8001e7c:	438a      	bics	r2, r1
 8001e7e:	621a      	str	r2, [r3, #32]
 8001e80:	e01c      	b.n	8001ebc <HAL_RCC_OscConfig+0x398>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b05      	cmp	r3, #5
 8001e88:	d10c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x380>
 8001e8a:	4bae      	ldr	r3, [pc, #696]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001e8c:	6a1a      	ldr	r2, [r3, #32]
 8001e8e:	4bad      	ldr	r3, [pc, #692]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001e90:	2104      	movs	r1, #4
 8001e92:	430a      	orrs	r2, r1
 8001e94:	621a      	str	r2, [r3, #32]
 8001e96:	4bab      	ldr	r3, [pc, #684]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001e98:	6a1a      	ldr	r2, [r3, #32]
 8001e9a:	4baa      	ldr	r3, [pc, #680]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	621a      	str	r2, [r3, #32]
 8001ea2:	e00b      	b.n	8001ebc <HAL_RCC_OscConfig+0x398>
 8001ea4:	4ba7      	ldr	r3, [pc, #668]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001ea6:	6a1a      	ldr	r2, [r3, #32]
 8001ea8:	4ba6      	ldr	r3, [pc, #664]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001eaa:	2101      	movs	r1, #1
 8001eac:	438a      	bics	r2, r1
 8001eae:	621a      	str	r2, [r3, #32]
 8001eb0:	4ba4      	ldr	r3, [pc, #656]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001eb2:	6a1a      	ldr	r2, [r3, #32]
 8001eb4:	4ba3      	ldr	r3, [pc, #652]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001eb6:	2104      	movs	r1, #4
 8001eb8:	438a      	bics	r2, r1
 8001eba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d014      	beq.n	8001eee <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec4:	f7fe fe26 	bl	8000b14 <HAL_GetTick>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ecc:	e009      	b.n	8001ee2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ece:	f7fe fe21 	bl	8000b14 <HAL_GetTick>
 8001ed2:	0002      	movs	r2, r0
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	4a9b      	ldr	r2, [pc, #620]	; (8002148 <HAL_RCC_OscConfig+0x624>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e12b      	b.n	800213a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee2:	4b98      	ldr	r3, [pc, #608]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x3aa>
 8001eec:	e013      	b.n	8001f16 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eee:	f7fe fe11 	bl	8000b14 <HAL_GetTick>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef6:	e009      	b.n	8001f0c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef8:	f7fe fe0c 	bl	8000b14 <HAL_GetTick>
 8001efc:	0002      	movs	r2, r0
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	4a91      	ldr	r2, [pc, #580]	; (8002148 <HAL_RCC_OscConfig+0x624>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e116      	b.n	800213a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f0c:	4b8d      	ldr	r3, [pc, #564]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	2202      	movs	r2, #2
 8001f12:	4013      	ands	r3, r2
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f16:	231f      	movs	r3, #31
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d105      	bne.n	8001f2c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f20:	4b88      	ldr	r3, [pc, #544]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001f22:	69da      	ldr	r2, [r3, #28]
 8001f24:	4b87      	ldr	r3, [pc, #540]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001f26:	4989      	ldr	r1, [pc, #548]	; (800214c <HAL_RCC_OscConfig+0x628>)
 8001f28:	400a      	ands	r2, r1
 8001f2a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2210      	movs	r2, #16
 8001f32:	4013      	ands	r3, r2
 8001f34:	d063      	beq.n	8001ffe <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d12a      	bne.n	8001f94 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f3e:	4b81      	ldr	r3, [pc, #516]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f42:	4b80      	ldr	r3, [pc, #512]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001f44:	2104      	movs	r1, #4
 8001f46:	430a      	orrs	r2, r1
 8001f48:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001f4a:	4b7e      	ldr	r3, [pc, #504]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f4e:	4b7d      	ldr	r3, [pc, #500]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001f50:	2101      	movs	r1, #1
 8001f52:	430a      	orrs	r2, r1
 8001f54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f56:	f7fe fddd 	bl	8000b14 <HAL_GetTick>
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f60:	f7fe fdd8 	bl	8000b14 <HAL_GetTick>
 8001f64:	0002      	movs	r2, r0
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e0e3      	b.n	800213a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f72:	4b74      	ldr	r3, [pc, #464]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f76:	2202      	movs	r2, #2
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d0f1      	beq.n	8001f60 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f7c:	4b71      	ldr	r3, [pc, #452]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f80:	22f8      	movs	r2, #248	; 0xf8
 8001f82:	4393      	bics	r3, r2
 8001f84:	0019      	movs	r1, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	00da      	lsls	r2, r3, #3
 8001f8c:	4b6d      	ldr	r3, [pc, #436]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	635a      	str	r2, [r3, #52]	; 0x34
 8001f92:	e034      	b.n	8001ffe <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	3305      	adds	r3, #5
 8001f9a:	d111      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001f9c:	4b69      	ldr	r3, [pc, #420]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fa0:	4b68      	ldr	r3, [pc, #416]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001fa2:	2104      	movs	r1, #4
 8001fa4:	438a      	bics	r2, r1
 8001fa6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001fa8:	4b66      	ldr	r3, [pc, #408]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fac:	22f8      	movs	r2, #248	; 0xf8
 8001fae:	4393      	bics	r3, r2
 8001fb0:	0019      	movs	r1, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	00da      	lsls	r2, r3, #3
 8001fb8:	4b62      	ldr	r3, [pc, #392]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	635a      	str	r2, [r3, #52]	; 0x34
 8001fbe:	e01e      	b.n	8001ffe <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001fc0:	4b60      	ldr	r3, [pc, #384]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fc4:	4b5f      	ldr	r3, [pc, #380]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001fc6:	2104      	movs	r1, #4
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001fcc:	4b5d      	ldr	r3, [pc, #372]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd0:	4b5c      	ldr	r3, [pc, #368]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	438a      	bics	r2, r1
 8001fd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd8:	f7fe fd9c 	bl	8000b14 <HAL_GetTick>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001fe2:	f7fe fd97 	bl	8000b14 <HAL_GetTick>
 8001fe6:	0002      	movs	r2, r0
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e0a2      	b.n	800213a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ff4:	4b53      	ldr	r3, [pc, #332]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8001ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d1f1      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d100      	bne.n	8002008 <HAL_RCC_OscConfig+0x4e4>
 8002006:	e097      	b.n	8002138 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002008:	4b4e      	ldr	r3, [pc, #312]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	220c      	movs	r2, #12
 800200e:	4013      	ands	r3, r2
 8002010:	2b08      	cmp	r3, #8
 8002012:	d100      	bne.n	8002016 <HAL_RCC_OscConfig+0x4f2>
 8002014:	e06b      	b.n	80020ee <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d14c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201e:	4b49      	ldr	r3, [pc, #292]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	4b48      	ldr	r3, [pc, #288]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8002024:	494a      	ldr	r1, [pc, #296]	; (8002150 <HAL_RCC_OscConfig+0x62c>)
 8002026:	400a      	ands	r2, r1
 8002028:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202a:	f7fe fd73 	bl	8000b14 <HAL_GetTick>
 800202e:	0003      	movs	r3, r0
 8002030:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002034:	f7fe fd6e 	bl	8000b14 <HAL_GetTick>
 8002038:	0002      	movs	r2, r0
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e079      	b.n	800213a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002046:	4b3f      	ldr	r3, [pc, #252]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	049b      	lsls	r3, r3, #18
 800204e:	4013      	ands	r3, r2
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002052:	4b3c      	ldr	r3, [pc, #240]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8002054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002056:	220f      	movs	r2, #15
 8002058:	4393      	bics	r3, r2
 800205a:	0019      	movs	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002060:	4b38      	ldr	r3, [pc, #224]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8002062:	430a      	orrs	r2, r1
 8002064:	62da      	str	r2, [r3, #44]	; 0x2c
 8002066:	4b37      	ldr	r3, [pc, #220]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4a3a      	ldr	r2, [pc, #232]	; (8002154 <HAL_RCC_OscConfig+0x630>)
 800206c:	4013      	ands	r3, r2
 800206e:	0019      	movs	r1, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	431a      	orrs	r2, r3
 800207a:	4b32      	ldr	r3, [pc, #200]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 800207c:	430a      	orrs	r2, r1
 800207e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002080:	4b30      	ldr	r3, [pc, #192]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b2f      	ldr	r3, [pc, #188]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8002086:	2180      	movs	r1, #128	; 0x80
 8002088:	0449      	lsls	r1, r1, #17
 800208a:	430a      	orrs	r2, r1
 800208c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7fe fd41 	bl	8000b14 <HAL_GetTick>
 8002092:	0003      	movs	r3, r0
 8002094:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002098:	f7fe fd3c 	bl	8000b14 <HAL_GetTick>
 800209c:	0002      	movs	r2, r0
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e047      	b.n	800213a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020aa:	4b26      	ldr	r3, [pc, #152]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	2380      	movs	r3, #128	; 0x80
 80020b0:	049b      	lsls	r3, r3, #18
 80020b2:	4013      	ands	r3, r2
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x574>
 80020b6:	e03f      	b.n	8002138 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b8:	4b22      	ldr	r3, [pc, #136]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b21      	ldr	r3, [pc, #132]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 80020be:	4924      	ldr	r1, [pc, #144]	; (8002150 <HAL_RCC_OscConfig+0x62c>)
 80020c0:	400a      	ands	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c4:	f7fe fd26 	bl	8000b14 <HAL_GetTick>
 80020c8:	0003      	movs	r3, r0
 80020ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ce:	f7fe fd21 	bl	8000b14 <HAL_GetTick>
 80020d2:	0002      	movs	r2, r0
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e02c      	b.n	800213a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e0:	4b18      	ldr	r3, [pc, #96]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	049b      	lsls	r3, r3, #18
 80020e8:	4013      	ands	r3, r2
 80020ea:	d1f0      	bne.n	80020ce <HAL_RCC_OscConfig+0x5aa>
 80020ec:	e024      	b.n	8002138 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e01f      	b.n	800213a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <HAL_RCC_OscConfig+0x620>)
 8002102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002104:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	025b      	lsls	r3, r3, #9
 800210c:	401a      	ands	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	429a      	cmp	r2, r3
 8002114:	d10e      	bne.n	8002134 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	220f      	movs	r2, #15
 800211a:	401a      	ands	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d107      	bne.n	8002134 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	23f0      	movs	r3, #240	; 0xf0
 8002128:	039b      	lsls	r3, r3, #14
 800212a:	401a      	ands	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	0018      	movs	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	b008      	add	sp, #32
 8002140:	bd80      	pop	{r7, pc}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	40021000 	.word	0x40021000
 8002148:	00001388 	.word	0x00001388
 800214c:	efffffff 	.word	0xefffffff
 8002150:	feffffff 	.word	0xfeffffff
 8002154:	ffc2ffff 	.word	0xffc2ffff

08002158 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0b3      	b.n	80022d4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800216c:	4b5b      	ldr	r3, [pc, #364]	; (80022dc <HAL_RCC_ClockConfig+0x184>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2201      	movs	r2, #1
 8002172:	4013      	ands	r3, r2
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d911      	bls.n	800219e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b58      	ldr	r3, [pc, #352]	; (80022dc <HAL_RCC_ClockConfig+0x184>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2201      	movs	r2, #1
 8002180:	4393      	bics	r3, r2
 8002182:	0019      	movs	r1, r3
 8002184:	4b55      	ldr	r3, [pc, #340]	; (80022dc <HAL_RCC_ClockConfig+0x184>)
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218c:	4b53      	ldr	r3, [pc, #332]	; (80022dc <HAL_RCC_ClockConfig+0x184>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2201      	movs	r2, #1
 8002192:	4013      	ands	r3, r2
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d001      	beq.n	800219e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e09a      	b.n	80022d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2202      	movs	r2, #2
 80021a4:	4013      	ands	r3, r2
 80021a6:	d015      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2204      	movs	r2, #4
 80021ae:	4013      	ands	r3, r2
 80021b0:	d006      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80021b2:	4b4b      	ldr	r3, [pc, #300]	; (80022e0 <HAL_RCC_ClockConfig+0x188>)
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	4b4a      	ldr	r3, [pc, #296]	; (80022e0 <HAL_RCC_ClockConfig+0x188>)
 80021b8:	21e0      	movs	r1, #224	; 0xe0
 80021ba:	00c9      	lsls	r1, r1, #3
 80021bc:	430a      	orrs	r2, r1
 80021be:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c0:	4b47      	ldr	r3, [pc, #284]	; (80022e0 <HAL_RCC_ClockConfig+0x188>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	22f0      	movs	r2, #240	; 0xf0
 80021c6:	4393      	bics	r3, r2
 80021c8:	0019      	movs	r1, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	4b44      	ldr	r3, [pc, #272]	; (80022e0 <HAL_RCC_ClockConfig+0x188>)
 80021d0:	430a      	orrs	r2, r1
 80021d2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2201      	movs	r2, #1
 80021da:	4013      	ands	r3, r2
 80021dc:	d040      	beq.n	8002260 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d107      	bne.n	80021f6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	4b3e      	ldr	r3, [pc, #248]	; (80022e0 <HAL_RCC_ClockConfig+0x188>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	029b      	lsls	r3, r3, #10
 80021ee:	4013      	ands	r3, r2
 80021f0:	d114      	bne.n	800221c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e06e      	b.n	80022d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fe:	4b38      	ldr	r3, [pc, #224]	; (80022e0 <HAL_RCC_ClockConfig+0x188>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	049b      	lsls	r3, r3, #18
 8002206:	4013      	ands	r3, r2
 8002208:	d108      	bne.n	800221c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e062      	b.n	80022d4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220e:	4b34      	ldr	r3, [pc, #208]	; (80022e0 <HAL_RCC_ClockConfig+0x188>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2202      	movs	r2, #2
 8002214:	4013      	ands	r3, r2
 8002216:	d101      	bne.n	800221c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e05b      	b.n	80022d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800221c:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <HAL_RCC_ClockConfig+0x188>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2203      	movs	r2, #3
 8002222:	4393      	bics	r3, r2
 8002224:	0019      	movs	r1, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	4b2d      	ldr	r3, [pc, #180]	; (80022e0 <HAL_RCC_ClockConfig+0x188>)
 800222c:	430a      	orrs	r2, r1
 800222e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002230:	f7fe fc70 	bl	8000b14 <HAL_GetTick>
 8002234:	0003      	movs	r3, r0
 8002236:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002238:	e009      	b.n	800224e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223a:	f7fe fc6b 	bl	8000b14 <HAL_GetTick>
 800223e:	0002      	movs	r2, r0
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	4a27      	ldr	r2, [pc, #156]	; (80022e4 <HAL_RCC_ClockConfig+0x18c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e042      	b.n	80022d4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <HAL_RCC_ClockConfig+0x188>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	220c      	movs	r2, #12
 8002254:	401a      	ands	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	429a      	cmp	r2, r3
 800225e:	d1ec      	bne.n	800223a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002260:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <HAL_RCC_ClockConfig+0x184>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2201      	movs	r2, #1
 8002266:	4013      	ands	r3, r2
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d211      	bcs.n	8002292 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <HAL_RCC_ClockConfig+0x184>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2201      	movs	r2, #1
 8002274:	4393      	bics	r3, r2
 8002276:	0019      	movs	r1, r3
 8002278:	4b18      	ldr	r3, [pc, #96]	; (80022dc <HAL_RCC_ClockConfig+0x184>)
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002280:	4b16      	ldr	r3, [pc, #88]	; (80022dc <HAL_RCC_ClockConfig+0x184>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2201      	movs	r2, #1
 8002286:	4013      	ands	r3, r2
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d001      	beq.n	8002292 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e020      	b.n	80022d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2204      	movs	r2, #4
 8002298:	4013      	ands	r3, r2
 800229a:	d009      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800229c:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <HAL_RCC_ClockConfig+0x188>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4a11      	ldr	r2, [pc, #68]	; (80022e8 <HAL_RCC_ClockConfig+0x190>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	0019      	movs	r1, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <HAL_RCC_ClockConfig+0x188>)
 80022ac:	430a      	orrs	r2, r1
 80022ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022b0:	f000 f820 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 80022b4:	0001      	movs	r1, r0
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <HAL_RCC_ClockConfig+0x188>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	091b      	lsrs	r3, r3, #4
 80022bc:	220f      	movs	r2, #15
 80022be:	4013      	ands	r3, r2
 80022c0:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <HAL_RCC_ClockConfig+0x194>)
 80022c2:	5cd3      	ldrb	r3, [r2, r3]
 80022c4:	000a      	movs	r2, r1
 80022c6:	40da      	lsrs	r2, r3
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <HAL_RCC_ClockConfig+0x198>)
 80022ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80022cc:	2000      	movs	r0, #0
 80022ce:	f7fe fbdb 	bl	8000a88 <HAL_InitTick>
  
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	0018      	movs	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b004      	add	sp, #16
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40022000 	.word	0x40022000
 80022e0:	40021000 	.word	0x40021000
 80022e4:	00001388 	.word	0x00001388
 80022e8:	fffff8ff 	.word	0xfffff8ff
 80022ec:	08003c60 	.word	0x08003c60
 80022f0:	20000000 	.word	0x20000000

080022f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800230e:	4b20      	ldr	r3, [pc, #128]	; (8002390 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	220c      	movs	r2, #12
 8002318:	4013      	ands	r3, r2
 800231a:	2b04      	cmp	r3, #4
 800231c:	d002      	beq.n	8002324 <HAL_RCC_GetSysClockFreq+0x30>
 800231e:	2b08      	cmp	r3, #8
 8002320:	d003      	beq.n	800232a <HAL_RCC_GetSysClockFreq+0x36>
 8002322:	e02c      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002324:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002326:	613b      	str	r3, [r7, #16]
      break;
 8002328:	e02c      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	0c9b      	lsrs	r3, r3, #18
 800232e:	220f      	movs	r2, #15
 8002330:	4013      	ands	r3, r2
 8002332:	4a19      	ldr	r2, [pc, #100]	; (8002398 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002334:	5cd3      	ldrb	r3, [r2, r3]
 8002336:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002338:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_RCC_GetSysClockFreq+0x9c>)
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	220f      	movs	r2, #15
 800233e:	4013      	ands	r3, r2
 8002340:	4a16      	ldr	r2, [pc, #88]	; (800239c <HAL_RCC_GetSysClockFreq+0xa8>)
 8002342:	5cd3      	ldrb	r3, [r2, r3]
 8002344:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	025b      	lsls	r3, r3, #9
 800234c:	4013      	ands	r3, r2
 800234e:	d009      	beq.n	8002364 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002350:	68b9      	ldr	r1, [r7, #8]
 8002352:	4810      	ldr	r0, [pc, #64]	; (8002394 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002354:	f7fd fed8 	bl	8000108 <__udivsi3>
 8002358:	0003      	movs	r3, r0
 800235a:	001a      	movs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4353      	muls	r3, r2
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	e009      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	000a      	movs	r2, r1
 8002368:	0152      	lsls	r2, r2, #5
 800236a:	1a52      	subs	r2, r2, r1
 800236c:	0193      	lsls	r3, r2, #6
 800236e:	1a9b      	subs	r3, r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	185b      	adds	r3, r3, r1
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	613b      	str	r3, [r7, #16]
      break;
 800237c:	e002      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002380:	613b      	str	r3, [r7, #16]
      break;
 8002382:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002384:	693b      	ldr	r3, [r7, #16]
}
 8002386:	0018      	movs	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	b006      	add	sp, #24
 800238c:	bd80      	pop	{r7, pc}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	40021000 	.word	0x40021000
 8002394:	007a1200 	.word	0x007a1200
 8002398:	08003c78 	.word	0x08003c78
 800239c:	08003c88 	.word	0x08003c88

080023a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023a4:	4b02      	ldr	r3, [pc, #8]	; (80023b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80023a6:	681b      	ldr	r3, [r3, #0]
}
 80023a8:	0018      	movs	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	20000000 	.word	0x20000000

080023b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80023b8:	f7ff fff2 	bl	80023a0 <HAL_RCC_GetHCLKFreq>
 80023bc:	0001      	movs	r1, r0
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	2207      	movs	r2, #7
 80023c6:	4013      	ands	r3, r2
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80023ca:	5cd3      	ldrb	r3, [r2, r3]
 80023cc:	40d9      	lsrs	r1, r3
 80023ce:	000b      	movs	r3, r1
}    
 80023d0:	0018      	movs	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	40021000 	.word	0x40021000
 80023dc:	08003c70 	.word	0x08003c70

080023e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	025b      	lsls	r3, r3, #9
 80023f8:	4013      	ands	r3, r2
 80023fa:	d100      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80023fc:	e08e      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80023fe:	2017      	movs	r0, #23
 8002400:	183b      	adds	r3, r7, r0
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002406:	4b5f      	ldr	r3, [pc, #380]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002408:	69da      	ldr	r2, [r3, #28]
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	055b      	lsls	r3, r3, #21
 800240e:	4013      	ands	r3, r2
 8002410:	d110      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	4b5c      	ldr	r3, [pc, #368]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002414:	69da      	ldr	r2, [r3, #28]
 8002416:	4b5b      	ldr	r3, [pc, #364]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002418:	2180      	movs	r1, #128	; 0x80
 800241a:	0549      	lsls	r1, r1, #21
 800241c:	430a      	orrs	r2, r1
 800241e:	61da      	str	r2, [r3, #28]
 8002420:	4b58      	ldr	r3, [pc, #352]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002422:	69da      	ldr	r2, [r3, #28]
 8002424:	2380      	movs	r3, #128	; 0x80
 8002426:	055b      	lsls	r3, r3, #21
 8002428:	4013      	ands	r3, r2
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800242e:	183b      	adds	r3, r7, r0
 8002430:	2201      	movs	r2, #1
 8002432:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002434:	4b54      	ldr	r3, [pc, #336]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4013      	ands	r3, r2
 800243e:	d11a      	bne.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002440:	4b51      	ldr	r3, [pc, #324]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b50      	ldr	r3, [pc, #320]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002446:	2180      	movs	r1, #128	; 0x80
 8002448:	0049      	lsls	r1, r1, #1
 800244a:	430a      	orrs	r2, r1
 800244c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800244e:	f7fe fb61 	bl	8000b14 <HAL_GetTick>
 8002452:	0003      	movs	r3, r0
 8002454:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002456:	e008      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002458:	f7fe fb5c 	bl	8000b14 <HAL_GetTick>
 800245c:	0002      	movs	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	; 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e087      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246a:	4b47      	ldr	r3, [pc, #284]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	2380      	movs	r3, #128	; 0x80
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	4013      	ands	r3, r2
 8002474:	d0f0      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002476:	4b43      	ldr	r3, [pc, #268]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002478:	6a1a      	ldr	r2, [r3, #32]
 800247a:	23c0      	movs	r3, #192	; 0xc0
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4013      	ands	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d034      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	23c0      	movs	r3, #192	; 0xc0
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4013      	ands	r3, r2
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	429a      	cmp	r2, r3
 8002496:	d02c      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002498:	4b3a      	ldr	r3, [pc, #232]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	4a3b      	ldr	r2, [pc, #236]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800249e:	4013      	ands	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024a2:	4b38      	ldr	r3, [pc, #224]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024a4:	6a1a      	ldr	r2, [r3, #32]
 80024a6:	4b37      	ldr	r3, [pc, #220]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024a8:	2180      	movs	r1, #128	; 0x80
 80024aa:	0249      	lsls	r1, r1, #9
 80024ac:	430a      	orrs	r2, r1
 80024ae:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024b0:	4b34      	ldr	r3, [pc, #208]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024b2:	6a1a      	ldr	r2, [r3, #32]
 80024b4:	4b33      	ldr	r3, [pc, #204]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024b6:	4936      	ldr	r1, [pc, #216]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80024b8:	400a      	ands	r2, r1
 80024ba:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024bc:	4b31      	ldr	r3, [pc, #196]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	4013      	ands	r3, r2
 80024c8:	d013      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ca:	f7fe fb23 	bl	8000b14 <HAL_GetTick>
 80024ce:	0003      	movs	r3, r0
 80024d0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d2:	e009      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d4:	f7fe fb1e 	bl	8000b14 <HAL_GetTick>
 80024d8:	0002      	movs	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	4a2d      	ldr	r2, [pc, #180]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e048      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e8:	4b26      	ldr	r3, [pc, #152]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	2202      	movs	r2, #2
 80024ee:	4013      	ands	r3, r2
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024f2:	4b24      	ldr	r3, [pc, #144]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4a25      	ldr	r2, [pc, #148]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	0019      	movs	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	4b20      	ldr	r3, [pc, #128]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002502:	430a      	orrs	r2, r1
 8002504:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002506:	2317      	movs	r3, #23
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d105      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002510:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002512:	69da      	ldr	r2, [r3, #28]
 8002514:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002516:	4920      	ldr	r1, [pc, #128]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002518:	400a      	ands	r2, r1
 800251a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2201      	movs	r2, #1
 8002522:	4013      	ands	r3, r2
 8002524:	d009      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002526:	4b17      	ldr	r3, [pc, #92]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	2203      	movs	r2, #3
 800252c:	4393      	bics	r3, r2
 800252e:	0019      	movs	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	4b13      	ldr	r3, [pc, #76]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002536:	430a      	orrs	r2, r1
 8002538:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2220      	movs	r2, #32
 8002540:	4013      	ands	r3, r2
 8002542:	d009      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002544:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	2210      	movs	r2, #16
 800254a:	4393      	bics	r3, r2
 800254c:	0019      	movs	r1, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	4b0c      	ldr	r3, [pc, #48]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002554:	430a      	orrs	r2, r1
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4013      	ands	r3, r2
 8002562:	d009      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002564:	4b07      	ldr	r3, [pc, #28]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	2240      	movs	r2, #64	; 0x40
 800256a:	4393      	bics	r3, r2
 800256c:	0019      	movs	r1, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	4b04      	ldr	r3, [pc, #16]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002574:	430a      	orrs	r2, r1
 8002576:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	0018      	movs	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	b006      	add	sp, #24
 8002580:	bd80      	pop	{r7, pc}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	40021000 	.word	0x40021000
 8002588:	40007000 	.word	0x40007000
 800258c:	fffffcff 	.word	0xfffffcff
 8002590:	fffeffff 	.word	0xfffeffff
 8002594:	00001388 	.word	0x00001388
 8002598:	efffffff 	.word	0xefffffff

0800259c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e042      	b.n	8002634 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	223d      	movs	r2, #61	; 0x3d
 80025b2:	5c9b      	ldrb	r3, [r3, r2]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d107      	bne.n	80025ca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	223c      	movs	r2, #60	; 0x3c
 80025be:	2100      	movs	r1, #0
 80025c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	0018      	movs	r0, r3
 80025c6:	f7fe f949 	bl	800085c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	223d      	movs	r2, #61	; 0x3d
 80025ce:	2102      	movs	r1, #2
 80025d0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3304      	adds	r3, #4
 80025da:	0019      	movs	r1, r3
 80025dc:	0010      	movs	r0, r2
 80025de:	f000 fab3 	bl	8002b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2246      	movs	r2, #70	; 0x46
 80025e6:	2101      	movs	r1, #1
 80025e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	223e      	movs	r2, #62	; 0x3e
 80025ee:	2101      	movs	r1, #1
 80025f0:	5499      	strb	r1, [r3, r2]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	223f      	movs	r2, #63	; 0x3f
 80025f6:	2101      	movs	r1, #1
 80025f8:	5499      	strb	r1, [r3, r2]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2240      	movs	r2, #64	; 0x40
 80025fe:	2101      	movs	r1, #1
 8002600:	5499      	strb	r1, [r3, r2]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2241      	movs	r2, #65	; 0x41
 8002606:	2101      	movs	r1, #1
 8002608:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2242      	movs	r2, #66	; 0x42
 800260e:	2101      	movs	r1, #1
 8002610:	5499      	strb	r1, [r3, r2]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2243      	movs	r2, #67	; 0x43
 8002616:	2101      	movs	r1, #1
 8002618:	5499      	strb	r1, [r3, r2]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2244      	movs	r2, #68	; 0x44
 800261e:	2101      	movs	r1, #1
 8002620:	5499      	strb	r1, [r3, r2]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2245      	movs	r2, #69	; 0x45
 8002626:	2101      	movs	r1, #1
 8002628:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	223d      	movs	r2, #61	; 0x3d
 800262e:	2101      	movs	r1, #1
 8002630:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	0018      	movs	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	b002      	add	sp, #8
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	223d      	movs	r2, #61	; 0x3d
 8002648:	5c9b      	ldrb	r3, [r3, r2]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d001      	beq.n	8002654 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e033      	b.n	80026bc <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	223d      	movs	r2, #61	; 0x3d
 8002658:	2102      	movs	r1, #2
 800265a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a18      	ldr	r2, [pc, #96]	; (80026c4 <HAL_TIM_Base_Start+0x88>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d00f      	beq.n	8002686 <HAL_TIM_Base_Start+0x4a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	05db      	lsls	r3, r3, #23
 800266e:	429a      	cmp	r2, r3
 8002670:	d009      	beq.n	8002686 <HAL_TIM_Base_Start+0x4a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <HAL_TIM_Base_Start+0x8c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d004      	beq.n	8002686 <HAL_TIM_Base_Start+0x4a>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a12      	ldr	r2, [pc, #72]	; (80026cc <HAL_TIM_Base_Start+0x90>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d111      	bne.n	80026aa <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2207      	movs	r2, #7
 800268e:	4013      	ands	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b06      	cmp	r3, #6
 8002696:	d010      	beq.n	80026ba <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2101      	movs	r1, #1
 80026a4:	430a      	orrs	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a8:	e007      	b.n	80026ba <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2101      	movs	r1, #1
 80026b6:	430a      	orrs	r2, r1
 80026b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	0018      	movs	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	b004      	add	sp, #16
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40012c00 	.word	0x40012c00
 80026c8:	40000400 	.word	0x40000400
 80026cc:	40014000 	.word	0x40014000

080026d0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e042      	b.n	8002768 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	223d      	movs	r2, #61	; 0x3d
 80026e6:	5c9b      	ldrb	r3, [r3, r2]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d107      	bne.n	80026fe <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	223c      	movs	r2, #60	; 0x3c
 80026f2:	2100      	movs	r1, #0
 80026f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	0018      	movs	r0, r3
 80026fa:	f000 f839 	bl	8002770 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	223d      	movs	r2, #61	; 0x3d
 8002702:	2102      	movs	r1, #2
 8002704:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3304      	adds	r3, #4
 800270e:	0019      	movs	r1, r3
 8002710:	0010      	movs	r0, r2
 8002712:	f000 fa19 	bl	8002b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2246      	movs	r2, #70	; 0x46
 800271a:	2101      	movs	r1, #1
 800271c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	223e      	movs	r2, #62	; 0x3e
 8002722:	2101      	movs	r1, #1
 8002724:	5499      	strb	r1, [r3, r2]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	223f      	movs	r2, #63	; 0x3f
 800272a:	2101      	movs	r1, #1
 800272c:	5499      	strb	r1, [r3, r2]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2240      	movs	r2, #64	; 0x40
 8002732:	2101      	movs	r1, #1
 8002734:	5499      	strb	r1, [r3, r2]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2241      	movs	r2, #65	; 0x41
 800273a:	2101      	movs	r1, #1
 800273c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2242      	movs	r2, #66	; 0x42
 8002742:	2101      	movs	r1, #1
 8002744:	5499      	strb	r1, [r3, r2]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2243      	movs	r2, #67	; 0x43
 800274a:	2101      	movs	r1, #1
 800274c:	5499      	strb	r1, [r3, r2]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2244      	movs	r2, #68	; 0x44
 8002752:	2101      	movs	r1, #1
 8002754:	5499      	strb	r1, [r3, r2]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2245      	movs	r2, #69	; 0x45
 800275a:	2101      	movs	r1, #1
 800275c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	223d      	movs	r2, #61	; 0x3d
 8002762:	2101      	movs	r1, #1
 8002764:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	0018      	movs	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	b002      	add	sp, #8
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002778:	46c0      	nop			; (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b002      	add	sp, #8
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d108      	bne.n	80027a2 <HAL_TIM_OC_Start+0x22>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	223e      	movs	r2, #62	; 0x3e
 8002794:	5c9b      	ldrb	r3, [r3, r2]
 8002796:	b2db      	uxtb	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	1e5a      	subs	r2, r3, #1
 800279c:	4193      	sbcs	r3, r2
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	e01f      	b.n	80027e2 <HAL_TIM_OC_Start+0x62>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d108      	bne.n	80027ba <HAL_TIM_OC_Start+0x3a>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	223f      	movs	r2, #63	; 0x3f
 80027ac:	5c9b      	ldrb	r3, [r3, r2]
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	1e5a      	subs	r2, r3, #1
 80027b4:	4193      	sbcs	r3, r2
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	e013      	b.n	80027e2 <HAL_TIM_OC_Start+0x62>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d108      	bne.n	80027d2 <HAL_TIM_OC_Start+0x52>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2240      	movs	r2, #64	; 0x40
 80027c4:	5c9b      	ldrb	r3, [r3, r2]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	1e5a      	subs	r2, r3, #1
 80027cc:	4193      	sbcs	r3, r2
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	e007      	b.n	80027e2 <HAL_TIM_OC_Start+0x62>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2241      	movs	r2, #65	; 0x41
 80027d6:	5c9b      	ldrb	r3, [r3, r2]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	3b01      	subs	r3, #1
 80027dc:	1e5a      	subs	r2, r3, #1
 80027de:	4193      	sbcs	r3, r2
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_TIM_OC_Start+0x6a>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e074      	b.n	80028d4 <HAL_TIM_OC_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d104      	bne.n	80027fa <HAL_TIM_OC_Start+0x7a>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	223e      	movs	r2, #62	; 0x3e
 80027f4:	2102      	movs	r1, #2
 80027f6:	5499      	strb	r1, [r3, r2]
 80027f8:	e013      	b.n	8002822 <HAL_TIM_OC_Start+0xa2>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d104      	bne.n	800280a <HAL_TIM_OC_Start+0x8a>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	223f      	movs	r2, #63	; 0x3f
 8002804:	2102      	movs	r1, #2
 8002806:	5499      	strb	r1, [r3, r2]
 8002808:	e00b      	b.n	8002822 <HAL_TIM_OC_Start+0xa2>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b08      	cmp	r3, #8
 800280e:	d104      	bne.n	800281a <HAL_TIM_OC_Start+0x9a>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2240      	movs	r2, #64	; 0x40
 8002814:	2102      	movs	r1, #2
 8002816:	5499      	strb	r1, [r3, r2]
 8002818:	e003      	b.n	8002822 <HAL_TIM_OC_Start+0xa2>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2241      	movs	r2, #65	; 0x41
 800281e:	2102      	movs	r1, #2
 8002820:	5499      	strb	r1, [r3, r2]

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6839      	ldr	r1, [r7, #0]
 8002828:	2201      	movs	r2, #1
 800282a:	0018      	movs	r0, r3
 800282c:	f000 fca2 	bl	8003174 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a29      	ldr	r2, [pc, #164]	; (80028dc <HAL_TIM_OC_Start+0x15c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d00e      	beq.n	8002858 <HAL_TIM_OC_Start+0xd8>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a28      	ldr	r2, [pc, #160]	; (80028e0 <HAL_TIM_OC_Start+0x160>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d009      	beq.n	8002858 <HAL_TIM_OC_Start+0xd8>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a26      	ldr	r2, [pc, #152]	; (80028e4 <HAL_TIM_OC_Start+0x164>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d004      	beq.n	8002858 <HAL_TIM_OC_Start+0xd8>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a25      	ldr	r2, [pc, #148]	; (80028e8 <HAL_TIM_OC_Start+0x168>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d101      	bne.n	800285c <HAL_TIM_OC_Start+0xdc>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <HAL_TIM_OC_Start+0xde>
 800285c:	2300      	movs	r3, #0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d008      	beq.n	8002874 <HAL_TIM_OC_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2180      	movs	r1, #128	; 0x80
 800286e:	0209      	lsls	r1, r1, #8
 8002870:	430a      	orrs	r2, r1
 8002872:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a18      	ldr	r2, [pc, #96]	; (80028dc <HAL_TIM_OC_Start+0x15c>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00f      	beq.n	800289e <HAL_TIM_OC_Start+0x11e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	05db      	lsls	r3, r3, #23
 8002886:	429a      	cmp	r2, r3
 8002888:	d009      	beq.n	800289e <HAL_TIM_OC_Start+0x11e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a17      	ldr	r2, [pc, #92]	; (80028ec <HAL_TIM_OC_Start+0x16c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d004      	beq.n	800289e <HAL_TIM_OC_Start+0x11e>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a11      	ldr	r2, [pc, #68]	; (80028e0 <HAL_TIM_OC_Start+0x160>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d111      	bne.n	80028c2 <HAL_TIM_OC_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2207      	movs	r2, #7
 80028a6:	4013      	ands	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b06      	cmp	r3, #6
 80028ae:	d010      	beq.n	80028d2 <HAL_TIM_OC_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2101      	movs	r1, #1
 80028bc:	430a      	orrs	r2, r1
 80028be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c0:	e007      	b.n	80028d2 <HAL_TIM_OC_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2101      	movs	r1, #1
 80028ce:	430a      	orrs	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	0018      	movs	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b004      	add	sp, #16
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40012c00 	.word	0x40012c00
 80028e0:	40014000 	.word	0x40014000
 80028e4:	40014400 	.word	0x40014400
 80028e8:	40014800 	.word	0x40014800
 80028ec:	40000400 	.word	0x40000400

080028f0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028fc:	2317      	movs	r3, #23
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	223c      	movs	r2, #60	; 0x3c
 8002908:	5c9b      	ldrb	r3, [r3, r2]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_TIM_OC_ConfigChannel+0x22>
 800290e:	2302      	movs	r3, #2
 8002910:	e042      	b.n	8002998 <HAL_TIM_OC_ConfigChannel+0xa8>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	223c      	movs	r2, #60	; 0x3c
 8002916:	2101      	movs	r1, #1
 8002918:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b0c      	cmp	r3, #12
 800291e:	d027      	beq.n	8002970 <HAL_TIM_OC_ConfigChannel+0x80>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b0c      	cmp	r3, #12
 8002924:	d82c      	bhi.n	8002980 <HAL_TIM_OC_ConfigChannel+0x90>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b08      	cmp	r3, #8
 800292a:	d019      	beq.n	8002960 <HAL_TIM_OC_ConfigChannel+0x70>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b08      	cmp	r3, #8
 8002930:	d826      	bhi.n	8002980 <HAL_TIM_OC_ConfigChannel+0x90>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_TIM_OC_ConfigChannel+0x50>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b04      	cmp	r3, #4
 800293c:	d008      	beq.n	8002950 <HAL_TIM_OC_ConfigChannel+0x60>
 800293e:	e01f      	b.n	8002980 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	0011      	movs	r1, r2
 8002948:	0018      	movs	r0, r3
 800294a:	f000 f97d 	bl	8002c48 <TIM_OC1_SetConfig>
      break;
 800294e:	e01c      	b.n	800298a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	0011      	movs	r1, r2
 8002958:	0018      	movs	r0, r3
 800295a:	f000 f9fd 	bl	8002d58 <TIM_OC2_SetConfig>
      break;
 800295e:	e014      	b.n	800298a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	0011      	movs	r1, r2
 8002968:	0018      	movs	r0, r3
 800296a:	f000 fa79 	bl	8002e60 <TIM_OC3_SetConfig>
      break;
 800296e:	e00c      	b.n	800298a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	0011      	movs	r1, r2
 8002978:	0018      	movs	r0, r3
 800297a:	f000 faf7 	bl	8002f6c <TIM_OC4_SetConfig>
      break;
 800297e:	e004      	b.n	800298a <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8002980:	2317      	movs	r3, #23
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	2201      	movs	r2, #1
 8002986:	701a      	strb	r2, [r3, #0]
      break;
 8002988:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	223c      	movs	r2, #60	; 0x3c
 800298e:	2100      	movs	r1, #0
 8002990:	5499      	strb	r1, [r3, r2]

  return status;
 8002992:	2317      	movs	r3, #23
 8002994:	18fb      	adds	r3, r7, r3
 8002996:	781b      	ldrb	r3, [r3, #0]
}
 8002998:	0018      	movs	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	b006      	add	sp, #24
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029aa:	230f      	movs	r3, #15
 80029ac:	18fb      	adds	r3, r7, r3
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	223c      	movs	r2, #60	; 0x3c
 80029b6:	5c9b      	ldrb	r3, [r3, r2]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_TIM_ConfigClockSource+0x20>
 80029bc:	2302      	movs	r3, #2
 80029be:	e0bc      	b.n	8002b3a <HAL_TIM_ConfigClockSource+0x19a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	223c      	movs	r2, #60	; 0x3c
 80029c4:	2101      	movs	r1, #1
 80029c6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	223d      	movs	r2, #61	; 0x3d
 80029cc:	2102      	movs	r1, #2
 80029ce:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2277      	movs	r2, #119	; 0x77
 80029dc:	4393      	bics	r3, r2
 80029de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4a58      	ldr	r2, [pc, #352]	; (8002b44 <HAL_TIM_ConfigClockSource+0x1a4>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	0192      	lsls	r2, r2, #6
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d040      	beq.n	8002a7e <HAL_TIM_ConfigClockSource+0xde>
 80029fc:	2280      	movs	r2, #128	; 0x80
 80029fe:	0192      	lsls	r2, r2, #6
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d900      	bls.n	8002a06 <HAL_TIM_ConfigClockSource+0x66>
 8002a04:	e088      	b.n	8002b18 <HAL_TIM_ConfigClockSource+0x178>
 8002a06:	2280      	movs	r2, #128	; 0x80
 8002a08:	0152      	lsls	r2, r2, #5
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d100      	bne.n	8002a10 <HAL_TIM_ConfigClockSource+0x70>
 8002a0e:	e088      	b.n	8002b22 <HAL_TIM_ConfigClockSource+0x182>
 8002a10:	2280      	movs	r2, #128	; 0x80
 8002a12:	0152      	lsls	r2, r2, #5
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d900      	bls.n	8002a1a <HAL_TIM_ConfigClockSource+0x7a>
 8002a18:	e07e      	b.n	8002b18 <HAL_TIM_ConfigClockSource+0x178>
 8002a1a:	2b70      	cmp	r3, #112	; 0x70
 8002a1c:	d018      	beq.n	8002a50 <HAL_TIM_ConfigClockSource+0xb0>
 8002a1e:	d900      	bls.n	8002a22 <HAL_TIM_ConfigClockSource+0x82>
 8002a20:	e07a      	b.n	8002b18 <HAL_TIM_ConfigClockSource+0x178>
 8002a22:	2b60      	cmp	r3, #96	; 0x60
 8002a24:	d04f      	beq.n	8002ac6 <HAL_TIM_ConfigClockSource+0x126>
 8002a26:	d900      	bls.n	8002a2a <HAL_TIM_ConfigClockSource+0x8a>
 8002a28:	e076      	b.n	8002b18 <HAL_TIM_ConfigClockSource+0x178>
 8002a2a:	2b50      	cmp	r3, #80	; 0x50
 8002a2c:	d03b      	beq.n	8002aa6 <HAL_TIM_ConfigClockSource+0x106>
 8002a2e:	d900      	bls.n	8002a32 <HAL_TIM_ConfigClockSource+0x92>
 8002a30:	e072      	b.n	8002b18 <HAL_TIM_ConfigClockSource+0x178>
 8002a32:	2b40      	cmp	r3, #64	; 0x40
 8002a34:	d057      	beq.n	8002ae6 <HAL_TIM_ConfigClockSource+0x146>
 8002a36:	d900      	bls.n	8002a3a <HAL_TIM_ConfigClockSource+0x9a>
 8002a38:	e06e      	b.n	8002b18 <HAL_TIM_ConfigClockSource+0x178>
 8002a3a:	2b30      	cmp	r3, #48	; 0x30
 8002a3c:	d063      	beq.n	8002b06 <HAL_TIM_ConfigClockSource+0x166>
 8002a3e:	d86b      	bhi.n	8002b18 <HAL_TIM_ConfigClockSource+0x178>
 8002a40:	2b20      	cmp	r3, #32
 8002a42:	d060      	beq.n	8002b06 <HAL_TIM_ConfigClockSource+0x166>
 8002a44:	d868      	bhi.n	8002b18 <HAL_TIM_ConfigClockSource+0x178>
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d05d      	beq.n	8002b06 <HAL_TIM_ConfigClockSource+0x166>
 8002a4a:	2b10      	cmp	r3, #16
 8002a4c:	d05b      	beq.n	8002b06 <HAL_TIM_ConfigClockSource+0x166>
 8002a4e:	e063      	b.n	8002b18 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6818      	ldr	r0, [r3, #0]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	6899      	ldr	r1, [r3, #8]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f000 fb68 	bl	8003134 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2277      	movs	r2, #119	; 0x77
 8002a70:	4313      	orrs	r3, r2
 8002a72:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	609a      	str	r2, [r3, #8]
      break;
 8002a7c:	e052      	b.n	8002b24 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	6899      	ldr	r1, [r3, #8]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f000 fb51 	bl	8003134 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2180      	movs	r1, #128	; 0x80
 8002a9e:	01c9      	lsls	r1, r1, #7
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	609a      	str	r2, [r3, #8]
      break;
 8002aa4:	e03e      	b.n	8002b24 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6818      	ldr	r0, [r3, #0]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	6859      	ldr	r1, [r3, #4]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	001a      	movs	r2, r3
 8002ab4:	f000 fac4 	bl	8003040 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2150      	movs	r1, #80	; 0x50
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f000 fb1e 	bl	8003100 <TIM_ITRx_SetConfig>
      break;
 8002ac4:	e02e      	b.n	8002b24 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	6859      	ldr	r1, [r3, #4]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	001a      	movs	r2, r3
 8002ad4:	f000 fae2 	bl	800309c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2160      	movs	r1, #96	; 0x60
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f000 fb0e 	bl	8003100 <TIM_ITRx_SetConfig>
      break;
 8002ae4:	e01e      	b.n	8002b24 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6818      	ldr	r0, [r3, #0]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	6859      	ldr	r1, [r3, #4]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	001a      	movs	r2, r3
 8002af4:	f000 faa4 	bl	8003040 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2140      	movs	r1, #64	; 0x40
 8002afe:	0018      	movs	r0, r3
 8002b00:	f000 fafe 	bl	8003100 <TIM_ITRx_SetConfig>
      break;
 8002b04:	e00e      	b.n	8002b24 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	0019      	movs	r1, r3
 8002b10:	0010      	movs	r0, r2
 8002b12:	f000 faf5 	bl	8003100 <TIM_ITRx_SetConfig>
      break;
 8002b16:	e005      	b.n	8002b24 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002b18:	230f      	movs	r3, #15
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	701a      	strb	r2, [r3, #0]
      break;
 8002b20:	e000      	b.n	8002b24 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002b22:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	223d      	movs	r2, #61	; 0x3d
 8002b28:	2101      	movs	r1, #1
 8002b2a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	223c      	movs	r2, #60	; 0x3c
 8002b30:	2100      	movs	r1, #0
 8002b32:	5499      	strb	r1, [r3, r2]

  return status;
 8002b34:	230f      	movs	r3, #15
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	781b      	ldrb	r3, [r3, #0]
}
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b004      	add	sp, #16
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	ffff00ff 	.word	0xffff00ff

08002b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a34      	ldr	r2, [pc, #208]	; (8002c2c <TIM_Base_SetConfig+0xe4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d008      	beq.n	8002b72 <TIM_Base_SetConfig+0x2a>
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	2380      	movs	r3, #128	; 0x80
 8002b64:	05db      	lsls	r3, r3, #23
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d003      	beq.n	8002b72 <TIM_Base_SetConfig+0x2a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a30      	ldr	r2, [pc, #192]	; (8002c30 <TIM_Base_SetConfig+0xe8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d108      	bne.n	8002b84 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2270      	movs	r2, #112	; 0x70
 8002b76:	4393      	bics	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a29      	ldr	r2, [pc, #164]	; (8002c2c <TIM_Base_SetConfig+0xe4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d018      	beq.n	8002bbe <TIM_Base_SetConfig+0x76>
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	05db      	lsls	r3, r3, #23
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d013      	beq.n	8002bbe <TIM_Base_SetConfig+0x76>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a25      	ldr	r2, [pc, #148]	; (8002c30 <TIM_Base_SetConfig+0xe8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00f      	beq.n	8002bbe <TIM_Base_SetConfig+0x76>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a24      	ldr	r2, [pc, #144]	; (8002c34 <TIM_Base_SetConfig+0xec>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00b      	beq.n	8002bbe <TIM_Base_SetConfig+0x76>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a23      	ldr	r2, [pc, #140]	; (8002c38 <TIM_Base_SetConfig+0xf0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d007      	beq.n	8002bbe <TIM_Base_SetConfig+0x76>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a22      	ldr	r2, [pc, #136]	; (8002c3c <TIM_Base_SetConfig+0xf4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d003      	beq.n	8002bbe <TIM_Base_SetConfig+0x76>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a21      	ldr	r2, [pc, #132]	; (8002c40 <TIM_Base_SetConfig+0xf8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d108      	bne.n	8002bd0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4a20      	ldr	r2, [pc, #128]	; (8002c44 <TIM_Base_SetConfig+0xfc>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2280      	movs	r2, #128	; 0x80
 8002bd4:	4393      	bics	r3, r2
 8002bd6:	001a      	movs	r2, r3
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a0c      	ldr	r2, [pc, #48]	; (8002c2c <TIM_Base_SetConfig+0xe4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00b      	beq.n	8002c16 <TIM_Base_SetConfig+0xce>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a0d      	ldr	r2, [pc, #52]	; (8002c38 <TIM_Base_SetConfig+0xf0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d007      	beq.n	8002c16 <TIM_Base_SetConfig+0xce>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a0c      	ldr	r2, [pc, #48]	; (8002c3c <TIM_Base_SetConfig+0xf4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d003      	beq.n	8002c16 <TIM_Base_SetConfig+0xce>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a0b      	ldr	r2, [pc, #44]	; (8002c40 <TIM_Base_SetConfig+0xf8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d103      	bne.n	8002c1e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	615a      	str	r2, [r3, #20]
}
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b004      	add	sp, #16
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40012c00 	.word	0x40012c00
 8002c30:	40000400 	.word	0x40000400
 8002c34:	40002000 	.word	0x40002000
 8002c38:	40014000 	.word	0x40014000
 8002c3c:	40014400 	.word	0x40014400
 8002c40:	40014800 	.word	0x40014800
 8002c44:	fffffcff 	.word	0xfffffcff

08002c48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	2201      	movs	r2, #1
 8002c58:	4393      	bics	r3, r2
 8002c5a:	001a      	movs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2270      	movs	r2, #112	; 0x70
 8002c76:	4393      	bics	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	4393      	bics	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	4393      	bics	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a27      	ldr	r2, [pc, #156]	; (8002d40 <TIM_OC1_SetConfig+0xf8>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d00b      	beq.n	8002cbe <TIM_OC1_SetConfig+0x76>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a26      	ldr	r2, [pc, #152]	; (8002d44 <TIM_OC1_SetConfig+0xfc>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d007      	beq.n	8002cbe <TIM_OC1_SetConfig+0x76>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a25      	ldr	r2, [pc, #148]	; (8002d48 <TIM_OC1_SetConfig+0x100>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d003      	beq.n	8002cbe <TIM_OC1_SetConfig+0x76>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a24      	ldr	r2, [pc, #144]	; (8002d4c <TIM_OC1_SetConfig+0x104>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d10c      	bne.n	8002cd8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2208      	movs	r2, #8
 8002cc2:	4393      	bics	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2204      	movs	r2, #4
 8002cd4:	4393      	bics	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a19      	ldr	r2, [pc, #100]	; (8002d40 <TIM_OC1_SetConfig+0xf8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d00b      	beq.n	8002cf8 <TIM_OC1_SetConfig+0xb0>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a18      	ldr	r2, [pc, #96]	; (8002d44 <TIM_OC1_SetConfig+0xfc>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d007      	beq.n	8002cf8 <TIM_OC1_SetConfig+0xb0>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a17      	ldr	r2, [pc, #92]	; (8002d48 <TIM_OC1_SetConfig+0x100>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d003      	beq.n	8002cf8 <TIM_OC1_SetConfig+0xb0>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a16      	ldr	r2, [pc, #88]	; (8002d4c <TIM_OC1_SetConfig+0x104>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d111      	bne.n	8002d1c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	4a15      	ldr	r2, [pc, #84]	; (8002d50 <TIM_OC1_SetConfig+0x108>)
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4a14      	ldr	r2, [pc, #80]	; (8002d54 <TIM_OC1_SetConfig+0x10c>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	621a      	str	r2, [r3, #32]
}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b006      	add	sp, #24
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	40012c00 	.word	0x40012c00
 8002d44:	40014000 	.word	0x40014000
 8002d48:	40014400 	.word	0x40014400
 8002d4c:	40014800 	.word	0x40014800
 8002d50:	fffffeff 	.word	0xfffffeff
 8002d54:	fffffdff 	.word	0xfffffdff

08002d58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	2210      	movs	r2, #16
 8002d68:	4393      	bics	r3, r2
 8002d6a:	001a      	movs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4a2e      	ldr	r2, [pc, #184]	; (8002e40 <TIM_OC2_SetConfig+0xe8>)
 8002d86:	4013      	ands	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4a2d      	ldr	r2, [pc, #180]	; (8002e44 <TIM_OC2_SetConfig+0xec>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	021b      	lsls	r3, r3, #8
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2220      	movs	r2, #32
 8002da2:	4393      	bics	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a24      	ldr	r2, [pc, #144]	; (8002e48 <TIM_OC2_SetConfig+0xf0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d10d      	bne.n	8002dd6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2280      	movs	r2, #128	; 0x80
 8002dbe:	4393      	bics	r3, r2
 8002dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2240      	movs	r2, #64	; 0x40
 8002dd2:	4393      	bics	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a1b      	ldr	r2, [pc, #108]	; (8002e48 <TIM_OC2_SetConfig+0xf0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00b      	beq.n	8002df6 <TIM_OC2_SetConfig+0x9e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a1a      	ldr	r2, [pc, #104]	; (8002e4c <TIM_OC2_SetConfig+0xf4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d007      	beq.n	8002df6 <TIM_OC2_SetConfig+0x9e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a19      	ldr	r2, [pc, #100]	; (8002e50 <TIM_OC2_SetConfig+0xf8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d003      	beq.n	8002df6 <TIM_OC2_SetConfig+0x9e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a18      	ldr	r2, [pc, #96]	; (8002e54 <TIM_OC2_SetConfig+0xfc>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d113      	bne.n	8002e1e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4a17      	ldr	r2, [pc, #92]	; (8002e58 <TIM_OC2_SetConfig+0x100>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4a16      	ldr	r2, [pc, #88]	; (8002e5c <TIM_OC2_SetConfig+0x104>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	621a      	str	r2, [r3, #32]
}
 8002e38:	46c0      	nop			; (mov r8, r8)
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b006      	add	sp, #24
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	ffff8fff 	.word	0xffff8fff
 8002e44:	fffffcff 	.word	0xfffffcff
 8002e48:	40012c00 	.word	0x40012c00
 8002e4c:	40014000 	.word	0x40014000
 8002e50:	40014400 	.word	0x40014400
 8002e54:	40014800 	.word	0x40014800
 8002e58:	fffffbff 	.word	0xfffffbff
 8002e5c:	fffff7ff 	.word	0xfffff7ff

08002e60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	4a35      	ldr	r2, [pc, #212]	; (8002f44 <TIM_OC3_SetConfig+0xe4>)
 8002e70:	401a      	ands	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2270      	movs	r2, #112	; 0x70
 8002e8c:	4393      	bics	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2203      	movs	r2, #3
 8002e94:	4393      	bics	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	4a28      	ldr	r2, [pc, #160]	; (8002f48 <TIM_OC3_SetConfig+0xe8>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	021b      	lsls	r3, r3, #8
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a24      	ldr	r2, [pc, #144]	; (8002f4c <TIM_OC3_SetConfig+0xec>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d10d      	bne.n	8002eda <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	4a23      	ldr	r2, [pc, #140]	; (8002f50 <TIM_OC3_SetConfig+0xf0>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	021b      	lsls	r3, r3, #8
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	4a1f      	ldr	r2, [pc, #124]	; (8002f54 <TIM_OC3_SetConfig+0xf4>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a1b      	ldr	r2, [pc, #108]	; (8002f4c <TIM_OC3_SetConfig+0xec>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00b      	beq.n	8002efa <TIM_OC3_SetConfig+0x9a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a1c      	ldr	r2, [pc, #112]	; (8002f58 <TIM_OC3_SetConfig+0xf8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d007      	beq.n	8002efa <TIM_OC3_SetConfig+0x9a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a1b      	ldr	r2, [pc, #108]	; (8002f5c <TIM_OC3_SetConfig+0xfc>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d003      	beq.n	8002efa <TIM_OC3_SetConfig+0x9a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a1a      	ldr	r2, [pc, #104]	; (8002f60 <TIM_OC3_SetConfig+0x100>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d113      	bne.n	8002f22 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4a19      	ldr	r2, [pc, #100]	; (8002f64 <TIM_OC3_SetConfig+0x104>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4a18      	ldr	r2, [pc, #96]	; (8002f68 <TIM_OC3_SetConfig+0x108>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	621a      	str	r2, [r3, #32]
}
 8002f3c:	46c0      	nop			; (mov r8, r8)
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b006      	add	sp, #24
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	fffffeff 	.word	0xfffffeff
 8002f48:	fffffdff 	.word	0xfffffdff
 8002f4c:	40012c00 	.word	0x40012c00
 8002f50:	fffff7ff 	.word	0xfffff7ff
 8002f54:	fffffbff 	.word	0xfffffbff
 8002f58:	40014000 	.word	0x40014000
 8002f5c:	40014400 	.word	0x40014400
 8002f60:	40014800 	.word	0x40014800
 8002f64:	ffffefff 	.word	0xffffefff
 8002f68:	ffffdfff 	.word	0xffffdfff

08002f6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	4a28      	ldr	r2, [pc, #160]	; (800301c <TIM_OC4_SetConfig+0xb0>)
 8002f7c:	401a      	ands	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4a22      	ldr	r2, [pc, #136]	; (8003020 <TIM_OC4_SetConfig+0xb4>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4a21      	ldr	r2, [pc, #132]	; (8003024 <TIM_OC4_SetConfig+0xb8>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	021b      	lsls	r3, r3, #8
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	4a1d      	ldr	r2, [pc, #116]	; (8003028 <TIM_OC4_SetConfig+0xbc>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	031b      	lsls	r3, r3, #12
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a19      	ldr	r2, [pc, #100]	; (800302c <TIM_OC4_SetConfig+0xc0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00b      	beq.n	8002fe4 <TIM_OC4_SetConfig+0x78>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a18      	ldr	r2, [pc, #96]	; (8003030 <TIM_OC4_SetConfig+0xc4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d007      	beq.n	8002fe4 <TIM_OC4_SetConfig+0x78>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a17      	ldr	r2, [pc, #92]	; (8003034 <TIM_OC4_SetConfig+0xc8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d003      	beq.n	8002fe4 <TIM_OC4_SetConfig+0x78>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a16      	ldr	r2, [pc, #88]	; (8003038 <TIM_OC4_SetConfig+0xcc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d109      	bne.n	8002ff8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	4a15      	ldr	r2, [pc, #84]	; (800303c <TIM_OC4_SetConfig+0xd0>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	019b      	lsls	r3, r3, #6
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	621a      	str	r2, [r3, #32]
}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	46bd      	mov	sp, r7
 8003016:	b006      	add	sp, #24
 8003018:	bd80      	pop	{r7, pc}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	ffffefff 	.word	0xffffefff
 8003020:	ffff8fff 	.word	0xffff8fff
 8003024:	fffffcff 	.word	0xfffffcff
 8003028:	ffffdfff 	.word	0xffffdfff
 800302c:	40012c00 	.word	0x40012c00
 8003030:	40014000 	.word	0x40014000
 8003034:	40014400 	.word	0x40014400
 8003038:	40014800 	.word	0x40014800
 800303c:	ffffbfff 	.word	0xffffbfff

08003040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	2201      	movs	r2, #1
 8003058:	4393      	bics	r3, r2
 800305a:	001a      	movs	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	22f0      	movs	r2, #240	; 0xf0
 800306a:	4393      	bics	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	220a      	movs	r2, #10
 800307c:	4393      	bics	r3, r2
 800307e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	621a      	str	r2, [r3, #32]
}
 8003094:	46c0      	nop			; (mov r8, r8)
 8003096:	46bd      	mov	sp, r7
 8003098:	b006      	add	sp, #24
 800309a:	bd80      	pop	{r7, pc}

0800309c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	2210      	movs	r2, #16
 80030ae:	4393      	bics	r3, r2
 80030b0:	001a      	movs	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	4a0d      	ldr	r2, [pc, #52]	; (80030fc <TIM_TI2_ConfigInputStage+0x60>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	031b      	lsls	r3, r3, #12
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	22a0      	movs	r2, #160	; 0xa0
 80030d8:	4393      	bics	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	621a      	str	r2, [r3, #32]
}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b006      	add	sp, #24
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	ffff0fff 	.word	0xffff0fff

08003100 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2270      	movs	r2, #112	; 0x70
 8003114:	4393      	bics	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4313      	orrs	r3, r2
 800311e:	2207      	movs	r2, #7
 8003120:	4313      	orrs	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	609a      	str	r2, [r3, #8]
}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	46bd      	mov	sp, r7
 800312e:	b004      	add	sp, #16
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	4a09      	ldr	r2, [pc, #36]	; (8003170 <TIM_ETR_SetConfig+0x3c>)
 800314c:	4013      	ands	r3, r2
 800314e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	021a      	lsls	r2, r3, #8
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	431a      	orrs	r2, r3
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	4313      	orrs	r3, r2
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	4313      	orrs	r3, r2
 8003160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	609a      	str	r2, [r3, #8]
}
 8003168:	46c0      	nop			; (mov r8, r8)
 800316a:	46bd      	mov	sp, r7
 800316c:	b006      	add	sp, #24
 800316e:	bd80      	pop	{r7, pc}
 8003170:	ffff00ff 	.word	0xffff00ff

08003174 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	221f      	movs	r2, #31
 8003184:	4013      	ands	r3, r2
 8003186:	2201      	movs	r2, #1
 8003188:	409a      	lsls	r2, r3
 800318a:	0013      	movs	r3, r2
 800318c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	43d2      	mvns	r2, r2
 8003196:	401a      	ands	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a1a      	ldr	r2, [r3, #32]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	211f      	movs	r1, #31
 80031a4:	400b      	ands	r3, r1
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4099      	lsls	r1, r3
 80031aa:	000b      	movs	r3, r1
 80031ac:	431a      	orrs	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	621a      	str	r2, [r3, #32]
}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b006      	add	sp, #24
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	223c      	movs	r2, #60	; 0x3c
 80031ca:	5c9b      	ldrb	r3, [r3, r2]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e047      	b.n	8003264 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	223c      	movs	r2, #60	; 0x3c
 80031d8:	2101      	movs	r1, #1
 80031da:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	223d      	movs	r2, #61	; 0x3d
 80031e0:	2102      	movs	r1, #2
 80031e2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2270      	movs	r2, #112	; 0x70
 80031f8:	4393      	bics	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a16      	ldr	r2, [pc, #88]	; (800326c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00f      	beq.n	8003238 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	05db      	lsls	r3, r3, #23
 8003220:	429a      	cmp	r2, r3
 8003222:	d009      	beq.n	8003238 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a11      	ldr	r2, [pc, #68]	; (8003270 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d004      	beq.n	8003238 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a10      	ldr	r2, [pc, #64]	; (8003274 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d10c      	bne.n	8003252 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2280      	movs	r2, #128	; 0x80
 800323c:	4393      	bics	r3, r2
 800323e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	4313      	orrs	r3, r2
 8003248:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	223d      	movs	r2, #61	; 0x3d
 8003256:	2101      	movs	r1, #1
 8003258:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	223c      	movs	r2, #60	; 0x3c
 800325e:	2100      	movs	r1, #0
 8003260:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	0018      	movs	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	b004      	add	sp, #16
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40012c00 	.word	0x40012c00
 8003270:	40000400 	.word	0x40000400
 8003274:	40014000 	.word	0x40014000

08003278 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	223c      	movs	r2, #60	; 0x3c
 800328a:	5c9b      	ldrb	r3, [r3, r2]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003290:	2302      	movs	r3, #2
 8003292:	e03e      	b.n	8003312 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	223c      	movs	r2, #60	; 0x3c
 8003298:	2101      	movs	r1, #1
 800329a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	22ff      	movs	r2, #255	; 0xff
 80032a0:	4393      	bics	r3, r2
 80032a2:	001a      	movs	r2, r3
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4a1b      	ldr	r2, [pc, #108]	; (800331c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80032b0:	401a      	ands	r2, r3
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4a18      	ldr	r2, [pc, #96]	; (8003320 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80032be:	401a      	ands	r2, r3
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4a16      	ldr	r2, [pc, #88]	; (8003324 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80032cc:	401a      	ands	r2, r3
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4a13      	ldr	r2, [pc, #76]	; (8003328 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80032da:	401a      	ands	r2, r3
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4a11      	ldr	r2, [pc, #68]	; (800332c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80032e8:	401a      	ands	r2, r3
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4a0e      	ldr	r2, [pc, #56]	; (8003330 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80032f6:	401a      	ands	r2, r3
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	223c      	movs	r2, #60	; 0x3c
 800330c:	2100      	movs	r1, #0
 800330e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	b004      	add	sp, #16
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	fffffcff 	.word	0xfffffcff
 8003320:	fffffbff 	.word	0xfffffbff
 8003324:	fffff7ff 	.word	0xfffff7ff
 8003328:	ffffefff 	.word	0xffffefff
 800332c:	ffffdfff 	.word	0xffffdfff
 8003330:	ffffbfff 	.word	0xffffbfff

08003334 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e044      	b.n	80033d0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d107      	bne.n	800335e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2278      	movs	r2, #120	; 0x78
 8003352:	2100      	movs	r1, #0
 8003354:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	0018      	movs	r0, r3
 800335a:	f7fd fadf 	bl	800091c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2224      	movs	r2, #36	; 0x24
 8003362:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2101      	movs	r1, #1
 8003370:	438a      	bics	r2, r1
 8003372:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	0018      	movs	r0, r3
 8003378:	f000 f8d0 	bl	800351c <UART_SetConfig>
 800337c:	0003      	movs	r3, r0
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e024      	b.n	80033d0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	0018      	movs	r0, r3
 8003392:	f000 fa03 	bl	800379c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	490d      	ldr	r1, [pc, #52]	; (80033d8 <HAL_UART_Init+0xa4>)
 80033a2:	400a      	ands	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	212a      	movs	r1, #42	; 0x2a
 80033b2:	438a      	bics	r2, r1
 80033b4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2101      	movs	r1, #1
 80033c2:	430a      	orrs	r2, r1
 80033c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	0018      	movs	r0, r3
 80033ca:	f000 fa9b 	bl	8003904 <UART_CheckIdleState>
 80033ce:	0003      	movs	r3, r0
}
 80033d0:	0018      	movs	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b002      	add	sp, #8
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	ffffb7ff 	.word	0xffffb7ff

080033dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08a      	sub	sp, #40	; 0x28
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	1dbb      	adds	r3, r7, #6
 80033ea:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d000      	beq.n	80033f6 <HAL_UART_Transmit+0x1a>
 80033f4:	e08d      	b.n	8003512 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <HAL_UART_Transmit+0x28>
 80033fc:	1dbb      	adds	r3, r7, #6
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e085      	b.n	8003514 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	2380      	movs	r3, #128	; 0x80
 800340e:	015b      	lsls	r3, r3, #5
 8003410:	429a      	cmp	r2, r3
 8003412:	d109      	bne.n	8003428 <HAL_UART_Transmit+0x4c>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d105      	bne.n	8003428 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2201      	movs	r2, #1
 8003420:	4013      	ands	r3, r2
 8003422:	d001      	beq.n	8003428 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e075      	b.n	8003514 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2284      	movs	r2, #132	; 0x84
 800342c:	2100      	movs	r1, #0
 800342e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2221      	movs	r2, #33	; 0x21
 8003434:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003436:	f7fd fb6d 	bl	8000b14 <HAL_GetTick>
 800343a:	0003      	movs	r3, r0
 800343c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1dba      	adds	r2, r7, #6
 8003442:	2150      	movs	r1, #80	; 0x50
 8003444:	8812      	ldrh	r2, [r2, #0]
 8003446:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1dba      	adds	r2, r7, #6
 800344c:	2152      	movs	r1, #82	; 0x52
 800344e:	8812      	ldrh	r2, [r2, #0]
 8003450:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	2380      	movs	r3, #128	; 0x80
 8003458:	015b      	lsls	r3, r3, #5
 800345a:	429a      	cmp	r2, r3
 800345c:	d108      	bne.n	8003470 <HAL_UART_Transmit+0x94>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d104      	bne.n	8003470 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	61bb      	str	r3, [r7, #24]
 800346e:	e003      	b.n	8003478 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003474:	2300      	movs	r3, #0
 8003476:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003478:	e030      	b.n	80034dc <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	0013      	movs	r3, r2
 8003484:	2200      	movs	r2, #0
 8003486:	2180      	movs	r1, #128	; 0x80
 8003488:	f000 fae4 	bl	8003a54 <UART_WaitOnFlagUntilTimeout>
 800348c:	1e03      	subs	r3, r0, #0
 800348e:	d004      	beq.n	800349a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2220      	movs	r2, #32
 8003494:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e03c      	b.n	8003514 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10b      	bne.n	80034b8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	881a      	ldrh	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	05d2      	lsls	r2, r2, #23
 80034aa:	0dd2      	lsrs	r2, r2, #23
 80034ac:	b292      	uxth	r2, r2
 80034ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	3302      	adds	r3, #2
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	e008      	b.n	80034ca <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	781a      	ldrb	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	b292      	uxth	r2, r2
 80034c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	3301      	adds	r3, #1
 80034c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2252      	movs	r2, #82	; 0x52
 80034ce:	5a9b      	ldrh	r3, [r3, r2]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b299      	uxth	r1, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2252      	movs	r2, #82	; 0x52
 80034da:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2252      	movs	r2, #82	; 0x52
 80034e0:	5a9b      	ldrh	r3, [r3, r2]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1c8      	bne.n	800347a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	0013      	movs	r3, r2
 80034f2:	2200      	movs	r2, #0
 80034f4:	2140      	movs	r1, #64	; 0x40
 80034f6:	f000 faad 	bl	8003a54 <UART_WaitOnFlagUntilTimeout>
 80034fa:	1e03      	subs	r3, r0, #0
 80034fc:	d004      	beq.n	8003508 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2220      	movs	r2, #32
 8003502:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e005      	b.n	8003514 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	e000      	b.n	8003514 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8003512:	2302      	movs	r3, #2
  }
}
 8003514:	0018      	movs	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	b008      	add	sp, #32
 800351a:	bd80      	pop	{r7, pc}

0800351c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003524:	231e      	movs	r3, #30
 8003526:	18fb      	adds	r3, r7, r3
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	4313      	orrs	r3, r2
 8003542:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a8d      	ldr	r2, [pc, #564]	; (8003780 <UART_SetConfig+0x264>)
 800354c:	4013      	ands	r3, r2
 800354e:	0019      	movs	r1, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	430a      	orrs	r2, r1
 8003558:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	4a88      	ldr	r2, [pc, #544]	; (8003784 <UART_SetConfig+0x268>)
 8003562:	4013      	ands	r3, r2
 8003564:	0019      	movs	r1, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	4a7f      	ldr	r2, [pc, #508]	; (8003788 <UART_SetConfig+0x26c>)
 800358a:	4013      	ands	r3, r2
 800358c:	0019      	movs	r1, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	430a      	orrs	r2, r1
 8003596:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a7b      	ldr	r2, [pc, #492]	; (800378c <UART_SetConfig+0x270>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d127      	bne.n	80035f2 <UART_SetConfig+0xd6>
 80035a2:	4b7b      	ldr	r3, [pc, #492]	; (8003790 <UART_SetConfig+0x274>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	2203      	movs	r2, #3
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d00d      	beq.n	80035ca <UART_SetConfig+0xae>
 80035ae:	d81b      	bhi.n	80035e8 <UART_SetConfig+0xcc>
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d014      	beq.n	80035de <UART_SetConfig+0xc2>
 80035b4:	d818      	bhi.n	80035e8 <UART_SetConfig+0xcc>
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <UART_SetConfig+0xa4>
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d00a      	beq.n	80035d4 <UART_SetConfig+0xb8>
 80035be:	e013      	b.n	80035e8 <UART_SetConfig+0xcc>
 80035c0:	231f      	movs	r3, #31
 80035c2:	18fb      	adds	r3, r7, r3
 80035c4:	2200      	movs	r2, #0
 80035c6:	701a      	strb	r2, [r3, #0]
 80035c8:	e021      	b.n	800360e <UART_SetConfig+0xf2>
 80035ca:	231f      	movs	r3, #31
 80035cc:	18fb      	adds	r3, r7, r3
 80035ce:	2202      	movs	r2, #2
 80035d0:	701a      	strb	r2, [r3, #0]
 80035d2:	e01c      	b.n	800360e <UART_SetConfig+0xf2>
 80035d4:	231f      	movs	r3, #31
 80035d6:	18fb      	adds	r3, r7, r3
 80035d8:	2204      	movs	r2, #4
 80035da:	701a      	strb	r2, [r3, #0]
 80035dc:	e017      	b.n	800360e <UART_SetConfig+0xf2>
 80035de:	231f      	movs	r3, #31
 80035e0:	18fb      	adds	r3, r7, r3
 80035e2:	2208      	movs	r2, #8
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	e012      	b.n	800360e <UART_SetConfig+0xf2>
 80035e8:	231f      	movs	r3, #31
 80035ea:	18fb      	adds	r3, r7, r3
 80035ec:	2210      	movs	r2, #16
 80035ee:	701a      	strb	r2, [r3, #0]
 80035f0:	e00d      	b.n	800360e <UART_SetConfig+0xf2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a67      	ldr	r2, [pc, #412]	; (8003794 <UART_SetConfig+0x278>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d104      	bne.n	8003606 <UART_SetConfig+0xea>
 80035fc:	231f      	movs	r3, #31
 80035fe:	18fb      	adds	r3, r7, r3
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
 8003604:	e003      	b.n	800360e <UART_SetConfig+0xf2>
 8003606:	231f      	movs	r3, #31
 8003608:	18fb      	adds	r3, r7, r3
 800360a:	2210      	movs	r2, #16
 800360c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69da      	ldr	r2, [r3, #28]
 8003612:	2380      	movs	r3, #128	; 0x80
 8003614:	021b      	lsls	r3, r3, #8
 8003616:	429a      	cmp	r2, r3
 8003618:	d15c      	bne.n	80036d4 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800361a:	231f      	movs	r3, #31
 800361c:	18fb      	adds	r3, r7, r3
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b08      	cmp	r3, #8
 8003622:	d015      	beq.n	8003650 <UART_SetConfig+0x134>
 8003624:	dc18      	bgt.n	8003658 <UART_SetConfig+0x13c>
 8003626:	2b04      	cmp	r3, #4
 8003628:	d00d      	beq.n	8003646 <UART_SetConfig+0x12a>
 800362a:	dc15      	bgt.n	8003658 <UART_SetConfig+0x13c>
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <UART_SetConfig+0x11a>
 8003630:	2b02      	cmp	r3, #2
 8003632:	d005      	beq.n	8003640 <UART_SetConfig+0x124>
 8003634:	e010      	b.n	8003658 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003636:	f7fe febd 	bl	80023b4 <HAL_RCC_GetPCLK1Freq>
 800363a:	0003      	movs	r3, r0
 800363c:	61bb      	str	r3, [r7, #24]
        break;
 800363e:	e012      	b.n	8003666 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003640:	4b55      	ldr	r3, [pc, #340]	; (8003798 <UART_SetConfig+0x27c>)
 8003642:	61bb      	str	r3, [r7, #24]
        break;
 8003644:	e00f      	b.n	8003666 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003646:	f7fe fe55 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 800364a:	0003      	movs	r3, r0
 800364c:	61bb      	str	r3, [r7, #24]
        break;
 800364e:	e00a      	b.n	8003666 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003650:	2380      	movs	r3, #128	; 0x80
 8003652:	021b      	lsls	r3, r3, #8
 8003654:	61bb      	str	r3, [r7, #24]
        break;
 8003656:	e006      	b.n	8003666 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800365c:	231e      	movs	r3, #30
 800365e:	18fb      	adds	r3, r7, r3
 8003660:	2201      	movs	r2, #1
 8003662:	701a      	strb	r2, [r3, #0]
        break;
 8003664:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d100      	bne.n	800366e <UART_SetConfig+0x152>
 800366c:	e07a      	b.n	8003764 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	005a      	lsls	r2, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	085b      	lsrs	r3, r3, #1
 8003678:	18d2      	adds	r2, r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	0019      	movs	r1, r3
 8003680:	0010      	movs	r0, r2
 8003682:	f7fc fd41 	bl	8000108 <__udivsi3>
 8003686:	0003      	movs	r3, r0
 8003688:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b0f      	cmp	r3, #15
 800368e:	d91c      	bls.n	80036ca <UART_SetConfig+0x1ae>
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	2380      	movs	r3, #128	; 0x80
 8003694:	025b      	lsls	r3, r3, #9
 8003696:	429a      	cmp	r2, r3
 8003698:	d217      	bcs.n	80036ca <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	b29a      	uxth	r2, r3
 800369e:	200e      	movs	r0, #14
 80036a0:	183b      	adds	r3, r7, r0
 80036a2:	210f      	movs	r1, #15
 80036a4:	438a      	bics	r2, r1
 80036a6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	085b      	lsrs	r3, r3, #1
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2207      	movs	r2, #7
 80036b0:	4013      	ands	r3, r2
 80036b2:	b299      	uxth	r1, r3
 80036b4:	183b      	adds	r3, r7, r0
 80036b6:	183a      	adds	r2, r7, r0
 80036b8:	8812      	ldrh	r2, [r2, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	183a      	adds	r2, r7, r0
 80036c4:	8812      	ldrh	r2, [r2, #0]
 80036c6:	60da      	str	r2, [r3, #12]
 80036c8:	e04c      	b.n	8003764 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80036ca:	231e      	movs	r3, #30
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	2201      	movs	r2, #1
 80036d0:	701a      	strb	r2, [r3, #0]
 80036d2:	e047      	b.n	8003764 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036d4:	231f      	movs	r3, #31
 80036d6:	18fb      	adds	r3, r7, r3
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d015      	beq.n	800370a <UART_SetConfig+0x1ee>
 80036de:	dc18      	bgt.n	8003712 <UART_SetConfig+0x1f6>
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d00d      	beq.n	8003700 <UART_SetConfig+0x1e4>
 80036e4:	dc15      	bgt.n	8003712 <UART_SetConfig+0x1f6>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <UART_SetConfig+0x1d4>
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d005      	beq.n	80036fa <UART_SetConfig+0x1de>
 80036ee:	e010      	b.n	8003712 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036f0:	f7fe fe60 	bl	80023b4 <HAL_RCC_GetPCLK1Freq>
 80036f4:	0003      	movs	r3, r0
 80036f6:	61bb      	str	r3, [r7, #24]
        break;
 80036f8:	e012      	b.n	8003720 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036fa:	4b27      	ldr	r3, [pc, #156]	; (8003798 <UART_SetConfig+0x27c>)
 80036fc:	61bb      	str	r3, [r7, #24]
        break;
 80036fe:	e00f      	b.n	8003720 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003700:	f7fe fdf8 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 8003704:	0003      	movs	r3, r0
 8003706:	61bb      	str	r3, [r7, #24]
        break;
 8003708:	e00a      	b.n	8003720 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800370a:	2380      	movs	r3, #128	; 0x80
 800370c:	021b      	lsls	r3, r3, #8
 800370e:	61bb      	str	r3, [r7, #24]
        break;
 8003710:	e006      	b.n	8003720 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003716:	231e      	movs	r3, #30
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	2201      	movs	r2, #1
 800371c:	701a      	strb	r2, [r3, #0]
        break;
 800371e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d01e      	beq.n	8003764 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	085a      	lsrs	r2, r3, #1
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	18d2      	adds	r2, r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	0019      	movs	r1, r3
 8003736:	0010      	movs	r0, r2
 8003738:	f7fc fce6 	bl	8000108 <__udivsi3>
 800373c:	0003      	movs	r3, r0
 800373e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	2b0f      	cmp	r3, #15
 8003744:	d90a      	bls.n	800375c <UART_SetConfig+0x240>
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	2380      	movs	r3, #128	; 0x80
 800374a:	025b      	lsls	r3, r3, #9
 800374c:	429a      	cmp	r2, r3
 800374e:	d205      	bcs.n	800375c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	b29a      	uxth	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	60da      	str	r2, [r3, #12]
 800375a:	e003      	b.n	8003764 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800375c:	231e      	movs	r3, #30
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2201      	movs	r2, #1
 8003762:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003770:	231e      	movs	r3, #30
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	781b      	ldrb	r3, [r3, #0]
}
 8003776:	0018      	movs	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	b008      	add	sp, #32
 800377c:	bd80      	pop	{r7, pc}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	ffff69f3 	.word	0xffff69f3
 8003784:	ffffcfff 	.word	0xffffcfff
 8003788:	fffff4ff 	.word	0xfffff4ff
 800378c:	40013800 	.word	0x40013800
 8003790:	40021000 	.word	0x40021000
 8003794:	40004400 	.word	0x40004400
 8003798:	007a1200 	.word	0x007a1200

0800379c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	2201      	movs	r2, #1
 80037aa:	4013      	ands	r3, r2
 80037ac:	d00b      	beq.n	80037c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	4a4a      	ldr	r2, [pc, #296]	; (80038e0 <UART_AdvFeatureConfig+0x144>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	0019      	movs	r1, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	2202      	movs	r2, #2
 80037cc:	4013      	ands	r3, r2
 80037ce:	d00b      	beq.n	80037e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4a43      	ldr	r2, [pc, #268]	; (80038e4 <UART_AdvFeatureConfig+0x148>)
 80037d8:	4013      	ands	r3, r2
 80037da:	0019      	movs	r1, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	2204      	movs	r2, #4
 80037ee:	4013      	ands	r3, r2
 80037f0:	d00b      	beq.n	800380a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	4a3b      	ldr	r2, [pc, #236]	; (80038e8 <UART_AdvFeatureConfig+0x14c>)
 80037fa:	4013      	ands	r3, r2
 80037fc:	0019      	movs	r1, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	2208      	movs	r2, #8
 8003810:	4013      	ands	r3, r2
 8003812:	d00b      	beq.n	800382c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	4a34      	ldr	r2, [pc, #208]	; (80038ec <UART_AdvFeatureConfig+0x150>)
 800381c:	4013      	ands	r3, r2
 800381e:	0019      	movs	r1, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	2210      	movs	r2, #16
 8003832:	4013      	ands	r3, r2
 8003834:	d00b      	beq.n	800384e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	4a2c      	ldr	r2, [pc, #176]	; (80038f0 <UART_AdvFeatureConfig+0x154>)
 800383e:	4013      	ands	r3, r2
 8003840:	0019      	movs	r1, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	2220      	movs	r2, #32
 8003854:	4013      	ands	r3, r2
 8003856:	d00b      	beq.n	8003870 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	4a25      	ldr	r2, [pc, #148]	; (80038f4 <UART_AdvFeatureConfig+0x158>)
 8003860:	4013      	ands	r3, r2
 8003862:	0019      	movs	r1, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	2240      	movs	r2, #64	; 0x40
 8003876:	4013      	ands	r3, r2
 8003878:	d01d      	beq.n	80038b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	4a1d      	ldr	r2, [pc, #116]	; (80038f8 <UART_AdvFeatureConfig+0x15c>)
 8003882:	4013      	ands	r3, r2
 8003884:	0019      	movs	r1, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003896:	2380      	movs	r3, #128	; 0x80
 8003898:	035b      	lsls	r3, r3, #13
 800389a:	429a      	cmp	r2, r3
 800389c:	d10b      	bne.n	80038b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	4a15      	ldr	r2, [pc, #84]	; (80038fc <UART_AdvFeatureConfig+0x160>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	0019      	movs	r1, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	2280      	movs	r2, #128	; 0x80
 80038bc:	4013      	ands	r3, r2
 80038be:	d00b      	beq.n	80038d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	4a0e      	ldr	r2, [pc, #56]	; (8003900 <UART_AdvFeatureConfig+0x164>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	0019      	movs	r1, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	605a      	str	r2, [r3, #4]
  }
}
 80038d8:	46c0      	nop			; (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	b002      	add	sp, #8
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	fffdffff 	.word	0xfffdffff
 80038e4:	fffeffff 	.word	0xfffeffff
 80038e8:	fffbffff 	.word	0xfffbffff
 80038ec:	ffff7fff 	.word	0xffff7fff
 80038f0:	ffffefff 	.word	0xffffefff
 80038f4:	ffffdfff 	.word	0xffffdfff
 80038f8:	ffefffff 	.word	0xffefffff
 80038fc:	ff9fffff 	.word	0xff9fffff
 8003900:	fff7ffff 	.word	0xfff7ffff

08003904 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b092      	sub	sp, #72	; 0x48
 8003908:	af02      	add	r7, sp, #8
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2284      	movs	r2, #132	; 0x84
 8003910:	2100      	movs	r1, #0
 8003912:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003914:	f7fd f8fe 	bl	8000b14 <HAL_GetTick>
 8003918:	0003      	movs	r3, r0
 800391a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2208      	movs	r2, #8
 8003924:	4013      	ands	r3, r2
 8003926:	2b08      	cmp	r3, #8
 8003928:	d12c      	bne.n	8003984 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800392a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800392c:	2280      	movs	r2, #128	; 0x80
 800392e:	0391      	lsls	r1, r2, #14
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	4a46      	ldr	r2, [pc, #280]	; (8003a4c <UART_CheckIdleState+0x148>)
 8003934:	9200      	str	r2, [sp, #0]
 8003936:	2200      	movs	r2, #0
 8003938:	f000 f88c 	bl	8003a54 <UART_WaitOnFlagUntilTimeout>
 800393c:	1e03      	subs	r3, r0, #0
 800393e:	d021      	beq.n	8003984 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003940:	f3ef 8310 	mrs	r3, PRIMASK
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003948:	63bb      	str	r3, [r7, #56]	; 0x38
 800394a:	2301      	movs	r3, #1
 800394c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003950:	f383 8810 	msr	PRIMASK, r3
}
 8003954:	46c0      	nop			; (mov r8, r8)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2180      	movs	r1, #128	; 0x80
 8003962:	438a      	bics	r2, r1
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003968:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396c:	f383 8810 	msr	PRIMASK, r3
}
 8003970:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2278      	movs	r2, #120	; 0x78
 800397c:	2100      	movs	r1, #0
 800397e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e05f      	b.n	8003a44 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2204      	movs	r2, #4
 800398c:	4013      	ands	r3, r2
 800398e:	2b04      	cmp	r3, #4
 8003990:	d146      	bne.n	8003a20 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003994:	2280      	movs	r2, #128	; 0x80
 8003996:	03d1      	lsls	r1, r2, #15
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	4a2c      	ldr	r2, [pc, #176]	; (8003a4c <UART_CheckIdleState+0x148>)
 800399c:	9200      	str	r2, [sp, #0]
 800399e:	2200      	movs	r2, #0
 80039a0:	f000 f858 	bl	8003a54 <UART_WaitOnFlagUntilTimeout>
 80039a4:	1e03      	subs	r3, r0, #0
 80039a6:	d03b      	beq.n	8003a20 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a8:	f3ef 8310 	mrs	r3, PRIMASK
 80039ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80039ae:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039b0:	637b      	str	r3, [r7, #52]	; 0x34
 80039b2:	2301      	movs	r3, #1
 80039b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f383 8810 	msr	PRIMASK, r3
}
 80039bc:	46c0      	nop			; (mov r8, r8)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4921      	ldr	r1, [pc, #132]	; (8003a50 <UART_CheckIdleState+0x14c>)
 80039ca:	400a      	ands	r2, r1
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f383 8810 	msr	PRIMASK, r3
}
 80039d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039da:	f3ef 8310 	mrs	r3, PRIMASK
 80039de:	61bb      	str	r3, [r7, #24]
  return(result);
 80039e0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e2:	633b      	str	r3, [r7, #48]	; 0x30
 80039e4:	2301      	movs	r3, #1
 80039e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f383 8810 	msr	PRIMASK, r3
}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2101      	movs	r1, #1
 80039fc:	438a      	bics	r2, r1
 80039fe:	609a      	str	r2, [r3, #8]
 8003a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a02:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	f383 8810 	msr	PRIMASK, r3
}
 8003a0a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2280      	movs	r2, #128	; 0x80
 8003a10:	2120      	movs	r1, #32
 8003a12:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2278      	movs	r2, #120	; 0x78
 8003a18:	2100      	movs	r1, #0
 8003a1a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e011      	b.n	8003a44 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2220      	movs	r2, #32
 8003a24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2280      	movs	r2, #128	; 0x80
 8003a2a:	2120      	movs	r1, #32
 8003a2c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2278      	movs	r2, #120	; 0x78
 8003a3e:	2100      	movs	r1, #0
 8003a40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	0018      	movs	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b010      	add	sp, #64	; 0x40
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	01ffffff 	.word	0x01ffffff
 8003a50:	fffffedf 	.word	0xfffffedf

08003a54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	603b      	str	r3, [r7, #0]
 8003a60:	1dfb      	adds	r3, r7, #7
 8003a62:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a64:	e04b      	b.n	8003afe <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	d048      	beq.n	8003afe <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a6c:	f7fd f852 	bl	8000b14 <HAL_GetTick>
 8003a70:	0002      	movs	r2, r0
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d302      	bcc.n	8003a82 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e04b      	b.n	8003b1e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d035      	beq.n	8003afe <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	2208      	movs	r2, #8
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d111      	bne.n	8003ac4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2208      	movs	r2, #8
 8003aa6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f000 f83c 	bl	8003b28 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2284      	movs	r2, #132	; 0x84
 8003ab4:	2108      	movs	r1, #8
 8003ab6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2278      	movs	r2, #120	; 0x78
 8003abc:	2100      	movs	r1, #0
 8003abe:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e02c      	b.n	8003b1e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	69da      	ldr	r2, [r3, #28]
 8003aca:	2380      	movs	r3, #128	; 0x80
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	401a      	ands	r2, r3
 8003ad0:	2380      	movs	r3, #128	; 0x80
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d112      	bne.n	8003afe <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2280      	movs	r2, #128	; 0x80
 8003ade:	0112      	lsls	r2, r2, #4
 8003ae0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f000 f81f 	bl	8003b28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2284      	movs	r2, #132	; 0x84
 8003aee:	2120      	movs	r1, #32
 8003af0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2278      	movs	r2, #120	; 0x78
 8003af6:	2100      	movs	r1, #0
 8003af8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e00f      	b.n	8003b1e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	4013      	ands	r3, r2
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	425a      	negs	r2, r3
 8003b0e:	4153      	adcs	r3, r2
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	001a      	movs	r2, r3
 8003b14:	1dfb      	adds	r3, r7, #7
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d0a4      	beq.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	0018      	movs	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	b004      	add	sp, #16
 8003b24:	bd80      	pop	{r7, pc}
	...

08003b28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08e      	sub	sp, #56	; 0x38
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b30:	f3ef 8310 	mrs	r3, PRIMASK
 8003b34:	617b      	str	r3, [r7, #20]
  return(result);
 8003b36:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b38:	637b      	str	r3, [r7, #52]	; 0x34
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	f383 8810 	msr	PRIMASK, r3
}
 8003b44:	46c0      	nop			; (mov r8, r8)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4926      	ldr	r1, [pc, #152]	; (8003bec <UART_EndRxTransfer+0xc4>)
 8003b52:	400a      	ands	r2, r1
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	f383 8810 	msr	PRIMASK, r3
}
 8003b60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b62:	f3ef 8310 	mrs	r3, PRIMASK
 8003b66:	623b      	str	r3, [r7, #32]
  return(result);
 8003b68:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b6a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	f383 8810 	msr	PRIMASK, r3
}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2101      	movs	r1, #1
 8003b84:	438a      	bics	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]
 8003b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8e:	f383 8810 	msr	PRIMASK, r3
}
 8003b92:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d118      	bne.n	8003bce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8003ba0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ba2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f383 8810 	msr	PRIMASK, r3
}
 8003bb0:	46c0      	nop			; (mov r8, r8)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2110      	movs	r1, #16
 8003bbe:	438a      	bics	r2, r1
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f383 8810 	msr	PRIMASK, r3
}
 8003bcc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2280      	movs	r2, #128	; 0x80
 8003bd2:	2120      	movs	r1, #32
 8003bd4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b00e      	add	sp, #56	; 0x38
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	fffffedf 	.word	0xfffffedf

08003bf0 <__libc_init_array>:
 8003bf0:	b570      	push	{r4, r5, r6, lr}
 8003bf2:	2600      	movs	r6, #0
 8003bf4:	4d0c      	ldr	r5, [pc, #48]	; (8003c28 <__libc_init_array+0x38>)
 8003bf6:	4c0d      	ldr	r4, [pc, #52]	; (8003c2c <__libc_init_array+0x3c>)
 8003bf8:	1b64      	subs	r4, r4, r5
 8003bfa:	10a4      	asrs	r4, r4, #2
 8003bfc:	42a6      	cmp	r6, r4
 8003bfe:	d109      	bne.n	8003c14 <__libc_init_array+0x24>
 8003c00:	2600      	movs	r6, #0
 8003c02:	f000 f821 	bl	8003c48 <_init>
 8003c06:	4d0a      	ldr	r5, [pc, #40]	; (8003c30 <__libc_init_array+0x40>)
 8003c08:	4c0a      	ldr	r4, [pc, #40]	; (8003c34 <__libc_init_array+0x44>)
 8003c0a:	1b64      	subs	r4, r4, r5
 8003c0c:	10a4      	asrs	r4, r4, #2
 8003c0e:	42a6      	cmp	r6, r4
 8003c10:	d105      	bne.n	8003c1e <__libc_init_array+0x2e>
 8003c12:	bd70      	pop	{r4, r5, r6, pc}
 8003c14:	00b3      	lsls	r3, r6, #2
 8003c16:	58eb      	ldr	r3, [r5, r3]
 8003c18:	4798      	blx	r3
 8003c1a:	3601      	adds	r6, #1
 8003c1c:	e7ee      	b.n	8003bfc <__libc_init_array+0xc>
 8003c1e:	00b3      	lsls	r3, r6, #2
 8003c20:	58eb      	ldr	r3, [r5, r3]
 8003c22:	4798      	blx	r3
 8003c24:	3601      	adds	r6, #1
 8003c26:	e7f2      	b.n	8003c0e <__libc_init_array+0x1e>
 8003c28:	08003c98 	.word	0x08003c98
 8003c2c:	08003c98 	.word	0x08003c98
 8003c30:	08003c98 	.word	0x08003c98
 8003c34:	08003c9c 	.word	0x08003c9c

08003c38 <memset>:
 8003c38:	0003      	movs	r3, r0
 8003c3a:	1882      	adds	r2, r0, r2
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d100      	bne.n	8003c42 <memset+0xa>
 8003c40:	4770      	bx	lr
 8003c42:	7019      	strb	r1, [r3, #0]
 8003c44:	3301      	adds	r3, #1
 8003c46:	e7f9      	b.n	8003c3c <memset+0x4>

08003c48 <_init>:
 8003c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4e:	bc08      	pop	{r3}
 8003c50:	469e      	mov	lr, r3
 8003c52:	4770      	bx	lr

08003c54 <_fini>:
 8003c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5a:	bc08      	pop	{r3}
 8003c5c:	469e      	mov	lr, r3
 8003c5e:	4770      	bx	lr
